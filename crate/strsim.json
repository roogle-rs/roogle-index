{"root":"0:0:2758","crate_version":"0.11.1","includes_private":false,"index":{"2:13288:27654":{"id":"2:13288:27654","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13290:27657","str::split_at_mut":"2:13289:2363"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3246:3275-0:112:2323":{"id":"a:2:3246:3275-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3246:3275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13269:34250":{"id":"2:13269:34250","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13307:27672":{"id":"2:13307:27672","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13357:34261":{"id":"2:13357:34261","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:26290":{"id":"2:13274:26290","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12502:3086"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13359:34262":{"id":"2:13359:34262","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13396:34272":{"id":"2:13396:34272","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5022:34272"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44268:3093","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13327:34256":{"id":"2:13327:34256","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12955:3079","str::split":"2:13318:26467","prim@char":"1:12346:471","`DoubleEndedIterator`":"2:8333:129","str::rsplit_terminator":"2:13330:34257"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44019:3109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3001:137":{"id":"2:3001:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2972:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5621:34966":{"id":"5:5621:34966","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:3076","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:3076","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13342:27669":{"id":"2:13342:27669","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42077:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:34252":{"id":"2:13275:34252","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13371:26372":{"id":"2:13371:26372","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42077:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:336":{"id":"2:13276:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13277:27631","`u8`":"1:12365:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13310:3340":{"id":"2:13310:3340","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42079:191","prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42077:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32368:3117-0:112:2323":{"id":"a:2:32368:3117-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32368:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3003-0:112:2323":{"id":"b:2:3003-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2962:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2972:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3006:137","2:3007:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13268:34249":{"id":"2:13268:34249","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2765:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:699"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13391:26405":{"id":"2:13391:26405","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3830-0:112:2323":{"id":"b:2:3830-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32310:3116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3828:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3832:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2720:26021":{"id":"2:2720:26021","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13324:27662":{"id":"2:13324:27662","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12955:3079","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::split":"2:13318:26467"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43987:3104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13361:34263":{"id":"2:13361:34263","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:27630":{"id":"2:13284:27630","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13280:2474":{"id":"2:13280:2474","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42079:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42077:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13294:5960":{"id":"2:13294:5960","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12346:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43945:3089","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13399:34273":{"id":"2:13399:34273","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5020:34273"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44286:3095","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2717:2977":{"id":"2:2717:2977","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5628:34968":{"id":"5:5628:34968","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:802":{"id":"0:18:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[38,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42210:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43122:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2419":{"id":"0:62:2419","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[285,0],"end":[290,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13265":{"id":"2:13265","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13266:997","2:13267:2420","2:13268:34249","2:13269:34250","2:13271:34251","2:13274:26290","2:13275:34252","2:13276:336","2:13277:27631","2:13278:2451","2:13280:2474","2:13282:27629","2:13284:27630","2:13286:34253","2:13287:34254","2:13288:27654","2:13289:2363","2:13290:27657","2:13291:27658","2:13293:2349","2:13294:5960","2:13295:5573","2:13296:31821","2:13297:31823","2:13298:26468","2:13299:34255","2:13300:32405","2:13301:27670","2:13304:27671","2:13307:27672","2:13310:3340","2:13314:3306","2:13318:26467","2:13321:27660","2:13324:27662","2:13327:34256","2:13330:34257","2:13333:27664","2:13336:27666","2:13339:27668","2:13342:27669","2:13345:2364","2:13348:34258","2:13351:34259","2:13354:34260","2:13357:34261","2:13359:34262","2:13361:34263","2:13363:34264","2:13364:34265","2:13365:34266","2:13368:34267","2:13371:26372","2:13374:27673","2:13377:34268","2:13380:34269","2:13383:34270","2:13386:34271","2:13388:26400","2:13389:27552","2:13390:26404","2:13391:26405","2:13392:26406","2:13393:27555","2:13394:27556","2:13395:27557","2:13396:34272","2:13398:8487","2:13399:34273"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5640:26403":{"id":"5:5640:26403","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13392:26406"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:34969":{"id":"5:5636:34969","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13318:26467":{"id":"2:13318:26467","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12955:3079","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::split_whitespace":"2:13296:31821","str::rsplit":"2:13324:27662"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43969:3105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2528":{"id":"0:106:2528","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[693,0],"end":[702,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620":{"id":"5:5620","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5621:34966","5:5622:2488","5:5625:34967","5:5628:34968","5:5636:34969","5:5637:34970","5:5638:8598","5:5639:26402","5:5640:26403"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13287:34254":{"id":"2:13287:34254","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12352:1722","crate::ops::IndexMut":"2:3489:3390","str::slice_unchecked":"2:13286:34253"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:3007:1807":{"id":"2:3007:1807","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42210:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2972:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:8487":{"id":"2:13398:8487","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5023:8487"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44277:3094","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42172:8690-0:112:2323":{"id":"a:2:42172:8690-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42172:8690","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13345:2364":{"id":"2:13345:2364","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12955:3079","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::rmatches":"2:13348:34258"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44173:3102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:26404":{"id":"2:13390:26404","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13297:31823":{"id":"2:13297:31823","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13296:31821"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44252:3081","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:2363":{"id":"2:13289:2363","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13288:27654","str::split_at_mut_checked":"2:13291:27658"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2992-0:112:2323":{"id":"b:2:2992-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2965:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2994:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[37,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13333:27664":{"id":"2:13333:27664","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079","str::rsplitn":"2:13336:27666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44073:3107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13336:27666":{"id":"2:13336:27666","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12346:471","str::splitn":"2:13333:27664","self::pattern":"2:12955:3079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44091:3106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13351:34259":{"id":"2:13351:34259","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12955:3079","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::rmatch_indices":"2:13354:34260"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44119:3100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13299:34255":{"id":"2:13299:34255","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44233:3099","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2540":{"id":"0:108:2540","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[721,0],"end":[754,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13321:27660":{"id":"2:13321:27660","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12770:3082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:27557":{"id":"2:13395:27557","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:38128"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5870-0:112:2323":{"id":"b:5:5870-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10389:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32310:3116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5868:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5872:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","cause","source","provide","type_id"],"trait":{"name":"Error","id":"2:3051:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13282:27629":{"id":"2:13282:27629","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:2324":{"id":"0:113:2324","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[34,4],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:3211:247-0:112:2323":{"id":"a:2:3211:247-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3211:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13365:34266":{"id":"2:13365:34266","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12981:3071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13304:27671":{"id":"2:13304:27671","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2332":{"id":"0:21:2332","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[53,0],"end":[72,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2765:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42171:8495-0:112:2323":{"id":"a:2:42171:8495-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42171:8495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2998-0:112:2323":{"id":"b:2:2998-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2972:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2968:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3001:137","2:3002:1809"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20:2329":{"id":"0:20:2329","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:42210:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:13383:34270":{"id":"2:13383:34270","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:802":{"id":"0:116:802","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10358:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10339:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32309:237-0:112:2323":{"id":"a:2:32309:237-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32309:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13368:34267":{"id":"2:13368:34267","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5625:34967":{"id":"5:5625:34967","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13377:34268":{"id":"2:13377:34268","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2441":{"id":"0:65:2441","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[353,0],"end":[414,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2770:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10600:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2731:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13330:34257":{"id":"2:13330:34257","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12955:3079","str::split":"2:13318:26467","prim@char":"1:12346:471","str::split_terminator":"2:13327:34256"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44037:3108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:27555":{"id":"2:13393:27555","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:38128"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:2323":{"id":"0:112:2323","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[33,0],"end":[35,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:113:2324"],"impls":["a:2:42171:8495-0:112:2323","a:2:3211:247-0:112:2323","a:2:3246:3275-0:112:2323","a:2:42172:8690-0:112:2323","a:2:32368:3117-0:112:2323","a:2:32309:237-0:112:2323","b:2:2718-0:112:2323","b:2:2988-0:112:2323","b:2:3830-0:112:2323","b:2:3003-0:112:2323","b:2:2998-0:112:2323","b:2:2992-0:112:2323","b:2:2715-0:112:2323","b:5:5870-0:112:2323","0:19","0:118","0:115","0:117","0:17"]}}},"5:5638:8598":{"id":"5:5638:8598","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:5573":{"id":"2:13295:5573","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43955:3088","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13278:2451":{"id":"2:13278:2451","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42079:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42077:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:26468":{"id":"2:13298:26468","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44223:3098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2425":{"id":"0:63:2425","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[300,0],"end":[337,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5872:1782":{"id":"5:5872:1782","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:27552":{"id":"2:13389:27552","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39978:3282","Self::is_ascii":"2:13388:26400"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42077:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39978:3282","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:32405":{"id":"2:13300:32405","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44261:3080","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2758":{"id":"0:0:2758","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1307,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]","#![allow(clippy::cast_possible_wrap, clippy::cast_sign_loss,\nclippy::cast_precision_loss, clippy::needless_pass_by_value,\nclippy::similar_names, clippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::must_use_candidate, clippy::range_plus_one)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:112:2323","0:20:2329","0:21:2332","0:26:2348","0:27:2352","0:44:2387","0:45:2389","0:53:2397","0:54:2402","0:61:2410","0:62:2419","0:63:2425","0:65:2441","0:105:2519","0:106:2528","0:108:2540"],"is_stripped":false}}},"2:13339:27668":{"id":"2:13339:27668","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42077:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2402":{"id":"0:54:2402","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[233,0],"end":[259,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2765:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2410":{"id":"0:61:2410","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10384:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13271:34251":{"id":"2:13271:34251","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13269:34250"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2397":{"id":"0:53:2397","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[221,0],"end":[223,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.866 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2387":{"id":"0:44:2387","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[186,0],"end":[188,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:34269":{"id":"2:13380:34269","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3832:1822":{"id":"2:3832:1822","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39792:5860","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13354:34260":{"id":"2:13354:34260","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12955:3079","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::match_indices":"2:13351:34259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44137:3101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13363:34264":{"id":"2:13363:34264","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:34253":{"id":"2:13286:34253","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12352:1722","str::slice_mut_unchecked":"2:13287:34254","crate::ops::Index":"2:39623:3389"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:27670":{"id":"2:13301:27670","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2715-0:112:2323":{"id":"b:2:2715-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32310:3116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2709:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2717:2977"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13290:27657":{"id":"2:13290:27657","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13291:27658"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42077:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2994:832":{"id":"2:2994:832","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:2349":{"id":"2:13293:2349","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12346:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43939:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2348":{"id":"0:26:2348","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2352":{"id":"0:27:2352","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[90,0],"end":[164,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2765:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13277:27631":{"id":"2:13277:27631","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12365:1852"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5622:2488":{"id":"5:5622:2488","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2519":{"id":"0:105:2519","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[677,0],"end":[679,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:699":{"id":"0:119:699","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13386:34271":{"id":"2:13386:34271","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12916:136","`FromStr`":"2:12915:3096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42210:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12915:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12915:3096","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5639:26402":{"id":"5:5639:26402","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13391:26405"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2389":{"id":"0:45:2389","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[191,0],"end":[211,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8295:165","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2765:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13348:34258":{"id":"2:13348:34258","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12955:3079","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::matches":"2:13345:2364"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44191:3103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32311:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2718-0:112:2323":{"id":"b:2:2718-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32310:3116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2712:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2720:26021"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13296:31821":{"id":"2:13296:31821","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13297:31823"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44243:3083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13374:27673":{"id":"2:13374:27673","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42077:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2988-0:112:2323":{"id":"b:2:2988-0:112:2323","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2965:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2962:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2991:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3002:1809":{"id":"2:3002:1809","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42210:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2972:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2991:3300":{"id":"2:2991:3300","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2965:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13267:2420":{"id":"2:13267:2420","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13388:26400":{"id":"2:13388:26400","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3006:137":{"id":"2:3006:137","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32233:3039","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13364:34265":{"id":"2:13364:34265","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:26406":{"id":"2:13392:26406","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:997":{"id":"2:13266:997","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12346:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:27556":{"id":"2:13394:27556","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:38128"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5637:34970":{"id":"5:5637:34970","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:3076","`String`":"5:7652:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:3076","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:27658":{"id":"2:13291:27658","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13290:27657"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42077:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13314:3306":{"id":"2:13314:3306","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42079:191","prim@char":"1:12346:471","self::pattern":"2:12955:3079"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42077:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:1922:6155":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:7589:5568":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:403:3626":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:46648:6055":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:12365:1852":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:4362:8042":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:15176:4514":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:12716:5790":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:12356:735":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"16:6991:35187":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:10399:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:7422:5565":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:3262:8751":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8476:3611":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:15836:4701":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:40509:3429":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:12770:3082":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:40475:3436":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:7114:34002":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:6079:4816":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:14051:4208":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:7348:7840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44695:8033":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:7769:5260":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10137:21455":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6749:5096":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12201:3933":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6532:5058":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:6282:27341":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:3656:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:12225:3935":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:5367:21407":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:6763:7754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"0:62:2419":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"6:7359:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:47305:6116":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:1168:35046":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:47133:6099":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"9:53:8199":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:46175:6018":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:9531:3072":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:3432:8504":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6706:7739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:5329:7410":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:6199:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:2134:14146":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:11583:3845":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:6435:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6768:7755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:6183:6200":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:6572:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:44903:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13363:4070":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"0:108:2540":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"1:9731:26240":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"0:113:2324":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"2:21694:33294":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:4487:6180":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:9852:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:42338:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:16223:4799":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:32293:3290":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:5400:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:7389:7867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:3661:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:14341:4267":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11063:3794":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:2712:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:4161:8629":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:21711:33305":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:44466:5963":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12792:3724":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:2003:3042":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:5477:7485":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:40941:5891":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:9886:21474":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:44683:8030":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:491:6970":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6335:5040":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:2420:2382":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:10990:31281":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"0:0:2758":{"crate_id":0,"path":["strsim"],"kind":"module"},"2:43358:5933":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:11704:8055":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:7497:5238":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5277:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6047:4963":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:42258:5437":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:46536:6051":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:1481:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:3437:13885":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:38220:14118":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:3677:8585":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:3842:4891":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13187:4029":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13424:4080":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:44889:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:5307:4918":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:4886:8656":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5002:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6606:5068":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:2132:14145":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12863:3992":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6620:5070":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:11621:3852":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:4923:8641":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:3410:3394":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:40931:5744":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:46409:6030":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:39640:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:7602:14181":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:434:35169":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11219:6338":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:4468:4897":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:15799:4694":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:15678:4668":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4909:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:5938:3396":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5756:4927":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:10339:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:3841:8609":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:3395:6169":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:23205:5842":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:8681:6182":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12508:3968":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:14545:4302":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14489:4295":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:289:33994":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:38385:14121":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"9:424:20399":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5344:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:8200:6255":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"14:160:5410":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:2458:4841":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:42250:5420":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:11227:3806":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13899:4186":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10350:3621":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:7881:3632":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:5831:4936":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:22489:8842":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:15151:4506":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:22843:5811":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:2469:8552":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:8118:5314":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"11:1105:5434":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:8553:3098":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:5817:4933":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:6440:8850":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"11:2545:6950":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:2807:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:672:6144":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:4504:13943":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:9748:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:8197:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:3820:5533":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:1098:5432":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"11:740:5422":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:40663:8535":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:12659:3977":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:22445:8841":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:6941:3400":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10399:3088":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:8779:5928":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:1699:7161":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:9807:21462":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13399:4077":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:1616:3396":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:46327:6026":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10877:3778":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:42172:8690":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:33264:14111":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12150:3926":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:9355:26382":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:11282:3082":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:44881:8039":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"6:5653:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:15769:4689":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:15249:4527":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:4322:5420":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:2323:20547":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:14977:4471":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10828:35198":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4965:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:7561:7940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2528:4844":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:8611:8040":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:5286:33379":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:6738:7745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:44715:8038":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:3486:8592":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:559:7013":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11051:3791":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"2:44976:5982":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:5200:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:46196:6019":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"0:54:2402":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"2:22999:31669":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:6853:6225":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"13:110:35175":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:13029:13920":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:15608:4643":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:581:3023":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:16151:4783":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:3264:3644":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:4406:6179":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:8216:5325":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5191:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:8350:6262":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:1324:5160":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:14079:4212":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11214:3805":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:3258:5442":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"0:105:2519":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"2:10184:3049":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:4959:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:8265:7978":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:2935:8567":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:30722:31671":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:4303:30903":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14503:4298":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:675:6146":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:6406:6213":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:873:5429":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8533:5894":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:42057:5763":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:14752:4338":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:8099:6252":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10818:3777":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:46071:6004":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:14038:4206":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:22565:8846":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:8300:7986":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:1570:5422":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:1549:5438":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:33949:14115":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:43056:8028":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:7132:5159":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:32233:3039":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:44707:8036":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"11:1580:5439":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:3303:31124":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:33804:14114":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"15:306:20503":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5995:4957":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7590:4877":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7559:5251":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4885:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:4450:5716":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:4848:802":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:11853:3881":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11075:3795":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:11518:27345":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:15635:4652":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:45904:5988":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:46021:6001":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:3284:5443":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"9:392:20398":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:40681:5868":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:39792:5860":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:44137:3101":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:3342:5175":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11354:3822":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:6491:7633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6821:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:1897:6153":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:8636:6315":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:9249:8724":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:12364:884":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:15426:4577":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:6504:5056":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:14560:4306":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:4502:4898":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:22577:32204":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:43715:5935":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:43876:5946":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:6358:5806":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:14177:4241":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:15116:4496":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:3885:3394":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:39627:5855":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:5776:7770":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:32300:5852":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:13606:4126":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:8251:14102":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:9147:6338":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43143:3050":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:2249:8000":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:8188:5323":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:4282:8042":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:43928:3092":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:11473:3107":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:4215:8633":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:6678:7727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:23271:5848":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"5:7383:3392":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:40396:5862":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:8341:7996":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13437:4081":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:3393:6168":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:651:3566":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:11273:6520":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:6574:4881":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6231:5001":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:4352:4895":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:42193:14194":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6385:5043":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:2221:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:21709:33302":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:5742:4922":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:44493:5793":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"11:708:5421":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13485:4093":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:44886:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:4333:8652":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7888:5274":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:2338:4829":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"0:21:2332":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"6:8294:7985":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6460:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:7931:27354":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12824:21481":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:12516:3970":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:13235:4044":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:41314:5898":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8222:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:1590:5528":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:10044:8219":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"14:187:20490":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:5686:4862":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:22632:14135":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:13814:4174":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:3701:13894":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:5324:5723":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:39677:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:586:7027":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:1827:14061":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:4068:2382":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"15:327:8196":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:2037:3453":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:1509:2382":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:41305:5896":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:12033:5783":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:4771:4906":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:12851:3991":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:47083:6097":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:16079:4764":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:40848:5888":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:11113:27340":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:12486:5784":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5107:4917":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11341:3821":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:44911:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:2748:4854":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6609:7700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:46342:6027":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:635:3590":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"0:26:2348":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"1:10652:27349":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:8884:6335":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7321:5913":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:3092:3047":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:7995:6142":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12929:3996":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:1184:33462":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:6120:21411":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:1680:7154":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:46731:6058":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"5:2116:5533":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:3340:6166":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:23019:31655":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:4062:4894":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:10969:6366":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:15190:4517":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15023:4479":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6278:5008":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:7580:5252":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:12313:8221":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"11:809:3394":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:32279:5218":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:11698:8054":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:2566:3035":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:15039:4482":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:3297:34041":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:11515:5781":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6775:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:9207:6342":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:563:3575":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"11:2301:5160":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:7392:2382":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:32310:3116":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13581:4122":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13211:4043":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:40778:5882":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:256:3623":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:4341:8653":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8559:6306":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:40641:5867":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:41076:5746":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:6342:35189":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12371:3996":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:11321:8047":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:956:5420":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:3673:13940":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:14994:4473":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:15720:4674":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:835:5425":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:6524:7646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:22527:8843":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:12318:8494":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2968:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:7428:21418":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:1559:7072":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:15356:4560":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:2551:35167":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:1907:5442":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:3042:8001":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:43784:5939":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11574:3842":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:10419:3625":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:15944:4043":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:1340:5432":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:1531:5423":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:15092:4494":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:34122:14116":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:1496:7036":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5515:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:12344:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"18:698:3601":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:4438:5715":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:15957:4719":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:7675:5577":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:9737:21456":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:2741:6161":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5296:7400":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:4940:4912":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:12970:3074":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:46257:6022":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"11:351:35161":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:3475:4887":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:14516:4299":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:7500:2382":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:4971:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:491:3565":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5283:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:9270:6343":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:34468:5179":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13986:4200":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12993:21482":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:45919:5989":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:2467:8009":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:14402:4278":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:6447:7613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"9:357:20412":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:5489:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:46004:6000":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:2315:6159":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:11487:3106":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:12342:3947":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:974:5428":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8630:6306":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:4153:8628":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:3436:6170":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:3051:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:5376:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4979:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:7412:3396":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:43886:5947":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"11:123:6772":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:12369:1828":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:44711:8037":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:3686:32107":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:12363:903":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:4882:3281":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4787:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"10:0:2880":{"crate_id":10,"path":["adler"],"kind":"module"},"17:15701:4669":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12900:3995":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8503:8566":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:3925:4893":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:1503:7039":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:8328:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:680:5520":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"11:364:35159":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:46858:6092":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:7485:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:8523:5879":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:44191:3103":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:44544:13927":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:39805:5861":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:11230:31283":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:10952:6255":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:13146:4020":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:10759:3776":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:1954:8042":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"5:1204:35044":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:8355:8597":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:3489:3390":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:22710:8836":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:10155:3759":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2959:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:7584:7952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:39695:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:872:3624":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:15058:4483":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:7573:5559":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:7610:2375":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:38330:14120":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:7727:4879":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:15342:4553":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:3050:33452":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12107:3776":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:3454:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:6782:33994":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:22950:5818":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:7729:26326":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:15748:4683":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"7:32:20383":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:15273:4536":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:11206:6337":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:1692:7158":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:2854:4859":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:7452:7876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:2998:4883":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:6509:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:13594:5799":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:3342:6167":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:34295:14117":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6478:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:13723:4153":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:527:8470":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:4837:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:9403:6216":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:1671:7148":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:10661:3774":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:8006:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:11321:5777":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5436:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:4167:8630":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12621:3975":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:11909:6389":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:6962:4872":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10612:3773":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:46553:6052":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:12329:26380":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:608:3583":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:6972:8012":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:2595:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:33737:14112":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6782:21415":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:8093:5312":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:15383:4567":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:6588:5060":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:8540:3088":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:938:3394":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"11:2121:5160":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:14587:4309":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:2788:4856":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11128:3750":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:7984:7961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:32311:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:10769:35202":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"9:447:20397":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:12656:5786":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:43945:3089":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:102:6943":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:8073:5311":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4891:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:2203:3640":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:7558:3036":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:3559:8042":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:1686:7157":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7549:5250":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:5415:4920":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:10723:6166":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:10039:31887":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:32400:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:45889:5985":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:3661:5420":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:3805:5531":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12300:21602":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:4976:4913":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:47367:6133":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:2440:3396":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"9:502:5504":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:1639:7130":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"10:44:5451":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:14372:4272":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:7715:3440":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:939:8500":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11042:3789":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:11107:27311":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:6374:27353":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:4481:8042":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:40:3393":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12724:21480":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:10842:27356":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:2572:4846":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:1637:5443":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:2936:3040":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:986:5430":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:7314:7821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:4694:8657":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:15569:4628":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:3899:4892":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4942:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:1207:3635":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:5781:4866":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:589:3576":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:16165:4786":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:42377:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:13785:4169":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:45002:5983":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5181:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:5638:6198":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:42533:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7144:21417":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"14:220:5418":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:7366:7849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13325:4064":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:46278:6023":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"0:27:2352":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"6:5483:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:5598:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:23061:8016":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:12887:3993":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:10982:21490":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:7339:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6689:7730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:45936:5992":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5457:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:3216:3273":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13797:4171":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:1564:20477":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:42613:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:42210:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"10:36:6954":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:10759:14213":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:16050:4057":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:11755:3867":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"14:40:4044":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:564:7015":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7755:4870":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:40711:5875":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:40769:5881":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:40615:5866":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5031:7316":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:43122:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"18:573:3566":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:6977:8011":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:7831:14097":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:9375:6516":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:598:35211":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:46088:6005":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:2541:2892":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:6433:5048":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:9415:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:44687:8031":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:45025:5984":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:2400:5437":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:9117:6336":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8036:3889":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:3253:3277":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11547:3703":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:10517:26243":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"11:842:8498":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:4913:3292":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:8236:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:16259:4074":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"11:798:3396":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:8759:14101":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:40437:31649":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:6664:7722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:14868:4431":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6494:5055":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:4223:8635":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:21692:33306":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:6788:7763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:12359:733":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"5:5868:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:10600:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6409:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:13706:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:1478:5420":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:39735:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:14788:4369":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:15281:4537":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12264:3938":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:0:2886":{"crate_id":17,"path":["object"],"kind":"module"},"2:46388:6029":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:40548:3430":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:32840:5173":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:30696:3455":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:14066:4211":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12362:3952":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:2030:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12707:3981":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"0:106:2528":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"16:6758:5097":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:2073:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:12352:1722":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:14986:4472":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:1674:35164":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:10606:153":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:44073:3107":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:42572:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:11239:3105":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4811:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:6076:14437":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:4882:4910":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5122:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8210:6256":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11877:3883":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:5445:7465":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:43969:3105":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:7464:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:5052:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:5588:6192":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:5426:33994":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:14298:4261":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:43841:5876":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:21741:8567":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:3040:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:6729:7743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:10395:3059":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:15206:4519":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:8659:7849":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12399:3954":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:7014:21416":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:2349:5432":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:12251:3937":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12388:3953":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:44703:8035":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"0:63:2425":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"17:11647:3855":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:5677:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:2936:20549":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:16093:4768":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"11:1920:5444":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:12367:1840":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13308:4062":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12647:3976":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:4515:34008":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:43319:3067":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11493:3831":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:517:6990":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10609:6336":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"11:1005:5160":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:3810:4890":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11715:3860":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:5266:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7910:21421":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:42455:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40839:5733":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:11035:8567":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:12732:5791":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:41299:5750":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:497:6973":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:14356:4271":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:473:6964":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:40582:3431":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:6700:2382":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13999:4201":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:22353:8757":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:4008:6177":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:12357:738":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:5844:6200":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:2495:20472":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:14529:4300":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:10932:6254":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:10905:3779":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:47328:6117":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:10018:21458":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:7472:5567":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:4560:4900":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:40502:3093":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:623:35214":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:7085:5150":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:41324:5751":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:40426:3434":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:5258:6191":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5102:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:4802:4907":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:13731:5801":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5557:7512":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:41983:31685":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:5046:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:11764:3868":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:11743:3864":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"18:507:3566":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:5037:4915":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:5965:6208":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:8797:31886":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5536:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13412:4079":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:2220:5535":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:5958:6204":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:1540:5424":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:1075:5160":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:12189:3932":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:43039:3048":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:41839:5757":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:46980:6094":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:4743:4905":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:5385:3759":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:2228:3842":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:41066:5894":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:5837:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6480:4863":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:6023:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:43311:5924":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5335:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:3669:3663":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:3529:5896":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:8604:6178":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:10251:3618":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:12470:14202":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5244:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:7484:30904":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:6441:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:80:25653":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:7857:5270":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:11428:5501":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:8351:7998":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:10608:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"11:830:5438":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:8003:3611":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:12127:3925":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:2770:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:38275:14119":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:42266:2382":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:12030:3918":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:2322:8549":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:379:6140":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:15655:4655":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:6880:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:219:5518":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13116:4016":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:14475:4294":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:10426:8707":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"18:531:3570":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:5846:4937":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:8188:6253":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:10981:6174":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:11394:3104":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:3300:31127":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:915:5424":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:3738:13897":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:15102:4495":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15445:4582":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:1510:7041":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:40830:5887":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:9411:8042":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:4927:8644":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10534:35205":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10092:21479":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:685:5437":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:5643:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11242:3808":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4876:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:7686:5257":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:13191:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:1844:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:40452:3433":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:7061:5149":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:11018:6199":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:11825:3878":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:5802:21408":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:6300:5023":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:23113:8567":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:8282:7983":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:8731:6326":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:1609:5420":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:1888:3396":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:9123:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:23081:5833":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:44737:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:4851:13951":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:47112:6098":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"0:61:2410":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"13:0:2876":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:4587:4901":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:15214:4521":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:12361:891":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"0:44:2387":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"1:9425:6231":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:3448:3118":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:44565:5969":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:6867:6229":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:42275:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:15624:4647":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:1920:6154":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6456:21413":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:2770:6638":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:42494:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:47200:6104":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:23034:31647":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4109:8625":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:6799:8718":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:3329:4886":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:6471:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"11:1893:3394":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15078:4491":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:40816:5884":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:22896:5812":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5624:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:11256:6233":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:40917:3588":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:1355:5431":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:23260:5847":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:553:7010":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:47211:6105":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:3583:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:0:2887":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:1884:2382":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11153:3777":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:22663:8567":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:40494:3094":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:46598:6053":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:44944:5977":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:1490:7033":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:40747:5879":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:7456:2382":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:10769:3889":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:5366:977":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:12349:1314":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:3284:13891":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:40882:5889":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:867:3623":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:4925:8643":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2765:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:12351:1688":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:592:6143":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"11:396:35157":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6811:7769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:9160:6339":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13089:4010":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:10401:3057":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:13861:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:44578:3110":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:4252:8042":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:15521:4627":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:15596:4640":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:6077:8042":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:3032:6165":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:40390:3094":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:23150:5837":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:5779:8705":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6098:21410":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:5617:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:15814:4695":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6519:7645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:881:5430":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:41817:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:2660:4850":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:44719:6515":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"11:1049:5432":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"18:726:3609":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:8247:7975":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:22232:33292":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:13904:5807":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"11:2323:5431":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:15473:4590":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:43896:5948":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:14847:4421":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:1580:7086":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:2962:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:47171:6101":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11898:3885":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:8155:5319":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:22677:8837":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:3251:5420":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:30711:3048":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:8271:7979":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"14:202:13928":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:9234:8722":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:22579:14135":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:4772:8674":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:33603:8752":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14091:4213":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12353:3951":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5160:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:14855:4424":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:9984:21477":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:15126:4497":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:3438:6171":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:44418:5962":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:2483:8556":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:21920:8756":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:5234:5560":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:9176:6341":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:3211:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:43987:3104":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"0:65:2441":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"17:12318:3648":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8714:8686":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:9726:6253":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:12478:3963":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:9329:6352":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:14436:4291":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:884:5437":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:11636:26364":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"6:5423:7449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:1853:2321":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:43543:5934":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:4821:7864":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:5671:7562":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:3778:4889":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:3419:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:32398:3278":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:1585:7088":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:7400:5564":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:16032:4047":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"11:1064:20476":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:45983:5995":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:47252:6108":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:42796:3052":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:23227:5844":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:4672:8656":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:5565:7514":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:40610:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:8288:7984":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:46036:6002":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:4821:3653":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:5314:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:40788:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:3257:8749":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:883:8499":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:4531:4899":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:11659:6238":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:8301:5332":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:5914:4946":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"11:1914:5443":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:21794:8567":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:4325:8651":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:15324:4549":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:6682:6219":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:11832:6176":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:4986:3655":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:7397:35191":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:43097:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:894:2382":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:0:2877":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10360:6367":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:22618:8847":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:2374:4837":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:1077:33994":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:8175:5321":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:5769:4932":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:43029:8020":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:12089:3923":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:46441:6032":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"15:394:20512":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:13553:4112":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:4451:34008":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:44965:33148":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:9755:21454":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:12368:1846":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:6317:5030":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7799:4868":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:44091:3106":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13455:4089":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:9719:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:5708:6199":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:1631:5442":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"14:0:2883":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:8284:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5146:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:16138:4777":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:1517:7044":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11089:3796":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:6268:5732":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:4201:8631":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:32286:5851":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:9334:6353":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:10825:33158":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"18:521:25665":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:5722:4867":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:16212:4797":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:1613:2382":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:5089:8675":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:928:3396":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:10922:8043":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:3614:4888":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:11921:27505":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:6619:33994":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:944:5438":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:44037:3108":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:9420:5766":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:670:3597":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:5474:3078":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:16249:4803":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:9398:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:22220:5808":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:46781:6060":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:3667:8565":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7473:4974":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:7750:3395":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:23723:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:515:3563":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:15616:4646":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:13941:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11324:3818":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:5098:8676":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"9:178:8210":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:22961:31687":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"9:0:2879":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"18:735:25663":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:2137:5431":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:1369:5436":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6976:5132":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2611:14136":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:6718:6220":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:4211:8632":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12043:3919":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:3263:34038":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"11:1140:5435":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8064:8492":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:42803:3059":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5064:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:9134:6337":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:47025:6095":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:42299:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12175:3928":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:14575:3958":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"18:613:35212":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:1547:7064":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12683:3979":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"5:2539:6640":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:1707:7165":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:4940:471":{"crate_id":2,"path":["core","char"],"kind":"module"},"6:6714:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:11687:6241":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6542:7658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:22351:8567":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:4800:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:42077:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5665:7560":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:5075:4916":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:42161:5915":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:4730:5720":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:9168:5420":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:706:3074":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:46310:6025":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:8012:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"15:0:2884":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:2825:2316":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"2:23216:5843":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:3246:3275":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:42789:3051":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:16105:4770":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:10573:35200":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9858:21473":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:7950:27343":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:758:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:10643:3064":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:47180:6102":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:14260:4257":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"0:45:2389":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"16:7695:5258":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:41332:5753":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:8753:3439":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11557:3837":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:12433:3958":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:4819:7862":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:8063:6211":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"18:689:3600":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40465:3435":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13292:4058":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:43105:3048":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:479:6967":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13844:4177":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5219:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"11:2366:5447":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:623:8486":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"11:854:5428":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:513:3631":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4916:7262":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"9:238:5928":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14235:4253":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12454:3961":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:8386:3119":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:47275:6114":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:12132:27348":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:1089:5431":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:5260:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11497:3832":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:42171:8495":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:10726:6168":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:5630:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:949:5421":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:1559:5421":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:46146:6009":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:680:3598":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:3029:3658":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:46627:6054":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:36344:5180":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:44387:5958":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:43939:2322":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12278:3939":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:3658:31442":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8263:6260":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:8570:8607":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:2780:6164":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:3754:33994":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:44952:5979":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:1621:7118":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:6505:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:7492:2382":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11853:6177":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:14723:4318":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3667:13941":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2609:14135":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"6:1593:7093":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:44555:5965":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3906:6176":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2972:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6263:5006":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:47054:6096":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:11033:26377":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:11501:5780":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4870:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:10384:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:4614:4902":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:8333:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:7409:27359":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:43562:5774":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"14:7:5410":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:2719:27356":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:8253:7976":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:14284:4260":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:8304:3120":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:14414:4280":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7813:5262":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:1859:6151":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:8317:7991":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:4424:4896":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:5134:7339":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:4883:8678":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"9:482:20396":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:659:3591":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7306:35192":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:23183:5840":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:9288:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11102:3797":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8622:6313":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12056:3921":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:23092:8624":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:47191:6103":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13015:3958":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:2708:4852":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:11936:6242":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:1535:7055":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:5112:8677":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"15:288:20502":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:15778:4691":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:42039:5760":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:7516:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:7139:34009":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12543:3973":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:7741:4880":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:40860:5739":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:523:6993":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:12557:3795":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:39978:3282":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:14189:4243":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:8485:6300":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:44761:5974":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:5897:4941":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:7537:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5039:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:10500:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:13959:4195":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10887:35199":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:843:5523":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:30658:3386":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:12345:1174":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:3292:5441":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11313:3816":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14325:4265":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11238:6515":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:32309:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:8802:6329":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14212:4252":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7006:5135":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:8306:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:12371:1912":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:12353:1812":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:6966:5741":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:13024:21483":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:9938:21476":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:46486:6049":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:4864:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:2355:4831":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:2548:4845":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12485:21604":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:22:817":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:11812:3876":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:12360:909":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:5472:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:3610:6173":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:9474:6357":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:9781:21472":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:21655:3023":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:16269:4079":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:5347:4919":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:2559:6952":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5174:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12969:3998":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:12074:3084":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:4924:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:14386:4274":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:1098:3633":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:32275:5850":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:10943:6358":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"14:31:5410":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:3297:26887":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:43854:5944":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:41290:5895":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:7641:5575":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:8202:4882":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:43955:3088":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11443:3829":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:5700:4865":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:6777:5734":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:2684:4851":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:13577:5796":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:13252:4047":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:13996:3391":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:14012:4203":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:7467:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:42105:5420":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:16198:4793":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:4162:5437":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13922:4191":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:6532:7651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:2768:4855":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:7546:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:7602:7955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:33536:8750":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:22927:5813":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:42810:3060":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:42113:5437":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"11:772:5423":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:12961:3072":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5588:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11661:3856":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:41871:8608":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:568:8475":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:15168:4511":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14131:4217":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11773:3869":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:3401:13895":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:13855:4178":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:5502:7493":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:1485:7031":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11419:3776":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:41276:5748":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:3039:3360":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:5602:6196":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11256:3810":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:2612:4848":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:96:25654":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:15222:4523":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:10403:3058":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:6180:8042":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:1861:6152":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:21910:8567":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"14:214:5416":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:39755:3029":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:542:4814":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:5851:6201":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:3903:6175":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:46295:6024":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:47237:6107":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:23249:5846":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:12422:3956":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:30435:8610":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:8616:8655":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:4603:5718":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"0:20:2329":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"2:31069:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10671:35197":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:46515:6050":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:42416:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13738:4157":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"2:8247:14103":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1723:7170":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:33670:14113":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14111:4216":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:15434:4578":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:2635:6160":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:6417:7596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:500:27361":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"0:112:2323":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"1:11095:27351":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:7716:3441":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13594:4123":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12671:3978":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:11359:5778":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:21922:5809":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:15646:4653":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:10710:3775":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:6965:3401":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:12494:3965":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:39623:3389":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:22975:5819":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8255:6258":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:40869:5740":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:15313:4545":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7355:5197":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:46050:6003":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"18:643:3566":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:485:6969":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:5733:3400":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:40798:5726":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:10170:3760":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:570:7018":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11467:3830":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:7604:4878":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10185:3616":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:680:8489":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:2705:6162":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:10397:3060":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:44986:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:32369:3279":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:4561:6181":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:8136:5316":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:9342:6355":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:23194:5841":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"16:7379:35190":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:8817:8700":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:481:3564":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:42005:5911":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:46103:6006":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:23161:5838":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:5927:4947":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:44401:5961":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:432:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:9283:6344":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:11045:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13344:4069":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:46117:6007":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"11:430:35168":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5225:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:44019:3109":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:15400:4571":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12597:3974":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:44596:3111":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:14449:4292":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10284:3619":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:4817:7860":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:4354:8654":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:6160:20520":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:2302:33561":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12572:3776":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"14:165:20483":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:44268:3093":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:113:25655":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:33052:5170":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:2076:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:6398:4861":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:2478:4842":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:8750:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:3457:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:6597:7695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6665:21414":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10317:3620":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:4913:4911":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:44261:3080":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:4794:8010":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6940:5130":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:8183:3704":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:21802:8758":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5370:7423":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:21677:33298":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:11595:3849":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:9190:6202":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13972:3891":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:6037:6210":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:7111:5157":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:40626:14181":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13674:4128":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:2539:6771":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"11:785:5424":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11634:3854":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:44119:3100":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:7780:31921":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:42691:5771":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:1526:7049":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12076:3922":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:14968:4467":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:7461:7879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:3592:6309":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:15197:4518":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:2148:5432":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:10729:6170":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:14599:4316":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:23068:5832":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:7429:7869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:10339:6153":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:1642:5444":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:150:4808":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:2418:4839":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:21796:8755":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3287:13892":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:6678:5895":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12443:3960":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:656:3043":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:10044:21478":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:304:3076":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:40738:5878":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"11:1601:5440":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:30690:3387":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13877:4185":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5290:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:7994:8567":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:43558:8029":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"11:1023:5431":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"11:1900:5441":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:2838:4858":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:44252:3081":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:953:5422":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:6756:7753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:13173:4028":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:871:5420":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:21665:33298":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:13473:4090":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:7150:8753":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:4:1256":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:12328:3942":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:2485:8557":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:9301:26369":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:40807:5729":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:7652:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:11432:5779":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:40718:5876":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"8:0:2878":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:3046:33453":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"11:299:6944":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5382:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:7412:7868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:46935:6093":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:22790:5810":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"9:330:6955":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:1843:3394":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:2010:785":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:12213:3934":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5112:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:44772:14246":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:7891:6392":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:7547:3035":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11614:6386":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"6:5546:7506":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:2438:4840":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:3646:14123":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"11:1158:5436":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:4804:3290":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:4824:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8271:5531":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:6421:8849":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:11841:3880":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:2127:5534":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:9916:21475":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:40901:5742":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:5081:8042":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:6562:7674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:6636:7709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:2394:4838":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:6927:5128":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:23172:5839":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:3473:3646":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:42096:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7656:21419":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11026:21491":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:5020:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:43815:5942":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"11:0:2881":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:7633:35186":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:44243:3083":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6621:7707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:465:6959":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:7665:5576":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:40691:5874":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:5863:21409":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:5212:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:7306:7816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:6746:7746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:11115:3799":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6648:5072":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11788:3873":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:43915:3097":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:2322:8004":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:1663:7147":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13774:4166":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:11190:5420":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10915:35204":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:2155:5581":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:21814:5809":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:2965:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:13538:4106":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:10648:3066":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:754:3615":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11016:3788":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6634:4869":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:3828:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4103:8626":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11392:3824":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:3014:20550":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:12976:3073":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12949:3648":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:6154:5730":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13946:4192":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:8084:8525":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:46426:6031":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:3206:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11537:3835":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:43804:5941":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:4721:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5361:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:7823:21420":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:42202:5767":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:22198:8761":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:6379:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:4117:33994":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12530:3972":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13387:4074":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:14933:4466":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:0:2885":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:10393:3051":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10954:21489":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:14311:4262":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:7366:6686":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:2533:6949":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:718:3606":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:38964:14122":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:14147:4222":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:43340:5928":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:9857:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13064:4009":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:2067:1358":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:12000:5782":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:4860:3291":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:15376:4566":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:3674:5437":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:43328:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:15463:4585":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13832:4175":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:12370:966":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5083:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:10857:32689":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"0:53:2397":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"1:980:5429":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:8259:5218":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:42121:2382":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:14025:4204":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:11928:6242":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:3272:5174":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:9420:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2956:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:12238:3936":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8193:6254":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:42652:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:4651:3289":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:7442:33579":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11674:3857":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:9430:6232":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:9322:6351":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:11524:3834":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:5336:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:597:3632":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7618:5253":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6412:21412":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:44372:5953":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:532:6999":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:4992:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:4485:13890":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:22551:8567":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:2815:2317":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"17:15456:4583":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:15333:4552":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6948:4871":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:1880:5420":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10068:21461":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:8029:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13526:4103":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:12915:3096":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:3935:3396":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:43068:5289":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:14912:4461":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:43766:5936":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:2318:6360":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:1739:33994":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:8565:6308":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:5250:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12695:3980":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:2037:3636":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:6573:3396":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:538:7002":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:7575:7949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:44223:3098":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:12346:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:10391:3052":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:15:2327":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:12408:3955":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:15266:4535":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:2508:4843":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10622:35201":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6650:7720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:9219:8723":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:5390:7433":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:11367:3795":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:963:8498":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:41855:5759":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:11792:6175":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:4981:6185":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6466:5052":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:11567:3839":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:11605:3850":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:11291:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:2636:4849":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:3292:13893":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:2175:21536":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:9556:6154":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:11050:6339":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:6849:5122":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11702:3859":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:12981:3071":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:47290:6115":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:10389:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:5466:7480":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:14876:4432":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:15410:4574":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:7330:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:2234:3643":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:21723:33300":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:8247:3062":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:6721:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:4985:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:7052:5146":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:1628:7122":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:545:7005":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:12358:754":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4897:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:902:5423":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:12362:897":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5306:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:2808:4857":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:1625:5441":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:40892:5890":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:22983:5820":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:5622:6197":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:7539:4875":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:46132:6008":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11405:3825":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2731:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:12289:3940":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:11673:6239":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:328:6947":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:2466:3394":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:11010:6252":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:46228:6021":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:9671:21457":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4932:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:6055:5560":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:9184:2382":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:8345:6261":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:2380:5420":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:8226:2460":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10218:3617":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:13884:5806":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:43775:5937":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:15822:4698":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:43084:31662":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"2:40486:3095":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:5447:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:7629:5574":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:8867:5420":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:5960:4954":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"12:0:2882":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:9456:6233":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:2878:4860":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:15992:4749":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:45968:5994":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:1974:3041":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11189:3803":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:12373:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:2902:20548":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:7432:5566":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:21743:8759":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:44893:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11865:3882":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:4725:5719":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13766:4164":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6066:4970":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:13679:31791":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:15010:4474":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6657:7721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:5014:7307":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6026:4810":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:10439:3761":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:3460:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:39579:13896":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"11:671:5420":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:43303:3065":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6698:7736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:5236:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:7337:27336":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:46665:6056":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:2342:5584":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13509:4095":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:3196:4828":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:23238:5845":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"5:5470:3077":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:15582:4634":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:13375:4073":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:1653:7141":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:10232:5908":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:10720:35203":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:6796:6221":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:3649:3044":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:10999:31285":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6802:5109":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:46213:6020":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:2592:4847":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13568:4118":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:7734:3394":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:5992:6209":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7648:5256":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6813:5110":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:14463:4293":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:3204:3272":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:10927:8045":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11166:3802":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:2728:4853":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:44530:5964":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:578:7023":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:10340:3044":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6353:4821":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:41090:5747":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15289:4538":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6543:5059":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:13753:4162":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:46359:6028":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:14246:4255":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:16069:4763":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:45951:5993":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"13:229:6942":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8018:6245":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:43350:5932":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:2102:5531":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:11730:3863":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:1493:5437":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:14271:4258":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6560:4864":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:16187:4792":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:4641:4903":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:43867:5945":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:7168:6355":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:957:5425":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:44173:3102":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:816:8611":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:22193:8567":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:5981:8042":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:10962:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:15301:4544":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:44277:3094":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11799:3874":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:5168:8682":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8242:3063":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:11647:6234":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:6461:6200":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:7098:5154":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:10358:6368":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:44691:8032":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:40760:5880":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:40653:3088":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"16:2303:20521":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:44351:13926":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:11510:3833":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:5093:3422":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11293:21509":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:16176:4791":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:12350:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:11214:5437":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:46760:6059":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"17:12768:21459":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:15760:4685":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:44699:8034":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:1107:5436":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:4856:4909":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13046:4006":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:47154:6100":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:860:4823":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:5400:3760":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:9438:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:6629:7708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:4462:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:15368:4563":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:39715:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:16235:4802":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:15390:4568":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8873:6334":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:6900:7798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:10358:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8494:6174":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:9294:6347":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:41283:5749":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13497:4094":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:3040:33461":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5352:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:39785:5859":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:6874:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:373:6138":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:12372:1419":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:3065:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:8078:8493":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:7446:7874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:2709:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:12366:1834":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:2495:8562":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11269:21508":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:12502:3086":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12584:3777":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:11653:6388":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:15418:4575":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7528:5247":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:6915:7809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:7570:4876":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:22911:8013":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"7:0:1902":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5006:4914":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:4139:8627":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:12955:3079":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:4807:8630":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:5265:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:6895:5124":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12808:3989":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:8013:6243":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13272:4057":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:12347:1874":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:0:1714":{"crate_id":1,"path":["std"],"kind":"module"},"5:3318:5444":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:11769:26244":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:26123:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:5415:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:2210:8470":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:16121:4775":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:4830:4908":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6442:5049":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5528:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11365:6385":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:32368:3117":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:39543:13939":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:22705:8838":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:1565:7074":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11142:3776":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:31096:3023":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:7509:5239":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:5320:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:3597:3647":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4952:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:44233:3099":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:10903:6377":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:4718:4904":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:12297:6395":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:44286:3095":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:8259:7977":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:261:3624":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:5289:6191":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:4087:3396":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10524:3772":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:46686:6057":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"2:41899:8019":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:40589:3432":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:12693:5789":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:6922:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:6975:3402":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:8546:3105":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"7:79:20390":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:7066:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:1620:3394":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:42130:5913":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:40597:3428":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:437:3630":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11688:3858":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:42017:6178":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:6670:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:8655:6317":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5636:7549":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:4572:5717":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"18:765:25664":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:8857:6186":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:11915:21578":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:6427:5047":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:15734:4676":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:538:3573":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:15138:4500":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"11:1085:35173":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:2801:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:45013:5449":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:39655:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10997:3786":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2146:8007":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:43794:5940":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:7617:5571":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12464:21603":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:13617:5887":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:5004:8640":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6872:5123":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:47226:6106":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:15931:4029":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"11:698:2382":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5581:7519":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}