{"root":"0:0:2155","crate_version":"0.10.0","includes_private":false,"index":{"a:2:2788:249-0:72:1790":{"id":"a:2:2788:249-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2788:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12517:1912":{"id":"2:12517:1912","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12625:26922":{"id":"2:12625:26922","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39633:26916","Self::is_ascii":"2:12624:26921"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39633:26916","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:725":{"id":"0:16:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[19,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41829:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42759:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12584:30914":{"id":"2:12584:30914","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12199:2465","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::matches":"2:12581:1831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43868:2487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3424-0:72:1790":{"id":"b:2:3424-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3422:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3426:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72:1790":{"id":"0:72:1790","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:73:1791"],"impls":["a:2:8670:6436-0:72:1790","a:2:2788:249-0:72:1790","a:2:2845:2501-0:72:1790","a:2:2805:259-0:72:1790","a:2:8669:6247-0:72:1790","b:2:2589-0:72:1790","b:2:2583-0:72:1790","b:2:2273-0:72:1790","b:2:2579-0:72:1790","b:2:2276-0:72:1790","b:2:2594-0:72:1790","b:2:3424-0:72:1790","b:5:5793-0:72:1790","0:77","0:78","0:17","0:15","0:75"]}}},"2:12504":{"id":"2:12504","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12505:879","2:12506:1884","2:12507:30905","2:12508:30906","2:12510:30907","2:12513:26917","2:12514:30908","2:12515:349","2:12516:348","2:12517:1912","2:12519:25745","2:12521:25746","2:12523:25747","2:12525:30909","2:12526:30910","2:12527:25769","2:12528:25770","2:12529:1817","2:12530:5365","2:12531:5010","2:12532:29174","2:12533:29160","2:12534:24046","2:12535:30911","2:12536:29161","2:12537:25788","2:12540:25789","2:12543:25790","2:12546:2703","2:12550:2667","2:12554:24045","2:12557:25778","2:12560:25780","2:12563:30912","2:12566:30913","2:12569:25782","2:12572:25784","2:12575:25786","2:12578:25787","2:12581:1831","2:12584:30914","2:12587:30915","2:12590:30916","2:12593:30917","2:12595:30918","2:12597:30919","2:12599:30920","2:12600:30921","2:12601:30922","2:12604:30923","2:12607:23414","2:12610:25791","2:12613:30924","2:12616:30925","2:12619:30926","2:12622:30927","2:12624:26921","2:12625:26922","2:12626:26924","2:12627:26925","2:12628:26926","2:12629:30928","2:12631:6239","2:12632:30929"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12550:2667":{"id":"2:12550:2667","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41686:202","prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12593:30917":{"id":"2:12593:30917","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12599:30920":{"id":"2:12599:30920","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2798:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12604:30923":{"id":"2:12604:30923","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:725":{"id":"0:76:725","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9599:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9580:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:26979":{"id":"5:5538:26979","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12627:26925"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:1889":{"id":"0:61:1889","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[267,0],"end":[311,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:1849":{"id":"0:43:1849","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[158,0],"end":[178,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2337:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1942":{"id":"0:68:1942","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[433,0],"end":[478,1]},"visibility":"public","docs":"Calculates a S√∏rensen-Dice similarity distance using bigrams.\nSee http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12535:30911":{"id":"2:12535:30911","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43910:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12587:30915":{"id":"2:12587:30915","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12199:2465","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::rmatch_indices":"2:12590:30916"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43796:2484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12590:30916":{"id":"2:12590:30916","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12199:2465","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::match_indices":"2:12587:30915"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43814:2485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:31586":{"id":"5:5520:31586","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2462","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2462","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12607:23414":{"id":"2:12607:23414","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2275:2368":{"id":"2:2275:2368","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5795:1602":{"id":"5:5795:1602","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12510:30907":{"id":"2:12510:30907","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12508:30906"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12560:25780":{"id":"2:12560:25780","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12199:2465","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::split":"2:12554:24045"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43664:2488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1864":{"id":"0:52:1864","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[200,0],"end":[226,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2337:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:30910":{"id":"2:12526:30910","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12027:1543","crate::ops::IndexMut":"2:3089:2792","str::slice_unchecked":"2:12525:30909"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12514:30908":{"id":"2:12514:30908","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1903":{"id":"0:63:1903","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[327,0],"end":[380,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2342:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9840:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2289:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9624:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2583-0:72:1790":{"id":"b:2:2583-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2585:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12572:25784":{"id":"2:12572:25784","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12021:457","str::splitn":"2:12569:25782","self::pattern":"2:12199:2465"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43768:2490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12597:30919":{"id":"2:12597:30919","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2589-0:72:1790":{"id":"b:2:2589-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2559:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2592:135","2:2593:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2585:751":{"id":"2:2585:751","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:26917":{"id":"2:12513:26917","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11759:2470"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12624:26921":{"id":"2:12624:26921","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2337:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2594-0:72:1790":{"id":"b:2:2594-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2597:135","2:2598:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:79:667":{"id":"0:79:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1791":{"id":"0:73:1791","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[15,4],"end":[15,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12528:25770":{"id":"2:12528:25770","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12527:25769"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[28,0],"end":[28,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","description","cause","source","provide"],"trait":{"name":"Error","id":"2:2641:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12628:26926":{"id":"2:12628:26926","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12631:6239":{"id":"2:12631:6239","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4585:6239"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43954:2478","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8669:6247-0:72:1790":{"id":"a:2:8669:6247-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8669:6247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12505:879":{"id":"2:12505:879","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12021:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12622:30927":{"id":"2:12622:30927","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12160:134","`FromStr`":"2:12159:2480"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12159:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12159:2480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12507:30905":{"id":"2:12507:30905","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2598:1625":{"id":"2:2598:1625","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12508:30906":{"id":"2:12508:30906","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5793-0:72:1790":{"id":"b:5:5793-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12554:24045":{"id":"2:12554:24045","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12199:2465","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::split_whitespace":"2:12532:29174","str::rsplit":"2:12560:25780"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43646:2489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:349":{"id":"2:12515:349","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12516:348","`u8`":"1:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1796":{"id":"0:18:1796","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[30,0],"end":[30,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:41829:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12619:30926":{"id":"2:12619:30926","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:31589":{"id":"5:5535:31589","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2592:135":{"id":"2:2592:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:66:1931":{"id":"0:66:1931","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[407,0],"end":[412,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau‚ÄìLevenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"l√∂wenbr√§u\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12543:25790":{"id":"2:12543:25790","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1816":{"id":"0:24:1816","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3426:1640":{"id":"2:3426:1640","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39446:5269","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2276-0:72:1790":{"id":"b:2:2276-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2270:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2278:23298"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12536:29161":{"id":"2:12536:29161","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43938:2466","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1799":{"id":"0:19:1799","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[34,0],"end":[47,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2337:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1820":{"id":"0:25:1820","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[65,0],"end":[131,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7543:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2337:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:6348":{"id":"5:5537:6348","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2845:2501-0:72:1790":{"id":"a:2:2845:2501-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2845:2501","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2593:1627":{"id":"2:2593:1627","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41829:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2563:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2805:259-0:72:1790":{"id":"a:2:2805:259-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2805:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[18,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9629:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2155":{"id":"0:0:2155","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1005,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1790","0:18:1796","0:19:1799","0:24:1816","0:25:1820","0:42:1847","0:43:1849","0:51:1859","0:52:1864","0:59:1874","0:60:1883","0:61:1889","0:63:1903","0:65:1921","0:66:1931","0:68:1942"],"is_stripped":false}}},"5:5536:31590":{"id":"5:5536:31590","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2462","`String`":"5:7490:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2462","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12519:25745":{"id":"2:12519:25745","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41686:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:31586","5:5521:11860","5:5524:31587","5:5527:31588","5:5535:31589","5:5536:31590","5:5537:6348","5:5538:26979","5:5539:26980"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12529:1817":{"id":"2:12529:1817","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43616:1789","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12532:29174":{"id":"2:12532:29174","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12533:29160"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43920:2469","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:26980":{"id":"5:5539:26980","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12628:26926"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:31587":{"id":"5:5524:31587","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:11860":{"id":"5:5521:11860","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12533:29160":{"id":"2:12533:29160","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12532:29174"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43929:2467","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12600:30921":{"id":"2:12600:30921","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12610:25791":{"id":"2:12610:25791","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12629:30928":{"id":"2:12629:30928","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4584:30928"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43945:2477","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12557:25778":{"id":"2:12557:25778","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12015:2468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12566:30913":{"id":"2:12566:30913","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12199:2465","str::split":"2:12554:24045","prim@char":"1:12021:457","str::split_terminator":"2:12563:30912"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43714:2492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1874":{"id":"0:59:1874","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[236,0],"end":[238,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12627:26925":{"id":"2:12627:26925","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12546:2703":{"id":"2:12546:2703","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41686:202","prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2579-0:72:1790":{"id":"b:2:2579-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2556:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2553:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2582:2661"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2597:135":{"id":"2:2597:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32104:6453","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12595:30918":{"id":"2:12595:30918","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:25747":{"id":"2:12523:25747","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12616:30925":{"id":"2:12616:30925","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12534:24046":{"id":"2:12534:24046","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43900:2482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12601:30922":{"id":"2:12601:30922","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12224:2457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1883":{"id":"0:60:1883","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1921":{"id":"0:65:1921","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[390,0],"end":[393,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12581:1831":{"id":"2:12581:1831","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12199:2465","`DoubleEndedIterator`":"2:7581:128","prim@char":"1:12021:457","str::rmatches":"2:12584:30914"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43850:2486","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12569:25782":{"id":"2:12569:25782","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465","str::rsplitn":"2:12572:25784"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43750:2491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1847":{"id":"0:42:1847","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12527:25769":{"id":"2:12527:25769","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12528:25770"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2582:2661":{"id":"2:2582:2661","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2556:143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:30909":{"id":"2:12525:30909","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12027:1543","str::slice_mut_unchecked":"2:12526:30910","crate::ops::Index":"2:3085:2791"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1859":{"id":"0:51:1859","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[188,0],"end":[190,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.911 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12530:5365":{"id":"2:12530:5365","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12021:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43622:2473","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:31588":{"id":"5:5527:31588","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12506:1884":{"id":"2:12506:1884","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12613:30924":{"id":"2:12613:30924","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12578:25787":{"id":"2:12578:25787","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12219:2459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8670:6436-0:72:1790":{"id":"a:2:8670:6436-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8670:6436","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12531:5010":{"id":"2:12531:5010","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43632:2472","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12537:25788":{"id":"2:12537:25788","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12540:25789":{"id":"2:12540:25789","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12021:457","self::pattern":"2:12199:2465"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2273-0:72:1790":{"id":"b:2:2273-0:72:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2795:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2267:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2275:2368"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12575:25786":{"id":"2:12575:25786","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41684:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2278:23298":{"id":"2:2278:23298","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:348":{"id":"2:12516:348","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12038:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12521:25746":{"id":"2:12521:25746","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10289:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12563:30912":{"id":"2:12563:30912","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12199:2465","str::split":"2:12554:24045","prim@char":"1:12021:457","`DoubleEndedIterator`":"2:7581:128","str::rsplit_terminator":"2:12566:30913"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43696:2493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12204:2458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12626:26924":{"id":"2:12626:26924","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12632:30929":{"id":"2:12632:30929","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4582:30929"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43963:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:1651:5015":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:5420:5557":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:4447:2651":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10530:5533":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:43963:2479":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:14316:4212":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:43462:5346":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:4578:16131":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:8484:6446":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4480:16119":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:11759:2470":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:4989:16173":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:3035:6254":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:47941:5487":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4814:16153":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:7556:17824":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:42314:5200":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:6813:17284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:8050:4775":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"9:357:17898":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:40922:5184":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:5632:5164":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:2961:2722":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:666:4881":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:4220:5542":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:45784:5395":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:7892:2448":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:9752:3358":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:2939:238":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:42741:70":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:14401:4235":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:46115:5412":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:43929:2467":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:8128:3203":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:43850:2486":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:7269:32987":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"13:0:2269":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:43473:5347":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:261:3216":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10313:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:10916:3496":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6425:4521":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:42275:96":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:40874:5181":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:12724:3770":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:9025:5695":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:13259:3872":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:3983:6368":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:42686:70":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12934:3819":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:614:32999":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:6817:2803":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:8825:18962":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:40442:5296":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:6532:6467":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:434:3221":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:8134:4783":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:3214:4903":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"0:24:1816":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"11:1092:4896":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:10754:28572":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6687:4561":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:7453:5008":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:11025:3089":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:3500:6336":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:43196:29108":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:489:12603":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:8195:4788":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:9867:3366":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10661:3451":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:20976:29180":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:6071:16863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6171:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:1562:4905":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:7676:3087":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4401:16112":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10672:3452":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:1935:5019":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:10529:2468":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11719:18973":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:7679:16361":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:11137:3515":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:1428:4899":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:22432:5252":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:9998:3333":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"0:59:1874":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"6:7598:16350":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:42949:5329":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:2931:4643":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:14335:4218":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"11:693:1842":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13710:4040":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:11594:24020":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:10750:3461":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6742:4574":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:2373:6314":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:22773:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"0:60:1883":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"6:4616:16136":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13914:4088":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:41621:5541":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4543:16127":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:7631:5509":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:41438:5190":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:42978:5333":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:4156:6391":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8975:5687":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:5891:16851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2185:11892":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:7054:4618":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6189:4471":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:9852:18980":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:10468:3428":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:1120:31916":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:7258:3203":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:3441:3237":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:7554:4343":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:40897:5183":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:45684:5391":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:7343:12562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13632:4032":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13188:3861":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8819:5678":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11535:3557":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:10147:5703":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:6261:4505":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:12033:805":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:43646:2489":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:7590:2797":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:5088:4382":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:8239:4682":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:5435:4386":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:1819:5521":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:533:12608":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:9090:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10527:5531":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:2892:6502":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:1558:13505":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:8713:18959":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4878:16161":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:482:3054":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:13723:4045":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12484:3735":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:4614:6368":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:4365:3002":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:40113:2479":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:47159:5449":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:3721:5538":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:1862:4903":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:6335:6596":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10447:2829":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:7692:17852":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4932:16168":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:7782:4726":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:533:3055":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:3977:6367":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:9574:32989":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:2926:11875":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5130:16189":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11261:3530":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:1054:4892":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:1304:4898":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:22971:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:6128:16870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12658:3761":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:8895:18964":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:8291:5646":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:7516:3223":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:3492:6317":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:2379:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4947:16169":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:42156:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11761:3575":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10240:3376":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"8:0:2271":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:46975:5447":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4977:16172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2884:4638":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4628:16137":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:504:3222":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:30948:2412":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11991:3624":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:681:3190":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"0:66:1931":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"16:4949:4378":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:9039:23750":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:2473:32909":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11547:3558":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"11:731:4883":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:9780:3359":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10214:3401":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:1127:4897":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:14221:4193":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4922:16167":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:483:12602":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4666:16139":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:22334:5239":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:42716:4753":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:42443:2437":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:6959:3017":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:47968:5489":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:9328:2472":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:39321:224":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:9012:5692":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:8863:5560":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:7506:11847":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14126:4143":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:5963:4428":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:829:6249":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:43622:2473":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13667:4033":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:10004:3038":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:12737:3772":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:43868:2487":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:43900:2482":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:44397:11996":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"11:1842:4881":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:46709:5442":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:836:4881":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:4527:4365":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:6721:18903":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14056:4126":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:6915:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:1075:3224":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3158:28702":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:40332:5285":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:2766:4320":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11971:3623":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:7655:5586":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:6961:17294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"11:2494:2424":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:2655:5528":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:43424:5341":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:6286:232":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:22806:199":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:25919:279":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:4651:2756":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10588:3439":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10962:3500":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7736:4724":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:3461:4353":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:9933:3374":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:4474:2650":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:22938:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:5068:16182":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14460:4251":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:3361:5304":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:4731:6381":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:9580:238":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:4733:6382":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:40475:5297":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:9459:136":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:6091:5168":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"11:1525:17966":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:43945:2477":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:40091:2769":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3286:29491":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:41644:5193":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11910:3609":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11742:3572":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:4418:3027":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:46663:5441":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:4871:5157":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:2744:4319":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:4556:16129":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:4501:457":{"crate_id":2,"path":["core","char"],"kind":"module"},"6:7702:17853":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:3737:4987":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:4921:4377":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:596:12617":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:7523:4715":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:40034:2478":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:30386:28891":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:43442:5344":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:7123:25504":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:21295:6519":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:4698:16142":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:4912:860":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11162:3517":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13816:4062":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:0:2279":{"crate_id":17,"path":["object"],"kind":"module"},"2:3004:11638":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"13:226:32924":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8204:2489":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"0:52:1864":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"1:3435:5536":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:8978:18967":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:5614:232":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:80:22923":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:4462:4363":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"11:860:4890":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:10929:3498":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11448:18970":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:6633:245":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:4222:2647":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11815:3582":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:11377:25499":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:46451:5422":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4884:16162":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:6700:17280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6741:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:557:5510":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:2795:2500":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:10720:2491":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:2972:30874":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43632:2472":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12123:3646":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:10330:27904":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:22396:28895":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:41472:6358":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:11280:5211":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:3919:6364":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:1541:2798":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:12846:3788":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:45660:5390":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"9:426:17885":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:2559:270":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:1104:30877":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:9921:3371":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:40410:5292":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:12031:697":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:12037:800":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:4497:4364":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:32144:4682":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:40275:3028":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:40674:5179":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"15:0:2277":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:6183:5568":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:1687:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:928:6249":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:1632:13511":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9488:32993":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:3246:11881":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11235:3529":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13274:3535":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:4624:28347":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:6279:4508":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:8594:18947":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:12671:3468":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11582:5727":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:13228:3866":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13010:3828":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"11:2286:4894":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:5017:4380":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:12270:11665":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:8669:6247":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:9350:3217":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:574:12614":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:588:6238":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:20991:29180":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:7722:4336":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:645:6241":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11442:3094":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:3722:4985":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:10978:5679":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:9094:83":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:9003:18968":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:7365:17663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:2951:11878":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:46137:5413":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12576:3751":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12196:3660":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:22425:29143":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:6346:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"15:306:17991":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:5910:16853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:8833:5679":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:5905:4422":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10397:3414":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:40363:5288":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:43604:2476":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:4076:4899":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:4953:6428":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:880:4885":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:21381:6510":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:8553:5675":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:8376:6432":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:363:5508":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11586:3561":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:2428:4306":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13611:4027":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:4148:5151":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:6915:4338":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:2463:5960":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12465:3730":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5995:4285":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:6012:16860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10370:3412":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:7240:5003":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:12432:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:41835:134":{"crate_id":2,"path":["strsim","HammingResult","Err"],"kind":"variant"},"5:261:2981":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:1743:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:7037:28781":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4854:16158":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:8002:6347":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:41829:238":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"11:101:32906":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10023:3357":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:39266:5264":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:7014:3079":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:7650:5584":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:14042:4119":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11788:3576":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:2969:18038":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"0:68:1942":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"2:40212:28912":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12022:1665":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12543:3743":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:6587:1842":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12496:3737":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:6159:16871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:22905:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"0:63:1903":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"2:11729:11961":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:45955:5402":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12208:3661":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:44640:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:43938:2466":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4169:6392":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:44210:5369":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5085:16184":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:4904:6421":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:7741:5593":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:47757:5483":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:9912:3369":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:14156:4149":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:4363:3026":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:8911:6472":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:11745:5212":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:44365:11994":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:7574:2796":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:3173:4881":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:2906:3061":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:2842:2728":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:1413:4881":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:841:4889":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7503:4341":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:1644:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:501:12605":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:817:4900":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:8787:5676":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10420:3289":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6017:18899":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:5370:5551":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:4641:4369":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4908:16165":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:44030:11671":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:0:2280":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:2618:4314":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:2321:4295":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1444:1842":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:43452:5345":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:12024:1153":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"14:40:3610":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:7581:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:11337:19093":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:4745:4371":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4506:16122":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:3659:6359":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"19:0:1133":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:21592:5229":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:41812:11953":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:3232:4294":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:47865:5485":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:5634:4388":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:5146:16191":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12970:3824":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2798:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11845:3586":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:40930:5186":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2173:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10340:3410":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:41684:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8982:23421":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:8671:5198":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:39460:5271":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4603:16134":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10603:3441":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:40155:2765":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:7897:2447":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:13487:3935":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:3232:3235":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10726:3459":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:9701:3357":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:7323:1842":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:8805:5677":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11872:3594":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12598:3752":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4351:16108":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:7828:4734":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12997:3827":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13148:3858":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:4053:4360":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:2419:2285":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:12213:2460":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:2487:32907":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:9060:5854":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:14068:4129":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3234:5531":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:9581:2431":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12305:3692":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:43525:5350":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:149:2969":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:9119:5574":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:2511:11698":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:4417:4362":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12280:3688":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46899:5445":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:3219:30862":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:14083:4133":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13244:3868":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:7745:5259":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:9945:3376":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13085:3840":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:39297:222":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:12026:1511":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:32165:5261":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"0:72:1790":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"16:5648:4392":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:3797:4356":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10534:3435":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10084:3386":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:11062:3509":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:10316:3409":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:6376:18901":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:2183:11891":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:43512:5349":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:40903:5304":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:47903:5486":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:9633:2436":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:14469:4255":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:2225:32121":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:41415:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13685:4038":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:4056:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11279:3092":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12513:3740":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:3183:223":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:1913:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:9848:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:7390:2425":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14536:4267":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:3969:6366":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:1567:4906":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:2012:3227":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:22319:28911":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11687:18972":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:2051:4987":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"9:52:17901":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"18:624:32997":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:22359:28903":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11296:5575":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:5117:16187":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:2504:4309":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:9070:3342":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:30316:2788":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:10437:4881":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:5009:16176":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:8115:4780":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:9643:2443":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:10068:5520":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:22707:200":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:10265:3404":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:44445:5379":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:6560:2971":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:4812:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"11:423:32919":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:2850:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:3261:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:276:2462":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:43954:2478":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:10771:3463":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:7262:2992":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:3830:4357":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:427:32920":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"14:160:4873":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:21590:6515":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:2872:4634":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:45730:5393":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13024:3831":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"11:759:4884":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10628:3445":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:1290:4892":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:548:12610":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9102:3208":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:10570:3087":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4516:16123":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:14134:4144":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"13:110:32970":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:48014:5493":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:2303:4909":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:5040:5550":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8950:5683":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:2172:31966":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:14076:4132":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:42704:116":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:2289:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"7:78:17876":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4902:16164":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:46482:5423":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:7586:3083":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:46261:5416":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:11381:3545":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:10730:5712":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:1962:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:9896:18981":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:8686:18958":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:3596:4899":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:30444:28898":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:12267:3684":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:1275:4894":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"0:65:1921":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"2:41897:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10012:3356":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:13298:3882":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:4626:28349":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:22342:5240":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:48078:5497":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:43696:2493":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:10759:5595":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:7067:4621":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:3422:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13922:4090":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4808:16152":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7041:4615":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7318:4661":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12711:3769":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:11000:3502":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:4428:16113":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9617:32996":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:4034:2981":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11191:3239":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:21583:6319":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11367:3542":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10494:3431":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:4294:5153":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:6280:3034":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"9:177:17951":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:11934:3610":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"18:644:3159":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4647:16138":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:40200:5279":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12111:3645":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4710:16143":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6226:4488":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5974:16857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"18:564:3168":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:11980:5219":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:6238:3071":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:44457:12010":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:11186:5574":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:7378:2424":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6968:18904":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:2550:78":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:7502:11848":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11407:18969":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:41769:5319":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:32104:6453":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:39180:11684":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:2900:11870":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5859:16848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40129:2477":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:2943:11876":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:21342:11891":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:10685:3454":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:8526:5545":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:3332:2796":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:4692:6395":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:43554:5353":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:11042:3091":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:7088:11842":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:2962:32045":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:6079:16864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:4:1116":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:2670:4316":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:2878:11869":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:5384:18896":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:7622:16354":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6898:17289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:12824:29710":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:46404:5421":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:9286:30068":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5829:16784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:13007:3052":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:3180:4904":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6583:4537":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10383:3413":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:909:4900":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:3531:2798":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:14478:4257":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:41888:1842":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:7657:16359":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12422:3719":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:12911:3818":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:40485:5298":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:719:3198":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:48116:5499":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:2342:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:2960:11880":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13868:4077":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:1570:13506":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:11204:5858":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4914:16166":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:5071:5550":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"3:234:238":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:1558:3000":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:40040:5272":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:2361:6308":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:6151:3070":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:40453:5172":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:14448:4249":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:7668:16360":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:1546:13504":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:2630:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:824:2987":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:22446:5253":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:12199:2465":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:5969:16856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:42039:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:6800:6503":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:7331:1842":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:8181:5286":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:9790:32990":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11526:5540":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11992:6246":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:2209:3234":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:1910:710":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:9886:3368":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:3315:4352":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:2593:3042":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:4862:4375":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:23070:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:12621:3757":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:22:738":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:6100:16866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:4031:6371":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5015:16177":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:6666:2981":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3483:28126":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:45974:5403":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12810:3782":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11389:3547":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:7922:4985":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:9100:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4434:16114":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:7869:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:2644:4315":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:9445:3352":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:43920:2469":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:21207:29013":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:2387:1786":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"11:0:2274":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:4761:725":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:30550:28905":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:12996:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:1501:13498":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"18:481:3157":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"0:61:1889":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"2:44393:11995":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:3085:2791":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"11:785:2798":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:640:5513":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:42450:2444":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:9017:5693":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:10932:5593":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:14001:4110":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:3194:5529":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:1514:13500":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1639:13512":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:44584:219":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6352:4513":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:2368:2798":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11710:3535":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:5121:4383":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4724:16144":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:44098:5367":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11507:18971":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:4689:6422":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:1259:4624":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:7992:5601":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:507:3159":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:3301:11637":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:20963:2412":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11173:19092":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:11223:162":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"11:1876:4905":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:389:2975":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6107:16867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:5138:3007":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:256:3215":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6868:17287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6927:17291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:10478:3429":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:880:2989":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3955:6365":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:4628:28351":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:6114:16868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8317:5657":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:6943:17293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:4810:6378":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12098:3643":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5743:4402":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7391:18906":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:2810:2653":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:21021:29324":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10738:3460":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:5798:4406":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:2511:5526":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:14378:4234":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:0:2278":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:41961:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:12046:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:22839:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4610:16135":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:10637:3446":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:7539:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:7634:2503":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10616:3442":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:922:4886":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:4719:4370":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13838:4066":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4595:16133":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5955:16813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:5404:5556":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:8217:5646":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:5742:5565":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:5976:232":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:1778:2796":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:8148:5537":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:11295:3533":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:7479:3008":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:2238:4624":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:4955:16170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:40049:2768":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4584:16132":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:7651:16358":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:2267:101":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:7474:4703":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5939:4279":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3155:27905":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:4566:16130":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:582:3223":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:8002:11846":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4676:16140":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10165:18999":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:11321:11663":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:10561:3437":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:6263:16901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4455:15958":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:10070:3041":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:6047:16861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:40881:5182":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12959:3823":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:5696:18897":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7360:32986":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11987:28233":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:10239:6455":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:45752:5394":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:1674:2981":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:5117:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:13055:3837":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:7006:4611":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:12035:803":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:42078:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:39219:11639":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:41735:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:9277:3213":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:11247:5210":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:8793:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:7829:3290":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:40392:5160":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4847:16157":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5661:4397":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:849:4899":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3236:5532":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:4395:3000":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:8659:18945":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:9099:90":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10139:18998":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:6455:3075":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:2397:1785":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"16:7768:4334":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:7504:5012":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:8926:18965":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12437:3723":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6083:18009":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:5673:4332":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:6984:3021":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:4428:3002":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:8849:5681":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:12802:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:6753:4575":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:44224:11672":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:40195:105":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:22145:5230":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:1750:11901":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12765:3777":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5982:16858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8536:4881":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:5004:16175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10547:3436":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:40285:5281":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:43714:2492":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:46085:5411":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:2867:4637":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:5814:3064":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:1406:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:12789:148":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:893:2798":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:6973:11850":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:44566:231":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10036:3383":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:11147:5678":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:10102:3047":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:6248:16900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5921:16854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6837:17286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:5960:3071":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:4166:3000":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:22251:5232":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:44389:12001":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:939:4889":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:4613:4368":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5044:16180":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12830:3783":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:7515:5013":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:7490:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11244:3562":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:5484:3000":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:7128:5695":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:7792:18908":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:48155:5500":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:7906:5599":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:41585:28917":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:44576:239":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7677:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:40181:2762":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:7294:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11505:5539":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:10465:3086":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:3389:3000":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:7719:6245":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13906:4086":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6696:4562":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:6913:17290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:4986:4379":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:45706:5392":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12074:3639":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12293:3689":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10646:3447":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:40912:3036":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:1874:2428":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4686:16141":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:7302:5004":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:7582:4717":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:46505:5424":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:4480:6396":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12452:3728":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:4427:2649":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4745:16145":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:2202:6300":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:5976:3007":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:2305:18036":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:8281:4795":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13162:3859":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:1184:3226":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"18:582:2412":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7015:4614":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:8394:5666":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:11215:3524":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:5104:16185":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:21917:29184":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13826:4063":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:40242:6287":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:41880:4899":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5075:16183":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11327:3538":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"9:507:4965":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:4236:4881":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:40077:2767":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4998:16174":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:4895:6420":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:10641:2488":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:3196:5530":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:671:3189":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11393:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:11805:3098":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12154:3655":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4800:16151":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:2058:4624":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:3275:5534":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:10422:5676":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:914:4882":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:7552:2504":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:46585:5425":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:4196:3000":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:12038:1649":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:22027:6319":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12172:3656":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:42759:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:13851:4072":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8927:6474":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13040:3833":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:5760:18898":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:12851:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:44385:12000":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:21004:29322":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:504:2994":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"14:31:4873":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:47009:5448":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:2857:6499":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:10960:23870":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4300:2822":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:9564:3354":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:2472:4308":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:7568:4344":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:43433:5342":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:6514:2981":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12888:3809":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:992:4624":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:0:1535":{"crate_id":1,"path":["std"],"kind":"module"},"5:2143:4988":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:8882:5682":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:3046:2502":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6798:17282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:47617:5481":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:7846:5596":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:42000:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:41501:29171":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:1596:13509":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"0:25:1820":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"1:12034:802":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:4044:5150":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:8343:5544":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:22029:6508":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:2921:11874":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:7839:5595":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:636:3182":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:1036:4894":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6804:17283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:45814:5396":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:8072:4776":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7651:4721":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:3032:4349":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:6101:3000":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12136:3647":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:13045:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:21466:6509":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:9281:29407":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:12204:2458":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:41922:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4461:16117":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11661:3564":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"11:2479:32914":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:1525:4984":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:11639:3239":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:1703:6386":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:5830:4412":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:3417:5649":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12184:3659":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:495:12604":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:10606:5206":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:21458:6319":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:42996:5338":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:13215:3865":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:21023:29327":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:11351:3540":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:10823:23867":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:9607:3355":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:2788:4321":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:1576:13507":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:43814:2485":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:45836:5397":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"11:1541:4901":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:629:4979":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:12019:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"14:215:4878":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:9095:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:44669:4911":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:42781:76":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:2799:256":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:21559:6319":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:6960:4600":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:40372:5289":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:7997:5602":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:47365:5479":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6136:32688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:590:3169":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"9:330:17938":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:2270:102":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:8137:5640":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:4290:233":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"14:221:4880":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:7862:4738":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:9177:28280":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:8198:2472":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:2641:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:48040:5495":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:2853:2732":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:47979:5490":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:7492:4711":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5621:3071":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:1903:2429":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:22380:28902":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:43664:2488":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:21414:6505":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"10:44:4912":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:4344:4361":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:2334:4899":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:14173:4156":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:10679:5207":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:1072:4898":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:1674:13515":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"7:31:17869":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:6879:4593":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:40433:5167":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:3764:4355":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:951:4891":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:4039:6373":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12024:3630":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:4140:6389":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:6346:4512":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:13202:3864":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"18:599:33000":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:40228:5280":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:10804:126":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:5111:16186":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:11036:3090":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:2195:5525":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:5690:5166":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:12224:2457":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:48063:5496":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13567:3997":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:123:12285":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:3206:4905":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13451:3904":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:6585:6469":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:40424:5295":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:2896:11871":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:22740:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10980:3356":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:10794:137":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11074:3510":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:4017:6369":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:4789:16150":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:2193:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:1040:4624":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:7725:6276":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:13113:3846":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:2553:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:9840:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:2692:5958":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:897:4881":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:46307:5418":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4440:16115":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:1556:4904":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:9172:3210":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:62:12230":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:2150:19026":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:1140:30878":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:7423:5005":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:8841:4881":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:3888:4358":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:12020:1036":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11023:3503":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:1681:1192":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:2406:4305":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"11:1010:4892":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:1760:5519":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:8779:2458":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:4585:4367":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:44619:5382":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:46039:5405":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:40148:2764":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:5372:2463":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:637:5511":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:8444:5333":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:6819:17285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:9629:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:12044:1705":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:7437:28912":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10524:5529":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:9635:2444":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11359:5582":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:4835:4374":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:7367:28225":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:4860:16159":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:1855:2796":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:5403:3342":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12945:3821":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14346:4219":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11111:3513":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13286:3875":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:12021:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:8272:6393":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:3826:5540":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:1507:13499":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"9:486:17882":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:6204:4473":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:2968:30876":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:30372:70":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:14269:4194":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:21905:5227":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:40305:5282":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:9207:3211":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:8321:6423":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:7690:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11151:3516":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10197:3398":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:5866:4419":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4738:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11272:3531":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:1796:5520":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:555:12611":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"14:0:2276":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:1882:4906":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:7597:32981":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7284:5319":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:7102:18905":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:21251:6518":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"11:1635:2977":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"14:165:17971":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:46283:5417":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:2574:4312":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:2955:11879":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:43373:5340":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:3960:3000":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:39439:5268":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:7610:16352":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5140:16190":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12698:3767":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:2864:4324":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:46945:5446":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:6086:16865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:3256:266":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:39385:228":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7544:4716":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:40524:5177":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:7286:1842":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:8154:4784":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:21159:6511":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5941:16812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13792:4060":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:1821:5522":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"11:822:4886":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5123:16188":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:2933:18037":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:6569:4335":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:42941:2450":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:39341:227":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:42988:5337":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:10461:4899":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:12032:699":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:3724:5539":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:580:12615":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:9711:32992":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:7886:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:2373:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:45937:5401":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:3802:2796":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:3925:6363":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10714:3458":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:1537:13503":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:41608:5317":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:6682:12485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:1758:5518":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:3474:2431":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:6711:17281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:5572:3000":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:7884:18909":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:2345:6303":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4830:16155":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6844:4589":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:5982:4435":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:10289:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:6889:17288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13071:3838":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13897:4085":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11048:3505":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:44235:5370":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:47988:5491":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:44278:2495":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:41872:4881":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:9660:32988":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:6531:4533":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:40162:2766":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4535:16126":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:47959:5488":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12225:3669":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:7223:2794":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:22283:5233":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:690:3192":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:11941:5217":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9521:3353":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"14:7:4873":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:44081:5366":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:122:2972":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:40494:5175":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5992:16859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:5322:4384":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9242:3212":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:6275:29150":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:5560:6452":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:1650:13513":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:40510:3180":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:6718:6423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:2907:4326":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:2074:4892":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:39281:225":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:680:4899":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13739:4048":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7342:32984":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:9823:18979":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:507:12606":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:1691:13517":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6666:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:1072:32918":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:4148:6390":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:542:12609":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:536:4283":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11371:25501":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:10748:5208":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:32158:2648":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:40121:2478":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2805:259":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:7543:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:1538:1842":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:5769:5566":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:2563:269":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6041:18900":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6485:4330":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:5384:5555":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11124:3514":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:1697:13518":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"11:483:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4841:16156":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:2510:6319":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:14514:4261":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:7318:3065":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:8895:6473":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"11:324:32904":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:45915:5400":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13973:4102":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:14024:4115":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:43750:2491":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:21460:6507":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:6332:4327":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12237:3672":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:30350:2789":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:11302:5726":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:41821:217":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:2380:4304":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:43768:2490":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:6818:4588":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:12027:1543":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:4364:16109":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:8167:4786":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:14522:4264":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:12041:1648":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10126:3390":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:12159:2480":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6545:4535":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:42676:29164":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:8969:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:9639:218":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:6764:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:44682:5388":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:8228:6357":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:10292:3356":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:6972:5993":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11281:3532":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:1604:13510":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:5997:12204":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:42236:89":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:10772:5718":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:46821:5444":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:2085:4894":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:7645:16357":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:3065:3246":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11886:3595":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:40688:5180":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:652:3159":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6361:4514":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8265:5541":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:12015:2468":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:40382:5291":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:3240:4906":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:14499:4260":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:3666:1842":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:10698:3456":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:40664:5302":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:1475:4885":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:6269:5174":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:2810:4322":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"0:73:1791":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"2:7998:6252":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:9631:2437":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:6529:5570":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:1528:13502":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:30356:5258":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13966:4101":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:4729:6379":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:44377:11998":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8191:5302":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:3053:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:3161:28691":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:2133:2994":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:44401:5853":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"0:18:1796":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"2:2888:6500":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11573:3559":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:2722:4318":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:46353:5420":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40101:2770":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:867:4884":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:1494:4882":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13101:3844":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:3267:11686":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:2579:3058":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:2450:4307":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:298:32910":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:7527:5730":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14282:4200":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:44369:11997":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:40136:2763":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14355:4221":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:6419:5569":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:5928:16855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:44052:5358":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13135:3857":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:4774:4372":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"18:727:3201":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:918:4883":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:6243:4495":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7436:4439":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:2284:18010":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6901:4337":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12007:3628":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:6135:3052":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:9972:3378":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:6318:4510":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:2845:2501":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:5557:6451":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11608:5583":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:6415:5303":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:10945:5558":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11490:3555":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12062:3636":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:22872:201":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:1591:13508":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6934:17292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8964:5684":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"18:491:3158":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4488:16120":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:44258:2494":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:40888:5303":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:43544:5352":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"11:1145:4898":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:5435:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:527:12607":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:4027:6370":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:12039:1646":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:40061:28892":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11617:3562":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10278:3405":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13758:4049":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"11:344:32915":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"11:868:4891":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:2526:4310":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:4331":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:15:1794":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:41832:204":{"crate_id":2,"path":["strsim","HammingResult","Ok"],"kind":"variant"},"17:11098:3512":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2937:4644":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:9187:28272":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:10440:3419":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:1484:4900":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12473:3732":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1682:13516":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5033:16179":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10227:3402":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"0:43:1849":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"2:39633:26916":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6513:4525":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:10568:5205":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:45854:5398":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:12043:854":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10936:4962":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:32151:5260":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:7513:4714":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:10762:5209":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:8857:1842":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:7834:5594":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:44146:5368":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4764:16147":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13554:3990":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:49979:6522":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:43616:1789":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:12876:5225":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:7621:18907":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:96:22924":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9762:32994":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:707:2460":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:9085:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:1838:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:1773:5016":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10112:3388":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13575:3998":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:2862:6501":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:14308:4209":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:47695:5482":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4372:5543":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10186:3396":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14296:4206":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:2696:4317":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:35:2795":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4939:1103":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:9599:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:11601:5583":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:8181:4348":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:8848:18963":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:2788:249":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:6872:1852":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9531:32991":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10430:3417":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:7252:2798":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"9:450:17883":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12086:3640":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:1496:13497":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8467:5669":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4776:16148":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:46329:5419":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10575:3438":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13989:4104":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:784:2984":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5023:16178":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:42457:2445":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9051:18946":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"0:0:2155":{"crate_id":0,"path":["strsim"],"kind":"module"},"17:14420:4240":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:4523:16124":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:21195:6513":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"5:7232:1842":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:7534:4342":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11951:3613":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:43534:5351":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:43499:5283":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:44627:5384":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:23037:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:8283:5653":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2682:2434":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:9086:3343":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6929:4597":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2916:11873":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6600:18902":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:357:2973":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:41744:4881":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:357:5507":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:1965:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12876:3807":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8277:6394":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6415:4520":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:41455:5192":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:903:2796":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:21398:6319":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:4449:16116":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:48025:5494":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:3022:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:3273:11685":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:621:2430":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6691:17279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13876:4080":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:21808:6512":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:6781:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:7639:16356":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:14013:4111":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:5574:4328":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:44657:5387":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:47819:5484":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13890:4083":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:1063:4894":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:9883:2449":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4496:16121":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:9137:3209":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:8205:18910":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:1846:1842":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:39407:2418":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:1550:4903":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:42732:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4893:16163":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:574:3159":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:42436:2436":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:2337:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:30920:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:41802:5321":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:10749:25566":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:12045:1252":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:3185:30854":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:113:22925":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:3600:4354":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:5867:16849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:5489:5558":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:2317:4881":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"2:9888:2451":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:1562:4902":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:2909:4639":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"18:766:22935":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6467:4524":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:41663:5195":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:4299:5154":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:4558:6413":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12790:3779":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:44381:12002":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:6599:3076":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"11:2165:2829":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:7704:6244":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13802:4061":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13676:4037":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:11970:5733":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:5727:4401":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:12028:1630":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:2339:4297":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:6059:16862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:9963:5314":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:6944:32982":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:5328:2981":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12043:3635":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"12:0:2275":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:2947:11877":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:5376:2464":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"14:202:11673":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1521:13501":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:4473:16118":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:9455:32995":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:2615:5527":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:1764:29138":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:4458:6395":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7660:4722":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:859:1842":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:4079:11636":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:14100:4137":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"11:1850:2798":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:4806:4373":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11344:5580":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11306:3535":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11316:3537":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"11:2351:1842":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"11:1051:17965":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:4889:4376":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:14324:4213":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3273:5533":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:3318:6344":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:736:22934":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4375:16110":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:6228:16024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11473:3310":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:11329:5579":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13422:3884":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:2832:4323":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:0:2270":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10087:5702":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:1534:4881":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"10:0:2273":{"crate_id":10,"path":["adler"],"kind":"module"},"1:11167:5853":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:10059:3384":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:3671:2981":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:755:3207":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:660:3183":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:5363:4385":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:12219:2459":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:7613:4720":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:2178:3231":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:7914:5600":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:2848:2730":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:3583:4881":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:46231:5415":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:40341:5286":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:5885:16850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:515:3156":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:400:3218":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:1466:4884":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12750:3774":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:42966:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2548:4311":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:6059:3066":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:32140:5259":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:2363:6309":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:6827:2804":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:10903:3495":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:11086:3511":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:5628:5559":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:40354:5287":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:7388:17665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:9846:153":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"6:1710:13519":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:772:4885":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:5612:4333":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:12778:3778":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10507:3433":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:119:12284":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:12645:3758":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12685:3766":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:8299:5655":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10410:3415":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:6456:4523":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7090:4623":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:14110:4140":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:10734:2490":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:9266:5521":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:7406:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3056:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:10087:3042":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:5634:2802":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:2964:30875":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:44245:5374":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:2198:3022":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:9155:5698":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:2881:4325":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:1734:13521":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"9:0:2272":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:7604:16351":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:9138:5697":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:1545:2796":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:43910:2483":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:9372:3344":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:2596:4313":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:3049:18039":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:12040:1647":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:1013:2981":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:8953:18966":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:4968:16171":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:4179:5152":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:12554:3744":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:40534:5299":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:44373:11999":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:9641:2442":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6268:32985":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:3655:3251":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:1718:13520":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:8765:18960":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9650:3356":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10366:3411":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:945:4890":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:8794:18961":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13546:3987":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:10279:6319":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:40312:5283":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6386:4517":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:2245:32003":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:4833:30530":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4529:16125":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:5297:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:14145:4148":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4824:16154":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9985:3380":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:7616:16353":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:6222:16899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:9471:3085":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"11:703:4882":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"7:0:1695":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11226:3528":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:7371:17664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:4783:16149":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"10:36:32902":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"15:327:17995":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"14:187:17978":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13778:4057":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:5861:2798":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:588:12616":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:21480:5229":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6401:4329":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:2800:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"11:2394:2796":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:3050:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:6169:16872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:6468:2798":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11358:19094":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:2941:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:40401:5163":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:12042:1645":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:44173:5221":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:45885:5399":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:14118:4141":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8223:5648":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:13949:4094":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"15:394:18001":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:44067:5363":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4755:16146":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:43200:5202":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:11904:5214":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:2347:6304":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:46739:5443":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:9959:3377":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:40462:5173":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:8097:4778":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:2904:11872":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:41752:4899":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:5897:16852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:207:2980":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:2796:2726":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:10949:3499":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:45640:5389":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:10089:5701":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:21564:6506":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:4787:3062":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:5229:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:2467:6059":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:11964:5218":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7694:4345":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:6798:2802":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:47507:5480":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:39446:5269":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:2461:32903":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:7995:2456":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:6792:4587":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:569:12613":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:7630:6319":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:3915:4359":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:9624:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:10456:3424":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:7567:3081":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12531:3741":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:42957:2452":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:41760:1842":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:10814:5537":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:4004:2798":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:8542:5674":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:1664:13514":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:14033:4118":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5816:4411":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"18:521:22936":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:609:3176":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:42195:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:7272:30850":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12373:3694":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:10784:5596":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:11159:23879":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:22307:5238":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:2547:79":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"11:796:2796":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:4032:5149":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:21006:29326":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"9:237:5333":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12983:3826":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:7462:4702":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:13100:2793":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:10486:2489":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10520:3434":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:5419:3343":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4388:16111":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:6499:4347":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6156:4466":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:5735:5562":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:6658:12652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:9005:5691":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:2260:4892":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:4988:3000":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"11:1869:4904":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:11133:5677":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4549:16128":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:32252:2733":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:1505:4883":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:14163:4151":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:9637:2445":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:14090:4134":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:10788:19068":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:22267:29154":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:3565:3238":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:563:12612":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:6893:4595":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:43590:2481":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:6120:16869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:7633:16355":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:2556:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:6885:3078":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:3338:11640":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:531:3163":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:7856:5597":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:2037:4985":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:5052:16181":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4870:16160":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:45992:5404":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:23517:248":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:699:3193":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:9390:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"0:19:1799":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"6:475:12601":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:23004:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:9426:2435":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"15:288:17990":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"9:393:17884":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:21157:6319":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:44420:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:5712:4398":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:47999:5492":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5049:4381":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11201:3519":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:5152:16192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:8039:29410":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:22198:5231":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:21209:11891":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:8670:6436":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13693:4039":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:4118:24190":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:21328:6514":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:8160:6318":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:42117:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:14434:4242":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:4373:2648":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13174:3860":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7708:4346":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:30089:6360":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:21813:6520":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:12036:804":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:13981:4103":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"0:42:1847":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"1:11465:5538":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:48093:5498":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:12003:23875":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:22458:6361":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:43796:2484":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"0:51:1859":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"2:43181:5339":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:7466:5011":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10097:3387":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:654:12664":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12252:3678":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8211:2482":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:9466:5594":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"18:538:3166":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:39363:226":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:46185:5414":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:10832:23877":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:3089:2792":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:4557:4366":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:2359:4303":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:12025:346":{"crate_id":1,"path":["std","array"],"kind":"primitive"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}