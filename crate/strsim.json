{"root":"0:0:2025","crate_version":"0.10.0","includes_private":false,"index":{"2:2549:702":{"id":"2:2549:702","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1799":{"id":"0:66:1799","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[407,0],"end":[412,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12268:30470":{"id":"2:12268:30470","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11813:127","`FromStr`":"2:11812:2339"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11812:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11812:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12275:30471":{"id":"2:12275:30471","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4542:30471"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43931:2336","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1688":{"id":"0:25:1688","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[65,0],"end":[131,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2317:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12256:26026":{"id":"2:12256:26026","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:30450":{"id":"2:12171:30450","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12036:1420","str::slice_mut_unchecked":"2:12172:30451","crate::ops::Index":"2:2984:2653"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2704:228-0:72:1657":{"id":"a:2:2704:228-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2704:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12243:30462":{"id":"2:12243:30462","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2256-0:72:1657":{"id":"b:2:2256-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2258:22672"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12270:24331":{"id":"2:12270:24331","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12183:26023":{"id":"2:12183:26023","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:26007":{"id":"2:12174:26007","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12173:26006"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12221:30455":{"id":"2:12221:30455","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12161:316":{"id":"2:12161:316","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12162:315","`u8`":"1:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12271:27125":{"id":"2:12271:27125","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39702:27134","Self::is_ascii":"2:12270:24331"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39702:27134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12272:24335":{"id":"2:12272:24335","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1663":{"id":"0:18:1663","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[30,0],"end":[30,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12178:28174":{"id":"2:12178:28174","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12179:28152"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43906:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2697:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12175:1685":{"id":"2:12175:1685","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43602:1656","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12277:6074":{"id":"2:12277:6074","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4543:6074"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43940:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2744:2360-0:72:1657":{"id":"a:2:2744:2360-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2744:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2562:1500":{"id":"2:2562:1500","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12212:30454":{"id":"2:12212:30454","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11852:2324","str::split":"2:12200:24383","prim@char":"1:12030:421","str::split_terminator":"2:12209:30453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43700:2351","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2561:128":{"id":"2:2561:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32173:6286","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:72:1657":{"id":"0:72:1657","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:73:1658"],"impls":["a:2:2704:228-0:72:1657","a:2:8388:6269-0:72:1657","a:2:2687:220-0:72:1657","a:2:2744:2360-0:72:1657","a:2:8387:6082-0:72:1657","b:2:2256-0:72:1657","b:2:2253-0:72:1657","b:2:2558-0:72:1657","b:2:2613-0:72:1657","b:2:2543-0:72:1657","b:2:2547-0:72:1657","b:2:3323-0:72:1657","b:2:2553-0:72:1657","b:5:5771-0:72:1657","0:75","0:17","0:77","0:15","0:78"]}}},"0:0:2025":{"id":"0:0:2025","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1005,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1657","0:18:1663","0:19:1666","0:24:1684","0:25:1688","0:42:1715","0:43:1717","0:51:1727","0:52:1732","0:59:1742","0:60:1751","0:61:1757","0:63:1771","0:65:1789","0:66:1799","0:68:1810"],"is_stripped":false}}},"2:12196:2529":{"id":"2:12196:2529","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41673:179","prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:31130":{"id":"5:5525:31130","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12247:30465":{"id":"2:12247:30465","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11877:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:31127","5:5511:11689","5:5514:31128","5:5517:31129","5:5525:31130","5:5526:31131","5:5527:6181","5:5528:24333","5:5529:24334"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:60:1751":{"id":"0:60:1751","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8388:6269-0:72:1657":{"id":"a:2:8388:6269-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8388:6269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12233:30458":{"id":"2:12233:30458","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11852:2324","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::rmatch_indices":"2:12236:30459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43782:2343","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:30446":{"id":"2:12153:30446","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1658":{"id":"0:73:1658","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[15,4],"end":[15,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12186:26024":{"id":"2:12186:26024","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:6181":{"id":"5:5527:6181","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9281:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:19:1666":{"id":"0:19:1666","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[34,0],"end":[47,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2317:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2615:2519":{"id":"2:2615:2519","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3389:4863","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:25982":{"id":"2:12165:25982","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1732":{"id":"0:52:1732","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[200,0],"end":[226,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2317:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2546:2523":{"id":"2:2546:2523","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2520:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:24333":{"id":"5:5528:24333","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12273:24336"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12206:26017":{"id":"2:12206:26017","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11852:2324","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::split":"2:12200:24383"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43650:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:4849":{"id":"2:12177:4849","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43618:2331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:24337":{"id":"2:12274:24337","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:31131":{"id":"5:5526:31131","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2321","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2321","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2317:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:618"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12253:24555":{"id":"2:12253:24555","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:618":{"id":"0:79:618","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:30448":{"id":"2:12156:30448","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12154:30447"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12262:30468":{"id":"2:12262:30468","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:28152":{"id":"2:12179:28152","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12178:28174"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43915:2326","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2258:22672":{"id":"2:2258:22672","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[28,0],"end":[28,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","cause","provide","description"],"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12246:30464":{"id":"2:12246:30464","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12218:26021":{"id":"2:12218:26021","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12030:421","str::splitn":"2:12215:26019","self::pattern":"2:11852:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43754:2349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:1757":{"id":"0:61:1757","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[267,0],"end":[311,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:676":{"id":"0:16:676","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[19,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9256:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42745:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12180:24384":{"id":"2:12180:24384","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43886:2341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1789":{"id":"0:65:1789","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[390,0],"end":[393,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:30449":{"id":"2:12160:30449","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:72:1657":{"id":"b:2:2253-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:2235"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12200:24383":{"id":"2:12200:24383","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11852:2324","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::split_whitespace":"2:12178:28174","str::rsplit":"2:12206:26017"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43632:2348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12152:1752":{"id":"2:12152:1752","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12245:30463":{"id":"2:12245:30463","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3323-0:72:1657":{"id":"b:2:3323-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3321:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3325:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5514:31128":{"id":"5:5514:31128","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12241:30461":{"id":"2:12241:30461","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:31129":{"id":"5:5517:31129","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:676":{"id":"0:76:676","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9256:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9245:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2687:220-0:72:1657":{"id":"a:2:2687:220-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2687:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[18,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9286:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12151:823":{"id":"2:12151:823","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12030:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:25984":{"id":"2:12169:25984","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150":{"id":"2:12150","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12151:823","2:12152:1752","2:12153:30446","2:12154:30447","2:12156:30448","2:12159:24977","2:12160:30449","2:12161:316","2:12162:315","2:12163:1780","2:12165:25982","2:12167:25983","2:12169:25984","2:12171:30450","2:12172:30451","2:12173:26006","2:12174:26007","2:12175:1685","2:12176:5204","2:12177:4849","2:12178:28174","2:12179:28152","2:12180:24384","2:12181:30452","2:12182:28166","2:12183:26023","2:12186:26024","2:12189:26025","2:12192:2564","2:12196:2529","2:12200:24383","2:12203:26015","2:12206:26017","2:12209:30453","2:12212:30454","2:12215:26019","2:12218:26021","2:12221:30455","2:12224:30456","2:12227:1699","2:12230:30457","2:12233:30458","2:12236:30459","2:12239:30460","2:12241:30461","2:12243:30462","2:12245:30463","2:12246:30464","2:12247:30465","2:12250:30466","2:12253:24555","2:12256:26026","2:12259:30467","2:12262:30468","2:12265:30469","2:12268:30470","2:12270:24331","2:12271:27125","2:12272:24335","2:12273:24336","2:12274:24337","2:12275:30471","2:12277:6074","2:12278:30472"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12230:30457":{"id":"2:12230:30457","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11852:2324","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::matches":"2:12227:1699"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43854:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2543-0:72:1657":{"id":"b:2:2543-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:2523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2255:2235":{"id":"2:2255:2235","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2553-0:72:1657":{"id":"b:2:2553-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2523:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2558-0:72:1657":{"id":"b:2:2558-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2517:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2561:128","2:2562:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5529:24334":{"id":"5:5529:24334","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12274:24337"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5773:1478":{"id":"5:5773:1478","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12227:1699":{"id":"2:12227:1699","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11852:2324","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::rmatches":"2:12230:30457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43836:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:26015":{"id":"2:12203:26015","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11668:2327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2557:1501":{"id":"2:2557:1501","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41815:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1742":{"id":"0:59:1742","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[236,0],"end":[238,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:26025":{"id":"2:12189:26025","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12209:30453":{"id":"2:12209:30453","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11852:2324","str::split":"2:12200:24383","prim@char":"1:12030:421","`DoubleEndedIterator`":"2:7310:121","str::rsplit_terminator":"2:12212:30454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43682:2352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12224:30456":{"id":"2:12224:30456","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12239:30460":{"id":"2:12239:30460","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2613-0:72:1657":{"id":"b:2:2613-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2606:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3377:11508","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2615:2519"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"2:12250:30466":{"id":"2:12250:30466","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12273:24336":{"id":"2:12273:24336","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1771":{"id":"0:63:1771","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[327,0],"end":[380,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2322:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9497:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:315":{"id":"2:12162:315","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12047:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1727":{"id":"0:51:1727","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[188,0],"end":[190,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.911 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12154:30447":{"id":"2:12154:30447","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:31127":{"id":"5:5510:31127","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2321","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2321","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12265:30469":{"id":"2:12265:30469","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12181:30452":{"id":"2:12181:30452","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43896:2342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:72:1657":{"id":"b:2:2547-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2520:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12236:30459":{"id":"2:12236:30459","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11852:2324","`DoubleEndedIterator`":"2:7310:121","prim@char":"1:12030:421","str::match_indices":"2:12233:30458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43800:2344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:26006":{"id":"2:12173:26006","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12174:26007"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5771-0:72:1657":{"id":"b:5:5771-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9286:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2694:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5769:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5773:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12163:1780":{"id":"2:12163:1780","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41673:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:5204":{"id":"2:12176:5204","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12030:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43608:2332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:25983":{"id":"2:12167:25983","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9946:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12259:30467":{"id":"2:12259:30467","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11872:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8387:6082-0:72:1657":{"id":"a:2:8387:6082-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8387:6082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:43:1717":{"id":"0:43:1717","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[158,0],"end":[178,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7272:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2317:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12215:26019":{"id":"2:12215:26019","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12030:421","self::pattern":"2:11852:2324","str::rsplitn":"2:12218:26021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43736:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1684":{"id":"0:24:1684","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:11689":{"id":"5:5511:11689","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1810":{"id":"0:68:1810","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[433,0],"end":[478,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:24977":{"id":"2:12159:24977","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11412:2329"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12278:30472":{"id":"2:12278:30472","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4540:30472"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43949:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:128":{"id":"2:2556:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2527:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12192:2564":{"id":"2:12192:2564","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41673:179","prim@char":"1:12030:421","self::pattern":"2:11852:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41671:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3325:1514":{"id":"2:3325:1514","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39494:4982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1715":{"id":"0:42:1715","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:30451":{"id":"2:12172:30451","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12036:1420","crate::ops::IndexMut":"2:2988:2654","str::slice_unchecked":"2:12171:30450"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:28166":{"id":"2:12182:28166","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43924:2325","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:5767:16587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11098:3365":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:43896:2342":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:45937:5241":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4420:15880":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10051:3235":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:41671:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11767:3437":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:6838:11671":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:3735:4826":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:7474:4852":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10671:18802":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:22560:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:11155:5525":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5793:16589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:7523:16112":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:10937:4923":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:8211:2331":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:8043:4617":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:6541:6300":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:20743:28604":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:11020:3356":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2914:6089":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:44375:11822":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:1702:6219":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:1184:3075":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:40995:4898":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"7:79:17614":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:7546:16115":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6834:17029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:7736:5436":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:11473:5381":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:2373:4146":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:8809:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:44371:11821":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:6724:4416":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:44609:5223":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:47677:5321":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12526:3600":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"19:0:1043":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7313:32263":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:10883:3343":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:42943:2310":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:1590:13328":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:4742:6215":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:9561:3203":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13332:3746":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:9296:3066":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:2606:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:13914:3961":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:1709:13339":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:10101:5549":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:4704:15908":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:43576:2340":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:10444:3278":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:2781:4163":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:356:5346":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:6955:2870":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10323:3259":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:42690:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:12354:3574":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:2783:4479":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"11:644:4741":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:48075:5337":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11144:3373":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:12522:4937":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11832:3455":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:2803:4164":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10123:3224":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:9153:5544":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:9614:32268":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4787:15918":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:3581:4723":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4475:15887":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2637:4157":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4938:15935":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:11352:5425":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:14044:3994":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"15:0:2144":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:6439:2662":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11979:3485":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12952:3680":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:8389:4910":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:46265:5256":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:11668:2327":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"0:63:1771":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"2:2929:2362":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:2209:5365":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10339:3265":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:4315:5386":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:9777:18715":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:6744:17024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:21919:4943":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13368:3777":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10417:3276":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6303:4169":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"0:24:1684":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"17:11199:3380":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:1500:13318":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:2353:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:41798:11775":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:4117:4866":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:6239:32262":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:40474:5132":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:14380:4103":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8878:5404":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:39329:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:39515:4984":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:8979:5531":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:0:828":{"crate_id":6,"path":["libc"],"kind":"module"},"17:2133:3080":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:1630:592":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7568:32258":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:44351:11815":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:46567:5264":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:11034:3357":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"11:805:6084":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:9806:18716":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:8086:4621":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:3295:4195":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:12365:3577":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10581:3297":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11428:3400":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:727:3050":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"0:0:2025":{"crate_id":0,"path":["strsim"],"kind":"module"},"17:10786:3336":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:30194:6193":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:21284:6339":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:4368:15874":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:7731:5357":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:2461:5797":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:4900:4220":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6484:4366":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12053:3498":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:40313:6122":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"0:73:1658":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"17:9716:32273":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:11287:2941":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:4046:6204":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5972:4128":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13991:3983":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5955:16600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:1587:4748":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:22527:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:6145:2899":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11623:3414":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:6820:17028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:20879:6344":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:4002:2662":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:2465:4150":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:5475:2848":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:40446:5131":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10266:3253":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9442:32264":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:5779:5410":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:6250:4349":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:5737:18634":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:9661:2885":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4800:15920":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"0:61:1757":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"2:44548:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:20724:28601":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:35:2659":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:8138:4627":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:43736:2350":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:7718:2315":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"11:1538:4744":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:2689:4159":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:1506:13319":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"11:1027:17703":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:7575:16119":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:2959:2583":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:30441:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:4267:4869":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:6798:2668":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:8990:5534":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"0:59:1742":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"16:4506:4208":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:4637:25061":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:629:4818":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:43906:2328":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:42422:2296":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:21988:28790":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:7534:5576":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3739:5382":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:3386:5144":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10568:3295":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:41503:4902":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11164:3375":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:1041:4465":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6789:4429":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:12502:3599":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:1011:2823":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10038:3234":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13771:3925":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44383:11817":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"15:306:17729":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:14395:4104":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:45688:5231":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:2293:17748":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11852:3465":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"11:311:32181":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:2201:2288":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:9100:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:48060:5336":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:11813:2947":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"18:582:2276":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"7:32:17607":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:7281:2366":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12035:3497":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:4234:4723":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:41731:4723":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:3058:3095":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:1536:13323":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:8285:6226":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:638:5352":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:619:2294":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:43915:2326":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:4014:4865":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:881:4727":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:3777:4199":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:2830:4484":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:5535:4876":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:7191:1710":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:11337:5424":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:3669:2823":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:7852:5440":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:41747:1710":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:7245:1710":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:8997:18682":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12377:3579":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:26048:4854":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:3178:4746":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:43485:5123":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:8204:5142":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:7529:16113":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:7912:5445":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:2926:17774":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10066:3236":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:736:22663":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4949:15937":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13427:3829":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:7268:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4616:15901":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:43459:5186":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:8711:18696":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:47801:5323":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:10609:3300":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13847:3944":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4489:15889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:5444:5402":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:12033:1061":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:21625:4939":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:7762:28606":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:20927:28237":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:10968:24546":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:10175:3204":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:332:2813":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:39314:4977":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:5629:2913":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:699:3042":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"9:52:17639":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:7864:5442":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:40427:5128":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:41874:1710":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10943:5439":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:11557:4926":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:21048:6347":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:22167:4965":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:39228:11525":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:46289:5257":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:12001:6081":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:45867:5238":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:6872:4179":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:2901:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:5612:2666":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11354:3158":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:868:4726":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:822:2829":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:7753:4567":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:4506:15891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12424:3585":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2882:2909":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:44084:5206":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:44159:4933":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11250:3385":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:12653:2899":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:1821:2656":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:624:32279":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:3343:6177":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:3519:3087":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:8542:18683":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:4341:15873":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:40111:5113":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:47599:5320":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:2900:4168":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:44132:5207":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13803:3932":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8236:5495":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:5067:4225":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:261:2823":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:12048:1520":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:6788:2667":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:6067:16610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:695:4725":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8848:5526":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:4992:15942":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:1603:13330":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:21303:6154":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:3261:5375":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:10825:5380":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"14:40:3452":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:2663:4158":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:12053:1577":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:3145:11710":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:45796:5235":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:8632:18694":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:1545:13324":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13574:3881":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:481:2901":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:7584:4561":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:9487:2934":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:2825:4165":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5398:3191":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:2752:2593":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:2216:6135":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:1649:13333":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:3110:5369":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:13620:3890":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:5704:4244":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:521:22665":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:8864:5528":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:3441:4196":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:494:12424":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4833:15924":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:5590:4175":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:46991:5287":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5015:15944":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:12470:28721":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:44439:11831":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11924:3477":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:2514:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:2475:11536":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12539:3603":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10957:3351":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7407:4282":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:40200:2336":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:5100:4226":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:8659:18695":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:2164:3083":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11642:3417":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"0:25:1688":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"5:3171:4723":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:4768:391":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:6625:6256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:7857:5441":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:4329:2875":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:2815:11702":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:11520:3088":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:1761:615":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:14197:4055":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11568:18708":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:7799:4575":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12851:3666":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:7539:4186":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4543:15895":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13795:3930":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:6429:5413":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:44387:5697":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:42222:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:22080:28459":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:21749:6341":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:6306:6429":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:506:12426":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:4623:6201":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"11:836:4732":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11074:3088":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:11194:5419":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:21533:6353":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:48045:5335":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:20929:11720":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:12078:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:3183:22960":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:44363:11819":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:2594:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"10:0:2140":{"crate_id":10,"path":["adler"],"kind":"module"},"16:2497:4151":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:9032:5540":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:10351:3269":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:9571:32269":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:5429:5401":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:4396:4205":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4794:15919":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:4698:6255":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:5994:16604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:4984:15941":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:40728:5142":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:5622:2912":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11591:3378":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:3938:2848":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:13949:3972":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:7558:16117":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:14329:4092":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:46433:5261":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:11923:11498":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:929:6084":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10339:25138":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:7725:11675":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:21186:6342":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:2761:6334":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"11:1517:4743":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:4724:4214":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:8388:6269":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:14216:4061":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:6077:16611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:4495:6229":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:10529:3288":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4496:15890":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:541:12429":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:630:4723":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:43410:5180":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12769:3651":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11379:24321":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:10845:3341":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:7295:17403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"18:481:3006":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8910:6306":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:11877:2316":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:4393:2848":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:2569:2889":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:507:3008":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:7250:12382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13069:3703":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:5387:2848":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:32213:4974":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:1638:13332":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11371:3397":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:10094:4723":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:8152:4190":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12043:751":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:41657:4907":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:2962:30002":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:9503:141":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"6:4626:15902":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:4440:2512":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:7310:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1663:13334":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:2212:2871":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:4032:4203":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:4467:421":{"crate_id":2,"path":["core","char"],"kind":"module"},"1:8926:6305":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13830:3936":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:21101:6343":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:13905:3958":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:7887:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:7235:11676":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:12051:1519":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:47885:5325":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12618:3614":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:7656:5429":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7515:4557":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:4963:15939":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12174:3531":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:5807:4255":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:3186:3084":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:3970:6198":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7289:4502":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:113:22654":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:40558:4886":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:3524:6172":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:9282:5361":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:40148:2628":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12659:3620":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12994:3688":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:5900:16598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:10143:2348":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43590:2335":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:12041:650":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:41586:28465":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:1979:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:1631:13331":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:30385:2650":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:5651:4174":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:40977:2883":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"11:1611:2817":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7679:4188":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:2591:5367":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:4363:2850":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11272:3390":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:14417:4110":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5987:16603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2803:11701":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6036:16609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"14:202:11506":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4973:15940":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:43700:2351":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13964:3976":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:531:3012":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12605:3612":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:8942:6307":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:43498:5188":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11007:3355":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9118:3059":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:6809:6336":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:4567:6246":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:22004:4945":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:7763:4973":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:7412:4847":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:657:1710":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"13:110:32246":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:42261:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:40184:2338":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:43602:1656":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:2759:4162":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:43754:2349":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:11610:5428":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10080:3238":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"11:1826:2662":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:47923:5326":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:40226:2626":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:6637:2823":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:7636:6154":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:9027:5539":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:43836:2345":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:42181:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:4074:4741":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:7272:17401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:5673:18633":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11234:3383":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:40132:28446":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:8566:5522":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10161:3245":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:9850:18717":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11220:18828":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12982:3686":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:8008:6180":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7331:32260":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:946:4732":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:10161:5550":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:7278:17402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:1756:4857":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:12186:3534":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:9188:3061":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:40299:5121":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"11:2186:32196":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:11866:2319":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:44359:11820":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11498:3404":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4879:1013":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:46386:5260":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:12049:1521":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:8555:5521":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:7199:4842":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:9840:3216":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:10377:2350":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:4996:4223":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:2966:31398":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9016:3190":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:40517:4884":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:7211:2662":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:31017:2276":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:42300:4912":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8800:5523":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:7721:6087":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6775:17025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:42767:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11753:3436":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:6930:2866":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:40376:5123":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:12566:3608":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6573:13277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10471:3280":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:11669:3418":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:1073:4740":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4818:15922":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:6470:4189":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7739:4176":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4729:15911":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:45622:5228":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:4738:6212":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:0:2137":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:2194:32197":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:9296:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:1565:2660":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:8841:18700":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:44067:5205":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9318:3192":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"14:215:4719":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5882:16596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:2269:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2694:2359":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:22146:28787":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:14015:3987":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:10405:4920":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:6057:17747":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:96:22653":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11178:3376":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:8068:4619":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:1426:4741":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12065:3501":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12815:3661":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:660:3032":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6531:2810":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:13591:3882":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:5689:4241":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:9020:5538":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12631:3616":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12792:3660":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6347:18637":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:9744:2889":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:4:1026":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:41520:4904":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:9706:3206":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13140:3714":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:46311:5258":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:42745:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:46645:5280":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:7743:6111":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:20726:28603":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:2747:2591":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"0:19:1666":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"17:13882:3953":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:11726:3428":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2795:11700":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:11852:2324":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:4374:15875":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:149:2808":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:5752:5409":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13179:3724":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:2527:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:2317:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"18:515:3005":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:12646:3619":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:0:500":{"crate_id":2,"path":["core"],"kind":"module"},"6:4556:15897":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6688:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:1595:13329":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11416:3399":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"11:1103:4739":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4524:15893":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4456:15884":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:4740:6214":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:42727:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:719:3047":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:40219:2625":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:782:2826":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:46957:5286":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:5805:16591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"11:1012:4736":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4842:15925":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:2791:6335":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:43632:2348":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:1570:4745":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:40539:5137":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11696:3424":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:6805:17027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:13303:3726":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7928:4824":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4328:15872":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:2166:11720":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:3300:5377":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4770:15916":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13029:3700":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:2820:11703":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10313:3257":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:10555:3293":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:4054:6206":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:42025:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:11603:25259":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:4868:4219":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:12031:1539":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2322:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:1492:4724":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:9939:3228":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4723:15910":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:6193:5412":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:5824:2914":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:8176:18646":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:1690:13337":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40120:2629":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:2699:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:6136:15786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6008:16605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:44651:4750":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:21200:4941":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6289:4351":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:9744:32272":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4315:15871":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8389:6265":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:7484:4555":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:47941:5327":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9604:3204":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6915:32257":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:2704:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:10978:11496":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5025:15945":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:4701:6228":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:41609:5157":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:2984:2653":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"14:187:17716":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6323:4354":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:39508:4523":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:2141:4827":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:8949:18704":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:3580:4197":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:14282:4078":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:4384:2876":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12552:3309":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11310:5572":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:42964:5172":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:5379:5395":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"9:393:17622":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:12435:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:1576:4746":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5818:16592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:7418:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"11:844:4733":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:42935:5168":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4929:15934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:9545:2309":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11905:3472":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:9294:2306":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3674:6192":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:9054:24552":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:9274:2331":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5074:15950":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12004:3488":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:2443:4149":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:41622:5384":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:837:4723":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:11812:2339":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:4190:2509":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:9399:3200":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12936:3679":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:40233:2627":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:4819:6211":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:44664:5227":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:13707:3905":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:8356:5388":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:919:4725":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:5775:4249":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"14:165:17709":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:10520:3287":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:5954:2855":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:46881:5284":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"11:1858:4748":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:45974:5243":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:1527:13322":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:6296:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:8210:4523":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2402:2152":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:1561:2662":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:2842:11705":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:10186:2327":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:538:3015":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:8771:18698":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10486:3282":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:11591:5573":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:2932:2363":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:12040:648":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:40405:5126":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:8230:5493":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4913:6254":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"9:330:17676":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:10783:5565":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"11:365:2815":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:10529:5372":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:43428:5183":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:40346:2877":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:44231:5213":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:5080:5394":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"15:288:17728":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:531:2902":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:10834:24972":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:11167:24974":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:4965:4222":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:43520:5190":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:22791:4969":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:12050:1522":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:9288:2297":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"11:2180:32192":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:41739:4741":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"18:614:32278":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7012:4456":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3934:6197":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:7523:3072":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:10263:4918":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:2925:2361":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4606:15900":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:41566:28811":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2777:11698":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:10419:4921":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:915:4724":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:2523:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:39345:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11888:3470":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:14227:4062":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:7517:16111":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8818:5524":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4535:15894":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2520:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:14037:3992":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:9978:5154":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"11:736:4727":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:7255:5159":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6128:4307":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:4026:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10097:3241":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:7637:5348":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:7693:4178":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:22063:4952":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:14403:4107":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5836:16594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:5051:15947":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:502:2840":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:30513:28453":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:11118:3370":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:11992:3487":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:7290:1710":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11542:3406":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:11367:5427":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"0:72:1657":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"2:22179:6194":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:20696:28476":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:10575:2936":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:7494:4556":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:7593:2932":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6658:4402":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:8141:3052":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:47981:5331":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:14007:3986":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13981:3980":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13043:3701":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:9485:32270":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:7463:4552":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:8856:4723":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:2105:18760":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:46167:5253":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:43167:5178":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:14301:4083":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:8806:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:10945:3350":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:6079:2848":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:1918:4860":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:7463:4851":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11454:3401":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:2756:6332":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"11:399:32191":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5382:3190":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13456:3840":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:5558:6284":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13923:3962":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:9256:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:2741:2589":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:6791:28697":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12318:3565":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:20683:2276":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:4698:4213":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"11:723:4726":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:44427:5218":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:207:2821":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:504:3071":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:9105:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:4620:4212":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:2541:4153":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:21180:6340":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:2846:11706":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12921:3675":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:9875:3219":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:5994:18635":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:643:6076":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:40271:5120":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10981:3353":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:3200:11470":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:40742:4890":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:3219:5372":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:4796:2910":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6502:4374":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:11617:4930":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:5553:4170":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:3984:6199":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:12037:1504":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:22428:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13719:3908":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6986:4455":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:3800:2660":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:12690:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:6018:18636":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:1501:17704":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:3841:5383":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:22028:4950":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:11467:3403":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:11141:5524":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:2687:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:7592:18643":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5829:16593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:6987:3052":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:45666:5230":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:530:4126":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:5301:4227":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:2966:11472":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:10470:2935":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:6356:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:1845:4746":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12346:3572":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:2854:11708":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:8296:5500":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:860:1710":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:47347:5318":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12840:3665":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:43419:5181":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:7609:17591":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:40418:5127":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:952:4733":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:9926:3226":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:11535:5383":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"9:177:17689":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:5970:2912":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:5959:4278":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:42702:4594":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:9936:6154":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:5393:5399":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13566:3880":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:5994:4880":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:10986:5526":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:1482:4742":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:9966:3204":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10390:3274":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:43438:5184":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6692:18639":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:2917:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:7511:16110":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:5561:6285":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:7128:24322":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"14:0:2143":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:5126:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:2250:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:7261:4843":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:2766:4478":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"9:0:2139":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:9245:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:7552:16116":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:6160:4312":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:8982:29219":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:6540:4177":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:276:2321":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:14315:4085":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:12044:752":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:2207:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:21972:4944":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"11:1831:2660":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:44558:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7025:4459":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:44210:11505":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:44196:5208":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:532:12428":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6886:4180":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:4650:15904":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:7337:2288":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:8330:5504":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12479:3594":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:9153:3060":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10458:3279":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:7047:2915":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:579:12435":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"0:52:1732":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"2:3237:11471":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:1569:13326":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:526:12427":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12864:3668":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:4753:4215":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13557:3879":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13155:3378":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:7682:2936":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:11398:4924":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:1696:13338":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:1717:13340":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:9655:3205":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:562:12432":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"11:749:2662":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6850:4434":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:41986:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:1064:4736":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:42429:2297":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:14026:3991":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:40396:5125":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40526:4885":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:3651:1710":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:2874:4167":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:1976:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6015:16606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:4985:2848":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1557:13325":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13083:3706":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:968:4465":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:41537:6191":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5612:4231":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:7038:4462":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:5080:15951":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:2589:4155":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:9952:3181":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13870:3947":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:3183:30061":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:9866:3217":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:21637:28479":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:3330:2660":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:2517:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:4164:2848":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6456:4172":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:45642:5229":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:9899:3224":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:5593:4878":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13448:3839":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:40105:2337":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:12448:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:5775:16588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12579:3609":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:43886:2341":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:4764:15915":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2611:4156":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:44367:11823":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:45766:5234":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12966:3682":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:21528:6345":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:22626:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:6485:2823":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:10322:5402":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:9540:2308":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:21015:6352":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:9290:2296":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:9913:3225":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5940:4271":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:8217:2348":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4862:15928":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:5044:15946":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6648:13462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2314:4137":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:49943:6355":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:3460:5379":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:8173:6153":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:47961:5329":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:46927:5285":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:500:12425":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:48007:5333":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:6598:17017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:2850:11707":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:46464:5262":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:5882:4265":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:21310:6348":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:43854:2346":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:2474:6154":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:46067:5250":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10013:3232":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:8814:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:10391:2349":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:8834:5525":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:44053:5202":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:4155:6222":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:40962:4894":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:22593:2634":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:47489:5319":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:55:4607":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:44639:5226":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:1575:13327":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:46119:5252":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:5414:4229":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"13:0:2136":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:4854:15927":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:45919:5240":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:2555:2906":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:1520:13321":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:12012:24545":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:43182:28347":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7763:18644":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:7231:30043":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:40456:4872":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:40946:4893":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:10832:3340":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:21134:6338":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:41947:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:434:3070":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:10812:3339":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:5413:5400":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:3298:5376":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:3389:4863":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"9:450:17621":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:21062:11720":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:6465:2924":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:119:2811":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13513:3874":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:3810:4200":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:46691:5281":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:3377:11508":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"18:766:22664":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:2049:4826":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:2377:6144":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:3155:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:6565:12472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:587:12436":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6864:4436":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:760:2660":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:609:3025":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:12042:754":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:4748:15913":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:256:3064":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:1257:4465":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:7349:2289":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:1673:13335":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:12047:1523":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:30419:2651":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:6720:17022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12133:3520":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:40207:2624":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:2919:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:9990:3231":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:5128:2855":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:8872:18701":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:8334:6256":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:8194:5126":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:1681:13336":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:6667:4403":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:40192:2337":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:43359:5179":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:4592:4211":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:5720:4245":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:5008:15943":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11815:3452":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:4928:4221":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:12497:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:7240:32261":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:13659:3899":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:44355:11818":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:4002:4864":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:32209:4973":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:8872:1710":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11967:3482":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:41722:1673":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12727:3630":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"11:2174:5896":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:2247:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:41789:5161":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:5342:4228":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12161:3530":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:22758:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:14359:4100":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:1544:2848":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:43650:2347":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:6197:4329":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:46487:5263":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"11:1822:1710":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:3508:25171":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7833:4579":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:39522:2510":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:7622:4562":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:2049:4734":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:9482:5440":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:44379:11816":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:4469:15886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"0:68:1810":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"2:22040:28458":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"11:798:4728":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:41858:4723":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:47739:5322":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4917:15933":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:1733:13341":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:11412:2329":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:10118:4741":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:1667:1099":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:12745:2657":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:43924:2325":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6589:12306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:42927:2311":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:573:12434":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:46213:5254":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:9281:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:42662:28809":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:10621:3301":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:5049:5394":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7574:2930":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:4536:4209":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:7545:2661":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:2988:2654":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:6161:2920":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:8278:5384":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10597:3299":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10511:3286":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:43540:5192":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:47847:5324":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:3042:17776":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:10795:5442":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:5890:16597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:3025:4191":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:595:12437":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:6713:4415":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:2715:4160":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:32300:2594":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:44566:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4848:15926":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4740:15912":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:42103:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:3517:6152":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5068:15949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:6608:2925":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:12592:3611":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8984:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12118:3514":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13787:3928":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:9075:5698":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:7363:2365":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:11175:5697":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:4895:15931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:7529:2660":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:10110:3242":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:41883:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:45956:5242":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:48098:5338":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:653:12484":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:44406:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:9223:3062":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:4695:15907":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:4633:25057":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:10427:5523":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10293:3255":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:40497:4879":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:574:3008":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:7586:16120":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:9134:5419":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6815:4430":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11109:3369":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:4235:5385":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:895:4723":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:8304:5493":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:43608:2332":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:0:2145":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:4789:28636":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:3940:6196":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6332:4355":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12333:3570":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:3212:4745":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:2771:4475":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:6607:17018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:1672:2823":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:2168:11721":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:2808:4480":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:46097:5251":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:30989:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:793:4742":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:564:3017":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:6171:16640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12394:3582":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:1778:5359":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:4148:4867":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5920:16599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4955:15938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"3:0:446":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:2359:6138":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:8105:4624":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:43800:2344":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"9:426:17623":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:3867:4201":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13862:3946":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:4032:2823":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:8387:6082":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13697:3904":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8997:24561":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:8224:2341":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:4387:5387":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12878:3669":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:30619:28454":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6763:4428":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:2035:4824":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:652:3008":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4463:15885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:2131:2840":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:9300:2304":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:7382:4844":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:9977:3205":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:47950:5328":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"14:221:4721":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6571:18638":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"14:7:4714":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:9246:2295":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:7998:5447":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11791:3451":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13757:3922":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:5986:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:44601:5221":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:14259:4077":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:6069:2916":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4824:15923":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:7505:16109":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:3160:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:7874:5443":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:3998:6201":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:1924:661":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:8161:5380":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12691:3624":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:1747:28801":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:20971:6351":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:1513:13320":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:5793:4254":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13016:3699":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7505:4184":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:8252:4636":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:21:689":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:5737:16525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:1503:4725":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:39487:4981":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:14189:4052":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:8312:5502":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:14163:4043":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6317:4353":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:12052:799":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:13167:3717":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:9286:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:400:3067":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"18:681:3039":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:14:1661":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:3414:2848":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:1888:2292":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:46021:5244":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:1302:4740":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:10103:5548":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:9759:2894":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:6558:1710":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:1464:4726":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:10633:3302":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8290:6227":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:4815:805":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11264:3388":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:45712:5232":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:8539:5389":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:11189:3378":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:8924:18703":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11084:3360":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:7759:5439":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:5318:2823":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:6978:5830":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:6850:17031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:10403:3275":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:6044:31945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:488:12423":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"8:0:2138":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:3736:5381":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:2332:4139":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:2519:4152":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:10843:24976":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:3894:4202":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:5975:12025":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5849:16553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11872:3466":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:22494:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:44244:2353":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:9292:2305":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:3499:2295":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13109:3708":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12089:3503":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10280:3254":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:4962:6261":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:14341:4094":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12826:3663":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:9497:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:6939:18640":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4550:15896":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:22692:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:13778:3927":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:12035:1390":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:636:3031":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12303:3561":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6977:4452":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:667:4724":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:4184:6225":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:1411:4723":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:362:5347":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:5745:5406":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:3594:4741":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:39411:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:44038:5197":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:1838:4745":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:1558:1710":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:5843:4262":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:1473:4727":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:22117:28462":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7553:4558":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:582:3072":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:8740:18697":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12905:3673":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:1839:5362":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:13548:3875":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:4395:15721":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:4904:6253":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:4413:2513":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13435:3832":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:123:12106":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:6769:2666":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:2695:2587":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:7540:16114":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:9505:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:6711:17021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:7707:4565":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:261:3065":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:6538:5414":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:2960:31403":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:2387:6149":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:119:12105":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:23238:4853":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:6744:11679":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:3166:11527":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:7282:1710":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:10765:25180":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7433:4543":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10377:3272":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:5567:4173":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12077:3502":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11045:3358":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:44622:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:20741:28599":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"0:18:1663":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"typedef"},"11:1818:4723":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:7920:5446":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:9115:5418":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:11210:3381":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:482:12422":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"9:357:17636":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10654:3304":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4685:15906":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:39455:2282":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:568:12433":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:40172:2631":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13604:3887":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2492:5366":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:7396:28451":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12412:3583":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:8021:4616":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3082:2655":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"0:60:1751":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"2:20711:28476":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:5979:16602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4380:15876":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:4664:15905":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:7474:4183":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:3220:4194":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:6175:4314":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4446:15883":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:2857:4166":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6868:17032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:42142:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:48137:5339":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:1911:13504":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:8241:6190":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:9040:5542":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:2709:2515":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:2697:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:5366:2323":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:62:12051":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:1917:2293":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12757:3649":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:10805:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:10082:5360":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:10799:3337":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:4163:6223":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:22659:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:635:5350":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:42443:2306":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9344:32265":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:4291:15869":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8897:5529":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9528:32267":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5799:16590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6554:4378":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:5639:4240":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7525:4185":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:1852:4747":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4587:15899":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:940:4731":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:586:6073":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:1442:1710":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:7231:11677":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7425:4850":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:2749:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:8977:28605":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:8899:18702":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13971:3977":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5967:16601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:10969:3352":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:755:3056":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"9:507:4804":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:2060:4736":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:40953:5143":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12891:3670":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:6396:4362":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4872:15929":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2631:5368":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12148:3526":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:11033:2938":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"10:44:4751":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:7725:6080":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12254:3536":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:21118:6154":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:5028:4224":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2367:1653":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"16:4441:4206":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:41645:4905":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:9475:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:40356:5122":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:6386:4361":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11385:24310":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:4393:2511":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:10336:4919":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:9946:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:3744:4198":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"14:31:4714":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:40598:5139":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:7372:24803":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:11290:18705":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:9821:3214":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10430:3277":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"13:226:32200":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:7564:16118":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:644:3008":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6516:4376":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4754:15914":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13096:3707":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:47141:5288":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11127:3404":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:554:12431":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:555:5349":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:1075:3073":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:9192:24992":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:10760:24527":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:3204:4747":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:21279:6154":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:10298:2347":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"11:1121:4740":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10199:3249":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:46721:5282":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:40574:3029":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:9475:3201":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"9:486:17620":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:6248:2912":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:7599:17590":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"0:66:1799":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"2:45897:5239":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:43511:5189":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:6130:16638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:14205:4056":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:4564:4210":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:4426:2850":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:6655:1720":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:6594:6302":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:22725:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"11:403:32186":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:690:3041":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:8965:5530":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13673:3902":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:44221:5209":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"9:237:5172":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:11388:18707":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:40588:4888":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:39494:4982":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:43448:5185":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:40756:4891":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:12045:753":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:1733:11731":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:21312:4941":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:3221:5373":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:4635:25059":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:1837:5361":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:10225:4917":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:6618:17019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:42952:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:0:2141":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:2799:11699":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:6642:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:3635:3099":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:10223:3250":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:9298:2303":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4781:15917":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:8166:4629":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:45818:5236":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:5839:2662":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:1523:4823":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:4339:2510":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"11:97:32193":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4810:15921":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:12034:313":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:2243:29932":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:10815:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:13125:3710":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:4785:4216":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:42064:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:3259:5374":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:7904:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:42436:2305":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:11872:2318":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:44016:11504":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:11617:5428":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"0:65:1789":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"2:46335:5259":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40549:5138":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:12029:948":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:14150:4037":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:2352:4145":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:5626:4235":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:6705:17020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:1273:4736":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:9734:3207":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:2421:4148":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:8605:18681":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:8407:5513":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2836:4485":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:6726:17023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"12:0:2142":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:14236:4064":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4304:15870":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:1637:4856":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2375:6143":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:9409:32271":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:4049:11469":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:43931:2336":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:12030:421":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:40506:5136":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:40252:2623":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:13055:3702":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:474:12421":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"0:51:1727":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"17:0:2146":{"crate_id":17,"path":["object"],"kind":"module"},"2:39389:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"11:2168:32194":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:5615:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4638:15903":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6214:4336":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:4323:4204":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:0:1412":{"crate_id":1,"path":["std"],"kind":"module"},"2:41480:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:8549:4723":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:32173:6286":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:7020:2928":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:10947:4801":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:10532:5374":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:4473:6228":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:878:2831":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7445:4544":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:1288:4734":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:671:3038":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11155:3374":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:14177:4049":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:40968:5144":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:9727:2888":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:6841:17030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10906:3344":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:45734:5233":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2859:11709":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:6894:2927":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:6900:4438":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:3321:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"18:599:32277":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:22153:4964":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:4262:4868":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10148:3244":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:11633:4931":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5877:16595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:39702:27134":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"18:491:3007":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6232:4346":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:6028:16608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:40987:4896":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:41807:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:6671:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:43186:4914":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:2156:593":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7362:18642":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:21866:4942":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:6022:16607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:14054:3999":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11943:3478":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4436:15882":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:3720:4824":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12017:3489":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:80:22652":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12435:3586":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:11857:2317":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:4887:15930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:42672:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:2377:1652":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"16:7855:18645":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"7:0:1567":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:904:2660":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:4258:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:2737:4161":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:9202:24983":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:2511:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11955:3481":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:11514:5382":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:6372:4171":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:40465:4875":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:43949:2338":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:6796:17026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:45836:5237":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:7661:5431":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:43618:2331":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:44264:2354":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:4171:6224":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10330:3262":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:11212:5702":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:5916:4122":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:10931:3346":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:41908:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:43530:5191":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:5363:18632":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10361:3270":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:1118:30019":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:14102:4036":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11600:18709":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:40266:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"15:327:17733":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6156:16639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:41815:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:5863:16554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:9110:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:39433:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:3395:3086":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13999:3984":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4413:15879":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:590:3018":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:4133:24309":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:41756:5159":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4428:15881":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:2223:30042":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7182:2658":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:6438:4365":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10303:3137":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:30455:28443":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12106:3511":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6357:4358":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:21747:6154":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:7438:2856":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:5306:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:10251:6288":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:1554:4723":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:8003:5448":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:4476:4207":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:1495:13317":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7099:5542":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:42974:5176":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:12054:1143":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:8480:5516":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12711:3625":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:46243:5255":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13732:3914":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4518:15892":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:40436:5129":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:850:4741":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:11450:2943":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:10499:3283":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:12055:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:1973:3076":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:43940:2337":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:22461:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:9083:3058":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:8150:5487":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:4042:6203":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:39529:4985":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"11:2033:4465":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13492:3869":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:3238:4748":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10544:3292":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:894:2662":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:42982:5177":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:817:4731":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10253:3252":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:0:2147":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12036:1420":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:1138:29856":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13639:3891":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:2361:6139":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:7073:18641":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:8113:5486":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:42718:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:9887:3222":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:2825:11704":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:1776:2660":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4032:6202":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:20915:6346":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:43682:2352":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"11:1068:4738":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:11382:11782":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13894:3954":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:7847:3138":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:13749:3919":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:2690:5795":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:12046:749":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:2962:17775":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:7061:4464":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:5498:5403":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:10249:3251":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:10535:5376":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12671:3621":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:3186:22955":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:1776:5358":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:8125:4625":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11996:24801":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:10741:5559":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:40939:4892":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2359:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2698:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:7221:2835":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:13683:3903":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"15:394:17739":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:41866:4741":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5058:15948":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:20877:6154":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:3217:30060":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13854:3945":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4389:15877":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4944:15936":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:14350:4098":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:923:4728":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:1102:29855":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:40283:28451":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:285:32183":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:6425:5143":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:12028:374":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46803:5283":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:707:2319":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:2567:4154":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12457:3593":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"10:36:32180":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:1582:4747":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"14:160:4714":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10994:3354":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4678:6195":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:2170:29966":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:9032:3191":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:11231:5418":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4908:15932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:7463:17562":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:3442:5496":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:2744:2360":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:7631:4563":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:4759:676":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:4568:15898":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:47970:5330":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:40488:5135":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:11594:4929":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:21178:6154":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:39267:11473":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:13957:3975":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11329:18706":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:43782:2343":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:12642:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:4841:4218":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:910:4742":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:11050:2940":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:1055:4734":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:9048:3057":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:39369:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10956:5403":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:8457:5172":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:8497:6279":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:8494:2317":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:22101:28461":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11304:5420":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:986:4734":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:11044:2939":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:48022:5334":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4401:15878":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:547:12430":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4716:15909":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"11:1048:32199":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:2399:4147":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:3185:28881":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6427:4364":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:4194:2848":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:4814:4217":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:9665:32266":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:7272:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:9170:5545":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:5238:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7665:4187":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:7710:6079":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11241:18829":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:2787:6333":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:4483:15888":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:4609:2617":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:40162:2630":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:2935:2364":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"0:43:1717":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"2:3517:2662":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:1814:5360":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:47996:5332":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:5362:2322":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:3180:25582":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:9518:3202":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:30425:4972":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10863:3204":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:8794:18699":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:3172:11526":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11056:18827":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:6931:4441":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:10770:5441":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:2970:31399":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13937:3969":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:22055:4951":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"0:42:1715":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"1:11979:5579":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:10904:4922":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:3992:6200":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}