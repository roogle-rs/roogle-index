{"root":"0:0:2009","crate_version":"0.10.0","includes_private":false,"index":{"b:2:2552-0:72:1641":{"id":"b:2:2552-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2555:128","2:2556:1484"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12185:32582":{"id":"2:12185:32582","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:2299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:1683":{"id":"2:12153:1683","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11778:2305","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::matches":"2:12153:1683"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43762:2326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150:32571":{"id":"2:12150:32571","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:2299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3321:1498":{"id":"2:3321:1498","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39420:4975","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12144:23776":{"id":"2:12144:23776","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11945:418","str::splitn":"2:12141:23774","self::pattern":"2:11778:2305"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43680:2330","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:2299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1711":{"id":"0:51:1711","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[188,0],"end":[190,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.911 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8315:6261-0:72:1641":{"id":"a:2:8315:6261-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8315:6261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12098:32566":{"id":"2:12098:32566","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11951:1404","crate::ops::IndexMut":"2:2984:2635","str::slice_unchecked":"2:12097:32565"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:33238":{"id":"5:5432:33238","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:32586":{"id":"2:12201:32586","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:32586"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43857:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2550:128":{"id":"2:2550:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12135:32568":{"id":"2:12135:32568","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11778:2305","str::split":"2:12126:23768","prim@char":"1:11945:418","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12138:32569"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43608:2333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12147:32570":{"id":"2:12147:32570","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:32572":{"id":"2:12156:32572","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11778:2305","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::matches":"2:12153:1683"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43780:2327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:2299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2611:2500":{"id":"2:2611:2500","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3385:4856","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2609-0:72:1641":{"id":"b:2:2609-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3373:11507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2611:2500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"0:60:1735":{"id":"0:60:1735","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:23772":{"id":"2:12132:23772","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11778:2305","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::split":"2:12126:23768"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43576:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:2299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:32580":{"id":"2:12173:32580","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11803:2297","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:30312":{"id":"2:12108:30312","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43850:2306","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:23779":{"id":"2:12112:23779","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:1484":{"id":"2:2556:1484","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12080:32562":{"id":"2:12080:32562","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12077:816":{"id":"2:12077:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11945:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:32573":{"id":"2:12159:32573","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11778:2305","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::rmatch_indices":"2:12162:32574"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43708:2324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5686-0:72:1641":{"id":"b:5:5686-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9213:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5684:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5688:1462"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72:1641":{"id":"0:72:1641","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:73:1642"],"impls":["a:2:2683:220-0:72:1641","a:2:8316:6260-0:72:1641","a:2:2700:228-0:72:1641","a:2:2740:2341-0:72:1641","a:2:8315:6261-0:72:1641","b:2:2541-0:72:1641","b:2:3319-0:72:1641","b:2:2609-0:72:1641","b:2:2537-0:72:1641","b:2:2250-0:72:1641","b:2:2547-0:72:1641","b:2:2247-0:72:1641","b:2:2552-0:72:1641","b:5:5686-0:72:1641","0:77","0:17","0:15","0:75","0:78"]}}},"2:12198:24945":{"id":"2:12198:24945","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12118:2545":{"id":"2:12118:2545","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12191:32584":{"id":"2:12191:32584","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:2299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12089:1764":{"id":"2:12089:1764","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:1701":{"id":"0:43:1701","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[158,0],"end":[178,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:24943":{"id":"2:12197:24943","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39628:24912","Self::is_ascii":"2:12196:24942"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39628:24912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2541-0:72:1641":{"id":"b:2:2541-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:59:1726":{"id":"0:59:1726","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[236,0],"end":[238,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:32561":{"id":"2:12079:32561","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12078:1736":{"id":"2:12078:1736","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:33236":{"id":"5:5425:33236","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2302","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2302","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5441:33240":{"id":"5:5441:33240","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2302","`String`":"5:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2302","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12107:32567":{"id":"2:12107:32567","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43822:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12115:23780":{"id":"2:12115:23780","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:2299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:25082":{"id":"5:5444:25082","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12200:24947"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[28,0],"end":[28,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","cause","provide","description"],"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2252:22886":{"id":"2:2252:22886","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1672":{"id":"0:25:1672","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[65,0],"end":[131,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:32575":{"id":"2:12165:32575","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8316:6260-0:72:1641":{"id":"a:2:8316:6260-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8316:6260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2555:128":{"id":"2:2555:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32099:6278","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12129:23770":{"id":"2:12129:23770","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11601:2308","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1699":{"id":"0:42:1699","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5442:6172":{"id":"5:5442:6172","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2247-0:72:1641":{"id":"b:2:2247-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2249:2217"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12095:23736":{"id":"2:12095:23736","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[18,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9213:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:1642":{"id":"0:73:1642","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[15,4],"end":[15,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:0:2009":{"id":"0:0:2009","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1005,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1641","0:18:1647","0:19:1650","0:24:1668","0:25:1672","0:42:1699","0:43:1701","0:51:1711","0:52:1716","0:59:1726","0:60:1735","0:61:1741","0:63:1755","0:65:1773","0:66:1783","0:68:1794"],"is_stripped":false}}},"2:2543:697":{"id":"2:2543:697","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:23735":{"id":"2:12093:23735","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:32569":{"id":"2:12138:32569","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11778:2305","str::split":"2:12126:23768","prim@char":"1:11945:418","str::split_terminator":"2:12135:32568"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43626:2332","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:2299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1650":{"id":"0:19:1650","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[34,0],"end":[47,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:32579":{"id":"2:12172:32579","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076":{"id":"2:12076","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12077:816","2:12078:1736","2:12079:32561","2:12080:32562","2:12082:32563","2:12085:24913","2:12086:32564","2:12087:314","2:12088:23737","2:12089:1764","2:12091:23734","2:12093:23735","2:12095:23736","2:12097:32565","2:12098:32566","2:12099:23760","2:12100:23761","2:12101:1669","2:12102:5197","2:12103:4842","2:12104:30270","2:12105:30273","2:12106:25717","2:12107:32567","2:12108:30312","2:12109:23778","2:12112:23779","2:12115:23780","2:12118:2545","2:12122:2510","2:12126:23768","2:12129:23770","2:12132:23772","2:12135:32568","2:12138:32569","2:12141:23774","2:12144:23776","2:12147:32570","2:12150:32571","2:12153:1683","2:12156:32572","2:12159:32573","2:12162:32574","2:12165:32575","2:12167:32576","2:12169:32577","2:12171:32578","2:12172:32579","2:12173:32580","2:12176:32581","2:12179:22958","2:12182:23781","2:12185:32582","2:12188:32583","2:12191:32584","2:12194:32585","2:12196:24942","2:12197:24943","2:12198:24945","2:12199:24946","2:12200:24947","2:12201:32586","2:12203:6066","2:12204:32587"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2551:1485":{"id":"2:2551:1485","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2540:2504":{"id":"2:2540:2504","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:72:1641":{"id":"b:2:2250-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:22886"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12194:32585":{"id":"2:12194:32585","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11739:127","`FromStr`":"2:11738:2320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11738:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11738:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:24942":{"id":"2:12196:24942","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:25081":{"id":"5:5443:25081","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12199:24946"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:11688":{"id":"5:5426:11688","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:22958":{"id":"2:12179:22958","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:613":{"id":"0:79:613","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12182:23781":{"id":"2:12182:23781","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:2299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1716":{"id":"0:52:1716","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[200,0],"end":[226,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2311:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2341-0:72:1641":{"id":"a:2:2740:2341-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12169:32577":{"id":"2:12169:32577","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:671":{"id":"0:16:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[19,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42671:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5440:33239":{"id":"5:5440:33239","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:24946":{"id":"2:12199:24946","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1783":{"id":"0:66:1783","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[407,0],"end":[412,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2547-0:72:1641":{"id":"b:2:2547-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2550:128","2:2551:1485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12087:314":{"id":"2:12087:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12088:23737","`u8`":"1:11962:1507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:23768":{"id":"2:12126:23768","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11778:2305","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::split_whitespace":"2:12104:30270","str::rsplit":"2:12132:23772"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43558:2329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:5197":{"id":"2:12102:5197","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11945:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43534:2313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:23778":{"id":"2:12109:23778","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12188:32583":{"id":"2:12188:32583","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1794":{"id":"0:68:1794","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[433,0],"end":[478,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:23734":{"id":"2:12091:23734","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41591:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:32574":{"id":"2:12162:32574","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11778:2305","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11945:418","str::match_indices":"2:12159:32573"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43726:2325","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:2299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:6066":{"id":"2:12203:6066","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:6066"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43866:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12204:32587":{"id":"2:12204:32587","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:32587"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43875:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:23774":{"id":"2:12141:23774","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305","str::rsplitn":"2:12144:23776"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43662:2331","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2249:2217":{"id":"2:2249:2217","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:23761":{"id":"2:12100:23761","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12099:23760"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:30273":{"id":"2:12105:30273","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12104:30270"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43841:2307","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:671":{"id":"0:76:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:1669":{"id":"2:12101:1669","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11945:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43528:1640","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:72:1641":{"id":"a:2:2683:220-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5429:33237":{"id":"5:5429:33237","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424":{"id":"5:5424","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5425:33236","5:5426:11688","5:5429:33237","5:5432:33238","5:5440:33239","5:5441:33240","5:5442:6172","5:5443:25081","5:5444:25082"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12171:32578":{"id":"2:12171:32578","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5688:1462":{"id":"5:5688:1462","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1647":{"id":"0:18:1647","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[30,0],"end":[30,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"Result","id":"2:41733:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:63:1755":{"id":"0:63:1755","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[327,0],"end":[380,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2316:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9428:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:72:1641":{"id":"b:2:3319-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2340","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65:1773":{"id":"0:65:1773","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[390,0],"end":[393,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:25717":{"id":"2:12106:25717","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43812:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:32576":{"id":"2:12167:32576","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1668":{"id":"0:24:1668","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:32563":{"id":"2:12082:32563","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12080:32562"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:4842":{"id":"2:12103:4842","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43544:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2537-0:72:1641":{"id":"b:2:2537-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2540:2504"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12086:32564":{"id":"2:12086:32564","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:1741":{"id":"0:61:1741","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[267,0],"end":[311,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:72:1641":{"id":"a:2:2700:228-0:72:1641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12085:24913":{"id":"2:12085:24913","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11345:2310"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:30270":{"id":"2:12104:30270","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12105:30273"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43832:2309","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:24947":{"id":"2:12200:24947","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:23737":{"id":"2:12088:23737","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11962:1507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:32565":{"id":"2:12097:32565","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11951:1404","str::slice_mut_unchecked":"2:12098:32566","crate::ops::Index":"2:2980:2634"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:23760":{"id":"2:12099:23760","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12100:23761"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12122:2510":{"id":"2:12122:2510","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41591:179","prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11798:2299","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:32581":{"id":"2:12176:32581","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11945:418","self::pattern":"2:11778:2305"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11783:2298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:2364:6134":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:42908:5170":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:8815:4716":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:45947:5237":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:7113:1694":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:41421:4895":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:8856:5523":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:41776:4716":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:46261:5252":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40879:5136":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2740:2341":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:40452:4878":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4818:15921":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:9215:2278":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13435:3826":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:7599:17589":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:40865:4885":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:39295:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:8043:4610":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:1285:4727":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:21551:4932":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:7329:2346":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:40391:4868":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:21981:4944":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:5838:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:1931:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:46139:5247":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:32099:6278":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:13167:3711":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:47922:5325":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:2762:4471":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:10684:26963":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:8527:5516":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:630:4716":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:14026:3985":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:8904:32509":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11234:3377":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:47525:5313":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11020:3350":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:7626:5426":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:44305:11815":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12952:3674":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:10837:4915":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:2350:6130":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:8315:6261":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:10444:3272":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:1590:13327":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:12646:3613":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:1638:13331":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:2162:11720":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:4992:15941":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:4392:2829":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4716:15908":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:7586:16119":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:9471:2289":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:20609:2257":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:40046:2610":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:40178:2604":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:47867:5320":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:5281:2304":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6516:4369":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:624:34968":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:11949:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11199:3374":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:40443:4877":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:5972:4122":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:41504:29976":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:8909:30761":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11210:3375":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:13303:3720":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:11872:3460":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:11894:5571":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:4325:2856":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:47603:5314":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:5357:5393":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4606:15899":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"13:0:2117":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:4770:15915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6618:17018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:45900:5236":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:45793:5231":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4328:15871":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:4781:15916":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:44590:5220":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:44527:5214":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12365:3571":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:1631:13330":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:541:12428":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10520:3281":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:11957:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:474:12420":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:7231:11675":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"11:1838:4738":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:6893:5822":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11329:18705":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6502:4367":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12966:3676":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12905:3667":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:5874:12024":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7505:4178":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:2689:4153":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11963:1504":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:45592:5223":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:46215:5250":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:3734:4819":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8938:5525":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:20855:11719":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:2826:4477":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12618:3608":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6815:4423":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:41716:11774":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:1500:13317":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:44577:4743":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:3196:11469":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:5612:4225":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:857:4734":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:14282:4072":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:47887:5322":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:6332:4348":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:7546:16114":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6834:17028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:11969:1132":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"11:332:2794":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:361:5340":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:10351:3263":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:5522:6276":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:3168:4716":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:3513:2643":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:6761:2847":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:44565:5219":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:7121:1694":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:9528:34964":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:6983:3046":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:10038:3228":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10175:3198":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12004:3482":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:2033:4458":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13109:3702":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:911:2641":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:43708:2324":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8257:5494":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:1821:5353":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:3424:5373":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:400:3061":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:4425:2831":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:6160:4305":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:1520:4816":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5979:16601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"10:36:34874":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:123:12105":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:7076:1694":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:13854:3939":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:7376:2642":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:9016:3184":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:5858:2836":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:3777:4193":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:8885:6297":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12994:3682":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11815:3446":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6724:4409":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:46413:5256":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"0:59:1726":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"1:10702:5557":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:46390:5255":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:2481:5359":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:7963:5442":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:47876:5321":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:4938:15934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:7817:5435":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12891:3664":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6625:6247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:9475:3195":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:1299:4733":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6250:4342":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:11778:2305":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:5068:15948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:2348:6129":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:3327:2641":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:5673:18632":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:2821:11703":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:1439:1694":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:44277:11814":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"18:660:3026":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:5793:4247":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:8078:5481":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:7621:5424":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:11542:3400":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:21106:6339":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:10231:2328":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:6935:2909":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"9:330:17675":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:7877:5440":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11696:3418":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:13707:3899":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2465:4144":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:2293:17747":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:9217:2277":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:46237:5251":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:8823:5522":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:11566:4924":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6796:17025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7038:4455":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:968:4458":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:9926:3220":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:6786:2851":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:4380:2857":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:3519:3081":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:43832:2309":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:5990:4873":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:40372:5124":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:8779:5518":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:3481:6143":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:14189:4046":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:9966:3198":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:41986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13096:3701":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:11315:11781":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:10879:25700":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:2505:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:22717:4962":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:47896:5323":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4428:15880":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:798:4721":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:2926:17773":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:2663:4152":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:2353:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12757:3643":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5720:4239":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:626:4811":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:7474:4177":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:3220:4188":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13179:3718":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:11525:5423":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:1595:13328":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4854:15926":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:1649:13332":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:2060:4729":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:43841:2307":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5955:16599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:14163:4037":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:1611:2798":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:43964:5190":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:1572:2641":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:3441:4190":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4420:15879":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5805:16590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10633:3296":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:6820:17027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:7180:2270":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:45845:5233":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:953:4725":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:3181:31232":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:30381:29990":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:46023:5244":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:3638:6183":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:6977:4445":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:96:22652":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:5639:4234":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12792:3654":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:47986:5329":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7525:4179":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:2962:17774":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:40872:4886":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:5100:4220":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"9:177:17688":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:2517:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:43285:5172":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:9952:3175":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:9879:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6347:18636":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:1071:4729":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:2138:4820":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:5843:4255":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:10858:4794":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"11:1818:4716":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:9655:3199":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4304:15869":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:43108:30286":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2514:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:13757:3916":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:9093:5414":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:9899:3218":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:7575:16118":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:7812:3132":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:4704:6205":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:21930:4938":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:13125:3704":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14236:4058":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:13914:3955":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5028:4218":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:2874:4161":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"18:113:22653":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:40037:5106":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:7753:4560":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12982:3680":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:9274:2312":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13882:3947":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:20805:6343":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:40668:4883":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11979:3479":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:8761:5517":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"18:766:22663":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:40058:29995":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:40382:4865":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:8711:18695":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:7488:3066":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:21205:6145":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9913:3219":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:261:3059":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:3378:2829":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:40118:2318":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6018:18635":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:22043:29978":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:1846:5355":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:3580:4191":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:2212:5358":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:2984:2635":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:574:3002":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:3193:5366":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:3463:2276":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12354:3568":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:47727:5316":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"15:394:17738":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:4389:15876":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"15:306:17728":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:8659:18694":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:3152:29036":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:5799:16589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:2186:34877":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:97:34886":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:8510:4716":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:21673:6145":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:47067:5281":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:43502:2321":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1545:13323":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10377:3266":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:6175:4307":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:22006:29984":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:10734:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:7025:4452":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:11728:2928":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:5408:5396":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4887:15929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:39381:2263":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:5393:5395":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:2314:4131":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:43112:4908":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:926:4718":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:3996:6193":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:11945:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:4665:6219":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:7529:16112":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:42671:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:8422:2298":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"11:1048:34887":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:10170:6280":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:3209:4738":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"0:61:1741":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"1:11059:26643":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:9476:2290":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:1461:4719":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:736:22662":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4616:15900":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:638:5345":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:9069:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:930:4721":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:41438:4897":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:2468:6145":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:21238:4934":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:1669:2804":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:12374:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"11:399:34888":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:1575:13326":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"10:0:2121":{"crate_id":10,"path":["adler"],"kind":"module"},"5:7092:4836":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:11943:3472":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11086:5414":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:6396:4355":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:4868:6244":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14037:3986":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12017:3483":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10454:5369":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12435:3580":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6067:16609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:4702:6203":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6386:4354":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:10076:2329":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:6508:6292":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:43456:5184":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:3235:4741":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:2352:4139":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:2391:2133":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:7696:5350":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:4341:15872":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13923:3956":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:2511:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:11888:3464":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:6865:2908":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:10724:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12133:3514":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14329:4086":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:46647:5275":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:11916:6072":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:11550:4923":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8191:5487":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12769:3645":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12936:3673":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:6561:6294":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:13557:3873":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:12579:2880":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11623:3408":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12106:3505":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"18:671:3032":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6705:17019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"11:793:4735":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:599:34971":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:9216:5354":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4810:15920":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:521:22664":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:21845:4936":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10303:3131":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:25974:4847":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:12616:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:2497:4145":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:10870:4916":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:11967:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:40192:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:47273:5311":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:11956:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:10161:3239":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:4193:2829":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:43857:2317":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5051:15946":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:8178:2329":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:9436:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:5233:2804":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:12065:3495":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"9:237:5165":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:4186:2490":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"11:817:4724":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8368:5507":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13771:3919":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5967:16600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:2519:4146":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11220:18827":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:42066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:8771:18697":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:554:5342":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11388:18706":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:2737:4155":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11200:5564":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9777:18714":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:6841:17029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:7515:4550":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:4597:26488":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:8105:4617":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4543:15894":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4456:15883":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:9361:4907":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:40353:5121":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:10027:4716":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:47907:5324":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10786:3330":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:46359:5254":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:4536:4203":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:40888:4887":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:5948:2829":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:9223:3056":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:3744:4192":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:7701:5431":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:45660:5226":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:7013:2639":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4475:15886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:6355:5407":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:2241:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2347:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:8152:4184":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13639:3885":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:5754:2643":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:39628:24912":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:8239:5378":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:3233:11470":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:9013:25694":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:959:4726":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:43762:2326":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:43516:2316":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:9318:3186":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:9034:5690":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:42861:5161":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:45638:5225":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:3385:4856":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:7799:4568":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12118:3508":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:46571:5273":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:22453:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:888:4720":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:44535:5216":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8943:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12457:3587":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:538:3009":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:7839:5438":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"18:609:3019":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:4794:15918":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12318:3559":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:8317:4903":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:23164:4846":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4984:15940":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:30345:2632":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:14301:4077":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:42853:2292":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"9:450:17620":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:22093:4958":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"15:288:17727":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6744:17023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:3810:4194":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:43354:5176":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13069:3697":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:7739:4170":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:1517:4736":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:1636:4849":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:9518:3196":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4568:15897":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:14:1645":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:39455:4978":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:5651:4168":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:1099:33941":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:3593:4734":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5015:15943":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:676:6069":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:7099:5536":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"11:836:4725":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:3668:2804":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13492:3863":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:5301:4221":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:9706:3200":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13971:3971":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:2737:2570":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:40209:29993":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13055:3696":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:4031:2804":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10066:3230":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12186:3528":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:6600:2647":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:10352:4914":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:5383:2829":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:8265:5487":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"9:507:4797":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5920:16598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:8165:5135":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:4163:2829":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:4963:15938":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:2910:6079":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:636:3025":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:44058:5200":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44484:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:0:2127":{"crate_id":17,"path":["object"],"kind":"module"},"5:2967:33527":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:11177:2922":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:40031:2318":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:4335:2491":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:13659:3893":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:22585:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:9561:3197":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:39359:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:39193:11472":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:8999:5536":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"18:755:3050":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"8:0:2119":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"14:40:3446":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11144:3367":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:8991:5534":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:42355:2278":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:7568:34952":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12077:3496":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:6629:2649":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:530:2883":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:2150:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:4045:11468":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"0:65:1773":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"16:5807:4248":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:21675:6340":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:1423:4734":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12691:3618":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6036:16608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10123:3218":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:1690:13336":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:4279:5380":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5994:16603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:2928:2344":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:39315:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:1783:5351":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:4469:15885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:21104:6145":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:5593:2894":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6438:4358":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:582:2257":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:8068:4612":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:8736:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:3270:5369":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:5933:2893":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:2767:4468":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5025:15944":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13140:3708":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11767:3431":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:7294:4844":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4955:15937":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11600:18708":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:6868:17031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:12396:31597":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:20803:6145":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:13043:3695":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:1513:13319":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8251:6218":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12035:3491":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:7558:2913":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:2220:33624":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:40197:5113":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:1557:13324":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:867:1694":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:4811:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13795:3924":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:40126:2317":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5080:15950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4740:15911":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:40159:2608":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:22519:2615":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:532:12427":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:526:12426":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:1915:4853":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4848:15925":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:2508:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11791:3445":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:4704:15907":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:5525:6277":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"18:531:3006":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:7893:4817":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:579:12434":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13332:3740":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:14359:4094":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:46493:5257":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:7269:2837":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:5863:16553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"0:25:1672":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"1:9064:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"11:1538:4737":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:4535:15893":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5775:4243":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10280:3248":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:4662:6246":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"14:165:17708":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:41589:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"10:44:4744":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:11109:3363":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:6575:2906":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:2963:33528":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:6763:4421":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:40913:4889":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:10863:3198":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:1527:13321":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:47811:5318":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:562:12431":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:14216:4055":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:1895:2273":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:40088:2611":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:10754:26641":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:43866:2318":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:20637:30966":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:41826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:8949:18703":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:9223:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:39420:4975":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:4489:15888":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10845:3335":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:10258:26019":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:42693:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:12361:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:530:4120":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:21966:29979":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6531:2791":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:6432:2905":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:14395:4098":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:7227:29993":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:9406:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:62:12050":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:6787:31221":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:564:3011":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7622:4555":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:4706:6206":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11905:3466":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6775:17024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9485:34967":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6573:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10013:3226":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:41906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4678:6186":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:10338:4913":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13548:3869":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:4729:15910":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11520:3082":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:4506:15890":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7631:4556":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:43942:11503":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:1520:13320":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:699:3036":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:4926:6252":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"0:24:1668":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"1:11952:1488":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:11532:5423":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:4754:15913":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:7062:33610":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:5742:5404":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:1973:3070":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:2032:4817":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:892:4716":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:43534:2313":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:14259:4071":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:1820:2637":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:6239:34957":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10361:3264":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:11034:3351":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:12579:3603":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:42900:5169":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8793:5519":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:3162:11526":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4800:15919":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4374:15874":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:9059:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11047:5519":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:947:4724":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:500:12424":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:727:3044":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:2781:4157":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:40921:4891":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13016:3693":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4556:15896":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6688:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11290:18704":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:285:34883":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:9225:2284":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11927:25660":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10110:3236":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13456:3834":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10581:3291":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:9112:5538":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4524:15892":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:506:12425":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:9614:34963":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"9:393:17621":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"9:52:17638":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:30915:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"6:1681:13335":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8106:3046":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:10330:3256":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:21229:6145":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:3962:6192":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4842:15924":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:0:2128":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:2842:11705":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6805:17026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:10660:5551":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:504:3065":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:7693:4172":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2752:6331":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13847:3938":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:3894:4196":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:9821:3208":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:30311:2631":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:40903:2864":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:11123:5413":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:22486:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:7553:4551":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10544:3286":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:41398:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:42878:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10969:3346":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11852:3459":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:6136:15785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6008:16604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"11:2201:2269":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:2469:11535":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4315:15870":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2962:11471":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:11960:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:7829:5437":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:875:2812":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:22420:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:40484:4879":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:7305:4845":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:11965:1506":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:5277:2303":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:7657:6077":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:43875:2319":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:1594:4741":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13778:3921":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13566:3874":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:40475:5131":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:4877:6245":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:4135:6215":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:736:4720":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:6124:2901":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:2361:1637":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"1:7601:6145":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:10082:5542":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:6137:6428":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:21563:30969":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6289:4344":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:5890:16596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10671:18801":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:41484:30311":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:9875:3213":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:12161:3524":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:4459:6220":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:2128:2821":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:7558:16116":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:7285:29342":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:11098:3359":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:7042:2643":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:4783:6202":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:3956:6191":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8197:5489":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:8316:6260":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:1062:4727":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:2219:6126":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:10679:26475":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:1561:4716":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:7255:5152":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:5829:16592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"11:403:34889":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:10854:5434":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:6128:4300":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:30367:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:7499:5568":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:2855:2890":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6554:4371":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:10269:4912":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:6108:2880":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11127:3398":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:44313:5689":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:44293:11822":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:10080:3232":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11272:3384":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:14417:4104":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:844:4726":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:1565:1694":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:10346:5517":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:3373:11507":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:44332:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:20669:31259":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:595:12436":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:46617:5274":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4685:15905":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:39434:4516":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:2371:1636":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"2:41665:1694":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"9:0:2120":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4380:15875":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:10310:2331":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:6540:4171":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:21027:6342":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:3272:5370":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:2748:2574":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:12394:3576":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:8869:6298":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"2:22072:30293":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:2421:4142":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:10324:2330":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"14:221:4714":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:1755:4850":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:40344:5120":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:4483:15887":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6057:17746":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:46045:5245":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4944:15935":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:6396:5408":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:22684:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:12921:3669":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:10293:3249":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:7289:4495":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:8086:4614":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:44190:2335":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:2846:11706":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:1569:13325":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:1589:4740":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:2558:2870":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:40322:5118":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12840:3659":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:11803:2297":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:3058:3089":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:4587:6192":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:7313:34954":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"14:7:4707":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:2832:4478":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:46883:5279":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"0:52:1716":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"17:9442:34959":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6484:4359":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:10403:3269":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12254:3530":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:657:1694":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:5382:3184":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11753:3430":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:7517:16110":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12566:3602":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:13999:3978":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4723:15909":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11669:3412":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5737:16524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:45882:5235":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:22618:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:11155:3368":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:40423:4872":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2757:6333":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:44548:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:1732:11730":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:40145:2606":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"18:644:3002":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"0:63:1755":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"5:1470:4720":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:1845:4739":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:2787:6334":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:5787:2895":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:7540:16113":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:4006:6194":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:4073:4734":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:7654:2296":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:41674:5152":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:5959:4271":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11924:3471":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:8632:18693":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7433:4536":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:2133:3074":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:6651:1704":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9866:3211":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:40282:5115":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:41649:4716":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:11642:3411":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11354:3152":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:46093:5246":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"15:0:2125":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:2773:11697":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:2611:4150":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:4601:26492":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"11:2180:34878":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:6303:4163":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"0:51:1711":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"2:22552:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:39255:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:39154:11524":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:40682:4884":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12878:3663":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12851:3660":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:11416:3393":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12479:3588":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:4199:5379":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:21210:6338":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:11943:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:7196:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3647:1694":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:719:3041":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:11194:5415":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:8125:4618":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:311:34881":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:43093:5171":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:1479:4735":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:43812:2322":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6658:4395":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4496:15889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:7362:18641":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5067:4219":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:12671:2638":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:7030:4835":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:47933:5326":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7463:4545":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:44301:11821":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:41725:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13155:3372":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"11:1822:1694":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4949:15936":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8831:1694":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:5709:5400":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:805:6074":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:9129:5539":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:40272:2858":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:4760:2891":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"14:160:4707":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:2956:2564":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:2931:2345":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:8794:18698":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:5398:3185":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:5414:4223":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11591:3372":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:1696:13337":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:7728:4966":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:2980:2634":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:4531:6237":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11104:5694":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:39240:4970":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:488:12422":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"18:652:3002":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:3083:5362":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:12711:3619":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9887:3216":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5590:4169":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:9990:3225":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:14150:4031":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13949:3966":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:40331:5119":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"0:19:1650":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"17:12089:3497":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:7647:2917":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"7:32:17606":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:7243:4840":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:5363:18631":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:14341:4088":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:7609:17590":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:45993:5243":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:4323:4198":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:4753:4209":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13448:3833":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:8176:18645":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:2194:34879":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:4010:6195":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:6427:4357":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:13083:3700":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12174:3525":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:46853:5278":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:1080:4733":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:44353:5211":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:1673:13334":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:41527:5150":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:5058:15947":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:7661:11674":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:2690:2340":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13905:3952":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:1121:4733":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:5462:5397":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4973:15939":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:149:2789":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:1568:2643":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:10494:2917":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:5008:15942":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:204:2802":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:3315:6168":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:2589:4149":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13604:3881":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:14177:4043":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:8740:18696":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:8924:18702":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:7763:18643":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:44136:11504":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:1500:4718":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:42106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:43544:2312":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:21989:4945":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:2521:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2376:6140":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:21914:30313":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:40239:6113":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"18:491:3001":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"18:80:22651":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:5342:4222":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:42186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:2850:11707":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:10158:4910":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10097:3235":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:14054:3993":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"14:202:11505":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"11:1826:2643":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:7690:6071":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:39337:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:46917:5280":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:2168:34875":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10799:3331":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:8134:6144":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:8807:5520":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:7584:4554":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4436:15881":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:42890:5165":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:482:12421":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:2458:5789":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:30439:29996":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:4724:4208":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:11493:26801":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:1733:13340":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"11:0:2122":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11242:5420":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11118:3364":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:10981:3347":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:1075:3067":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4833:15923":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:11481:5565":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:5527:2647":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:11798:2299":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8350:6256":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13697:3898":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11250:3379":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:30351:4965":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6015:16605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:4550:15895":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:7250:12381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7407:4275":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:41707:5154":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:42653:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:749:2643":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:43364:5177":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:3295:4189":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:3998:4857":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:4113:4859":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:2399:4141":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:5916:4116":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:40074:2609":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:44010:5199":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:3904:6187":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"18:590:3012":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"0:42:1699":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"16:6850:4427":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:4900:4214":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:4233:4716":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:3805:5377":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11084:3354":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:1048:4458":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6872:4173":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:7665:4181":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:8899:18701":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11007:3349":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:480:2882":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:5531:4869":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:9221:2287":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:4097:28748":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:43680:2330":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:42348:2277":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:8901:6299":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7445:4537":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6077:16610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:40110:2319":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10568:3289":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"9:486:17619":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:2900:4162":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:6648:13461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"14:0:2124":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11164:3369":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:11568:18707":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:41540:5378":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:41640:1657":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:12004:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6598:17016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:11783:2298":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6197:4322":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4518:15891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:7295:17402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7833:4572":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11950:1374":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6232:4339":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11992:3481":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"13:226:34894":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:2957:33525":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:48001:5330":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:8872:18700":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13591:3876":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:6505:5409":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:4592:4205":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:40225:5114":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:10980:2921":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4401:15877":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:0:1396":{"crate_id":1,"path":["std"],"kind":"module"},"6:554:12430":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:1577:4738":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:10689:5436":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:46729:5276":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5882:16595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:8500:5383":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:3201:4740":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:7022:1694":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3934:6189":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7073:18640":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:2544:2887":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:13749:3913":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:6044:34248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:2263:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:14015:3981":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:45692:5227":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:1008:2804":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:11964:1505":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:48063:5332":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:7724:5434":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11178:3370":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:2838:11704":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12631:3610":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:9418:2915":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13803:3926":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:9296:3060":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:8767:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:14197:4049":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:44474:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:43726:2325":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:6565:12471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:9734:3201":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:1270:4729":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10199:3243":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:14350:4092":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4368:15873":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7012:4449":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:10223:3244":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:6720:17021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:9428:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:7278:17401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:547:12429":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"11:365:2796":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:3488:6163":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:4010:4858":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:11792:2300":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:12423:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:42616:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:13787:3922":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12539:3597":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:2240:33644":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:2637:4151":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:4620:4206":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11498:3398":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10832:3334":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:11275:26885":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4908:15931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:2795:11698":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:44147:5202":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:1785:5352":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:7822:5436":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:10119:2308":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:2160:11719":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:7707:4558":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:4996:4217":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:8956:22956":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:12148:3520":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:8516:5515":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:13574:3875":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:8317:5382":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"9:426:17622":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8837:5398":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:7968:5443":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:7463:17561":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:4941:2829":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:6468:2804":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:9399:3194":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:2791:11699":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:9592:2866":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:10313:3251":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:2215:2852":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:41784:4734":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:11959:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:43822:2323":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"11:667:4717":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:22354:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:6211:2893":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:42869:2291":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6667:4396":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:635:5343":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:47665:5315":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:5994:18634":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:653:12483":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:7272:17400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:3348:5137":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:42146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:1254:4458":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2804:4473":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8924:5524":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:42628:4587":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:4917:15932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:42026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13513:3868":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:43979:5195":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:22079:4957":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:11601:2308":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:2332:4133":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4599:26490":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:10266:3247":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:20974:6346":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"14:215:4712":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5849:16552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:32226:2575":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8122:5374":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:4263:4862":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"14:187:17715":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:9658:2869":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:5716:5403":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:4758:671":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:3186:3078":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:3233:5368":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:5689:4235":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:11958:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:3703:5376":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10621:3295":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11726:3422":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:4787:15917":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:43528:1640":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:494:12423":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:1012:4729":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5818:16591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:11345:2310":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:6692:18638":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:20667:31255":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10957:3345":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12552:3303":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:7061:4457":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:2316:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"11:1852:4740":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42362:2286":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:43466:5185":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:43993:5198":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:1702:6210":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:8841:18699":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:45863:5234":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:9208:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:22027:29977":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:4895:15930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:2825:4159":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:3867:4195":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:723:4719":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"14:31:4707":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:4436:2493":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:7869:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:44170:2334":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:4001:2643":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:44085:4926":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4695:15906":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:7511:16109":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:8741:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:14102:4030":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13894:3948":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:1408:4716":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2925:2343":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:6717:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:7523:16111":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:11264:3382":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:21044:6145":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:4351:5381":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:43608:2333":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:20841:6345":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:7564:16117":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8172:2312":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:7679:4182":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11257:5422":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:7539:2911":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:14227:4056":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"18:707:2300":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:20988:11719":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:256:3058":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:7277:2347":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:434:3064":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:6986:4448":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:9213:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10417:3270":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:41801:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:4362:2831":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"18:614:34969":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46169:5248":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:5044:5388":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12303:3555":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9118:3053":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:21236:6347":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12605:3606":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:45762:5230":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10323:3253":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:6032:2897":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:44157:5206":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:4506:4202":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:46807:5277":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:6740:11678":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10945:3344":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:3898:6188":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:2857:4160":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:21792:4935":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:39413:4974":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11944:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:9188:3055":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:11961:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:2803:4158":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:10974:2920":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:20652:31257":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:8441:5510":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4463:15884":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:21898:4937":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:501:2821":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:1858:4741":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"11:119:2792":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:20853:30199":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:7885:5441":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:1115:33519":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:2811:11701":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8979:5532":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:2174:5888":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:1135:33939":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:42598:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:11527:4922":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:901:2643":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:11738:2320":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:922:4717":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:3948:6190":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"11:1027:17702":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:11500:26466":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:39448:2491":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:4258:4861":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:1844:5354":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:4441:4200":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:11849:11497":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:4785:30330":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:13981:3974":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:7675:6070":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:0:2126":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:14380:4097":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:39271:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:8138:4620":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:2691:2568":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:11428:3394":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:40894:5137":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:6270:2643":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13620:3884":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:9675:2870":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:40654:5135":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:3191:5365":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:10389:2916":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:8252:4629":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:43662:2331":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:4389:2492":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4764:15914":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:4144:4860":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:7708:6102":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6317:4346":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:6850:17030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:11951:1404":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:14007:3980":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11968:1561":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:5013:5388":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10249:3245":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:43424:5181":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:4965:4216":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:5589:4871":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:5074:15949":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:2366:6135":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:8997:18681":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:43374:5178":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:1911:13503":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"11:986:4727":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:3078:2636":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6323:4347":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:7852:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:5567:4167":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"7:79:17613":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2705:2496":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:2046:4819":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"9:357:17635":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:6789:4422":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:695:4718":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:587:12435":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:2743:2572":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:43411:5116":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:41792:1694":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:40400:5125":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:40133:2605":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:2687:5787":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:8113:5372":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:20941:6351":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:4929:15933":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:47971:5328":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:40152:2607":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:1773:2641":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:10897:5520":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:3635:3093":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40524:5132":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:3175:4739":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"0:0:2009":{"crate_id":0,"path":["strsim"],"kind":"module"},"17:11454:3395":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:2164:3077":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:32139:4967":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:1184:3069":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:10013:5353":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:11955:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"11:760:2641":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:45744:5229":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:40362:5122":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12815:3655":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5767:16586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:11966:1503":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:4785:4210":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4395:15720":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:2759:4156":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10430:3271":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12333:3564":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:13719:3902":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:8210:4516":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:43446:5183":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:9744:34958":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:1603:13329":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:1924:2274":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:41563:4898":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:11363:5375":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:45614:5224":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:11425:5377":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:45823:5232":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:11067:5689":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:6711:17020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8202:6181":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:22105:6185":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:20897:6350":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:12502:3593":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:9344:34965":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:11948:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:40098:2612":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:2959:33529":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:1831:2641":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8155:5119":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"11:644:4734":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10906:3338":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:9172:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:10051:4734":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:9939:3222":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:8295:6247":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:48024:5331":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4748:15912":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10654:3298":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:5775:16587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7539:4180":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:9604:3198":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:14403:4101":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:43558:2329":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:21954:4943":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:5586:2893":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:936:6074":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:40514:4881":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:7973:6171":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:40432:5129":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:44492:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:355:5339":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4446:15882":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:7213:4837":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:10148:3238":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:3025:4185":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:9219:2286":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:10963:2919":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:10390:3268":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:5471:2829":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6864:4429":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:1717:13339":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2921:2342":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:4148:6216":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:10609:3294":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:10499:3277":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:4698:4207":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:40465:5130":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5877:16594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:4437:6219":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:21126:4934":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:39441:4977":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13937:3963":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:3799:2641":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:40302:5116":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:7280:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:2541:4147":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:3042:17775":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:8273:5496":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:4018:6197":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:8166:4622":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:6834:11670":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:10458:3273":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:8291:5498":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:8986:5533":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:10486:3276":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:11404:5376":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:4564:4204":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:55:4600":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:41657:4734":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:4127:6214":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:44365:11830":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:5553:4164":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:585:6065":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:32135:4966":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:258:2804":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:9665:34966":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6571:18637":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:12568:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:42644:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:6589:12305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4872:15928":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"12:0:2123":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11970:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:14044:3988":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11340:2924":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:14205:4050":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:9690:2875":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:3214:33604":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7592:18642":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:5377:5394":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:2311:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:46191:5249":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:1543:2829":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:10448:5365":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:5900:16597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:21454:6344":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:8246:6217":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:12659:3614":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:779:2807":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:43345:5174":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:7602:5341":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10241:5396":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:2167:33626":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7494:4549":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:7043:28749":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:10339:3259":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12412:3577":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:4409:2494":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13870:3941":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:3395:3080":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13683:3897":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"0:68:1794":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"1:11911:29340":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:7552:16115":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:2620:5361":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:481:3000":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11189:3372":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12526:3594":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:2049:4727":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:11490:4919":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6130:16637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:42226:4905":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:41455:6182":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10051:3229":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:43437:5182":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6713:4408":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"0:18:1647":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"typedef"},"16:5626:4229":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:10032:26024":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11371:3391":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6171:16639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:8185:2322":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:2783:6332":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:40500:3023":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4862:15927":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5044:15945":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6886:4174":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:5704:4238":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:47773:5317":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:43626:2332":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12864:3662":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:7256:4843":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:4476:4201":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6900:4431":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13991:3977":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5987:16602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:8605:18680":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:1495:13316":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6607:17017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:2855:11708":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"18:681:3033":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:41575:4900":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13732:3908":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:12448:4930":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:9083:3052":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:5836:16593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:44309:11816":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:9909:5147":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:13029:3694":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9716:34962":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:44297:11820":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:30120:6184":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:3155:23610":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:3180:33608":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13368:3771":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:9806:18715":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:8418:5165":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:6392:5136":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:7043:2896":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"0:60:1735":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"1:844:4716":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:1506:13318":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:273:2302":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:7240:34956":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:7698:32507":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:4119:6213":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:1489:4717":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:11227:5419":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:4396:4199":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11074:3082":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:2799:11700":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"13:110:34940":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:5684:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10812:3333":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:9869:6145":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:9151:26461":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:9032:3185":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:47415:5312":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:21060:6337":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:9434:141":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"6:1663:13333":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:0:2118":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:7084:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4824:15922":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:7505:16108":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6456:4166":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:6726:17022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12671:3615":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6931:4434":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:45548:5221":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:3158:23612":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:11946:1523":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:618:2275":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:40414:5128":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:7855:18644":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:49869:6354":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:5737:18633":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:11967:3476":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6372:4165":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:3472:29146":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:44122:5201":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12053:3492":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:7360:2641":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12727:3624":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:11241:18828":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:20650:31260":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"0:73:1642":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"6:4638:15902":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1536:13322":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10529:3282":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:9840:3210":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:10994:3348":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10471:3274":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:4032:4197":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:45568:5222":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6357:4351":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:7227:11676":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:11331:4917":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:43780:2327":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:515:2999":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:47849:5319":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:690:3035":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4650:15903":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11056:18826":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:507:3002":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:9173:2276":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"0:66:1783":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"1:6156:5406":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:41946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:44281:11817":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:4605:2598":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:4845:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:41866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:35:2640":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:6644:5407":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:4841:4212":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:10253:3246":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3934:2829":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:9048:3051":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:2105:18759":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:3406:5490":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:6028:16607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:10451:5367":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:42588:30281":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:6671:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:2588:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:6214:4329":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10931:3340":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13830:3930":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6022:16606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13957:3969":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:11045:3352":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:1583:4739":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2779:4472":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:6470:4183":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:6780:6335":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7484:4548":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4626:15901":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10714:5437":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:9850:18716":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:4814:4211":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:45722:5228":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10555:3287":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:30943:2257":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:917:4735":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:44285:11819":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:14315:4079":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"11:1068:4731":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:21112:6341":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:30545:29972":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:119:12104":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:12424:3579":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11962:1507":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:568:12432":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:4463:418":{"crate_id":2,"path":["core","char"],"kind":"module"},"17:10597:3293":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10511:3280":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:10196:4911":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:5062:2836":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:8458:6271":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:13964:3970":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"15:327:17732":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:6156:16638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:2816:11702":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:9153:3054":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:42369:2287":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:4413:15878":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11467:3397":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:41733:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:643:6068":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"0:72:1641":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"2:47948:5327":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:10867:5397":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"0:43:1701":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"16:6939:18639":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12592:3605":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:43850:2306":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:9977:3199":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:5343:5389":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:12377:3573":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:3231:5367":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:4928:4215":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5793:16588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:5940:4264":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:573:12433":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8949:5528":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:3168:11525":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13427:3823":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:9409:34961":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"7:0:1551":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:4868:4213":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12346:3566":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:21459:6352":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:5882:4258":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:43336:5173":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:2373:4140":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:9413:5435":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:6619:2648":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:9074:5413":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:819:2810":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:44289:11818":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:43385:5179":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:7168:2269":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:2567:4148":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:1746:30276":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:9227:2285":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:7331:34955":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:8542:18682":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6915:34951":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10883:3337":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:46312:5253":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:1709:13338":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4664:15904":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:3719:4817":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:2244:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:43576:2328":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:3580:4716":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11955:3475":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:1501:17703":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:3700:5375":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:1103:4732":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:10744:5374":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:2580:5360":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:20622:30966":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:7052:2816":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:13673:3896":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13862:3940":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:11035:5518":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:12826:3657":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:875:4719":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:8021:4609":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4291:15868":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:6316:2804":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:2715:4154":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:11269:26962":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:6389:1694":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4587:15898":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11832:3449":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:2443:4143":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:22651:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:582:3066":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:22387:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:9571:34960":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:3141:11709":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:9183:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}