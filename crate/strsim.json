{"root":"0:0:2379","crate_version":"0.11.0","includes_private":false,"index":{"2:13004:33262":{"id":"2:13004:33262","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12609:2690","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::rmatch_indices":"2:13007:33263"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43324:2711","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:1967":{"id":"0:26:1967","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:1947","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2683:2910":{"id":"2:2683:2910","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2657:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2690-0:112:1941":{"id":"b:2:2690-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2660:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2693:138","2:2694:1743"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12933:2095":{"id":"2:12933:2095","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41293:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:26950":{"id":"2:12995:26950","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2698:138":{"id":"2:2698:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31708:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:41416:8310-0:112:1941":{"id":"a:2:41416:8310-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41416:8310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12947:5557":{"id":"2:12947:5557","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12265:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43150:2700","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12963:2950":{"id":"2:12963:2950","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41293:191","prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:26335":{"id":"2:12960:26335","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:8219":{"id":"5:5617:8219","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41415:8117-0:112:1941":{"id":"a:2:41415:8117-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41415:8117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12920:2041":{"id":"2:12920:2041","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:26688":{"id":"5:5618:26688","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13044:26686"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2694:1743":{"id":"2:2694:1743","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:26687":{"id":"5:5619:26687","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13045:26685"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12957:26333":{"id":"2:12957:26333","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1971":{"id":"0:27:1971","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[90,0],"end":[164,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7948:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7948:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2455:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:33264":{"id":"2:13010:33264","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2405-0:112:1941":{"id":"b:2:2405-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2399:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2407:2588"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12952:33258":{"id":"2:12952:33258","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43438:2710","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:26941":{"id":"2:12974:26941","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12425:2693","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13014:33266":{"id":"2:13014:33266","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:33267":{"id":"2:13016:33267","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13042:28106":{"id":"2:13042:28106","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39264:2892","Self::is_ascii":"2:13041:26689"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39264:2892","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2046":{"id":"0:63:2046","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[300,0],"end":[337,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2455:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:675"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12950:31370":{"id":"2:12950:31370","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12949:31367"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43457:2692","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13052:33276":{"id":"2:13052:33276","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4698:33276"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43491:2706","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:26949":{"id":"2:12992:26949","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:33254":{"id":"2:12924:33254","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12922:33253"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2903:246-0:112:1941":{"id":"a:2:2903:246-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2903:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12971:26939":{"id":"2:12971:26939","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12609:2690","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::split_whitespace":"2:12949:31367","str::rsplit":"2:12977:26943"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43174:2716","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2699:1741":{"id":"2:2699:1741","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5601:2109":{"id":"5:5601:2109","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2695-0:112:1941":{"id":"b:2:2695-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2698:138","2:2699:1741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20:1947":{"id":"0:20:1947","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:21:1950":{"id":"0:21:1950","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[53,0],"end":[72,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:1947","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7948:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7948:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2455:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:33269":{"id":"2:13018:33269","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12635:2682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13036:33273":{"id":"2:13036:33273","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13046:28109":{"id":"2:13046:28109","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38370"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2684-0:112:1941":{"id":"b:2:2684-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2686:805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12946:1968":{"id":"2:12946:1968","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12265:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43144:1940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:33252":{"id":"2:12921:33252","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13043:26690":{"id":"2:13043:26690","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3516-0:112:1941":{"id":"b:2:3516-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3514:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3518:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2379":{"id":"0:0:2379","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1307,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]","#![allow(clippy::cast_possible_wrap, clippy::cast_sign_loss,\nclippy::cast_precision_loss, clippy::needless_pass_by_value,\nclippy::similar_names, clippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::must_use_candidate, clippy::range_plus_one)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:112:1941","0:20:1947","0:21:1950","0:26:1967","0:27:1971","0:44:2006","0:45:2008","0:53:2017","0:54:2022","0:61:2031","0:62:2040","0:63:2046","0:65:2062","0:105:2140","0:106:2149","0:108:2161"],"is_stripped":false}}},"2:12935:26909":{"id":"2:12935:26909","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:31388":{"id":"2:12953:31388","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43466:2691","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12949:31367":{"id":"2:12949:31367","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12950:31370"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43448:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12951:30514":{"id":"2:12951:30514","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43428:2709","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2149":{"id":"0:106:2149","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[693,0],"end":[702,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[37,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10050:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13027:26952":{"id":"2:13027:26952","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:1983":{"id":"2:12998:1983","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12609:2690","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::rmatches":"2:13001:33261"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43378:2713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12983:33260":{"id":"2:12983:33260","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12609:2690","str::split":"2:12971:26939","prim@char":"1:12265:458","str::split_terminator":"2:12980:33259"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43242:2719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13033:33272":{"id":"2:13033:33272","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2008":{"id":"0:45:2008","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[191,0],"end":[211,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7948:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7948:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2455:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5607:33972":{"id":"5:5607:33972","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2022":{"id":"0:54:2022","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[233,0],"end":[259,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7948:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7948:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2455:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2040":{"id":"0:62:2040","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[285,0],"end":[290,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","type_id","source","cause","provide"],"trait":{"name":"Error","id":"2:2743:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12919:963":{"id":"2:12919:963","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12265:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13039:33274":{"id":"2:13039:33274","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12570:137","`FromStr`":"2:12569:2707"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12569:2707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12569:2707","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:1942":{"id":"0:113:1942","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[34,4],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:116:776":{"id":"0:116:776","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10000:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12939:33256":{"id":"2:12939:33256","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12271:1658","str::slice_mut_unchecked":"2:12940:33257","crate::ops::Index":"2:38910:2999"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2017":{"id":"0:53:2017","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[221,0],"end":[223,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.866 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2031":{"id":"0:61:2031","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13045:26685":{"id":"2:13045:26685","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2680-0:112:1941":{"id":"b:2:2680-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2657:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2654:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2683:2910"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13007:33263":{"id":"2:13007:33263","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12609:2690","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::match_indices":"2:13004:33262"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43342:2712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:1982":{"id":"2:12942:1982","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12941:26934","str::split_at_mut_checked":"2:12944:26938"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2161":{"id":"0:108:2161","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[721,0],"end":[754,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:33257":{"id":"2:12940:33257","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12271:1658","crate::ops::IndexMut":"2:3178:3000","str::slice_unchecked":"2:12939:33256"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13048:28111":{"id":"2:13048:28111","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38370"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:2072":{"id":"2:12931:2072","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41293:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2407:2588":{"id":"2:2407:2588","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5849-0:112:1941":{"id":"b:5:5849-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10050:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5847:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5851:1716"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5851:1716":{"id":"5:5851:1716","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:26937":{"id":"2:12943:26937","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12944:26938"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:33971":{"id":"5:5604:33971","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:26911":{"id":"2:12930:26911","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12282:1785"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12980:33259":{"id":"2:12980:33259","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12609:2690","str::split":"2:12971:26939","prim@char":"1:12265:458","`DoubleEndedIterator`":"2:7986:131","str::rsplit_terminator":"2:12983:33260"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43224:2720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13051:8109":{"id":"2:13051:8109","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4701:8109"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43482:2705","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13021:33270":{"id":"2:13021:33270","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616:33974":{"id":"5:5616:33974","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2687","`String`":"5:7615:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2687","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:675":{"id":"0:119:675","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:33970":{"id":"5:5600:33970","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2687","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2687","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13047:28110":{"id":"2:13047:28110","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:38370"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5599":{"id":"5:5599","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5600:33970","5:5601:2109","5:5604:33971","5:5607:33972","5:5615:33973","5:5616:33974","5:5617:8219","5:5618:26688","5:5619:26687"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10045:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:776"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13049:33275":{"id":"2:13049:33275","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4700:33275"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43473:2704","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:26910":{"id":"2:12937:26910","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13001:33261":{"id":"2:13001:33261","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12609:2690","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::matches":"2:12998:1983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43396:2714","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2410:25643":{"id":"2:2410:25643","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:1941":{"id":"0:112:1941","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[33,0],"end":[35,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:113:1942"],"impls":["a:2:31837:2728-0:112:1941","a:2:41415:8117-0:112:1941","a:2:2903:246-0:112:1941","a:2:31780:237-0:112:1941","a:2:41416:8310-0:112:1941","b:2:2695-0:112:1941","b:2:3516-0:112:1941","b:2:2408-0:112:1941","b:2:2680-0:112:1941","b:2:2405-0:112:1941","b:2:2684-0:112:1941","b:2:2690-0:112:1941","b:5:5849-0:112:1941","0:118","0:17","0:117","0:19","0:115"]}}},"2:12941:26934":{"id":"2:12941:26934","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12943:26937","str::split_at_mut":"2:12942:1982"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:2916":{"id":"2:12967:2916","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41293:191","prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31780:237-0:112:1941":{"id":"a:2:31780:237-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31780:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12929:334":{"id":"2:12929:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12930:26911","`u8`":"1:12282:1785"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13041:26689":{"id":"2:13041:26689","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:33253":{"id":"2:12922:33253","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918":{"id":"2:12918","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12919:963","2:12920:2041","2:12921:33252","2:12922:33253","2:12924:33254","2:12927:26866","2:12928:33255","2:12929:334","2:12930:26911","2:12931:2072","2:12933:2095","2:12935:26909","2:12937:26910","2:12939:33256","2:12940:33257","2:12941:26934","2:12942:1982","2:12943:26937","2:12944:26938","2:12946:1968","2:12947:5557","2:12948:5182","2:12949:31367","2:12950:31370","2:12951:30514","2:12952:33258","2:12953:31388","2:12954:26951","2:12957:26333","2:12960:26335","2:12963:2950","2:12967:2916","2:12971:26939","2:12974:26941","2:12977:26943","2:12980:33259","2:12983:33260","2:12986:26945","2:12989:26947","2:12992:26949","2:12995:26950","2:12998:1983","2:13001:33261","2:13004:33262","2:13007:33263","2:13010:33264","2:13012:33265","2:13014:33266","2:13016:33267","2:13017:33268","2:13018:33269","2:13021:33270","2:13024:25658","2:13027:26952","2:13030:33271","2:13033:33272","2:13036:33273","2:13039:33274","2:13041:26689","2:13042:28106","2:13043:26690","2:13044:26686","2:13045:26685","2:13046:28109","2:13047:28110","2:13048:28111","2:13049:33275","2:13051:8109","2:13052:33276"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13017:33268":{"id":"2:13017:33268","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12986:26945":{"id":"2:12986:26945","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690","str::rsplitn":"2:12989:26947"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43278:2718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31782:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2686:805":{"id":"2:2686:805","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:33255":{"id":"2:12928:33255","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:26943":{"id":"2:12977:26943","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12609:2690","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::split":"2:12971:26939"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43192:2715","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:26951":{"id":"2:12954:26951","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31837:2728-0:112:1941":{"id":"a:2:31837:2728-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31837:2728","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2693:138":{"id":"2:2693:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2664:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5615:33973":{"id":"5:5615:33973","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3518:1756":{"id":"2:3518:1756","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39078:5453","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:26938":{"id":"2:12944:26938","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12943:26937"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13044:26686":{"id":"2:13044:26686","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2408-0:112:1941":{"id":"b:2:2408-0:112:1941","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31781:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2402:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2410:25643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12989:26947":{"id":"2:12989:26947","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12265:458","str::splitn":"2:12986:26945","self::pattern":"2:12609:2690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43296:2717","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:776":{"id":"0:18:776","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[38,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10019:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42334:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2062":{"id":"0:65:2062","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[353,0],"end":[414,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2460:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10261:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2421:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:26866":{"id":"2:12927:26866","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12157:2697"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12948:5182":{"id":"2:12948:5182","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43160:2699","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2140":{"id":"0:105:2140","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[677,0],"end":[679,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:25658":{"id":"2:13024:25658","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2006":{"id":"0:44:2006","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[186,0],"end":[188,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13012:33265":{"id":"2:13012:33265","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13030:33271":{"id":"2:13030:33271","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:2690"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:2683","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:2684","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:8612:5777":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:15023:4086":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:4976:4521":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:608:3189":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11471:5980":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:30271:31434":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:12485:21225":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:9065:5932":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:41113:7655":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:21250:32656":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:10882:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:6945:3012":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:2587:5755":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:3236:26275":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:1809:672":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:1699:6797":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6775:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:11578:5833":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:1312:4768":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:42983:5534":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:939:5037":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6706:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:9334:5811":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:8494:5903":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12768:21080":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:6588:4668":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:8110:5848":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12572:3382":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:43975:13863":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:5930:5341":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:46301:5700":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13877:3792":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:43049:5472":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:41440:137":{"crate_id":2,"path":["strsim","HammingResult","Err"],"kind":"variant"},"5:733:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:33236:13739":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:14599:3923":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:14414:3887":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:8662:5921":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:10395:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:564:6651":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:4406:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:11493:28855":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:4153:8256":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:12569:2707":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:3540:5768":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11166:3409":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9232:25666":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13485:3700":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:12276:730":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"18:491:3171":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12043:3526":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:14372:3879":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11567:3446":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:7648:4865":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:7957:2731":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4718:4512":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5400:7075":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:4695:8295":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2657:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:43918:7673":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:22094:8190":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:45273:5602":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:15390:4176":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:1517:6680":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:2759:6232":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:21301:8379":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:41365:2001":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12530:3579":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:4952:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:3149:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:6749:4704":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:46290:5699":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:3038:4783":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:11242:3415":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:15957:4327":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:5483:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:43224:2720":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12030:3525":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:11687:5393":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:10050:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:2978:5760":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5225:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13146:3627":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:4837:776":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:11854:5837":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11743:3471":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:4587:4509":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:41757:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:5011:8296":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:5336:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:12609:2690":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:1485:6667":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:635:3196":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:945:5038":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:5847:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:6746:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"5:7419:2001":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:15301:4152":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:8166:2673":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:11442:5110":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:14994:4080":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:46270:5697":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:8451:32907":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:837:5034":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:15383:4175":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:7769:4869":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:45256:5601":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12107:3382":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:39952:5474":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:10001:2654":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"14:7:5019":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:9329:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:1558:5031":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:31837:2728":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:11751:5771":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:43554:13544":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:7958:3496":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:5528:5792":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"0:105:2140":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"17:2037:3242":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:3623:3006":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:41069:5368":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:22253:8456":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:16069:4371":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:5241:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:10481:32977":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13538:3713":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:45189:5597":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10887:34717":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:10970:5934":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:22:791":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:7656:21039":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:7695:4867":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:598:34726":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5329:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:10309:2676":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6231:4609":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:14912:4068":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:39821:3038":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12127:3532":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:1054:5040":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8000:8115":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:2090:5140":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:12213:3541":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11853:3488":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:11545:5829":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:8328:7628":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14723:3925":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6079:4424":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:1066:20096":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:14587:3916":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:12216:5989":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:11773:3476":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:3281:5050":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:2278:8172":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:7697:3004":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:8039:2730":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:2188:130":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:485:6605":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:45381:5616":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"11:875:5038":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:643:3172":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:39091:5454":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:515:3169":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2271:5754":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:2660:4458":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:10155:3365":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:5816:5339":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:33409:13740":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11510:3440":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:8733:5924":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:46380:5710":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:15569:4236":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:5215:5169":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:7330:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"0:54:2022":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"18:726:3215":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14246:3862":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:5423:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:7339:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8535:5773":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:5174:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:7412:7504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5250:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11812:3483":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:9671:21078":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11227:3413":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:113:25276":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:22525:5425":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:43964:5571":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:12280:875":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:39078:5453":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:41085:8229":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:6456:21033":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:12289:1357":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:3013:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:22220:8457":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:43482:2705":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:10415:13830":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:922:5034":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:5037:4523":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:33582:13741":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:45221:5599":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:43174:2716":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:10877:3384":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:42562:5529":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4744:7500":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:42992:5536":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:10919:25671":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:31764:2900":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:31750:4826":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:9467:5749":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:45594:5627":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:8115:5849":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:38866:13515":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:6047:4571":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:1949:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13855:3785":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:3371:5766":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:6766:5824":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:12824:21102":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:7389:7503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5260:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13235:3651":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12443:3567":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:45235:5600":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:3669:3269":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:1547:6700":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:1590:5050":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:14402:3885":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:9121:5797":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:39961:5475":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:1831:3004":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:13252:3654":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:12929:3603":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:16032:3654":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:14038:3813":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:40106:5487":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:43799:2722":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:39742:3046":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:43075:5542":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:40002:5480":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:680:3204":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:10269:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:10910:25667":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:38981:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:10828:34721":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:689:3206":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:2784:2657":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:11086:5389":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:41231:5773":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:43448:2694":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:45302:5604":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:41562:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:1860:13769":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:40290:5355":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:6447:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:9219:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:724:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:11127:2718":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:9984:21098":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:491:6606":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6542:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:41219:5508":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:11153:3383":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10419:3231":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:11623:7689":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:7006:4743":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:6811:7405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12318:3254":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:40074:5348":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12399:3561":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:10997:3392":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:5076:8302":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:8175:4930":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12543:3580":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:41434:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:2949:8369":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:15190:4124":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:3014:20170":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:30245:3061":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"13:109:34692":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10317:3226":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:827:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:11574:3449":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:22070:8463":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:12270:1624":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11661:3463":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6962:4480":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:5352:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:11176:5828":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"11:1917:5052":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:6698:8338":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:14489:3902":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:2788:4464":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:21901:8190":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:4424:4504":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:3178:3000":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:4856:4517":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:5370:7059":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:41482:5046":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4992:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:5665:7196":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:9253:5946":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:7321:5510":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:497:6609":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:2203:3246":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12792:3330":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:5164:5786":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:2528:4452":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:13549:3001":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:39865:5463":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:14575:3565":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:1574:5029":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12993:21103":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:6033:5169":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:3029:34144":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:1142:5044":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:3874:3004":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:40280:5491":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:613:34725":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:811:3004":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:735:25285":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:2938:2885":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12408:3562":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:2423:2001":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:1569:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:22517:5424":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:4986:5332":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:4897:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:1547:5030":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:7888:4883":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:9516:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:557:5738":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:4926:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:6620:4678":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:45850:5653":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7014:21036":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:8029:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:3115:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:39776:3039":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:22032:8462":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:12342:3554":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:21352:8190":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:8265:7614":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:3938:5772":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:10612:5765":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:39850:31429":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:1887:2001":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13766:3771":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:41:3003":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:44162:5579":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:4926:8261":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:15197:4126":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:533:8097":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:6678:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11634:3461":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4262:8273":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:6639:7647":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:3522:5904":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:8132:5851":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:7132:4767":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11497:3439":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:4870:6873":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:6263:5411":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:4830:4516":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6758:4705":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:11155:5390":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:16138:4385":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:13832:3782":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:43696:5403":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:8197:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5407:1205":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:2140:5040":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12597:3581":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:6532:4666":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:5195:5786":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8122:5850":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:22453:7649":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:43296:2717":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5536:7136":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:22385:5416":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:40519:5493":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:5494:5787":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5039:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:521:25287":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:12557:3402":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"18:659:3197":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:687:5046":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:21468:8190":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:2528:6234":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:8118:4923":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:1559:6708":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10872:5850":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:11915:21199":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8567:5910":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:14189:3850":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:11731:2695":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:22634:8245":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:12281:856":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:4821:3259":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:8815:5930":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:2497:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:22438:5417":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:6524:7282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:45738:5649":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:581:2633":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4909:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:15769:4297":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"0:62:2040":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"1:10843:7679":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"5:7036:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:1585:6724":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8542:7674":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:2421:7645":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:2338:4437":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"0:61:2031":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"1:3276:5761":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:15010:4081":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:3794:5140":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:7485:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:11016:28274":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:43898:7668":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4805:8298":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:10759:3382":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:1063:5041":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:45317:5605":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:44210:5581":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:5769:4540":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:7405:34534":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:41357:5046":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:13568:3725":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:5686:4470":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5445:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7497:4846":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:356:5733":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:893:3006":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:3143:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:880:5033":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:7427:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:7565:31429":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:41837:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:7663:3217":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:867:3229":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:23085:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:8294:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11027:28279":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:46342:5703":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:0:2500":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:2981:13511":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:2198:8093":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:12277:881":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:5544:5793":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:4771:4514":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:2104:5142":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:2323:20167":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:559:6649":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:4152:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:41374:5510":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:726:8232":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:42263:2658":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"11:2304:4768":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:4986:3261":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:1968:2652":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:8144:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:45331:5606":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:11828:5983":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7823:21040":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:4270:8274":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:33755:4787":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:11547:3309":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"7:0:1835":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:13116:3623":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:45626:5629":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:4487:5776":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:15760:4293":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:5588:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7473:4582":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:40513:5359":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:2491:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:10261:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:1723:6806":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:4062:4502":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:1429:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:2355:4439":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:1923:5053":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:588:8108":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:45871:5654":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:43466:2691":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:46202:5693":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:2423:8175":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:43781:2721":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:5449:2688":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:45413:5618":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:7256:6281":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11605:3457":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:4128:5324":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:12265:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11524:3441":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:860:4431":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:5266:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:6821:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:12157:2697":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:12278:863":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"11:1903:5050":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"15:394:20132":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:12348:5399":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:6636:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:5749:5795":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:35631:4788":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:43002:5537":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:12268:1256":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:7510:2645":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:6054:14056":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:45089:5585":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:5684:8325":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:7580:5180":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:2684:4459":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4800:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15418:4183":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:4141:8253":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:42755:5531":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"11:1603:5049":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10137:21076":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4979:6924":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:43575:5550":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:12287:937":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:41915:5381":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5477:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:15222:4131":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:698:3207":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7813:4871":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5671:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:9640:28288":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:38941:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:8404:2681":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:9088:5375":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:7144:21037":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:7857:4879":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:15039:4089":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6782:21035":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:8300:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:538:3179":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:22603:7652":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6948:4479":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:16223:4407":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:9054:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13046:3613":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12949:3254":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6300:4631":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:2945:2887":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"14:214:5025":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:9342:7676":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:2691:5756":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:11169:5391":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:13245:32710":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6098:21030":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:3475:4495":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:44100:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11405:3432":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:0:968":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5160:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5014:6943":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:8196:5140":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:16151:4391":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:42334:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:7944:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:10893:2716":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4787:6812":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:7446:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11755:3474":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:7870:28286":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:14298:3868":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10044:21099":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:6187:28282":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"7:78:20010":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:5846:4545":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:6821:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"14:165:20103":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:21477:8376":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:5756:4535":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:909:5047":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:2443:3006":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:1580:6722":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14463:3900":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:5581:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:9361:5827":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:11715:3467":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:15102:4102":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:45721:5648":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:14091:3820":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11621:3459":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:9099:5029":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13497:3701":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5643:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:3369:5765":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:10654:3496":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:43914:7672":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:14855:4031":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:1887:5750":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:40053:5342":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:45700:5647":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:7537:7566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:10439:3367":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:4470:7676":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7580:4861":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13814:3781":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"11:710:5030":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13999:3808":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:9635:5848":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:11688:3465":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:16093:4376":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:7618:4862":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:12237:8116":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:31757:5444":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:3514:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:39719:3043":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:7549:4859":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2069:5193":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:46223:5694":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:10953:25669":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:7602:7591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:10930:5847":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:7452:7512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:13738:3764":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:2208:5144":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:43133:2703":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:6398:4469":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:39877:8158":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:1874:7643":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:542:4422":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:33099:13738":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:9180:8344":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12328:3549":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:13211:3650":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:2626:8190":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:6583:5492":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:39676:2705":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"9:178:7843":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:4595:8277":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:39895:5464":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6435:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:1328:5041":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:637:5739":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12724:21101":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:15116:4103":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:4254:8272":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:465:6595":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:13308:3669":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:41415:8117":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:3128:8127":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:3461:5493":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:9848:2659":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:12201:3540":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:44149:5576":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:5028:943":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:14977:4078":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:4131:8252":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"9:53:7832":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:4767:3032":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5146:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:39925:5471":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:30620:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:43120:2708":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13325:3671":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:5613:5794":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:5347:4527":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:5528:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:12387:5401":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:9201:5938":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:10848:5849":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:11654:5392":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:8171:2672":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:8420:5769":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:39732:3045":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10720:34720":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12683:3586":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:44141:5574":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:2572:4454":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"15:288:20122":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:46070:5689":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13455:3696":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:9286:25682":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:4194:13561":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:5457:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:40062:5485":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6466:4660":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:10304:2674":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:3743:34060":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:39071:5452":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:14284:3867":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:4440:34062":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:3389:13513":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:2315:13759":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:5181:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:37562:13743":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:21223:32648":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:871:8121":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:5385:3365":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5219:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:9265:5948":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:46457:5728":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:2438:4448":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:2976:13510":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:7521:2646":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14260:3864":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:5756:5796":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:2903:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:6900:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:1582:5048":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"11:2352:5041":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:7306:34709":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:2651:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:2655:5757":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:7429:7505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:31781:2727":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"11:2554:34689":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12969:3605":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:5742:4530":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:43160:2699":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:42292:4898":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"11:2369:5056":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:3146:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:1192:34558":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:11102:3404":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:42280:31398":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:5031:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:9091:5934":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:43747:13545":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:5681:7406":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:2374:4445":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:6672:2001":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13844:3784":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:15748:4291":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8399:3217":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:9214:5939":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:43473:2704":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:44108:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"11:2542:6366":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:1671:6784":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12621:3582":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:40504:5492":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:1885:5749":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:32981:13737":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11256:3417":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"11:299:6580":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:15521:4235":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:41405:5512":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:8093:4921":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:10819:5964":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"11:2151:5041":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:8259:7613":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:532:6635":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:2732:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"0:0:2379":{"crate_id":0,"path":["strsim"],"kind":"module"},"6:5376:7061":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5244:7009":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11016:3394":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:15289:4146":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:507:3172":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11711:5770":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:3239:26137":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:14752:3945":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:43733:5561":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:39001:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"11:832:5047":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:8073:4920":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:1754:648":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:15273:4144":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:39974:5476":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:8160:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:13774:3773":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"11:883:5039":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:11141:2717":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:7346:3002":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:14212:3859":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:523:6629":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4971:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:15944:3650":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:8095:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:7435:5176":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:6519:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:15456:4191":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:2317:13760":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:43906:7670":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:6802:4717":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:12516:3577":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:11617:7688":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:670:3203":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:14147:3829":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:15836:4309":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5112:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:15473:4198":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:6412:8470":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:15092:4101":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:10524:3378":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13272:3664":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:3247:5051":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:9886:21095":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:1481:5046":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:914:5030":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:787:5033":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:12232:7854":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12851:3598":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12278:3546":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:44198:5058":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:21299:8190":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:1596:5051":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:45074:5582":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:21372:5414":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9858:21094":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11214:3412":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:2964:4782":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:5277:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12289:3547":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13922:3798":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:2421:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:30647:2633":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13064:3616":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:5075:4524":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:5559:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10018:21079":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:41253:5369":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:14449:3899":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"7:31:20003":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:41340:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:8710:5525":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:13553:3719":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:12425:2693":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:39041:2639":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"18:718:3212":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:11033:28292":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:573:3172":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"0:44:2006":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"5:1537:5047":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:8798:5029":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:3097:13514":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:6545:3006":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:8274:8218":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:4802:4515":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4232:30436":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:0:543":{"crate_id":2,"path":["core"],"kind":"module"},"2:3426:13516":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:9273:5950":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12362:3559":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:4743:4513":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6670:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:1577:1939":{"crate_id":2,"path":["core","mem"],"kind":"module"},"5:7713:3005":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:14066:3818":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13606:3733":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:45671:5646":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:10062:2667":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:7441:31548":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13437:3688":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:1581:3006":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6480:4471":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5134:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:2290:34528":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:40304:5356":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:10052:2662":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:7633:34704":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:14436:3898":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5502:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:42020:2662":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:1519:5032":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:31782:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4932:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:2449:8185":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:10861:5971":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:42552:5525":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6317:4638":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:43940:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:31838:2889":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4891:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:40490:5357":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:42308:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:6543:4667":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:4468:4505":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"11:2383:5029":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:6393:8469":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:46281:5698":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:41490:2001":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:13421:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"11:800:3006":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:8499:8228":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:5083:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:7082:34053":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:39769:2704":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:6366:5795":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:21479:5414":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"0:53:2017":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"6:8341:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:403:3232":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:41796:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:43062:5541":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:10691:8190":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:10064:2668":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:14131:3824":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:45153:5591":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:14325:3872":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:43023:5539":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11898:3492":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:43012:5538":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12175:3535":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:40528:5495":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:3028:2970":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:21213:2633":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:12283:1767":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:43378:2713":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:4091:8250":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"11:2326:5040":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:10818:3383":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:7907:13725":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10185:3222":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:14788:3976":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:4641:4511":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:4425:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:11840:30693":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:5515:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:8788:5781":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:1939:2651":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:13526:3710":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:2708:4460":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:1528:5033":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:6813:4718":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:40115:5351":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11647:3462":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:5314:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:7168:5950":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:43890:7666":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3139:2729":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:9755:21075":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:4740:7496":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"6:5636:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:29809:8231":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4885:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:3329:4494":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:3473:3252":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4876:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:12051:28239":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"9:447:20017":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:3286:34591":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10350:3227":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"10:0:2493":{"crate_id":10,"path":["adler"],"kind":"module"},"16:7428:21038":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:10915:34716":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:6714:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:5052:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:10284:3225":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:6532:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:14529:3907":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:11528:28276":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12900:3602":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:2627:2650":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:21791:32654":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:11139:5933":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:45206:5598":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:42770:7664":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:578:6659":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:43144:1940":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:31869:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:2274:5965":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:41718:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:5453:2689":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:5546:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:4140:5325":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:45121:5589":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:12635:2682":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:12141:5394":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:7723:5806":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6342:34710":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8408:5895":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"18:563:3181":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6494:4663":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11419:3382":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:3833:5770":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12494:3572":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:2878:4468":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:1510:6677":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11772:5772":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:12272:1746":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:41601:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10218:3223":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13986:3807":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3607:8207":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"14:160:5019":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11595:3456":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:6104:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6066:4578":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:3842:4499":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13509:3702":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:6689:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:1098:3239":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:43590:5555":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:1585:3004":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:4916:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:9405:5952":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:21235:32648":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:6026:4418":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:8586:5912":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:4543:2901":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:11730:3470":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:586:6663":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:6872:4731":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:7397:34712":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:42013:2661":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:1357:5045":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:5781:4474":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:1490:6669":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:10612:3379":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3328:5764":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:481:3170":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:42027:2669":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8188:5855":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:2768:4463":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"13:0:2489":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:5897:5804":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:1727:34060":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"0:45:2008":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"11:328:6583":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7355:4805":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:553:6646":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13375:3680":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:39693:3044":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:43150:2700":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13473:3697":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13089:3617":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:32922:8372":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:6763:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:45812:5651":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:9048:5931":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:1680:6790":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6353:4429":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10573:34715":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10251:3224":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:12264:1137":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"11:1107:5043":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:44187:5580":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:1207:3241":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12056:3528":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13024:21104":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:25485:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:7376:13726":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:6628:5350":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:8006:8148":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:42317:2658":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:4502:4506":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:5466:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:15445:4190":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:12284:1773":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:45512:5623":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:1628:6758":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:11211:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:3778:4497":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:1686:6793":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7111:4765":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:5353:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:43104:5545":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:1910:5051":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:4927:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"0:112:1941":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"17:15655:4263":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:15058:4090":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:43396:2714":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:10954:21110":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:15822:4306":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:3588:29032":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:43428:2709":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:15368:4171":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10399:2699":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:16235:4410":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:3029:3264":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:4352:4503":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:43342:2712":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:40044:5484":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11825:3485":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:15463:4193":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:10255:5954":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:44171:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:33040:13736":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:10868:5046":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:7306:7452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:7561:7576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:6634:7648":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:4590:2902":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11075:3402":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:7516:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:872:3230":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:32257:4781":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:7314:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:13959:3802":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:42531:2677":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9150:8343":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:9521:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:1172:34146":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:3399:3004":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:3334:13747":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:46173:5692":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:40538:5360":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:7604:4486":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:5236:7006":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:13412:3686":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:7799:4476":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:6597:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:43242:2719":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:40155:5488":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:10901:5769":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:545:6641":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:12282:1785":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:8269:5857":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:6698:7372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:10412:28339":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:2234:3249":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:10513:32714":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:4742:7498":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:8253:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:7984:7597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:150:4416":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:3809:5142":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:5557:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:5722:4475":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:12248:25680":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:10267:153":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"4:0:2490":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:2536:6585":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:8226:2081":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:3614:4496":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:1065:34060":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:538:6638":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:4479:7646":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:7461:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:5020:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"11:2498:20092":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:2669:28269":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:43758:5562":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:9199:2683":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"11:1883:5029":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:725:8190":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:7539:4483":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:10661:3380":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:13439:5411":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:5742:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:7986:8114":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:39839:5462":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6738:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:15376:4174":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:8413:13723":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:6279:28291":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:7061:4757":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4824:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:2660:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:37507:13742":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:2505:1935":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"2:3757:2001":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13387:3681":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:6417:7232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7406:30430":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"10:44:5060":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:46316:5701":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:831:5132":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:40012:5335":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:22623:5438":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:6587:5814":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:867:5032":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12584:3383":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:640:5741":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11367:3402":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"14:31:5019":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11592:5834":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:7755:4478":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:8748:8320":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:8155:4928":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:5960:4562":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:951:5039":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:4241:7676":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:1883:5190":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13899:3793":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:11048:2715":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5677:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:2418:4447":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4811:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:570:6654":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:7049:8373":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"14:0:2496":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2838:4466":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:11241:7681":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:22161:8467":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:11042:3395":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13785:3776":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:1565:6710":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:1663:6783":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:45544:5625":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"11:2403:5046":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:8188:4932":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10170:3366":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:15400:4179":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6756:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:3418:8215":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:41416:8310":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13581:3729":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12695:3587":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:297:2687":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:41679:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:42355:2660":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:21252:32658":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:15635:4260":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:849:5046":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:6562:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:4617:458":{"crate_id":2,"path":["core","char"],"kind":"module"},"2:46327:5702":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6991:34703":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13363:3677":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"19:0:1235":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:2728:4461":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:2654:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:39021:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:2548:6586":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:43278:2718":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:11847:5837":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:15426:4185":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"11:434:34685":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:39704:31438":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:3326:5763":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"12:0:2495":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:12279:869":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:6915:7445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:3637:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12089:3530":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:1496:6672":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:4410:5328":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:0:2499":{"crate_id":17,"path":["object"],"kind":"module"},"5:1343:5040":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:42923:5532":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14025:3811":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:15356:4168":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:7559:4860":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:15281:4145":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:6927:4736":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"0:20:1947":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"17:14386:3881":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:15176:4121":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:16259:3681":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:10058:2670":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:7107:34091":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:30260:2658":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:3307:5053":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13972:3498":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"11:2124:4768":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:10498:28269":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:6414:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:7948:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:10701:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:9781:21093":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:7638:5186":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15266:4143":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:4175:13509":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6665:21034":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:6721:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:3349:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:5046:6959":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:6729:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:6752:5820":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:45783:5650":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:13494:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:6609:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:15410:4182":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:39788:3040":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:7910:21041":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11269:21129":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:8282:7619":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:22206:8190":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:45833:5652":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:40021:5338":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11493:3438":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6657:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4808:8277":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:8351:7634":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:31708:2649":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:1862:5748":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:10092:21100":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11702:3466":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:8452:5475":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:15206:4127":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:6623:5815":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:7552:5177":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:4560:4508":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:836:5029":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:43902:7669":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:5020:8297":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:15778:4299":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:40096:5486":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:706:2685":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6385:4651":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:2954:8371":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:14356:3878":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12264:3545":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:45360:5615":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:41291:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:45442:5619":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:45948:5687":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:7570:4484":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12388:3560":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:2898:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:7628:5185":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:21779:5413":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:45495:5622":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:4847:8264":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:7348:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:43886:7665":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:4849:8265":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:8021:5847":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:437:3236":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11189:3410":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:4145:8254":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:22332:5415":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:43669:5560":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:39983:5477":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:10609:5763":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:15678:4276":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:765:25286":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:4903:5780":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:3355:13559":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:7938:5840":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:15814:4303":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:8482:2709":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:40131:3194":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:13272:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:14051:3815":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:40030:5481":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:45573:5626":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:15078:4098":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:7377:13727":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:32863:8370":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:6874:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:15151:4113":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:21988:8461":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:4534:13569":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:11193:6114":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:31771:5445":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:1791:1298":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:8006:7598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:6695:5816":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6504:4664":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:7467:7516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:12125:13819":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:7509:4847":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:5382:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:8202:4490":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:7933:5838":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12433:3565":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"11:1007:4768":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:45168:5592":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:38963:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:3899:4500":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12189:3539":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:8306:7623":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:2231:3449":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:32629:13735":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:5421:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"15:327:7829":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11551:5982":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:12286:1761":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"0:63:2046":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"6:4837:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11115:3406":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:11764:3475":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:903:3004":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:2458:4449":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10622:34719":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:15313:4153":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6278:4616":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:11150:25677":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:6976:4740":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:3035:34130":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12508:3575":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:6158:7676":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:7363:5173":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1466:5029":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:43910:7671":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:12624:2685":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:5739:7676":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:7227:28280":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:15342:4161":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:22120:32017":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:39682:5455":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:41876:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11126:5932":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:2612:4456":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:8432:8189":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:10045:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:21281:32659":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"10:36:6590":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:10321:8327":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:5390:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:5863:21029":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:364:34679":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:1497:2001":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:39802:3042":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:21903:8377":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:21354:8375":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"0:113:1942":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"5:6754:34060":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:5914:4554":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:6880:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11051:3397":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:9165:8342":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:11557:3444":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:41271:5372":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:4293:5327":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:7915:5737":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:42774:5384":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12353:3558":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"0:108:2161":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"17:13187:3636":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12300:21223":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:673:5029":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3031:7637":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:15214:4129":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5200:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:2439:8180":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:4985:6927":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:9737:21077":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:5002:6937":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:4:1218":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6849:4730":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:41640:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:5367:21027":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12464:21224":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:2986:13512":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:597:3238":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:13459:5412":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:4563:2891":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:5436:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:3836:5771":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"11:1160:5045":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:3252:34592":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13399:3684":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:7986:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1593:6729":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:5942:5805":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:14311:3869":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:4504:34062":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:30207:2996":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4845:8262":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:7811:5986":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:42540:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2808:4465":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:1891:3006":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:15138:4107":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:37672:13745":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:5296:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:5643:7676":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:12285:1779":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:14847:4028":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:928:8120":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12659:3584":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"5:7463:2001":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:6441:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:9078:5933":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:7914:8190":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:9916:21096":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5320:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:3491:7676":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:10054:2661":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:10504:5931":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:16165:4394":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:12683:13538":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12808:3596":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:40083:5349":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11443:3436":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5624:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:6505:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:14560:3913":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:6912:3010":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11788:3480":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:2175:21157":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:7271:1994":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:2908:2883":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:15168:4118":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"14:187:20110":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"0:27:1971":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"16:2478:4450":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:38910:2999":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"14:220:5027":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:2115:5143":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:11674:3464":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5102:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"9:0:2492":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:2301:649":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12150:3533":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:5917:3006":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:40497:5358":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:37617:13744":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:844:8120":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"0:21:1950":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"17:14177:3848":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:11013:5388":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:5508:5791":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:8271:7615":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11537:3442":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6478:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:7455:2001":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11392:3431":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:2569:2645":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"14:202:13546":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6412:21032":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:5361:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:13723:3760":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:4415:5329":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:38251:13746":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:473:6600":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:4069:8248":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:43094:5544":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:9138:5937":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:5212:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:5405:34060":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:5307:4526":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:41031:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:8547:8276":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:10019:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11341:3428":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:9807:21083":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:2303:20141":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:6409:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:9351:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:1156:34560":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:6574:4489":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:7911:13724":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:45136:5590":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:3011:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:4414:5775":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:12311:5396":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:15249:4135":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:8247:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:1824:5746":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:14516:3906":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:3344:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:13594:3730":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:8407:8126":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12707:3588":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:4948:31227":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"11:1051:5041":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:40546:5362":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10982:21111":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:9703:32908":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:31780:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:479:6603":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:41417:13811":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"9:330:6591":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:6629:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:6477:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:43768:5566":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6335:4648":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11467:3437":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:22175:13759":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:7851:28264":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:43192:2715":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:41053:5366":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11089:3403":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:7375:3006":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:2730:5759":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:754:3221":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:80:25274":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:5283:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6940:4738":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:9346:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:45104:5586":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:40145:5353":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:16121:4383":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"9:502:5113":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:3233:30942":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:7592:5183":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:13297:5407":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:1602:5052":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:16249:4411":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"16:5831:4544":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:22492:5423":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:1675:7676":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:42034:2670":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:8462:5491":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:256:3229":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:3925:4501":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:645:8111":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11380:5979":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"15:0:2497":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:46395:5711":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:8264:5856":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:42570:5530":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:11606:5836":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:6935:3011":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:15324:4157":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:12630:2684":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:2455:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:6311:5808":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:6160:20140":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:42974:5533":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:12843:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:261:3230":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:8136:4925":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:7584:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:39932:5472":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:481:28272":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12454:3568":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:10838:7677":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:4614:4510":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:44090:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:8317:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:22561:31397":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:15434:4186":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:10127:5505":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:3579:2654":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:6650:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:2394:4446":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:14503:3905":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:3039:34129":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:39905:5470":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:43491:2706":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:4959:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:8012:7600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:14111:3823":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:2437:8179":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:1692:6794":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:45398:5617":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5565:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9938:21097":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:15126:4104":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:4617:8278":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:46365:5709":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:5400:3366":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:5653:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:2998:4491":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:4051:7676":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:39992:5478":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:15333:4160":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"14:40:3651":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:2310:7640":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:46144:5691":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11293:21130":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:12288:1845":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:3650:5029":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:623:34728":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10769:34714":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:2460:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:22576:31435":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:517:6626":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:7546:7569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:6648:4680":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:5713:3010":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:45611:5628":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:503:8093":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:774:5032":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:10253:5955":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:31746:5443":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:11324:3425":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2399:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:2936:20169":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:15720:4282":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:7359:7481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5064:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:2902:20168":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"9:392:20018":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10905:3385":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6460:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6433:4656":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:42253:7656":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:10534:34718":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:5344:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"0:106:2149":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"16:6634:4477":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:5006:4522":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:39264:2892":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:927:8122":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:16079:4372":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:12269:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13344:3676":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:9107:5936":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:14968:4074":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:2495:2505":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:672:5129":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:2548:4453":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:15931:3636":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:12271:1658":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"11:1087:34690":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:1676:34681":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:6001:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6895:4732":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5472:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:41349:5029":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:45288:5603":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:14341:3874":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:1621:6754":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:16105:4378":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:13173:3635":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"5:5065:7676":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:362:5735":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:39753:2706":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:9628:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:3264:3250":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:14545:3909":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:15624:4255":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:8553:5908":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:5995:4565":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:6768:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:16050:3664":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:10234:5748":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:7590:4485":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3597:8188":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:8561:5901":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:16176:4399":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:2896:2882":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:5700:4473":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"11:102:6579":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:7493:13719":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:38926:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:6471:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:8259:4826":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:7800:3238":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:8288:7620":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:4336:2899":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:46418:5712":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6491:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11841:3487":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:30239:2997":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"11:1025:5040":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:513:3237":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"11:1566:20097":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10068:21082":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8488:5901":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12251:3544":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:4262:5326":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:11354:3429":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:3597:3253":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:12263:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:7052:4754":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:2469:3004":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:43084:5543":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"11:856:5037":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:43894:7667":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11128:3356":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:3240:5029":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:1503:6675":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:16187:4400":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:13946:3799":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:21750:8190":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:6427:4655":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5191:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"15:306:20123":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13753:3769":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:4334:5774":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:7604:5184":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:4076:3006":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:7536:5168":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:14235:3860":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:7741:4488":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:1578:2001":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:2508:4451":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:15596:4248":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:13674:3735":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:15582:4242":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6120:21031":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:1535:6691":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8469:2699":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:22469:5418":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:4531:4507":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:6379:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:5897:4549":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12887:3600":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:38914:5448":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:43621:5559":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11026:21112":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:1578:5137":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:14933:4073":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13292:3665":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:6088:5795":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:22541:31430":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:2636:4457":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:42515:2675":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:5107:4525":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:4083:8249":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:22610:5437":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:16198:4401":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:2748:4462":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:1761:3059":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:21360:8378":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:9387:5828":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:8590:7485":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:5802:21028":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5630:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:38830:13557":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:220:5127":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1826:5747":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:15608:4251":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:5415:4528":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:45527:5624":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:4106:34060":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:1072:5045":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"11:0:2494":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"11:351:34674":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:3374:32812":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:14079:3819":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:11688:28284":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:123:6367":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:41197:31432":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:5927:4555":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:41499:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12478:3570":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:0:1650":{"crate_id":1,"path":["std"],"kind":"module"},"5:6591:34060":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:7379:34713":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:0:2498":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:4942:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:10936:2693":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:15:1945":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41523:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:45463:5620":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:39761:2705":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:7686:4866":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:3271:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:1526:6685":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:22108:8466":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:1653:6777":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:8105:3310":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:4864:6872":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:4033:8247":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:43457:2692":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:8180:5853":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:44083:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:22248:8458":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:6621:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:12290:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:14271:3865":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:43324:2711":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:3361:13558":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:16212:4405":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:5863:5799":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:700:2001":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:4489:2900":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:3278:5762":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"11:430:34683":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"9:482:20016":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"0:65:2062":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"5:3663:5046":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:742:5031":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"9:357:20032":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:6263:4614":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:14475:3901":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:2743:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:7098:4762":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:44086:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:9708:7852":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13797:3778":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13015:3565":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:4940:4520":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:12266:1806":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:3273:5052":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"0:26:1967":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"17:14868:4038":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:46115:5690":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6788:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:7385:5174":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8475:2716":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"18:589:3182":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:4039:8246":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:10606:5761":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:10844:5029":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:15799:4302":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:651:3172":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:10891:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:11313:3423":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"9:238:5525":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:621:2653":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:1975:759":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:12275:714":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:944:5029":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:39795:3041":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:16269:3686":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:6606:4676":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11142:3382":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:22122:13759":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:918:5031":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:2237:7636":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12371:3603":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:10938:5794":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"11:396:34677":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12238:3543":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:5415:7080":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:9115:2001":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:2562:6588":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5122:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:3196:4436":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:2515:1934":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"16:8216:4934":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:7085:4758":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:1707:6801":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:6439:5343":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12422:3563":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:14986:4079":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:10056:2669":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:41474:5029":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:46261:5696":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:15646:4261":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11865:3489":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:32443:4778":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:14012:3810":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:41437:193":{"crate_id":2,"path":["strsim","HammingResult","Ok"],"kind":"variant"},"6:5290:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:2592:4455":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:12076:3529":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:7528:4856":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:12863:3599":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13424:3687":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:2664:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7615:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4924:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:22503:31415":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:5817:4541":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:4882:4518":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5617:7176":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:3771:8230":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:282:34060":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:12671:3585":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:9369:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2402:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:45480:5621":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:1639:6766":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8645:8306":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:9260:5947":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:39834:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:5489:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"5:4151:5046":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:10060:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:7366:7485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:12615:2683":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:7395:5175":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:10547:28266":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:10671:34722":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11799:3481":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:4271:7676":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:10000:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:11063:3400":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:4965:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11583:3452":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:15616:4254":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7727:4487":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:14876:4039":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"8:0:2491":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6560:4472":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:5870:5803":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:9225:5942":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:43922:6109":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12225:3542":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11877:3490":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2854:4467":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5598:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:46244:5695":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8804:5929":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:42523:5521":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:43438:2710":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:7355:2001":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"13:226:6578":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:12371:5400":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:1040:4768":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:4097:8251":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:9356:5826":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:11158:6109":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"9:424:20019":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:4283:8275":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:4311:5029":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:96:25275":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:2648:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:46025:5688":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:7575:7585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:5306:7039":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:6664:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:9306:6110":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:10710:3381":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:4913:4519":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:7299:26677":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6442:4657":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:3810:4498":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12647:3583":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:41426:5376":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:15701:4277":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:21269:32652":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:7651:31195":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:3211:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:31867:2888":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:21267:32661":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:531:3176":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:1607:5053":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:8301:4941":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:4730:8251":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:859:2001":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:43604:5558":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:1896:3004":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:21755:8381":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:15992:4357":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:15734:4284":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:10975:5387":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}