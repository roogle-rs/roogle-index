{"root":"0:0:2025","crate_version":"0.10.0","includes_private":false,"index":{"0:66:1799":{"id":"0:66:1799","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[407,0],"end":[412,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1688":{"id":"0:25:1688","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[65,0],"end":[131,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7269:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7269:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2314:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12151:30274":{"id":"2:12151:30274","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12259:30295":{"id":"2:12259:30295","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12272:30298":{"id":"2:12272:30298","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4539:30298"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43928:2336","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12160:1780":{"id":"2:12160:1780","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41670:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:72:1657":{"id":"b:2:2610-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2603:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3374:11519","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:2519"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"2:2554:1501":{"id":"2:2554:1501","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2558:128":{"id":"2:2558:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32170:6297","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:18:1663":{"id":"0:18:1663","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[30,0],"end":[30,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12221:30283":{"id":"2:12221:30283","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12240:30289":{"id":"2:12240:30289","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12270:23321":{"id":"2:12270:23321","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1657":{"id":"0:72:1657","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:73:1658"],"impls":["a:2:2741:2360-0:72:1657","a:2:2701:228-0:72:1657","a:2:8385:6280-0:72:1657","a:2:2684:220-0:72:1657","a:2:8384:6093-0:72:1657","b:2:2610-0:72:1657","b:2:2555-0:72:1657","b:2:2544-0:72:1657","b:2:2253-0:72:1657","b:2:2250-0:72:1657","b:2:2550-0:72:1657","b:2:3320-0:72:1657","b:2:2540-0:72:1657","b:5:5771-0:72:1657","0:78","0:75","0:17","0:77","0:15"]}}},"0:0:2025":{"id":"0:0:2025","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1005,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1657","0:18:1663","0:19:1666","0:24:1684","0:25:1688","0:42:1715","0:43:1717","0:51:1727","0:52:1732","0:59:1742","0:60:1751","0:61:1757","0:63:1771","0:65:1789","0:66:1799","0:68:1810"],"is_stripped":false}}},"2:12180:25622":{"id":"2:12180:25622","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:23318":{"id":"5:5528:23318","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12270:23321"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2252:2235":{"id":"2:2252:2235","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:30954","5:5511:11700","5:5514:30955","5:5517:30956","5:5525:30957","5:5526:30958","5:5527:6192","5:5528:23318","5:5529:23319"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:60:1751":{"id":"0:60:1751","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12215:25620":{"id":"2:12215:25620","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12020:421","str::splitn":"2:12212:25618","self::pattern":"2:11849:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43751:2349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1658":{"id":"0:73:1658","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[15,4],"end":[15,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12178:30279":{"id":"2:12178:30279","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43893:2342","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12164:25582":{"id":"2:12164:25582","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12209:30281":{"id":"2:12209:30281","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11849:2324","str::split":"2:12197:23175","prim@char":"1:12020:421","str::split_terminator":"2:12206:30280"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43697:2351","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9278:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12236:30287":{"id":"2:12236:30287","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2250-0:72:1657":{"id":"b:2:2250-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2244:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2252:2235"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12269:23320":{"id":"2:12269:23320","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2612:2519":{"id":"2:2612:2519","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3386:4876","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1666":{"id":"0:19:1666","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[34,0],"end":[47,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7269:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7269:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2314:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12256:30294":{"id":"2:12256:30294","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:2360-0:72:1657":{"id":"a:2:2741:2360-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:52:1732":{"id":"0:52:1732","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[200,0],"end":[226,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7269:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7269:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2314:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8384:6093-0:72:1657":{"id":"a:2:8384:6093-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8384:6093","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2553:128":{"id":"2:2553:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2314:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:618"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12175:28613":{"id":"2:12175:28613","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12176:28612"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43903:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12224:1699":{"id":"2:12224:1699","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11849:2324","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::rmatches":"2:12227:30284"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43833:2345","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:618":{"id":"0:79:618","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12206:30280":{"id":"2:12206:30280","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11849:2324","str::split":"2:12197:23175","prim@char":"1:12020:421","`DoubleEndedIterator`":"2:7307:121","str::rsplit_terminator":"2:12209:30281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43679:2352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:30955":{"id":"5:5514:30955","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12233:30286":{"id":"2:12233:30286","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11849:2324","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::match_indices":"2:12230:30285"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43797:2344","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[28,0],"end":[28,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","cause","provide","description"],"trait":{"name":"Error","id":"2:2603:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3322:1514":{"id":"2:3322:1514","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39491:4995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12168:30277":{"id":"2:12168:30277","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12026:1420","str::slice_mut_unchecked":"2:12169:30278","crate::ops::Index":"2:2981:2653"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2550-0:72:1657":{"id":"b:2:2550-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2520:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:128","2:2554:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61:1757":{"id":"0:61:1757","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[267,0],"end":[311,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:676":{"id":"0:16:676","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[19,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9253:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42742:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12166:25583":{"id":"2:12166:25583","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150:30273":{"id":"2:12150:30273","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:23176":{"id":"2:12177:23176","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43883:2341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2540-0:72:1657":{"id":"b:2:2540-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2543:2523"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8385:6280-0:72:1657":{"id":"a:2:8385:6280-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8385:6280","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2543:2523":{"id":"2:2543:2523","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2517:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1789":{"id":"0:65:1789","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[390,0],"end":[393,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:25614":{"id":"2:12200:25614","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11665:2327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2253-0:72:1657":{"id":"b:2:2253-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2247:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2255:22685"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12265:30297":{"id":"2:12265:30297","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11810:127","`FromStr`":"2:11809:2339"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11809:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11809:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12218:30282":{"id":"2:12218:30282","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12186:25624":{"id":"2:12186:25624","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12147":{"id":"2:12147","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12148:823","2:12149:1752","2:12150:30273","2:12151:30274","2:12153:30275","2:12156:25064","2:12157:30276","2:12158:316","2:12159:315","2:12160:1780","2:12162:25581","2:12164:25582","2:12166:25583","2:12168:30277","2:12169:30278","2:12170:25605","2:12171:25606","2:12172:1685","2:12173:5217","2:12174:4862","2:12175:28613","2:12176:28612","2:12177:23176","2:12178:30279","2:12179:28619","2:12180:25622","2:12183:25623","2:12186:25624","2:12189:2564","2:12193:2529","2:12197:23175","2:12200:25614","2:12203:25616","2:12206:30280","2:12209:30281","2:12212:25618","2:12215:25620","2:12218:30282","2:12221:30283","2:12224:1699","2:12227:30284","2:12230:30285","2:12233:30286","2:12236:30287","2:12238:30288","2:12240:30289","2:12242:30290","2:12243:30291","2:12244:30292","2:12247:30293","2:12250:23076","2:12253:25625","2:12256:30294","2:12259:30295","2:12262:30296","2:12265:30297","2:12267:23316","2:12268:26731","2:12269:23320","2:12270:23321","2:12271:23322","2:12272:30298","2:12274:6085","2:12275:30299"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12149:1752":{"id":"2:12149:1752","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:676":{"id":"0:76:676","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9253:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9242:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[18,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9283:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12275:30299":{"id":"2:12275:30299","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4537:30299"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43946:2338","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12271:23322":{"id":"2:12271:23322","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:25581":{"id":"2:12162:25581","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41670:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9943:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12253:25625":{"id":"2:12253:25625","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12262:30296":{"id":"2:12262:30296","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2555-0:72:1657":{"id":"b:2:2555-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2514:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2558:128","2:2559:1500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3320-0:72:1657":{"id":"b:2:3320-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1514"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12179:28619":{"id":"2:12179:28619","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43921:2325","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:23319":{"id":"5:5529:23319","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12271:23322"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5773:1478":{"id":"5:5773:1478","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12238:30288":{"id":"2:12238:30288","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12242:30290":{"id":"2:12242:30290","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1742":{"id":"0:59:1742","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[236,0],"end":[238,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:72:1657":{"id":"a:2:2701:228-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12243:30291":{"id":"2:12243:30291","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:28612":{"id":"2:12176:28612","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12175:28613"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43912:2326","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2255:22685":{"id":"2:2255:22685","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12169:30278":{"id":"2:12169:30278","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12026:1420","crate::ops::IndexMut":"2:2985:2654","str::slice_unchecked":"2:12168:30277"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12212:25618":{"id":"2:12212:25618","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324","str::rsplitn":"2:12215:25620"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43733:2350","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12148:823":{"id":"2:12148:823","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12020:421"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12274:6085":{"id":"2:12274:6085","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4540:6085"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43937:2337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1771":{"id":"0:63:1771","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[327,0],"end":[380,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2319:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9494:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2266:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:25064":{"id":"2:12156:25064","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11409:2329"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1727":{"id":"0:51:1727","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[188,0],"end":[190,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.911 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12247:30293":{"id":"2:12247:30293","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12189:2564":{"id":"2:12189:2564","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41670:179","prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:6192":{"id":"5:5527:6192","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:30954":{"id":"5:5510:30954","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2321","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2321","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12250:23076":{"id":"2:12250:23076","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5771-0:72:1657":{"id":"b:5:5771-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9283:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5769:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5773:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12173:5217":{"id":"2:12173:5217","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12020:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43605:2332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12244:30292":{"id":"2:12244:30292","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11874:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2546:702":{"id":"2:2546:702","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12157:30276":{"id":"2:12157:30276","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12230:30285":{"id":"2:12230:30285","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11849:2324","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::rmatch_indices":"2:12233:30286"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43779:2343","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:25606":{"id":"2:12171:25606","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12170:25605"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:1685":{"id":"2:12172:1685","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12020:421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43599:1656","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:1717":{"id":"0:43:1717","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[158,0],"end":[178,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7269:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7269:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2314:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:30956":{"id":"5:5517:30956","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:30275":{"id":"2:12153:30275","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12151:30274"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12227:30284":{"id":"2:12227:30284","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11849:2324","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::matches":"2:12224:1699"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43851:2346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:30958":{"id":"5:5526:30958","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2321","`String`":"5:7449:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2321","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12268:26731":{"id":"2:12268:26731","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39699:26724","Self::is_ascii":"2:12267:23316"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39699:26724","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12193:2529":{"id":"2:12193:2529","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41670:179","prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41668:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:4862":{"id":"2:12174:4862","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43615:2331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1684":{"id":"0:24:1684","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:23175":{"id":"2:12197:23175","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11849:2324","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::split_whitespace":"2:12175:28613","str::rsplit":"2:12203:25616"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43629:2348","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:72:1657":{"id":"a:2:2684:220-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2544-0:72:1657":{"id":"b:2:2544-0:72:1657","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2517:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2546:702"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12183:25623":{"id":"2:12183:25623","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12020:421","self::pattern":"2:11849:2324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:11700":{"id":"5:5511:11700","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12267:23316":{"id":"2:12267:23316","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1810":{"id":"0:68:1810","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[433,0],"end":[478,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12170:25605":{"id":"2:12170:25605","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12171:25606"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:25616":{"id":"2:12203:25616","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11849:2324","`DoubleEndedIterator`":"2:7307:121","prim@char":"1:12020:421","str::split":"2:12197:23175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43647:2347","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11854:2317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11869:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:315":{"id":"2:12159:315","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12037:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2559:1500":{"id":"2:2559:1500","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41812:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2524:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12158:316":{"id":"2:12158:316","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12159:315","`u8`":"1:12037:1523"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:30957":{"id":"5:5525:30957","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1715":{"id":"0:42:1715","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:5955:16611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:41871:1710":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:3300:5390":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:40494:4892":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:22001:4958":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:21059:11731":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"11:793:4755":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:4770:15927":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:6289:4364":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:6805:17038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7484:4568":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4328:15883":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13492:3882":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8211:2331":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:5561:6296":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:1631:13342":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:2781:4176":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:11357:5440":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7679:4201":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:681:3052":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:699:3055":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:43797:2344":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:3648:1710":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:40353:5135":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"18:671:3051":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2803:4177":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:47344:5331":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:20926:11731":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"19:0:1043":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:9291:2306":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"11:97:32198":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6136:15797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6008:16616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:10091:4736":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:491:3020":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13957:3988":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:41654:4920":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:46800:5296":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:9604:3217":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2377:6155":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:6128:4320":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2741:2360":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"18:609:3038":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:9933:6165":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7362:18653":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:10994:3367":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:2508:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:910:4755":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:7505:16120":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:12032:754":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:6955:2870":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:2266:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:3182:29569":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:11854:2317":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:20738:29346":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:11969:5590":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:7546:16126":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6197:4342":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:9939:3241":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10199:3262":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:22150:4977":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:39512:4997":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13140:3727":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:62:12062":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:13029:3713":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:7656:5442":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:44360:11830":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:40462:4888":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:3517:6163":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:12502:3612":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:40373:5136":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:8210:4536":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"15:0:2144":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:868:4739":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:10260:4931":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4587:15910":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:6439:2662":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:45619:5241":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:10293:3268":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:44348:11826":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:11157:23448":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:47736:5335":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:22656:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:13803:3945":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"0:63:1771":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"16:3777:4212":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:4740:6225":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:96:22664":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"11:2060:4749":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:8386:4923":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10223:3263":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:8605:18692":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:44376:11827":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4473:6239":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:8086:4634":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4938:15946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:1064:4749":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13083:3719":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"0:24:1684":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"1:12031:650":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4781:15928":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:4965:4235":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:42297:4925":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:5532:4889":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:643:6087":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:2293:17759":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11034:2939":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11098:3378":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:7012:4469":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12065:3514":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:968:4478":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6484:4379":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10906:3357":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:0:828":{"crate_id":6,"path":["libc"],"kind":"module"},"2:2364:1653":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"2:1630:592":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:41517:4917":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"11:1818:4736":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:44598:5234":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:7722:11686":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:41944:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11023:2938":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:13069:3716":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:7855:18656":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11454:3414":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"15:288:17739":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:43883:2341":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:12377:3592":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:9482:5453":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:3841:5396":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6470:4202":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:4701:6239":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:5379:5408":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"11:1845:4759":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:10568:3308":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:10115:4754":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:12021:1539":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"0:0:2025":{"crate_id":0,"path":["strsim"],"kind":"module"},"2:43647:2347":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13427:3842":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:14315:4098":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"11:844:4746":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:41477:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:2631:5381":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"0:73:1658":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"2:1918:4873":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:2361:6150":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"9:426:17634":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:9170:5558":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:6145:2899":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:20708:29259":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:44661:5240":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:45971:5256":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:2319:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:13862:3959":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:44013:11515":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13155:3391":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:4002:2662":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4606:15911":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:13882:3966":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:8278:5397":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13055:3715":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:11874:2316":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:8497:6290":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"0:61:1757":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"6:1545:13335":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:35:2659":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"9:52:17650":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6540:4190":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:10051:3248":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:22590:2634":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:3220:4207":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:21281:6350":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:6692:18650":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:538:3028":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:14259:4090":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:653:12495":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:7494:4569":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:32210:4987":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:1482:4755":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:47486:5332":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:3221:5386":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:1733:11742":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:7529:16124":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:2959:2583":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:14037:4005":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:44436:11842":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:12053:3511":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:5829:16604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11979:3498":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:6798:2668":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:22060:4965":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"0:59:1742":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"5:1273:4749":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:44372:11833":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:4348:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:4765:391":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"11:1852:4760":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:1709:13350":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14054:4012":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:41786:5174":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:11189:3391":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:23235:4866":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:43779:2343":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:1637:4869":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:12742:2657":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:43921:2325":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:595:12448":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10417:3289":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13557:3892":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11767:3450":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:10760:5454":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:1011:2823":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:5767:16598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4535:15905":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:1075:3086":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:4698:4226":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:2247:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:40974:2883":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:2911:6100":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10845:3354":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:40204:2624":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:48004:5346":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:8334:6267":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"11:2201:2288":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:2637:4170":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:9100:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:4620:4225":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:582:2276":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12864:3681":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:45639:5242":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:619:2294":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:6502:4387":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:5553:4183":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13949:3985":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7191:1710":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6986:4468":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:3580:4210":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:3669:2823":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:7245:1710":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:4819:6222":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12878:3682":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:2966:29862":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:43183:4927":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:10555:3306":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:41719:1673":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6303:4182":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13778:3940":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:1554:4736":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5074:15961":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:40169:2631":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:42949:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:40546:5151":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:12034:752":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:10486:3295":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:10377:3285":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"11:332:2813":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:564:3030":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"10:36:32192":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12711:3638":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:5629:2913":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11992:3500":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11277:2941":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:7449:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:727:3063":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:40992:4911":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:14102:4049":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:5067:4238":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:8794:18710":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13456:3853":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:43893:2342":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:10110:3255":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:4255:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:21012:6363":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:13179:3737":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:40965:5157":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"9:450:17632":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:5612:2666":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4616:15912":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:822:2829":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:3999:4877":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:3739:5395":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:2882:2909":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8141:3065":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:9542:2309":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13830:3949":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:1821:2656":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:44384:5708":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:4315:5399":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:2825:4178":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:1184:3088":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:7360:2365":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:5414:4242":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:7232:11687":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:1464:4739":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:5972:4141":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:5704:4257":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:9966:3217":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:7710:6090":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:20680:2276":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4420:15891":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:362:5360":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:7511:16121":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:6788:2667":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:41863:4754":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:2492:5379":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:261:2823":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:43356:5192":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:10933:5452":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:22025:4963":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:3204:4760":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:3169:11537":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:8480:5529":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:6250:4362":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7407:4295":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:5100:4239":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8555:5534":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:8138:4640":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:4753:4228":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:481:2901":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:45763:5247":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8965:5543":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:9487:2934":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:5080:5407":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9665:32277":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:9734:3220":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:47967:5343":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:5793:4267":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4304:15881":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6850:4447":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:1506:13330":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4650:15915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:7636:6165":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13566:3893":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:9153:3073":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7539:4199":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4389:15888":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:3219:5385":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6317:4366":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"14:202:11517":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:40453:4885":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:4506:4221":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:10249:3264":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:12579:3622":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:7558:16128":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:5384:2848":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"16:5612:4244":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6239:32274":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:2589:4168":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"9:507:4817":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:3581:4736":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:506:12437":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:1517:4756":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"0:25:1688":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"6:4810:15932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:521:22676":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:1761:615":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:5342:4241":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:5472:2848":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:8457:5185":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:22425:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:40503:5149":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:2611:4169":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:4396:4218":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11440:2943":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:4381:2876":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4949:15948":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:6015:16617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:6671:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:42219:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:22143:29504":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6022:16618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:41563:28410":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:13604:3900":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2922:2361":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:9027:5552":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:5940:4284":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12161:3543":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:3594:4754":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9899:3237":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:42022:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4872:15940":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12815:3674":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13591:3895":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:22176:6205":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:2359:6149":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"15:394:17750":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"10:0:2140":{"crate_id":10,"path":["adler"],"kind":"module"},"1:8566:5535":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:10795:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:0:287":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:10416:4934":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"11:986:4747":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:5622:2912":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5008:15954":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12526:3613":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:43179:28061":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:7725:6091":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:8897:5542":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:5991:4893":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:2399:4160":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:12467:29437":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:4032:4216":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:46262:5269":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:10525:5389":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:7269:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10471:3293":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:22164:4978":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:3142:11721":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:6648:13473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:48095:5351":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11290:18716":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11220:18839":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:4543:15906":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6598:17028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:10815:5393":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:6872:4192":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7289:4515":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:119:12116":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:7847:3151":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:4393:2848":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:2569:2889":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:5590:4891":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4984:15952":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:1690:13348":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:9287:2296":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:2591:5380":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:20924:29038":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:9614:32279":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:44403:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:3508:23064":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12479:3607":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:7372:27368":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:8974:29372":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:7382:4857":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:2212:2871":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6864:4449":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:11554:4939":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:7887:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:42979:5190":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:952:4746":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11144:3386":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13787:3941":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:695:4738":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:9253:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:2900:4181":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:644:4754":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:40230:2627":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:10241:6299":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:43508:5202":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:1570:4758":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:881:4740":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:49940:6366":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:2763:4491":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:4410:2513":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:44228:5226":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:45864:5251":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:11131:5537":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13096:3720":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:4592:4224":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:5720:4258":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:9283:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:43946:2338":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:40424:5141":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:43903:2328":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:9032:3204":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:12004:3501":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:7240:32275":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:42178:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6565:12483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:46642:5293":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:1979:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:45833:5250":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"11:1611:2817":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:12038:1520":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:7736:5449":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:13905:3971":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:4363:2850":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"18:636:3044":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2759:4175":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:40223:2626":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:9188:3074":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4518:15903":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2985:2654":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:10805:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:2962:17786":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:4633:25016":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:6594:6313":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:13303:3739":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:9537:2308":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11221:5431":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"11:1012:4749":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4475:15898":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:2856:11720":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10361:3283":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"11:657:1710":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:6347:18648":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:43912:2326":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:4904:6264":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:12966:3695":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:9295:2303":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13732:3927":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:6658:4415":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:9282:5374":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4944:15947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:4635:25018":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:5877:16606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:11294:5433":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:13999:3997":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:1826:2662":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:47920:5339":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12133:3533":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:6637:2823":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:21183:6353":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:3058:3108":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:3261:5388":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:39452:2282":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4469:15897":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:6713:4428":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:919:4738":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:4155:6233":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:4996:4236":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:43587:2335":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:6915:32270":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:9016:3203":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"14:187:17727":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6900:4451":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:4326:2875":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6018:18647":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:43425:5196":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:4812:805":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:8491:2317":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:9048:3070":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10458:3292":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:1557:13336":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:9153:5557":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4879:1013":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:4740:15923":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:40129:28566":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:356:5359":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:4187:2509":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:6815:4443":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4163:6234":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4848:15937":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12148:3539":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4568:15909":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:9318:3205":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:40471:5145":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:6332:4368":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:573:12445":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7211:2662":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:5779:5423":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:10976:5539":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11568:18719":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:10750:23169":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:5689:4254":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:39342:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:8899:18713":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:9223:3075":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:6930:2866":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:20721:29344":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:1858:4761":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:1527:13333":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:1473:4740":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:48134:5352":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:7586:16131":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:22557:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:11498:3417":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:14341:4107":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:4437:2512":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:0:2137":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"18:719:3060":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11852:3478":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:1565:2660":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:21309:4954":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13435:3845":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13894:3967":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:7515:4570":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:4390:2511":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:13854:3958":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:20740:29342":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:6531:2810":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:4524:15904":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:43629:2348":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4413:15890":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:2960:29856":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:6607:17029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:45894:5252":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:43416:5194":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:40485:5148":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:8659:18706":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:4:1026":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:4023:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:12936:3692":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:46988:5300":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:541:12440":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:40268:5133":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:40197:2336":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:10097:3254":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5363:18643":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:4171:6235":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"0:19:1666":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"6:5793:16600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:40415:5140":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:4729:15922":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:32206:4986":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:149:2808":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:10731:5570":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:43851:2346":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4955:15949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:1520:13332":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"11:723:4739":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:10934:4936":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:0:500":{"crate_id":2,"path":["core"],"kind":"module"},"1:6809:6347":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:4259:4881":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11234:3396":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:80:22663":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:46210:5267":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:42940:2310":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:14007:3999":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:2689:4172":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:8252:4649":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:4011:4878":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:8771:18709":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11118:3383":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11991:6092":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:782:2826":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10945:3363":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:39505:4536":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:46383:5273":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:8384:6093":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:42669:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:4042:6214":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11607:5441":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9296:3079":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:2784:6344":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:14403:4120":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:11184:5432":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:4506:15902":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4374:15886":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:12033:751":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4704:15919":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13749:3932":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:43605:2332":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:12035:753":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:3720:4837":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:10565:2936":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:11630:4944":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6834:17040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:21985:28430":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:3970:6209":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11074:3101":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6789:4442":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13574:3894":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:5824:2914":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:5444:5415":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"11:1068:4751":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:45685:5244":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:9192:25005":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:1681:13347":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:40393:5138":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:11614:4943":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:13914:3974":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:9289:2305":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:11809:2339":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4842:15936":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:4291:15880":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:660:3045":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8304:5506":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:8285:6237":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:2163:11731":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:4495:6240":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:20876:6355":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:5558:6295":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:2519:4165":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:1503:4738":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:3178:4759":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:3992:6211":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:20723:29347":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:42742:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:2216:6146":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:12757:3662":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:3343:6188":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:47798:5336":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:21177:6351":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10529:3301":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:690:3054":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11250:3398":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:2356:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:6850:17042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:10222:4930":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4315:15882":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:40343:2877":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6977:4465":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:9274:2331":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:22458:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:43615:2331":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:1733:13352":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:9242:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"7:32:17618":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:32170:6297":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:10390:3287":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10883:3356":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13719:3921":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:41606:5170":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7763:18655":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:21746:6352":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:2839:11716":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:5954:2855":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:41983:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:579:12446":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8856:4736":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10957:3364":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:14329:4105":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:2847:11718":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:6296:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:2223:29983":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:13016:3712":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4716:15920":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:1561:2662":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:42426:2297":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:5994:18646":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:3295:4208":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:2402:2152":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:7753:4580":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:9075:5709":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:8949:18715":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:41668:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:4814:4230":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4489:15900":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:4368:15885":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:1776:5371":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:5567:4186":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:30382:2650":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:365:2815":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:14189:4065":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:2243:29985":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11388:18718":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11354:3171":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11872:3479":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11924:3490":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"9:237:5185":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:39526:4998":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"11:736:4740":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:3810:4213":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:2932:2364":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:531:2902":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:12840:3678":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:8021:4629":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:9134:5432":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:7540:16125":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6711:17032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:11920:11509":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"7:79:17625":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:41812:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:11264:3401":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6175:4327":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:12687:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12303:3574":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:8806:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4556:15908":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:3163:11538":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12769:3664":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:12023:1061":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:1595:13340":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:40181:2338":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:6429:5426":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:44356:11831":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:39225:11536":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4685:15917":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:30438:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:14380:4116":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:44555:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:43697:2351":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5890:16608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:43833:2345":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4380:15887":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:6868:17043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:11379:11793":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:4336:2510":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:7874:5456":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:10123:3237":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:44619:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:8312:5515":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:39484:4994":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:10082:5373":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:7278:2366":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:2471:6165":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"11:1027:17714":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11669:3431":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:7575:16130":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6044:31747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:2774:11709":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:1569:13337":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:43456:5199":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:3042:17787":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2165:11732":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:502:2840":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:929:6095":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:7290:1710":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:21300:6165":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:1575:13338":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"11:667:4737":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6516:4389":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:46461:5275":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:6978:5841":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"0:72:1657":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"16:7592:18654":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:8173:6164":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1696:13349":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:7517:16122":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:1717:13351":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:31014:2276":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:7593:2932":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:45815:5249":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:2758:6345":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:42440:2306":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:22623:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:40310:6133":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:14177:4062":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"9:330:17687":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:4698:6266":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:7396:28602":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4054:6217":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"14:221:4734":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4794:15930":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:40263:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8356:5401":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:12024:313":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8806:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:5068:15960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2374:1652":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"2:42932:5181":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:6079:2848":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10931:3359":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:3935:2848":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:9821:3227":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:4564:4223":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:7564:16129":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:46688:5294":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:568:12444":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:11525:5396":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4754:15925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"14:215:4732":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:7534:5587":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:2472:11547":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4341:15884":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:7261:4856":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:5775:4262":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:10597:3312":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"9:177:17700":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:5775:16599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:207:2821":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:9105:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:3217:29922":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:256:3077":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8942:6318":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:7523:3085":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:1118:29861":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11542:3419":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:1288:4747":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:526:12438":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11199:3393":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:6130:16649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:12040:1522":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:40725:5155":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:9571:32285":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:2827:4497":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:22037:28576":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4796:2910":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:4846:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:41736:4754":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:43517:5203":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:45916:5253":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5044:15957":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:10151:5561":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10799:3350":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:3183:22936":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10303:3150":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:3800:2660":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:46954:5299":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:14227:4075":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:4785:4229":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13771:3938":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44545:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:1756:4870":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:46564:5277":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:2520:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:40216:2625":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:123:12117":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4483:15899":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:1839:5375":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:42764:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:8924:18714":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:2812:11713":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13964:3989":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:6356:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6160:4325":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:860:1710":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:8632:18705":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:40443:5144":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40514:4897":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:46924:5298":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:11007:3368":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10080:3251":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11467:3416":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:5970:2912":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:2164:3096":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:5626:4248":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:3867:4214":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:5398:3204":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12037:1523":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6724:4429":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6886:4193":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:20912:6357":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"5:629:4831":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:9500:141":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:44352:11829":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:40117:2629":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:40523:4898":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:2917:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:9756:2894":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:3441:4209":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4476:4220":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4833:15935":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11164:3388":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"14:0:2143":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12552:3322":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:5126:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"9:0:2139":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8194:5139":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:6214:4349":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:14301:4096":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:276:2321":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:2207:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:9952:3194":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:5900:16609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:6741:11690":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:6705:17031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:1073:4753":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:8230:5506":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"11:1831:2660":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:22755:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:3079:2655":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10981:3366":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12318:3578":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:8539:5402":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:7763:4986":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:7505:4197":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"13:110:32258":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:6726:17034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:1673:13346":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:8841:18711":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:40108:5126":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:7337:2288":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:2929:2363":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:21045:6358":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:20874:6165":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:43482:5136":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"0:52:1732":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"2:2843:11717":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:2963:11483":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:22689:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:7852:5453":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"18:507:3021":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:946:4745":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7038:4475":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:4567:6257":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12333:3583":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:6541:6311":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:7682:2936":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6939:18651":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:9913:3238":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:11395:4937":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:40102:2337":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:400:3080":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:940:4744":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:749:2662":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:6841:17041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"11:2186:32200":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6456:4185":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:10183:2327":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:599:32292":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:3998:6212":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:5987:16614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:7295:17414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8990:5547":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:46332:5272":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:1576:4759":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6372:4184":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:1976:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12727:3643":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:10333:4932":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:6028:16619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:40402:5139":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:2692:2587":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:11986:27370":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:4985:2848":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:14015:4000":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:43164:5191":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:5836:16605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:3894:4215":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:2706:2515":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:5975:12036":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:624:32289":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:7253:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4436:15893":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:46718:5295":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:3186:22940":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:3330:2660":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:11696:3437":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:4887:15941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:39311:4990":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10511:3299":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:12891:3683":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:4164:2848":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:43573:2340":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:30510:28767":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:10388:2349":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10038:3247":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:12432:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:4841:4231":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:22077:28584":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:44424:5231":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:44563:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:47138:5301":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:5882:4278":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:7912:5458":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:5429:5414":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:11581:5584":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:40249:2623":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:7250:12393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:2805:4493":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:6485:2823":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:3744:4211":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:2822:11715":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5051:15958":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:10148:3257":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:6796:17037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:7864:5455":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:8152:4203":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:44156:4946":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:5049:5407":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8217:2348":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:41905:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2833:4498":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12792:3673":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4748:15924":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:39491:4995":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:30452:28768":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4496:15901":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13697:3917":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:43679:2352":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:48019:5347":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:11665:2327":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:7099:5555":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:12435:3599":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:3395:3099":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:10544:3305":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:4764:15926":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:8848:5539":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:12017:3502":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:1048:32211":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:1102:29910":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:5301:4240":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:40145:2628":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:9293:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4550:15907":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:285:32195":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:3934:6208":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:14205:4069":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13757:3935":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10520:3300":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:11642:3430":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:3735:4839":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:43733:2350":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10460:2935":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"13:0:2136":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:6306:6440":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:12519:4950":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2555:2906":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:5882:16607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:10417:5536":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:26045:4867":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6156:16650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:47596:5333":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:45709:5245":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11020:3369":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:7228:11688":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:6465:2924":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:1973:3089":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:42971:5189":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:6667:4416":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:14197:4068":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:1055:4747":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"11:119:2811":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12592:3624":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:39366:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:9118:3072":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:9485:32276":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:4235:5398":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:40984:4909":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:9741:2889":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:4928:4234":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4917:15944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7025:4472":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"11:760:2660":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:11591:4942":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:8043:4630":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:43527:5204":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:8236:5508":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:4738:6223":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:22524:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10633:3315":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:39519:2510":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"5:7349:2289":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:4868:4232":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:2926:17785":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"15:327:17744":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:2919:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:9887:3235":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:5128:2855":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:42699:4607":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"11:2194:32202":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7622:4575":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:21634:29257":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:42961:5185":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:2567:4167":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:7743:6122":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:9083:3071":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:2035:4837":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:5080:15962":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7331:32273":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:2141:4840":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:14044:4007":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11272:3403":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10013:3245":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:2514:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:12043:1577":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:40943:4906":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:21307:6359":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8872:1710":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6396:4375":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:10522:5387":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10403:3288":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:7278:17413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:11155:3387":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:9032:5553":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:10330:3275":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:1544:2848":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:1513:13331":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:46064:5263":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:2800:11712":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"11:1822:1710":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6386:4374":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:2874:4180":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:6193:5425":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:8407:5526":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"11:2049:4747":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:8872:18712":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:7044:2915":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:12639:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:1582:4760":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"0:68:1810":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"17:10323:3272":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:9806:18727":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:2715:4173":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:4908:15943":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:7463:17573":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:44064:5218":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:1492:4737":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:2443:4162":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:21744:6165":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:515:3018":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:1667:1099":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:582:3085":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:4962:6272":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8864:5541":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:10351:3282":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:7759:29373":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:4184:6236":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:7574:2930":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13923:3975":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6775:17036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:7545:2661":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:44129:5220":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:587:12447":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:6161:2920":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:2105:18771":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:9978:5167":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:6573:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:7272:17412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4401:15889":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:12075:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:22788:4982":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:5818:16603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:41583:28623":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:12650:2899":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:42100:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:6608:2925":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:8984:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:9202:25028":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:46430:5274":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:2962:29868":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:1138:29917":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:41753:5172":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12605:3625":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:3514:2662":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:44364:11834":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13167:3730":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:7529:2660":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:8290:6238":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13981:3993":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10786:3349":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10654:3317":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10253:3265":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11428:3413":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:10280:3267":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9977:3218":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:12042:799":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:11888:3483":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11327:5437":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:43928:2336":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:2244:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:1663:13345":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12106:3524":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:8811:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13870:3960":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:1702:6230":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:0:2145":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9518:3215":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:6425:5156":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4824:15934":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:9442:32284":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:434:3083":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2350:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:8997:23085":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:4963:15950":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4895:15942":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:8105:4637":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:3238:4761":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:5863:16565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:48072:5350":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:55:4620":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:1747:28769":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:7718:6098":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:474:12432":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:10824:23445":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:1672:2823":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9344:32283":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:9528:32280":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:47978:5344":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10812:3352":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12077:3515":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:7412:4860":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11623:3427":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:3318:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:6618:17030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:40536:5150":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:46164:5266":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:41728:4736":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:44081:5219":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:4145:4880":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:45793:5248":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:8542:18694":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11815:3465":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:7523:16123":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:40595:5152":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:41855:4736":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:586:6084":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:40936:4905":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:8979:5544":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:638:5365":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"3:0:446":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:9744:32278":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:817:4744":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:8176:18657":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10066:3249":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:4032:2823":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:8224:2341":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4723:15921":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10863:3217":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:500:12436":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:2131:2840":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:14026:4004":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12921:3688":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:47844:5337":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"14:160:4727":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:1501:17715":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7255:5172":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:12002:23078":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:5986:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:5979:16613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12424:3598":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11520:3101":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:2792:11711":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:7693:4191":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:6069:2916":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12254:3549":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:1911:13515":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10621:3314":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:2174:5907":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11045:3371":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:2180:32204":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:1924:661":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:45953:5255":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:11165:5708":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:3386:4876":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:12041:1519":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:21:689":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:11300:5583":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8003:5461":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4787:15929":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:42061:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:32297:2594":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4463:15896":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12566:3621":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12346:3585":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13971:3990":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:12394:3595":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:12045:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:13673:3915":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:42433:2305":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:4929:15945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12982:3699":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:11034:3370":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:12039:1521":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:3674:6203":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:2511:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:14:1661":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:3940:6207":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:3414:2848":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:3442:5509":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:1888:2292":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:43537:5205":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:5769:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9399:3213":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:14236:4077":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:6558:1710":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12118:3527":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"14:40:3465":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:1426:4754":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:4606:2617":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:2780:4492":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:6652:1720":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"14:165:17720":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4695:15918":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:4536:4222":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:21115:6165":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:44218:5222":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:21916:4956":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:8740:18708":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"5:5318:2823":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:6744:17035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:4074:4754":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13639:3904":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"8:0:2138":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:20968:6362":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:4637:25020":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:12089:3516":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:40739:4903":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:30422:4985":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:11803:2947":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:41795:11786":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6077:16622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:14163:4056":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40585:4901":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:2796:11710":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:3234:11482":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:614:32290":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:562:12443":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:3499:2295":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:4900:4233":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:5843:4275":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:30616:28772":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:2133:3093":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:8113:5499":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:1814:5373":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:10339:3278":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12952:3693":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:21276:6165":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:11369:24815":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:22052:4964":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:3386:5157":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:10785:5455":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:9409:32281":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:311:32193":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:45934:5254":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:2465:4163":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:45663:5243":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:39326:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:8068:4632":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:21197:4954":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:41880:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:10140:2348":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:40571:3042":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2749:2593":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:7707:4578":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"9:486:17631":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7073:18652":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4446:15894":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:3259:5387":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12851:3679":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:44380:11828":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:7433:4556":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:1558:1710":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10444:3291":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:11329:18717":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"11:1103:4752":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:30416:2651":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:4678:6206":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:4786:29367":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:12445:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:3736:5394":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10671:18813":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:5805:16602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:11591:3391":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6820:17039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:481:3019":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:6769:2666":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:3635:3112":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:895:4736":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:2663:4171":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4800:15931":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:2168:32201":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7474:4196":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:2857:4179":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:47993:5345":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:2817:11714":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:30191:6204":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:8711:18707":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:7282:1710":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12618:3627":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11416:3412":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:42659:28765":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:46018:5257":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13707:3918":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:44193:5221":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"0:18:1663":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"typedef"},"1:12027:1504":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"11:1538:4757":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:43751:2349":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:2926:2362":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13659:3912":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:10946:5416":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:44648:4763":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5737:16536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:9777:18726":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:4395:15732":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:42715:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"11:798:4741":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:3212:4758":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4623:6212":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:42419:2296":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:11593:24861":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"0:60:1751":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"1:8330:5517":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:39699:26724":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:5639:4253":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:5025:15956":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:7525:4198":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:39386:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:7661:5444":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:3197:11481":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:1302:4753":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:11056:18838":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:5673:18644":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13795:3943":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:42924:2311":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:5366:2323":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11955:3494":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:7637:5361":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:41619:5397":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:1917:2293":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:6057:17758":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:43445:5198":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:11863:2319":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:3180:27376":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:1590:13339":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10832:3353":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:5028:4237":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:4441:4219":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:43435:5197":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:5413:5413":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:3298:5389":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:43937:2337":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9475:3214":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:4664:15916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:41642:4918":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11791:3464":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:11145:5538":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:1442:1710":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:7715:2315":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:12018:374":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:13043:3714":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8834:5538":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12035:3510":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11832:3468":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:2524:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:5382:3203":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:2375:6154":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:10312:5415":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:9716:32282":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:10937:4814":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:12174:3544":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"18:531:3025":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:1495:13328":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:46286:5270":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:8549:4736":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8389:6276":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:9020:5551":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:9475:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:2314:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:44368:11832":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:47958:5342":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:39264:11484":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:11210:3394":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:9875:3232":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:574:3021":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:14395:4117":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:1411:4736":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:12457:3606":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:3519:3100":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4854:15938":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:11371:3410":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:2981:2653":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:43495:5201":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:41534:6202":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:40433:5142":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:3183:29925":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:2314:4150":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:12020:421":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"18:652:3021":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:8385:6280":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:9040:5555":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:21525:6356":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:11726:3441":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:9494:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11127:3417":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:40959:4907":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:1041:4478":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:6248:2912":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:1500:13329":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:7599:17601":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"0:66:1799":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"1:11342:5438":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:4046:6215":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:755:3069":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:9926:3239":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:837:4736":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:4426:2850":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7584:4574":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:10519:5385":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:40296:5134":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:11869:2318":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:399:32210":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10609:3313":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:4464:421":{"crate_id":2,"path":["core","char"],"kind":"module"},"2:21530:6364":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:2970:29869":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12905:3686":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:46484:5276":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:14350:4111":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:41744:1710":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:2049:4839":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:7998:5460":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:5590:4188":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:21131:6349":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:6067:16621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12671:3634":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10969:3365":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4992:15953":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:44050:5215":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:11849:2324":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"11:0:2141":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:14216:4074":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10266:3266":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:7552:16127":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:6642:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:630:4736":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4638:15914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11753:3449":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:12631:3629":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1536:13334":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:9285:2297":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"13:226:32212":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:2352:4158":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:12026:1420":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:5839:2662":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12646:3632":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:14417:4123":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:5752:5422":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:12044:1143":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:12494:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:10402:4933":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12365:3590":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:635:5363":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10329:23127":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:11504:5395":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:9655:3218":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:2744:2591":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:11967:3495":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:20693:29259":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:7799:4588":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:3374:11519":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:7904:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:2461:5808":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7568:32269":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"0:65:1789":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"1:10833:23447":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:7609:17602":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:9943:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13332:3759":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:4323:4217":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:850:4754":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:10581:3310":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:22114:28624":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6323:4367":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"10:44:4764":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:5967:16612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7445:4557":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:48042:5348":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:504:3084":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:47938:5340":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"12:0:2142":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:10755:25024":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:10101:23128":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:40950:5156":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:2497:4164":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:42724:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7199:4855":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:7833:4592":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:6232:4359":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:4387:5400":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"0:51:1727":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"17:0:2146":{"crate_id":17,"path":["object"],"kind":"module"},"17:12186:3547":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:7759:5452":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6554:4391":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:590:3031":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:482:12433":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:5615:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:21622:4952":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:2691:2359":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:0:1412":{"crate_id":1,"path":["std"],"kind":"module"},"1:915:4737":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:2753:6343":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:7920:5459":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"14:31:4727":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:1837:5374":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11241:18840":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:7020:2928":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:44241:2353":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:9866:3230":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:4724:4227":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:403:32205":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:878:2831":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13683:3916":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13109:3721":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:2737:4174":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:11040:2940":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:6894:2927":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:6625:6267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5058:15959":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:7128:24803":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"15:306:17740":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:8296:5513":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:40280:28602":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:9658:2885":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:1257:4478":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:3460:5392":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5799:16601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2768:4488":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"5:7425:4863":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:46094:5264":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:7731:5370":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:13847:3957":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11178:3389":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:44261:2354":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:45731:5246":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:44636:5239":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:8800:5536":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8818:5537":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:5498:5416":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:39408:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13125:3723":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:1587:4761":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:10975:11507":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:5916:4135":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:21175:6165":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:1649:13344":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4862:15939":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12691:3637":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"7:0:1567":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:904:2660":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:46240:5268":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:5807:4268":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:9243:2295":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:4264:4882":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:40753:4904":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:12019:948":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8150:5500":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:7857:5454":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:12354:3587":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:6984:3065":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:12030:648":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:555:5362":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:46308:5271":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:2738:2589":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:6438:4378":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12539:3616":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8204:5155":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:7307:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:5737:18645":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:9115:5431":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4626:15913":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:2387:6160":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:12994:3701":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:923:4741":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:42258:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:5651:4187":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:4234:4736":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:9110:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:9990:3244":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:836:4745":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:3186:3097":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:7665:4200":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:2517:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11084:3373":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:4133:24806":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:113:22665":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:5393:5412":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:7474:4865":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:48057:5349":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:2690:5806":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:40555:4899":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:9278:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:11409:2329":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:7265:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:8166:4642":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:7182:2658":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:42139:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:7231:29924":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:766:22675":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:5959:4291":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"9:357:17647":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:41804:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13937:3982":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:44035:5210":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:6886:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:11375:24809":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:40189:2337":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:10773:5576":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:5306:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:7438:2856":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:12036:749":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:30986:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6720:17033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:11202:5713":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:10958:23088":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:44606:5236":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:47674:5334":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10499:3296":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:4913:6265":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:4973:15951":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:47882:5338":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:1603:13341":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:46878:5297":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4428:15892":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:6835:11682":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12826:3676":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6763:4441":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:554:12442":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:2170:29994":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:894:2662":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7061:4477":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:12412:3596":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:547:12441":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13620:3903":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:0:2147":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:2421:4161":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:8125:4638":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:7463:4864":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:4046:11480":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10430:3290":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:2153:593":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:11600:5441":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13448:3852":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:3171:4736":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5015:15955":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7463:4565":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:8910:6317":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:6036:16620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:1776:2660":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:10161:3258":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:736:22674":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:530:4139":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"9:393:17633":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:4742:6226":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11463:5394":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:7631:4576":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:21863:4955":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:3984:6210":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:644:3021":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11905:3485":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:7415:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:10901:4935":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:7928:4837":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:7221:2835":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:6589:12317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:47947:5341":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:4032:6213":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8926:6316":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13548:3888":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:2541:4166":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:21969:4957":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11943:3491":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:10295:2347":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:707:2319":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11600:18720":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43407:5193":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:1778:5372":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:488:12434":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:3025:4204":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:14150:4050":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:8997:18693":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7739:4189":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:3524:6183":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:9840:3229":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:39430:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:261:3078":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:6427:4377":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12659:3633":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10313:3270":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:2332:4152":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:4759:676":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:11109:3382":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13368:3790":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:43599:1656":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"11:1838:4758":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:6788:28519":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8161:5393":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:9850:18728":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:22098:28617":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:12025:1390":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"11:1121:4753":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:14282:4091":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:8241:6201":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:9297:2304":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:4114:4879":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:6571:18649":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:5994:16615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:9724:2888":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:22491:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4818:15933":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:3110:5382":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:46116:5265":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:9502:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:2788:6346":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:4194:2848":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:13513:3887":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:805:6095":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6931:4454":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:14359:4113":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:7553:4571":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:2591:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:5238:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:1523:4836":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:9054:23077":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:9706:3219":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:44207:11516":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9561:3216":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:1638:13343":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"11:2033:4478":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:41500:4915":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:7313:32272":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:40159:2630":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:8979:28395":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"0:43:1717":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"2:2851:11719":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:22722:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:532:12439":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:6171:16651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:5362:2322":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:8008:6191":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:42687:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:10175:3217":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6357:4371":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5920:16610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:10374:2350":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"14:7:4727":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:2209:5378":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5849:16564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6688:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8878:5417":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:5745:5419":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:13991:3996":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:21098:6354":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"0:42:1715":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"1:6538:5427":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4456:15895":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:2373:4159":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:494:12435":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}