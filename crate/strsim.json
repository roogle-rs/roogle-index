{"root":"0:0:2003","crate_version":"0.10.0","includes_private":false,"index":{"2:12014":{"id":"2:12014","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12015:812","2:12016:1730","2:12017:32772","2:12018:32773","2:12020:32774","2:12023:24493","2:12024:32775","2:12025:314","2:12026:25219","2:12027:1758","2:12029:25216","2:12031:25217","2:12033:25218","2:12035:32776","2:12036:32777","2:12037:25242","2:12038:25243","2:12039:1663","2:12040:5173","2:12041:4818","2:12042:30115","2:12043:30114","2:12044:23836","2:12045:32778","2:12046:30182","2:12047:25259","2:12050:25260","2:12053:25261","2:12056:2541","2:12060:2506","2:12064:23835","2:12067:25251","2:12070:25253","2:12073:32779","2:12076:32780","2:12079:25255","2:12082:25257","2:12085:32781","2:12088:32782","2:12091:1677","2:12094:32783","2:12097:32784","2:12100:32785","2:12103:32786","2:12105:32787","2:12107:32788","2:12109:32789","2:12110:32790","2:12111:32791","2:12114:32792","2:12117:23569","2:12120:25262","2:12123:32793","2:12126:32794","2:12129:32795","2:12132:32796","2:12134:25145","2:12135:25146","2:12136:25148","2:12137:25149","2:12138:25150","2:12139:32797","2:12141:6038","2:12142:32798"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2548-0:72:1635":{"id":"b:2:2548-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2551:128","2:2552:1480"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:40:1688":{"id":"0:40:1688","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[137,4],"end":[137,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Chars","id":"2:43341:1634","args":{"angle_bracketed":{"args":[{"lifetime":"'b"}],"bindings":[]}}}}}}},"2:12044:23836":{"id":"2:12044:23836","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43625:2318","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1635":{"id":"0:72:1635","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:73:1636"],"impls":["a:2:2741:2337-0:72:1635","a:2:2701:228-0:72:1635","a:2:2684:220-0:72:1635","a:2:8253:6233-0:72:1635","a:2:8254:6232-0:72:1635","b:2:2553-0:72:1635","b:2:2542-0:72:1635","b:2:2610-0:72:1635","b:2:2548-0:72:1635","b:2:3320-0:72:1635","b:2:2248-0:72:1635","b:2:2538-0:72:1635","b:2:2251-0:72:1635","b:5:5668-0:72:1635","0:17","0:75","0:15","0:77","0:78"]}}},"2:12091:1677":{"id":"2:12091:1677","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11716:2301","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::matches":"2:12091:1677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43575:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12060:2506":{"id":"2:12060:2506","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41404:179","prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076:32780":{"id":"2:12076:32780","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11716:2301","str::split":"2:12064:23835","prim@char":"1:11917:418","str::split_terminator":"2:12073:32779"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43439:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:25150":{"id":"2:12138:25150","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5408:11661":{"id":"5:5408:11661","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:2337-0:72:1635":{"id":"a:2:2741:2337-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12073:32779":{"id":"2:12073:32779","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11716:2301","str::split":"2:12064:23835","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7244:121","str::rsplit_terminator":"2:12076:32780"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43421:2329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:32:1687":{"id":"0:32:1687","crate_id":0,"name":"StringWrapper","span":{"filename":"src/lib.rs","begin":[133,0],"end":[133,34]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["a:2:2741:2337-0:32:1687","a:2:2701:228-0:32:1687","a:2:2684:220-0:32:1687","a:2:8253:6233-0:32:1687","a:2:8254:6232-0:32:1687","b:2:2553-0:32:1687","b:2:2542-0:32:1687","b:2:2548-0:32:1687","b:2:3320-0:32:1687","b:2:2248-0:32:1687","b:2:2538-0:32:1687","b:2:2251-0:32:1687","0:36"]}}},"5:5426:26457":{"id":"5:5426:26457","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12138:25150"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:72:1635":{"id":"b:2:2251-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2253:22728"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:8254:6232-0:32:1687":{"id":"a:2:8254:6232-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8254:6232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12016:1730":{"id":"2:12016:1730","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2251-0:32:1687":{"id":"b:2:2251-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2253:22728"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3320-0:72:1635":{"id":"b:2:3320-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3322:1493"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12040:5173":{"id":"2:12040:5173","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43347:2309","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:30115":{"id":"2:12042:30115","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12043:30114"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43645:2305","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:1663":{"id":"2:12039:1663","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43341:1634","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3322:1493":{"id":"2:3322:1493","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39352:4951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12064:23835":{"id":"2:12064:23835","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11716:2301","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::split_whitespace":"2:12042:30115","str::rsplit":"2:12070:25253"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43371:2325","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:785":{"id":"0:41:785","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[139,4],"end":[141,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:7206:152","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1666":{"id":"0:25:1666","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[65,0],"end":[131,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7206:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7206:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5668-0:72:1635":{"id":"b:5:5668-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9151:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5666:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5670:1457"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:51:1705":{"id":"0:51:1705","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[188,0],"end":[190,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.911 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2612:2496":{"id":"2:2612:2496","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3386:4832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:25255":{"id":"2:12079:25255","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301","str::rsplitn":"2:12082:25257"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43475:2327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:32796":{"id":"2:12132:32796","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11677:127","`FromStr`":"2:11676:2316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11676:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11676:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12126:32794":{"id":"2:12126:32794","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1644":{"id":"0:19:1644","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[34,0],"end":[47,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7206:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7206:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:25149":{"id":"2:12137:25149","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:6038":{"id":"2:12141:6038","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4540:6038"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43679:2314","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:669"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2248-0:32:1687":{"id":"b:2:2248-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2250:2213"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12110:32790":{"id":"2:12110:32790","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:6233-0:72:1635":{"id":"a:2:8253:6233-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8253:6233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:61:1735":{"id":"0:61:1735","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[267,0],"end":[311,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:24493":{"id":"2:12023:24493","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11283:2306"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12067:25251":{"id":"2:12067:25251","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11539:2304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:72:1635":{"id":"a:2:2684:220-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2253:22728":{"id":"2:2253:22728","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8253:6233-0:32:1687":{"id":"a:2:8253:6233-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8253:6233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2538-0:72:1635":{"id":"b:2:2538-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2541:2500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:60:1729":{"id":"0:60:1729","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5422:33450":{"id":"5:5422:33450","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2250:2213":{"id":"2:2250:2213","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12038:25243":{"id":"2:12038:25243","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12037:25242"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5406":{"id":"5:5406","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5407:33447","5:5408:11661","5:5411:33448","5:5414:33449","5:5422:33450","5:5423:33451","5:5424:6144","5:5425:26456","5:5426:26457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12139:32797":{"id":"2:12139:32797","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4539:32797"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43670:2313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[28,0],"end":[28,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","type_id","cause","description","source"],"trait":{"name":"Error","id":"2:2603:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12027:1758":{"id":"2:12027:1758","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:25148":{"id":"2:12136:25148","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12142:32798":{"id":"2:12142:32798","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4537:32798"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43688:2315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:25257":{"id":"2:12082:25257","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12079:25255","self::pattern":"2:11716:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43493:2326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1720":{"id":"0:59:1720","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[236,0],"end":[238,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:32784":{"id":"2:12097:32784","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11716:2301","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12100:32785"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43521:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12018:32773":{"id":"2:12018:32773","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12123:32793":{"id":"2:12123:32793","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:32789":{"id":"2:12109:32789","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2557:1479":{"id":"2:2557:1479","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2544:695":{"id":"2:2544:695","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2538-0:32:1687":{"id":"b:2:2538-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2541:2500"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:36":{"id":"0:36","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,0],"end":[142,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:7206:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'b"}],"bindings":[]}}}}}},"items":["0:39:1651","0:40:1688","0:41:785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12031:25217":{"id":"2:12031:25217","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8254:6232-0:72:1635":{"id":"a:2:8254:6232-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8254:6232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2553-0:32:1687":{"id":"b:2:2553-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2556:128","2:2557:1479"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12015:812":{"id":"2:12015:812","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12020:32774":{"id":"2:12020:32774","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12018:32773"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12043:30114":{"id":"2:12043:30114","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12042:30115"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43654:2303","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:1695":{"id":"0:43:1695","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[158,0],"end":[178,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7206:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7206:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12114:32792":{"id":"2:12114:32792","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:32785":{"id":"2:12100:32785","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11716:2301","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::match_indices":"2:12097:32784"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43539:2321","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2741:2337-0:32:1687":{"id":"a:2:2741:2337-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2741:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[18,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9151:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:669"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12046:30182":{"id":"2:12046:30182","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43663:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:32782":{"id":"2:12088:32782","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12056:2541":{"id":"2:12056:2541","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41404:179","prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12094:32783":{"id":"2:12094:32783","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11716:2301","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::matches":"2:12091:1677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43593:2323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:314":{"id":"2:12025:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12026:25219","`u8`":"1:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12045:32778":{"id":"2:12045:32778","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43635:2319","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:25146":{"id":"2:12135:25146","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39560:25141","Self::is_ascii":"2:12134:25145"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39560:25141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3320-0:32:1687":{"id":"b:2:3320-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3322:1493"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12053:25261":{"id":"2:12053:25261","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2552:1480":{"id":"2:2552:1480","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2542-0:32:1687":{"id":"b:2:2542-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2544:695"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12047:25259":{"id":"2:12047:25259","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12029:25216":{"id":"2:12029:25216","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:4818":{"id":"2:12041:4818","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43357:2308","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:32781":{"id":"2:12085:32781","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:32786":{"id":"2:12103:32786","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12033:25218":{"id":"2:12033:25218","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:669":{"id":"0:16:669","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[19,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41546:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42484:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12035:32776":{"id":"2:12035:32776","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1399","str::slice_mut_unchecked":"2:12036:32777","crate::ops::Index":"2:2981:2630"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2610-0:72:1635":{"id":"b:2:2610-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2603:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3374:11480","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2612:2496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"0:18:1641":{"id":"0:18:1641","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[30,0],"end":[30,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"Result","id":"2:41546:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5423:33451":{"id":"5:5423:33451","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2298","`String`":"5:7254:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2298","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2541:2500":{"id":"2:2541:2500","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2515:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:612":{"id":"0:79:612","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:26456":{"id":"5:5425:26456","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12137:25149"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2551:128":{"id":"2:2551:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"5:5414:33449":{"id":"5:5414:33449","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1767":{"id":"0:65:1767","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[390,0],"end":[393,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:32787":{"id":"2:12105:32787","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5411:33448":{"id":"5:5411:33448","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12026:25219":{"id":"2:12026:25219","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12117:23569":{"id":"2:12117:23569","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:1651":{"id":"0:39:1651","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[136,4],"end":[136,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"primitive":"char"}}}},"2:12036:32777":{"id":"2:12036:32777","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1399","crate::ops::IndexMut":"2:2985:2631","str::slice_unchecked":"2:12035:32776"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12050:25260":{"id":"2:12050:25260","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:669":{"id":"0:76:669","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12070:25253":{"id":"2:12070:25253","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11716:2301","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::split":"2:12064:23835"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43389:2324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12024:32775":{"id":"2:12024:32775","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2701:228-0:72:1635":{"id":"a:2:2701:228-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2701:228-0:32:1687":{"id":"a:2:2701:228-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5670:1457":{"id":"5:5670:1457","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:25242":{"id":"2:12037:25242","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12038:25243"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:25145":{"id":"2:12134:25145","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2003":{"id":"0:0:2003","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1005,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1635","0:18:1641","0:19:1644","0:24:1662","0:25:1666","0:32:1687","0:42:1693","0:43:1695","0:51:1705","0:52:1710","0:59:1720","0:60:1729","0:61:1735","0:63:1749","0:65:1767","0:66:1777","0:68:1788"],"is_stripped":false}}},"0:73:1636":{"id":"0:73:1636","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[15,4],"end":[15,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:5424:6144":{"id":"5:5424:6144","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1662":{"id":"0:24:1662","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5407:33447":{"id":"5:5407:33447","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2298","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2298","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12017:32772":{"id":"2:12017:32772","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2684:220-0:32:1687":{"id":"a:2:2684:220-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12120:25262":{"id":"2:12120:25262","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1710":{"id":"0:52:1710","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[200,0],"end":[226,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7206:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7206:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2312:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1693":{"id":"0:42:1693","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1749":{"id":"0:63:1749","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[327,0],"end":[380,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9366:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1788":{"id":"0:68:1788","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[433,0],"end":[478,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2553-0:72:1635":{"id":"b:2:2553-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:128","2:2557:1479"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2248-0:72:1635":{"id":"b:2:2248-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2691:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2250:2213"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2548-0:32:1687":{"id":"b:2:2548-0:32:1687","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StringWrapper","id":"0:32:1687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2551:128","2:2552:1480"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12107:32788":{"id":"2:12107:32788","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2556:128":{"id":"2:2556:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32031:6250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:12111:32791":{"id":"2:12111:32791","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11741:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12129:32795":{"id":"2:12129:32795","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:2301"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:2294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:2295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1777":{"id":"0:66:1777","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[407,0],"end":[412,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2542-0:72:1635":{"id":"b:2:2542-0:72:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:695"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"2:7322:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:4336:2487":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8104:3042":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"11:2180:34687":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:46696:5255":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:41879:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12331:3635":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"11:97:34683":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:7636:32020":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3962:6164":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12483:3666":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5024:15916":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:45836:5220":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:6601:2644":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9772:3232":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:2956:2560":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:9299:4883":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:595:12409":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13240:3898":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44094:11790":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:45858:5221":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6460:4143":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:46384:5249":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:46460:5251":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:8683:3047":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:7543:4157":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:45606:5207":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:10029:23257":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:43983:2330":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:40346:5104":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11832:3544":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12019:3277":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:4904:4191":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:21:682":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:11721:2294":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5817:16563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:3463:2272":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"9:481:17591":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"11:630:4693":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:8142:4599":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:7498:4528":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:11266:26992":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:8253:6233":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"11:1845:4716":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2151:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:39560:25141":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:7259:5128":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12126:3587":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:3233:5344":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:9414:2286":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:9721:3227":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:21911:29585":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7626:4534":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:41589:4693":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:7043:29088":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:6644:5383":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:11918:1517":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:45636:5208":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:9653:3221":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2788:6306":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:4193:2825":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11446:3452":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:9011:22812":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:4599:24254":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:2138:4796":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:507:2998":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:6611:2645":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:9121:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"11:2033:4437":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5067:15920":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:44166:5187":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:5586:2889":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:11269:4893":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:1027:17673":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:44145:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:1602:13301":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:21570:6117":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:2932:2341":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:9512:3208":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:4010:6167":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:42713:5145":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:1135:33855":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:9312:3189":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"11:1103:4709":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:6390:4333":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6575:18600":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:9409:18678":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:6606:16989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:3472:22768":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8366:5483":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:6506:4346":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:43806:5174":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:46125:5229":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:3488:6135":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"11:1012:4706":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4962:15910":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:9028:3183":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:2378:4117":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:7271:17372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:3083:5338":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"0:24:1662":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"2:7202:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:6990:4427":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:9826:3235":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:9146:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:10589:3338":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:43949:11477":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:2458:5765":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:8310:18657":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4412:15850":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:46880:5257":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:10855:4770":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:154:2785":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:5797:4224":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9577:3214":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:4326:2852":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4455:15855":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4379:15847":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:3168:4693":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:2212:5334":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:21890:29607":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"0:72:1635":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"1:9110:5514":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6061:17711":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"11:657:1688":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5993:16575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:40323:4844":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:20995:6311":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"11:793:4712":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:13033:3847":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:40384:4854":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11891:3552":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11191:5391":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:285:34684":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13721:4048":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"7:79:17585":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2594:4126":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:9530:2862":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:875:4696":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:7966:5419":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:10967:3372":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13564:4007":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7757:4539":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:11504:4900":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:44114:11794":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:1080:4710":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"14:31:4684":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7478:4154":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:5305:4198":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:2616:4127":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:3300:4166":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:10923:3369":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:3175:4716":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:7537:2907":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6254:4319":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:13744:4049":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:573:12406":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:9157:2282":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:9453:18679":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:7237:4819":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:43237:5157":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7077:18603":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:23048:4822":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:44106:11795":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4780:15888":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:21927:29608":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:3898:6160":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:42039:4881":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:45982:5224":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:47700:5298":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:8947:5504":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:892:4693":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:8632:18644":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8289:5474":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:8200:6153":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:4163:2825":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:32067:4942":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:2194:34690":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:636:3021":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12388:3642":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:30875:2253":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6520:4348":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:1505:13290":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:11120:5389":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:5571:4144":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:45695:5211":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:5643:4211":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:6617:16990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:45676:5210":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7810:3126":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:7837:5414":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:7366:18604":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:47735:5301":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10545:3077":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:42691:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:42666:2288":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:11465:4898":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:562:3062":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13145:3874":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:7177:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3163:11499":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"0:66:1777":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"2:43279:5161":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:3782:4170":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:9372:141":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:20781:11692":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:7249:12354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:43935:5177":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:21015:4910":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:4018:6169":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:10167:6252":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:43575:2322":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:6561:6266":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:40432:3019":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4542:15866":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8263:5463":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:8439:5486":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:5032:4195":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:43521:2320":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:30313:29616":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:562:12404":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:40171:6085":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"0:25:1666":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"0:51:1705":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"2:32031:6250":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:11920:1050":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:6710:16992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:9545:3169":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:41234:4871":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4649:15875":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:7334:2637":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:4031:2800":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:1831:2637":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:44178:11803":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:2749:2570":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11502:3464":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8076:5457":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:10255:23252":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:40124:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"11:1818:4693":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6981:4424":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:22436:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:635:5319":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:986:4704":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:4812:796":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:355:5315":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:21118:6117":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:3030:4162":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:13763:4054":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:4255:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:3734:4795":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:0:2123":{"crate_id":17,"path":["object"],"kind":"module"},"11:1852:4717":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:6135:15757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:4702:6175":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6670:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:7743:4147":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:1489:4694":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:2933:3073":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4625:15873":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7488:4527":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:2161:11692":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:30847:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6014:16577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:4362:2827":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:8283:18656":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:6432:2901":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:11197:5540":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13181:3879":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:49682:6327":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:6728:4388":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:204:2798":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:521:22520":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4517:15863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:8025:4588":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:681:3029":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:671:3028":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:11428:4895":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13777:4056":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9068:34771":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10712:18777":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:47228:5288":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:6575:2902":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:4728:4185":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:44126:5665":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"11:1826:2639":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4809:15892":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:41251:4873":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:7043:32575":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:9696:3207":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7711:4537":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:4187:2486":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:30299:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:6124:2897":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12345:3636":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:9138:3185":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:7042:4434":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:585:6037":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:11282:3419":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:9907:3247":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:0:2114":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10686:5412":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:40091:2604":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:43755:11476":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:10857:18669":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"7:0:1545":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:8170:4601":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:20852:6322":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:4135:6187":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:2298:17712":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:736:4697":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:7635:4535":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:4474:15858":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:45451:5201":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12799:3713":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:1121:4710":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:11337:2920":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:2720:4131":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:20949:6309":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:8788:3050":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13469:3957":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13169:3876":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:8090:4593":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:41470:4711":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:40065:2601":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:10290:4890":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13082:3861":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:5104:4197":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:4264:4838":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:5998:18597":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:41317:29575":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:3047:17740":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:4400:4176":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:779:2803":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13689:4033":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:7599:11647":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:8420:18660":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:10741:5350":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:8598:18666":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9178:3186":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:5590:4847":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:1470:4697":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:44390:4720":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13453:3954":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:535:4097":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:12461:3655":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11946:3561":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4943:15907":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10080:3268":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:20753:6319":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"6:7598:17561":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:5073:15921":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"9:0:2116":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:917:4712":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:43347:2309":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11299:3422":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10840:3365":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:247:3055":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:9596:3215":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:2963:11444":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:12307:3632":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:7351:2638":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:7149:2265":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:4114:4835":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:532:12400":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:9443:3199":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:46172:5230":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:47709:5299":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:7815:5411":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10615:3341":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:40254:5094":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13433:3948":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:46226:5232":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:638:5321":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:8255:5470":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2985:2631":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:10096:4886":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:11497:24910":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11069:18671":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:8254:6232":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:1594:4718":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:1556:13296":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:9817:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:46666:5254":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4817:15893":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"11:1822:1688":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:5856:11997":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:10894:5496":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:2830:4136":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11532:3468":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:1916:4829":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:2046:4795":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:5820:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:40375:4853":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:40726:4865":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4427:15852":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:3935:2825":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:2240:32354":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:45575:5206":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:2470:11508":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:20933:6117":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:11741:2293":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:123:12078":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:4148:6188":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12006:3570":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:47086:5287":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:6699:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:7645:2913":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:10052:3265":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:41919:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:953:4702":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:9853:3237":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:3315:6140":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:5944:4241":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"9:421:17594":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:9965:4693":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:8674:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11928:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6376:4142":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:25858:4823":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13477:3958":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:39380:2487":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:4505:15862":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:1637:13303":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:7206:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:2502:4122":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6774:16996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:568:12405":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:2448:4120":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:41999:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:40058:2313":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:22403:2611":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:39227:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:399:34698":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4677:6158":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4728:15882":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:5736:2639":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12646:3691":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:11628:3497":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4303:15841":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:9566:3188":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:7094:1688":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:20547:2253":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4832:15895":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:46028:5226":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:45361:5197":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:6298:2800":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:42411:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:4037:4174":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"0:42:1693":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"6:6624:6219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:736:22518":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:21814:4914":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7697:4149":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5978:16573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:12318:3633":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:39247:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:1787:3065":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:4938:2825":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:1423:4711":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11174:2918":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:4001:2639":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:21348:6324":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:21873:4921":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:6252:2639":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:1910:13475":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:3406:5466":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6431:4336":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4786:15889":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:40042:2315":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13367:3929":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:7294:17374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:22271:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13385:3933":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:5525:6249":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:2784:6304":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:10057:2304":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10971:2916":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:8249:6190":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:3899:4173":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:4568:4181":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:3266:3076":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"14:202:11478":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9986:3255":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9617:3217":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4419:15851":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12293:3630":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:7694:5326":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:2843:11678":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12770:3693":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3079:2632":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:43389:2324":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8244:6189":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4435:15853":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:11488:4899":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:12312:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:11522:5399":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4615:15872":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:11940:1555":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:42401:30001":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:8989:5510":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:6211:2889":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:888:4697":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5007:15914":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:8521:18663":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"11:1048:34699":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:1838:4715":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12923:3807":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:5930:2825":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11544:3469":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:4722:15881":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11883:22882":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4823:15894":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:11220:3403":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:11109:3384":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4290:15840":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11478:5541":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:10516:3326":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:6336:4326":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:40129:5089":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:614:34775":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:5593:2890":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:500:12397":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12634:3684":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6919:34761":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8829:1688":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:1285:4704":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:20740:6318":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"10:44:4721":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:3374:11480":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:21798:31232":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4388:15848":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"9:445:17592":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:13488:3962":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:6396:5384":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6488:4338":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:11037:18670":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:652:2998":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:42906:5147":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:8979:34766":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:5847:4232":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:1062:4704":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:7488:3062":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:7244:34759":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:1577:4715":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:6743:16995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:8163:5111":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:44340:5190":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:7820:5412":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:5594:4146":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:644:2998":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5693:4212":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:4488:15860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:2911:6051":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7669:4158":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:40263:5095":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:22535:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4861:15899":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:1071:4706":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"12:0:2119":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:7504:16080":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3805:5353":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:20607:30287":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:1068:4708":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8153:5095":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:11922:1369":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:80:22507":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:9159:2283":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:43777:5166":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4760:2887":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11800:3537":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:10448:5343":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:11224:5395":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:2524:4123":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:8255:4879":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:6849:17002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:30371:29593":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:30052:6156":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:42182:2283":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:3231:5343":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11422:3448":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:21572:6312":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:41376:4874":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:2580:5336":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:47680:5296":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:43158:5150":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:7722:5410":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:2768:4447":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:39086:11497":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:11484:3456":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:8679:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:8256:4608":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:11927:641":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:2544:2883":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:4023:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:6442:4337":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:7244:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10660:3346":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:7208:29615":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"14:215:4689":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13812:4069":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:2758:6305":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6795:16997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:41462:4693":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:8984:5509":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:1756:4826":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11934:1501":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:45557:5205":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:10207:4888":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:13159:3875":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:5377:5370":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:488:12395":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:2744:2568":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:8954:23574":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:3996:6165":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8132:6116":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:1846:5331":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:3327:2637":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:6717:4387":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:2839:11677":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:3904:6159":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:3700:5351":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:3934:6161":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40397:5106":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4663:15876":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:6505:5385":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10428:3319":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:2847:11679":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:39387:4954":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:10491:2913":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:2357:4116":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:1716:13311":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11585:3481":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:4916:15904":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:727:3040":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:44348:5192":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:7016:4428":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:40020:2607":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:1689:13308":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:386:3057":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:1931:654":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:10343:5493":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:9213:5330":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:6767:4400":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13857:4075":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:12361:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8176:2325":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:3270:5345":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:5708:4215":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:6119:6401":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:9557:3187":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:6450:2800":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:749:2639":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:42703:5141":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"6:554:12403":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:43177:5153":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:4199:5355":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:1978:3072":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7467:4524":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"0:0:2003":{"crate_id":0,"path":["strsim"],"kind":"module"},"1:4437:6191":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:44110:11793":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:40355:4848":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:7563:16089":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12433:3649":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9876:3125":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:1408:4693":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:4523:15864":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"11:332:2790":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6893:5798":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"0:68:1788":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"1:10657:5527":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:11283:2306":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:20815:6321":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:10416:3318":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:4969:4193":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:361:5316":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:3580:4693":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:10705:3351":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:41268:6154":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:6943:18602":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:3152:27510":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:1568:13297":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10270:3305":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:6994:2635":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:10402:3314":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:3703:5352":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:2967:32398":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:4601:24256":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:41605:1688":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:10989:3077":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:41388:4876":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:7572:34756":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:1099:33854":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:10386:2912":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:3158:23488":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2426:4119":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:42175:2282":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:11254:5398":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:4:1015":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:35:2636":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:9153:2274":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:1565:1688":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:3193:5342":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10354:3311":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:0:2124":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:47814:5306":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:4540:4180":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:7510:16081":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6904:4410":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:42721:5146":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10823:3146":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:5522:6248":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"0:60:1729":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"6:4954:15909":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:2186:34689":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:6032:2893":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:8823:3051":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:1919:18708":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:5920:4093":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13219:3893":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:660:3022":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:5059:2832":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:43871:5176":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:47720:5300":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7767:18606":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"9:325:17646":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5835:16565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12033:3575":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:6355:5383":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:8791:5495":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12113:3586":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:7268:4820":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:3201:4717":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:6780:6307":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:6981:2892":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:21956:31229":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:0:2118":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:4597:24252":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:3386:4832":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:2366:6107":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:44118:11788":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:8109:4596":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:9410:5411":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:6392:5112":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:4410:2490":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11032:5494":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:911:2637":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:2219:6098":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7557:4530":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:2741:2337":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:10569:3333":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:8548:18664":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"11:2174:5864":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12046:3576":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:2215:2848":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:2706:2492":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:43593:2323":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:8293:6219":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:40141:29615":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8315:5358":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:12550:3673":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:1747:30004":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:4073:4711":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11615:3493":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:8867:6270":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:7279:4821":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10735:3356":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:41402:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:2163:11693":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:12299:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:8195:18645":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:13041:3848":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:2694:4130":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:10478:3323":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:9796:3233":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:6170:16611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:42682:2287":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12959:3836":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12224:3616":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:6696:18601":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:624:34774":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11339:3433":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5966:16572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"14:160:4684":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:2642:4128":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:2558:2866":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:8847:31863":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:40304:5100":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:21989:6157":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:10142:18750":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:5044:5364":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"10:36:34680":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:12236:3618":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:2687:5763":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:1254:4437":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:47689:5297":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:5402:3175":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4482:15859":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:47662:5295":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:39313:2259":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13121:3870":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6027:16579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:6564:12444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"9:174:17659":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:6155:16610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:7033:2812":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:40214:5091":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:8854:5499":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:1568:2639":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:365:2792":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13612:4008":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9340:3190":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:7803:4547":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:10751:23660":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"18:564:3007":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43371:2325":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:9596:2865":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:12609:2634":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:40716:2860":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:5848:16524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11355:3437":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1008:2800":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:41546:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:46074:5228":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:5787:2891":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:8360:2294":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:40692:5112":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:474:12393":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:43663:2302":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:7277:17373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:1439:1688":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:10699:5533":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:40285:5097":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:11676:2316":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6588:12278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"6:6647:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6854:4406":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:20560:30107":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:2808:4135":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:1538:4714":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11422:5353":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:10977:2917":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:9148:34769":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5804:16562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4684:15877":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:11736:2295":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:7267:2342":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:5259:2299":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:844:4693":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:13324:3917":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:6307:4140":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"10:0:2117":{"crate_id":10,"path":["adler"],"kind":"module"},"17:11372:3439":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:40077:2602":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:10262:2326":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:947:4701":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:11716:2301":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:11101:5670":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8195:5465":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8508:4693":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:11899:23659":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11556:3470":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:39978:2606":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:5472:2825":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"11:119:2788":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:530:2879":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:643:6040":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:5986:16574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:11923:1399":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:10711:5413":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:5666:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4495:15861":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:8718:3048":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:22370:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:41639:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4983:15912":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:5384:2825":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:2128:2817":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:6833:17000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:40204:2854":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43654:2303":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:2812:11674":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:5630:4206":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:1924:2270":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:3182:32093":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"11:2049:4704":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4937:15906":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:2929:2340":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10104:3270":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:9098:3184":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:1732:13312":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12372:3640":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:1947:3069":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:4948:15908":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5798:16561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:3155:23497":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:10134:4887":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:39203:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6243:34757":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:9127:5515":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:8156:4161":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:2060:4706":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:1637:4825":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:7023:2639":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:9628:2871":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:42506:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12496:3667":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9265:3188":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7437:4515":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"9:502:4773":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:8977:5508":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:3446:4167":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:43539:2321":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:4758:669":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:8271:5472":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:6558:4350":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:30243:2627":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4871:15900":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:8456:6243":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:2738:2566":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:4327:4175":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:922:4694":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:2822:11676":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6890:4151":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:7102:1688":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12194:3597":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:3749:4169":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:7057:1688":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:11938:1497":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:2764:4133":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:258:2800":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:21865:4920":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:46620:5253":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:1773:2637":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:46004:5225":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:482:12394":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:9946:3252":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8416:5141":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:7003:1688":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7029:4431":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:5014:15915":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:39345:4950":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:3481:6115":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:959:4703":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:11937:1500":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:43475:2327":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:21099:6310":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:5616:4202":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:4097:29091":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:5963:4248":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:7837:4551":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:4842:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:4351:5357":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13399:3940":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6868:4408":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10491:3324":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:6022:18598":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:755:3046":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8348:6228":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:1594:13300":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:2350:6102":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:22337:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"18:531:3002":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:3585:4168":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:44361:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:10283:3307":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:5393:5371":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:4534:15865":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10555:3328":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10885:3367":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:12517:2876":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:3235:4718":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"13:110:34745":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11520:3465":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:40707:5113":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11136:3385":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:44122:11789":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:653:12456":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:1461:4696":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:4706:6178":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:7528:16084":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:7875:5416":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:3956:6163":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8189:5463":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:5899:16569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"9:352:17607":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:11653:3501":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:1494:13288":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:21838:4919":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:10303:3308":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10580:3337":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:4637:15874":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:554:5318":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5766:16558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:8047:4589":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:1733:11703":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:2376:6112":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:10808:4892":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11573:3478":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"18:113:22509":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:1512:13291":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"13:0:2113":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:9906:5123":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:7293:4474":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:766:22519":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2981:2630":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:43625:2318":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:45505:5203":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:10445:5341":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:9895:3243":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:41478:1688":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:9163:2280":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13803:4065":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"7:32:17578":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"11:1611:2794":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:43259:5159":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:40276:5096":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"14:187:17686":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4340:15844":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:4818:4188":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:5742:5380":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:20890:11692":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:2800:11673":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:5889:16568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:9415:2911":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:7335:34760":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10440:3320":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13821:4071":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:20993:6117":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:7585:16091":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:11539:2304":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:7859:18607":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:7065:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:4702:4184":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:43439:2328":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13426:3947":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:7522:16083":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:11011:3374":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:43960:5178":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8899:6271":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"15:198:17693":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5386:3174":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:817:4701":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6662:4374":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:7683:4159":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:39969:5082":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13015:3842":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8170:2308":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:618:2271":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:9886:3240":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11770:3528":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4567:15869":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13516:3970":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:6935:2905":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13211:3890":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:4464:418":{"crate_id":2,"path":["core","char"],"kind":"module"},"6:1535:13294":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:44098:11792":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9534:3211":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:42441:4566":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:4006:6166":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:4373:15846":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:12554:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:42674:5137":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:5933:2889":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:2167:32359":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6474:4160":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4327:15843":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"11:1517:4713":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:5655:4145":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10377:3312":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:11942:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:4400:15849":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:3180:32573":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:11924:1483":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:5346:4199":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"14:7:4684":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4462:15856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:1270:4706":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13309:3915":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:4872:4190":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:7161:2266":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13419:3946":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:2879:4138":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6804:16998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:43898:4902":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12894:3796":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:4606:2594":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:9670:3224":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6179:4284":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8813:4693":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:9155:2273":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:10451:5345":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"14:165:17679":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:42168:2274":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4586:15870":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:20771:6315":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:926:4695":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:2362:1631":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"17:9683:3225":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:7557:16088":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:487:3061":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11272:24057":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10505:3325":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:5263:2300":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2372:1630":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"6:4747:15884":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:47540:5292":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"11:723:4696":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:2780:4451":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12138:3588":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:4845:4189":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:40157:5090":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:9959:3253":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:4624:4183":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8759:5493":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:6687:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:2348:6101":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11459:3454":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:40416:4855":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:494:12396":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:5792:16560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:4786:31220":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:5741:18596":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7317:34758":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:3668:2800":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:41959:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:40314:4841":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4694:15878":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4878:1002":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:1895:2269":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:45760:5213":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:6201:4299":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:7254:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"11:1501:17674":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:21977:4934":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:1048:4437":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:43198:5155":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:8183:2318":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:2319:4108":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:12449:3653":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:9032:5666":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:47784:5304":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:40110:2600":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:9989:4711":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:9917:3248":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:1630:13302":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:420:3060":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:7011:4811":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10026:3261":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:5418:4200":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:5000:4194":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4703:15879":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:2926:2339":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:7556:2909":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10125:3272":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"13:226:34746":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11931:744":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:41538:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:5840:2832":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:719:3037":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:9409:2285":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:12098:3583":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:2691:2336":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:0:1391":{"crate_id":1,"path":["std"],"kind":"module"},"18:538:3005":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:2833:4457":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2364:6106":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:6535:2787":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:6768:2847":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:2792:11672":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:5709:5376":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11813:3539":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:14:1639":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:7726:4942":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:6589:1698":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:5532:4845":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:47478:5291":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11924:3560":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13344:3924":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"11:968:4437":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10670:3348":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:11319:3432":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:46730:5256":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:1520:4792":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:7519:4529":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"11:644:4711":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"9:388:17593":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4367:15845":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:805:6046":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:8909:2308":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:8835:5374":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:12386:4906":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:2931:17738":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:7539:16085":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12158:3591":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13499:3963":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:44403:5196":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:4445:15854":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:1115:32406":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10039:3263":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4972:15911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:39373:4953":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13101:3862":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:975:3063":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:42921:29667":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:2337:4110":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:5779:4220":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:1479:4712":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:42161:2273":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:526:12399":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:3318:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:1499:13289":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:47876:5308":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10334:3187":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:1669:2800":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:10775:4891":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:1574:13298":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:10681:26993":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:4789:4187":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:9613:2866":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:2796:11671":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:46203:5231":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:8821:5498":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:20779:30445":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:12536:3670":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8883:6269":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6597:16988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6076:16582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:45473:5202":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4793:15890":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6164:4282":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:30283:4941":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:2220:33549":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:47799:5305":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12085:3581":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:10068:3267":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"0:52:1710":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"0:63:1749":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"16:8129:4597":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11717:2924":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:21963:4933":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:5828:16564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:4392:2825":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:13791:4063":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:930:4698":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11056:23671":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:9218:3187":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:39172:4946":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:40030:2608":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:8651:3174":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:43493:2326":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:46306:5233":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:8360:18658":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:1544:13295":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:45952:5223":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:1695:13309":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:2572:4125":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:4531:6209":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:3640:3088":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:7673:6042":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:42925:4884":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"19:0:1032":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:2827:4456":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:10864:5373":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:43269:5160":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:21850:29584":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13194:3885":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11258:3418":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11434:3449":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:2851:11680":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:10452:3321":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:21343:6314":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:7194:4813":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6236:4316":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:5408:5372":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6876:4150":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:2817:11675":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:3348:5113":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"0:61:1735":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"17:13233:3896":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:13356:3925":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:44378:5195":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:8237:5354":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:9839:3236":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:7165:11649":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:7619:5400":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:7608:17562":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:7599:6117":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:11410:3445":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:1034:3064":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:1500:4695":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:8667:3175":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:43688:2315":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:6819:16999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:10015:3260":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"0:59:1720":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"2:2856:11681":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:11821:3541":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6719:16993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:1701:6182":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:7574:16090":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12419:3647":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:9748:3187":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:41453:1651":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"18:690:3031":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"0:43:1695":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"6:7462:17533":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4847:15897":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:11360:5351":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:5976:4099":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:45427:5200":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:41520:5130":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:43823:5175":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:3999:4833":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:8805:5496":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:9523:3209":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:55:4579":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"5:273:2298":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9498:3207":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:11933:741":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:5509:2643":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:2546:4124":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:10079:5518":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:501:2817":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:32158:2571":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:43645:2305":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:47837:5307":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:40332:5101":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:41719:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"0:18:1641":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"typedef"},"2:20575:30107":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:11490:25051":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:43167:5152":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11969:3566":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:1667:1088":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:6108:2876":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:875:2808":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11879:3550":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4907:15903":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:30277:2628":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:44102:11791":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:10635:3343":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:7595:6049":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:41340:5126":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:2753:6303":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10626:3342":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:901:2639":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:4437:2489":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:11391:3444":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:12334:30630":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12522:3669":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:13667:4027":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:1821:2633":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4753:15885":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11861:3549":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10681:3349":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:43357:2308":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:9091:5390":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:4991:15913":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:10649:3344":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"8:0:2115":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:41679:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:1299:4710":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12576:3675":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:41297:30003":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:9628:3218":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:1783:5327":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:12563:3674":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:4011:4834":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:1672:13306":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:8997:5512":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:40006:2605":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:43329:2312":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12178:3592":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:20605:30282":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:6043:34505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:7971:6143":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:9038:34770":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:62:12023":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4841:15896":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:10676:24240":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"18:96:22508":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11916:937":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:44090:11787":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:7588:4533":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:45405:5199":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:10248:2327":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:47338:5289":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:47586:5293":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10897:3368":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:4932:4192":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:11060:3346":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13316:3916":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:2391:2129":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:3424:5349":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:1662:13305":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:3272:5346":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:43970:5182":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:43315:2317":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:32071:4943":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:45535:5204":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:11044:5495":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:1630:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:4145:4836":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:7449:4516":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:42484:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6819:4402":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:3169:11498":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:11730:2296":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:10465:3322":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:11932:745":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:6371:1688":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:10960:2915":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:10276:4889":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:44305:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:3815:4171":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:8858:3052":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3234:11443":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:4769:15887":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13292:3907":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:11253:11754":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13842:4074":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:44297:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:21782:4913":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:5811:4225":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:707:2296":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:6772:11643":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:8256:18643":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:39990:29622":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:9973:3254":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:1844:5330":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:2963:32399":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:7103:5512":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:1519:13292":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:40407:5107":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5057:15919":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:22238:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:8443:18661":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:3191:5341":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12072:3579":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:9151:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:8953:3176":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:40456:5108":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:1589:13299":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:40481:4859":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12358:3637":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:3514:2639":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10743:3358":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:4886:15901":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:626:4787":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:5881:16567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"18:590:3008":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:11936:1499":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:676:6041":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:936:6046":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:579:12407":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:7688:6043":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:1589:4717":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:20588:30286":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:8753:3049":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:7499:5544":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4394:15692":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:7827:5413":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:5736:16496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7596:18605":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"14:0:2120":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:42457:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:41597:4711":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:857:4711":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:5071:4196":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2862:4137":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:8514:5491":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:5013:5364":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9478:3202":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:40446:4857":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:2763:4450":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:4662:6218":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:6007:16576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:819:2806":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4314:15842":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4715:15880":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:8389:18659":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11471:3455":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:9933:3250":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:6361:4330":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12510:3668":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:11641:3498":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10316:3309":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:2481:5335":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:2742:4132":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:2957:32395":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:599:34773":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:9866:3238":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:4046:11441":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:5677:18595":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:4587:6164":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:2470:4121":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"15:0:2121":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:6156:5382":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:4704:6177":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:8120:5350":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:11064:5665":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:43792:5171":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:3799:2637":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:40701:4863":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:242:3054":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:11930:743":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:6327:4325":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:8214:4495":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:45381:5198":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:10169:2324":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"15:180:17692":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13265:3903":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:43635:2319":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:5991:4849":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:45713:5212":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:7592:2292":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:9380:18677":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13332:3918":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:20590:30284":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:41211:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:10761:18667":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:6840:17001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:4757:4186":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:2620:5337":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4868:6216":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:7961:5418":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:3225:4165":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:6129:16609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"18:582:2253":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9275:34762":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11721:3503":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:8490:18662":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:3197:11442":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:695:4695":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"15:219:17697":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:12980:3841":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:867:1688":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:4555:15868":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"14:221:4691":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:3209:4715":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:7411:4252":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:42429:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:6035:16580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:43250:5158":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:10010:5329":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:7624:5402":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:8180:18608":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:403:34693":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:2201:2265":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:13659:4026":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:11935:1498":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:10000:3256":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11785:3532":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10798:18668":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:44287:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:8931:3056":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:41529:11747":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:491:2997":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10691:18776":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:7509:4155":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"11:311:34681":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:3378:2825":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:3063:3084":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:1821:5329":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:5357:5369":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:11941:1128":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:5876:16566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:22601:4938":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:481:2996":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:7699:5407":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:20880:6316":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:9108:34764":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:40467:5111":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6293:4322":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11163:3391":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:20920:6323":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:12902:3799":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:4119:6185":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:8072:4591":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:4894:15902":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:9161:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:8922:5500":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:3142:3075":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5862:16525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12282:3628":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11090:3381":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:2668:4129":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"0:73:1636":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"1:6508:6264":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:6867:17003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:4877:6217":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:1544:2825":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:39963:2314":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6671:4375":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:10238:5372":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:2855:2886":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:3214:32578":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:7516:16082":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10721:3353":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:760:2637":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:4233:4693":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:547:12402":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"14:40:3419":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6321:4324":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:8525:5492":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:1526:13293":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:47624:5294":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6572:13248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:587:12408":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:0:817":{"crate_id":6,"path":["libc"],"kind":"module"},"1:11239:5396":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:43670:2313":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:515:2995":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:21454:30105":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:2905:4139":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:8573:18665":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:9165:2281":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13461:3955":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13053:3853":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:1572:2637":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"18:699:3032":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:21442:4908":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4853:15898":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:4665:6191":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:1708:13310":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:43341:1634":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"18:609:3015":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:45658:5209":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13376:3932":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13865:4078":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:9488:3205":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8111:5348":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:21001:6313":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:6743:2843":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:11866:5547":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:43421:2329":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:7891:4793":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:47761:5303":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:4390:2488":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:5774:16559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:5462:5373":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13506:3965":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:6865:2904":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:4510:4179":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:6218:4306":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9424:3197":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:43098:5148":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13651:4023":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:119:12077":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:2469:6117":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:4127:6186":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"11:667:4694":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:7551:16087":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:6921:3042":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:44003:2331":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:45806:5219":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:30477:29576":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6400:4334":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:3948:6162":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13443:3951":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:2967:17739":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:11401:5352":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:21676:4911":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:9807:6117":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:9469:3200":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:2786:4134":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:9188:34767":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10527:18775":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:12403:3646":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12835:3744":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:4480:4178":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:21729:4912":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:10876:23658":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11902:3553":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:2922:2338":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:4596:4182":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:41487:5128":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:6725:30209":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11193:3395":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:5557:4141":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:480:2878":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:40734:4867":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6935:4413":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12059:3578":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4468:15857":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:9110:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:39269:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:2032:4793":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:13639:4020":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:7065:4436":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"9:52:17610":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:46050:5227":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:41759:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:7706:6074":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:9111:2272":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5079:15922":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:3593:4711":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:46430:5250":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4739:15883":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:8842:32022":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:40685:4862":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:5043:15917":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:43149:5149":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"0:65:1767":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"2:39366:4495":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:6582:2643":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:43224:5092":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:21125:6317":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12915:3806":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:4279:5356":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:5724:4216":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:40294:5098":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7529:4156":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:8936:5501":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:7600:5317":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:9374:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:46542:5252":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6066:16581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:5367:17710":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"11:1858:4718":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:22502:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:541:12401":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:40364:5105":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:9641:3219":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:3719:4793":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:10936:3371":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13698:4035":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:3872:4172":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:574:2998":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:6704:16991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:7073:4812":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:39125:11445":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:42466:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:3142:11682":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:4445:4177":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:5215:2800":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:5886:4235":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10257:3304":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:11939:790":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:6725:16994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:9822:3234":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:3648:1688":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5954:16571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4799:15891":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:40084:2603":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:506:12398":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11993:3567":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:22304:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:11929:746":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:13625:4014":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:41799:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:2692:2564":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13411:3943":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:1648:13304":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13879:4081":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"0:32:1687":{"crate_id":0,"path":["strsim","StringWrapper"],"kind":"struct"},"16:0:2122":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:47416:5290":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:10598:3372":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:11787:11470":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:7285:22869":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:1785:5328":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:2805:4452":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:5716:5379":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:1561:4693":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:8498:5359":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1680:13307":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:9228:34768":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4928:15905":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"0:19:1644":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"2:7215:2343":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11083:5390":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:11888:6044":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:7545:16086":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:43187:5154":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:3638:6155":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:4459:6192":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:10014:2325":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:4259:4837":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:4783:6174":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:5919:16570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:41353:5354":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:9734:3228":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:12506:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13135:3873":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:40495:4860":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:41614:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13257:3901":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:8777:5494":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:22568:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:2959:32405":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12592:3677":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:43679:2314":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:9322:34763":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13678:4032":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:21127:4910":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:4381:2853":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:9072:5389":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:6132:4277":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:6544:4148":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11600:3487":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:21094:6117":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:41839:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"11:2168:34692":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13249:3899":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9350:34765":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:9366:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:4765:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:9149:24907":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:6793:4401":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:6678:11651":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:4926:6224":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"11:798:4698":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:7883:5417":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:45906:5222":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:22469:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:40678:4861":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:4425:2827":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:47746:5302":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40234:5092":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:1583:4716":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:12607:3681":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"11:836:4702":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:4763:15886":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11844:3546":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:844:4703":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"9:234:5141":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:40050:2314":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:10851:5410":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:7169:11648":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10092:3269":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4605:15871":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6351:18599":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:2774:11670":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5050:15918":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4549:15867":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:6021:16578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:7224:4816":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:5343:5365":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:39291:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11529:5399":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12622:3346":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2404:4118":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:39187:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13066:3858":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13024:3846":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:39352:4951":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12259:3627":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11234:3404":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}