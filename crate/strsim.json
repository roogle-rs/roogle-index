{"root":"0:0:2236","crate_version":"0.11.0","includes_private":false,"index":{"2:12971:33089":{"id":"2:12971:33089","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12579:2548","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::rmatch_indices":"2:12974:33090"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44262:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:33098":{"id":"2:12997:33098","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:33084":{"id":"2:12907:33084","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12078:1544","crate::ops::IndexMut":"2:3240:2850","str::slice_unchecked":"2:12906:33083"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:29305":{"id":"2:12904:29305","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:33093":{"id":"2:12981:33093","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:33096":{"id":"2:12985:33096","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12604:2540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:29336":{"id":"2:12944:29336","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12579:2548","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::split":"2:12938:28713"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44130:2573","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2770:1626":{"id":"2:2770:1626","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5576:33793":{"id":"5:5576:33793","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:282:2545","`String`":"5:7597:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2545","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:29344":{"id":"2:12921:29344","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12916:31261":{"id":"2:12916:31261","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12917:31211"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44386:2552","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:28714":{"id":"2:12918:28714","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44366:2567","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:26872":{"id":"2:13011:26872","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5560:33789":{"id":"5:5560:33789","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:282:2545","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:282:2545","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5577:8191":{"id":"5:5577:8191","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:1952":{"id":"2:12900:1952","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:29304":{"id":"2:12902:29304","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2018":{"id":"0:108:2018","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[721,0],"end":[754,1]},"visibility":"public","docs":"Calculates a S√∏rensen-Dice similarity distance using bigrams.\nSee <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:33102":{"id":"2:13016:33102","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4758:33102"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44411:2562","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12885":{"id":"2:12885","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12886:878","2:12887:1898","2:12888:33079","2:12889:33080","2:12891:33081","2:12894:25711","2:12895:33082","2:12896:333","2:12897:29306","2:12898:1929","2:12900:1952","2:12902:29304","2:12904:29305","2:12906:33083","2:12907:33084","2:12908:29328","2:12909:1839","2:12910:29331","2:12911:29332","2:12913:1825","2:12914:5624","2:12915:5267","2:12916:31261","2:12917:31211","2:12918:28714","2:12919:33085","2:12920:31222","2:12921:29344","2:12924:29345","2:12927:29346","2:12930:2800","2:12934:2766","2:12938:28713","2:12941:29334","2:12944:29336","2:12947:33086","2:12950:33087","2:12953:29338","2:12956:29340","2:12959:29342","2:12962:29343","2:12965:1840","2:12968:33088","2:12971:33089","2:12974:33090","2:12977:33091","2:12979:33092","2:12981:33093","2:12983:33094","2:12984:33095","2:12985:33096","2:12988:33097","2:12991:25620","2:12994:29347","2:12997:33098","2:13000:33099","2:13003:33100","2:13006:33101","2:13008:26867","2:13009:29234","2:13010:26871","2:13011:26872","2:13012:26873","2:13013:29237","2:13014:29238","2:13015:29239","2:13016:33102","2:13018:8082","2:13019:33103"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12938:28713":{"id":"2:12938:28713","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12579:2548","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::split_whitespace":"2:12916:31261","str::rsplit":"2:12944:29336"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44112:2574","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12988:33097":{"id":"2:12988:33097","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5575:33792":{"id":"5:5575:33792","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2516:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:664"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12920:31222":{"id":"2:12920:31222","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44404:2549","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32718:237-0:112:1798":{"id":"a:2:32718:237-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32718:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12894:25711":{"id":"2:12894:25711","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12127:2555"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:1879":{"id":"0:54:1879","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[233,0],"end":[259,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7922:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7922:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2516:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:1839":{"id":"2:12909:1839","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12908:29328","str::split_at_mut_checked":"2:12911:29332"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1874":{"id":"0:53:1874","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[221,0],"end":[223,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.866 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2762:748":{"id":"2:2762:748","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:29338":{"id":"2:12953:29338","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548","str::rsplitn":"2:12956:29340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44216:2576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1903":{"id":"0:63:1903","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[300,0],"end":[337,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2759:2760":{"id":"2:2759:2760","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2733:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:721":{"id":"0:18:721","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[38,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9988:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43272:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2456-0:112:1798":{"id":"b:2:2456-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2458:25607"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5559":{"id":"5:5559","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5560:33789","5:5561:1966","5:5564:33790","5:5567:33791","5:5575:33792","5:5576:33793","5:5577:8191","5:5578:26869","5:5579:26870"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:27:1828":{"id":"0:27:1828","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[90,0],"end":[164,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7922:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7922:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2516:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:33103":{"id":"2:13019:33103","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4756:33103"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44429:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:878":{"id":"2:12886:878","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:29346":{"id":"2:12927:29346","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:29237":{"id":"2:13013:29237","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35455"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:29343":{"id":"2:12962:29343","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1919":{"id":"0:65:1919","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[353,0],"end":[414,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2521:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10229:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:33086":{"id":"2:12947:33086","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12579:2548","str::split":"2:12938:28713","prim@char":"1:12072:453","`DoubleEndedIterator`":"2:7960:131","str::rsplit_terminator":"2:12950:33087"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44162:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5564:33790":{"id":"5:5564:33790","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12950:33087":{"id":"2:12950:33087","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12579:2548","str::split":"2:12938:28713","prim@char":"1:12072:453","str::split_terminator":"2:12947:33086"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44180:2577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13009:29234":{"id":"2:13009:29234","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40202:29241","Self::is_ascii":"2:13008:26867"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40202:29241","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42353:8090-0:112:1798":{"id":"a:2:42353:8090-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42353:8090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[37,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10018:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5561:1966":{"id":"5:5561:1966","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:29340":{"id":"2:12956:29340","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12072:453","str::splitn":"2:12953:29338","self::pattern":"2:12579:2548"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44234:2575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:2766":{"id":"2:12934:2766","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42231:191","prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2766-0:112:1798":{"id":"b:2:2766-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2769:138","2:2770:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12994:29347":{"id":"2:12994:29347","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12965:1840":{"id":"2:12965:1840","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12579:2548","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::rmatches":"2:12968:33088"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44316:2571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:1997":{"id":"0:105:1997","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[677,0],"end":[679,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","provide","type_id","description","source"],"trait":{"name":"Error","id":"2:2818:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12959:29342":{"id":"2:12959:29342","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:1897":{"id":"0:62:1897","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[285,0],"end":[290,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2769:138":{"id":"2:2769:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:3580:1639":{"id":"2:3580:1639","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40016:5529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:1888":{"id":"0:61:1888","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5579:26870":{"id":"5:5579:26870","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13012:26873"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:721":{"id":"0:116:721","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9988:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9969:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13003:33100":{"id":"2:13003:33100","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:29345":{"id":"2:12924:29345","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13000:33099":{"id":"2:13000:33099","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:1798":{"id":"0:112:1798","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[33,0],"end":[35,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:113:1799"],"impls":["a:2:42353:8090-0:112:1798","a:2:42354:8286-0:112:1798","a:2:32718:237-0:112:1798","a:2:32775:2586-0:112:1798","a:2:2978:246-0:112:1798","b:2:3578-0:112:1798","b:2:2456-0:112:1798","b:2:2760-0:112:1798","b:2:2756-0:112:1798","b:2:2766-0:112:1798","b:2:2771-0:112:1798","b:2:2453-0:112:1798","b:5:5833-0:112:1798","0:19","0:115","0:117","0:17","0:118"]}}},"2:12898:1929":{"id":"2:12898:1929","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42231:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10669:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:26871":{"id":"2:13010:26871","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:33088":{"id":"2:12968:33088","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12579:2548","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::matches":"2:12965:1840"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44334:2572","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5578:26869":{"id":"5:5578:26869","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13011:26872"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12911:29332":{"id":"2:12911:29332","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12910:29331"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2774:138":{"id":"2:2774:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32648:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13008:26867":{"id":"2:13008:26867","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2775:1624":{"id":"2:2775:1624","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:1824":{"id":"0:26:1824","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:664":{"id":"0:119:664","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:33092":{"id":"2:12979:33092","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:1863":{"id":"0:44:1863","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[186,0],"end":[188,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:33090":{"id":"2:12974:33090","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12579:2548","`DoubleEndedIterator`":"2:7960:131","prim@char":"1:12072:453","str::match_indices":"2:12971:33089"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44280:2570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12599:2542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32775:2586-0:112:1798":{"id":"a:2:32775:2586-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32775:2586","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:113:1799":{"id":"0:113:1799","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[34,4],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:21:1807":{"id":"0:21:1807","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[53,0],"end":[72,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7922:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7922:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2516:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:33080":{"id":"2:12889:33080","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:1825":{"id":"2:12913:1825","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44082:1797","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2760-0:112:1798":{"id":"b:2:2760-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:748"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2458:25607":{"id":"2:2458:25607","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10013:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2453-0:112:1798":{"id":"b:2:2453-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2455:2446"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:45:1865":{"id":"0:45:1865","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[191,0],"end":[211,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7922:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7922:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2516:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13006:33101":{"id":"2:13006:33101","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12540:137","`FromStr`":"2:12539:2565"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12539:2565","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12539:2565","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:2800":{"id":"2:12930:2800","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42231:191","prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12888:33079":{"id":"2:12888:33079","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:25620":{"id":"2:12991:25620","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5567:33791":{"id":"5:5567:33791","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7597:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:333":{"id":"2:12896:333","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12897:29306","`u8`":"1:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:29306":{"id":"2:12897:29306","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12089:1648"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2771-0:112:1798":{"id":"b:2:2771-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:138","2:2775:1624"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12983:33094":{"id":"2:12983:33094","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:8082":{"id":"2:13018:8082","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4759:8082"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44420:2563","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:33091":{"id":"2:12977:33091","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2978:246-0:112:1798":{"id":"a:2:2978:246-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42354:8286-0:112:1798":{"id":"a:2:42354:8286-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42354:8286","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2756-0:112:1798":{"id":"b:2:2756-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:2760"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106:2006":{"id":"0:106:2006","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[693,0],"end":[702,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau‚ÄìLevenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"l√∂wenbr√§u\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:1898":{"id":"2:12887:1898","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5833-0:112:1798":{"id":"b:5:5833-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10018:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5831:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5835:1601"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20:1804":{"id":"0:20:1804","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:42372:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12891:33081":{"id":"2:12891:33081","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12889:33080"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:29331":{"id":"2:12910:29331","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12911:29332"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42229:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32720:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3578-0:112:1798":{"id":"b:2:3578-0:112:1798","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32719:2585","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3576:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3580:1639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12908:29328":{"id":"2:12908:29328","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:12910:29331","str::split_at_mut":"2:12909:1839"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:33085":{"id":"2:12919:33085","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44376:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5835:1601":{"id":"5:5835:1601","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7597:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:29334":{"id":"2:12941:29334","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12579:2548"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12395:2551","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12584:2541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:33083":{"id":"2:12906:33083","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12078:1544","str::slice_mut_unchecked":"2:12907:33084","crate::ops::Index":"2:39848:2849"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2236":{"id":"0:0:2236","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1307,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]","#![allow(clippy::cast_possible_wrap, clippy::cast_sign_loss,\nclippy::cast_precision_loss, clippy::needless_pass_by_value,\nclippy::similar_names, clippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::must_use_candidate, clippy::range_plus_one)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:112:1798","0:20:1804","0:21:1807","0:26:1824","0:27:1828","0:44:1863","0:45:1865","0:53:1874","0:54:1879","0:61:1888","0:62:1897","0:63:1903","0:65:1919","0:105:1997","0:106:2006","0:108:2018"],"is_stripped":false}}},"2:13014:29238":{"id":"2:13014:29238","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35455"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:31211":{"id":"2:12917:31211","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12916:31261"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44395:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:33082":{"id":"2:12895:33082","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12914:5624":{"id":"2:12914:5624","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44088:2558","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13015:29239":{"id":"2:13015:29239","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35455"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2455:2446":{"id":"2:2455:2446","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:5267":{"id":"2:12915:5267","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44098:2557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13012:26873":{"id":"2:13012:26873","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12984:33095":{"id":"2:12984:33095","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:47737:5739":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:5175:3141":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:8923:5940":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:22018:8161":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:357:5765":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"9:52:7806":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:8881:5936":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:11518:5796":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:5083:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:4473:5410":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:21740:8354":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:586:6643":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:44420:2563":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:6438:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:710:5138":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:3363:2854":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:11290:5217":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:12077:1511":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:3709:4610":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:48488:5759":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:22780:31246":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:5014:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:12088:797":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:22609:5491":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10982:21076":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:2037:3365":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:5415:7059":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11799:3600":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:6409:7209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:3707:3108":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:21417:32626":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:12993:21068":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:33801:8348":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:22853:31235":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"13:109:34540":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:14855:4149":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:5827:5821":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:9155:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:14503:4023":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:40642:31262":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:3201:2587":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:22746:5494":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:12695:3705":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:40029:5530":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:21633:5490":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:11166:3530":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:48435:5756":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:40890:5544":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11112:6116":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:31118:31239":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:6678:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:11701:2553":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:11352:5834":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:12090:1645":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:7679:2854":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:2835:4580":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6609:7315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:44130:2573":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:10719:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:12543:3698":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:39189:13720":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:1885:5779":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:3814:5797":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8996:8322":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"0:61:1888":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"1:1975:708":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:3208:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:13457:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:7982:2531":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:10814:5137":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:44685:13520":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:48371:5752":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11128:3478":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:10487:3225":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:10906:2551":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:32648:2507":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:43930:5603":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:21731:8161":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:42354:8286":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"11:1917:5160":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:39959:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:754:3345":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:48360:5751":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:363:5766":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:42191:5450":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:7429:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:16105:4496":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:5457:7089":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:1136:34355":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:41000:5555":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:4232:3133":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11354:3549":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13766:3889":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13674:3853":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:15214:4247":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:1547:6680":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12485:21190":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:11335:3230":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"11:2548:6566":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"13:0:2347":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:8894:5937":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6215:4767":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:14325:3990":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12056:3646":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:2789:4578":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"7:78:19976":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"9:237:5592":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:33567:13709":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5314:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:5025:3133":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:40691:2564":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:42656:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:7802:8087":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:5601:20994":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:22303:8440":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:15116:4221":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:13260:5485":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2588:5784":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:10028:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:1699:6777":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:3315:5789":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:6608:7625":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:5652:8301":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"0:0:2236":{"crate_id":0,"path":["strsim"],"kind":"module"},"1:8369:5912":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:891:3116":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:44844:7647":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:16212:4523":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:7749:5843":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12030:3643":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:5536:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12671:3703":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:13797:3896":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:3411:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:1707:6781":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:42169:5799":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:7547:31223":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:4648:2752":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12278:3664":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13024:21069":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"11:2542:6335":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:7948:5856":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"11:844:8093":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:14868:4156":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:13211:3768":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:7706:21006":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:5726:4667":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:6507:5562":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:5344:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:34347:13714":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:8294:7600":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:6068:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6188:4765":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:2529:4566":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:597:3361":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"18:531:3301":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:10946:3228":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:7731:5767":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:12341:5478":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"11:102:6559":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:2573:4568":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:10090:5960":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:8954:5941":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:7359:7460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:45075:5641":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:10671:34562":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:43461:5588":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:44376:2568":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:12768:21045":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:46633:5676":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10284:3349":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:570:6634":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:15333:4278":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:22:735":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:3838:2854":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:5527:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:12072:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5002:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11674:3584":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:4675:453":{"crate_id":2,"path":["core","char"],"kind":"module"},"2:40772:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8937:5819":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:688:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:8253:7591":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:1676:3102":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:46701:5679":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:5400:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:15376:4292":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:6413:5424":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:5616:4653":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:3260:4607":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:3396:13724":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:1723:6786":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:14752:4063":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7389:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:40680:2896":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:10013:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:12318:5477":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:9988:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:2304:20133":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:1578:1858":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11089:3524":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:16032:3772":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:2450:8156":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:14414:4005":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13308:3787":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"0:112:1798":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"5:2054:5240":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:10710:3502":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:7938:5855":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:8215:3341":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:2032:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:11858:3236":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:4784:8246":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:42295:5154":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:7561:7555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5565:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:1653:6757":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12863:3717":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:48331:5748":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:33381:4889":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:10024:2527":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:43500:5596":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:15138:4225":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:8006:7577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:44216:2576":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:42734:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:735:25250":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5630:4656":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:10399:2557":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:42372:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:15168:4236":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:41457:5563":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:40777:5538":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12900:3720":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5477:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:6471:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:6052:3209":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8351:5799":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:44032:5611":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:2201:7615":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:2203:3369":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:33860:8350":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:41476:5441":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4909:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:31467:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:15190:4242":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:47035:5701":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:12539:2565":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5472:7098":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:10870:25640":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13015:3683":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:1686:6773":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5031:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:48129:5743":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:32807:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:7415:31115":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11063:3521":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:9122:6112":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:3749:8202":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"11:1160:5153":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8304:5905":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:39848:2849":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:44706:5633":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:7152:4916":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:636:5234":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:2730:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:10700:5855":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:7516:7531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:15701:4395":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:563:3306":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:15655:4381":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:22449:13733":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"2:46186:5656":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11497:3559":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:6602:5431":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:11097:2576":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:635:3320":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6331:4779":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12107:3503":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:6575:3108":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:1029:3108":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:14341:3992":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:6636:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:12039:7828":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:41228:5436":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:41442:5562":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:30924:2847":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:697:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"0:108:2018":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"18:689:3330":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12089:3648":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:4825:2882":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:5462:5810":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:8247:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:15222:4249":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:3275:5788":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:13844:3902":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:6896:2860":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:8097:5050":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:875:5146":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:43255:2516":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:12597:3699":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:12127:2555":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:9030:5943":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:5277:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:7351:13701":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10828:34561":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:4070:3108":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"14:202:13521":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:1542:5239":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:7960:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:7627:5989":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:2498:20058":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:11567:3566":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:2665:4572":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:48465:5758":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12362:3677":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:44082:1797":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13606:3851":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:41218:5561":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:4650:8264":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:16198:4519":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:7996:5858":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:7444:4975":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:46957:5685":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:41012:5429":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:10481:3185":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:41083:5434":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:22170:8161":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:613:34566":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5630:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:14260:3982":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5445:7080":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:2121:5275":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:6038:14026":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:48067:5742":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:1590:5158":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:7695:2855":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:42287:5137":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:5361:7032":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:12079:1629":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"11:1025:5148":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5238:4639":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:46364:5664":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:10863:2574":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:32775:2586":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:4401:3135":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"11:800:2856":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13959:3920":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6254:4772":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:10661:3501":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:11016:3515":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13785:3894":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"10:44:5167":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"5:1120:34459":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:5865:4690":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12494:3690":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:42617:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:2736:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:7534:5262":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:3522:5794":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12408:3680":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:3472:3133":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:5212:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:7523:4600":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:40982:5554":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"11:434:34535":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:13235:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:836:5137":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:11018:2573":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5671:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"13:226:6558":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:5365:3108":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:4491:4621":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:9150:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:859:1858":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12443:3685":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6230:4769":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:437:3359":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:4821:8232":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:9168:2541":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:42500:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:15624:4373":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:6738:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:7951:5038":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:6362:4602":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:47381:5708":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:3317:5790":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:44737:2580":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:44634:5481":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:6116:4750":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:3773:5242":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:22838:31197":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:8317:7606":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11341:3548":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:11877:3609":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:396:3100":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:791:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:7324:4966":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:10020:2520":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:11661:5842":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:4996:8272":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:578:6639":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:4202:5406":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:16165:4512":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:9472:3223":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:15151:4231":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:3561:2512":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:47193:5704":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:9076:5951":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:32688:4937":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:11467:3557":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:3159:13489":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:4907:4634":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6729:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:1862:5778":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:14545:4027":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:545:6621":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:4674:4626":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:5665:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:5581:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13738:3882":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:14933:4191":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:12087:801":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6134:4760":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5643:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:6621:5829":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"0:63:1903":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"9:481:19982":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12318:3377":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:5568:4652":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:3579:8159":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:42420:5154":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"7:0:1693":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:3333:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10044:21064":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:21614:8353":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40726:2890":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"18:589:3307":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:7602:7570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2365:13734":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:12111:5472":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:15126:4222":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:2068:5242":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:40940:5550":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:45021:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:3576:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"5:2723:6233":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12189:3657":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:11056:5467":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:7412:7483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:8981:8320":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:39852:5524":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:3406:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:10935:3227":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:553:6626":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:46411:5665":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:1925:7622":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:3029:8349":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:42814:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:9672:32799":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12353:3676":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5236:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5244:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:44042:5612":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:39804:13490":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:7225:21003":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5897:20996":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:10277:2534":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:14246:3980":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:42312:5578":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:40968:5551":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:2733:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:13402:3190":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:6650:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6882:4870":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:15734:4402":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:7931:2589":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:11443:3556":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:14298:3986":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:1535:6671":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:10666:7656":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:564:6631":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:40921:5547":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:40930:5548":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:10441:5787":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:7064:3156":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:6657:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:8022:1938":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:5163:5809":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7998:4603":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:1911:13743":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:4047:8218":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6201:4582":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:7575:7564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:5045:8278":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:15836:4427":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:42364:5456":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:7976:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:15957:4445":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:6491:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:4392:5801":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:32805:2740":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:40788:31223":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:22911:8215":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:8614:5137":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8870:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:9858:21059":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:44913:13833":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:40815:8130":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:10155:3487":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:42375:193":{"crate_id":2,"path":["strsim","HammingResult","Ok"],"kind":"variant"},"17:15931:3754":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:3601:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:7020:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:4871:4633":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:11537:3562":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:403:3356":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:1939:2509":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:5901:2856":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:14587:4034":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:43272:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:41034:5556":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:0:2352":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:3177:4549":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:15778:4417":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:11125:5468":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:46078:5652":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5636:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:7491:4977":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:2001:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11647:3582":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:30892:2846":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6941:21002":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:4797:721":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:12289:3665":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:7537:4601":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:5390:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:3993:4615":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:9969:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:7885:13698":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14012:3928":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:12082:695":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:8306:7602":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:5346:4641":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"14:160:5128":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:40950:5416":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:22342:8441":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:482:3192":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:10669:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:44542:5625":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4261:8244":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:835:3114":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"18:765:25251":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44719:2579":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:4716:7475":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:6858:4869":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:7918:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11841:3606":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:6151:3204":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:6646:4842":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:880:5141":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"0:27:1828":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"6:5336:7026":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:15616:4372":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:7452:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6417:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:4283:4616":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:7330:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11788:3599":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:4464:3135":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:14994:4198":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:42209:5452":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:5645:4657":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:14463:4018":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:5555:4647":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:9089:5954":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:44696:5629":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:2419:4561":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:573:3297":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11583:3572":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"11:883:5147":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:6478:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:15273:4262":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:5112:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4942:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:15249:4253":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:6348:4585":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:10954:21075":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:7467:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:4537:3165":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:43921:5601":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:7551:4591":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13526:3828":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:2979:4604":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4924:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:8265:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:1887:5780":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11743:3590":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:4987:8271":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:4800:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:43508:5597":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:5499:4586":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:45083:5643":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:6505:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13814:3899":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:6929:2862":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:2657:3196":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:5699:3133":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:13344:3794":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:30930:2912":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"3:0:480":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:4210:28626":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:2883:20134":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:909:5155":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:10647:5970":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:10068:21047":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8864:5935":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:10449:3179":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:7445:1858":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:1098:3362":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:4069:8220":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:13208:31931":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:3545:4609":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:3597:3376":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:1795:2854":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:5696:4661":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:903:2854":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:14235:3978":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6376:4780":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:6721:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"5:1430:5137":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:11647:25667":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:44878:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11730:3589":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:11825:3604":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:1321:5153":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:21359:32623":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:6599:4829":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6746:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:14311:3987":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"14:220:5135":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:44860:6111":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:41466:3175":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"18:96:25240":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"11:2554:34530":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6965:5954":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:8564:8296":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:7492:2503":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10350:3351":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:5320:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"9:423:19985":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8907:5938":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:15473:4316":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:867:5140":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:21386:32618":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:507:3297":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:6394:4788":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:7921:3433":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:40843:5540":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:4959:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5407:1108":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"7:31:19969":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:15635:4378":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:0:2357":{"crate_id":17,"path":["object"],"kind":"module"},"17:11764:3594":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:46032:5650":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3061:13723":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:5283:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:4468:5409":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:4592:3166":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12238:3661":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:3013:2737":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:6511:5828":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:7467:13693":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:43293:2518":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:7350:13700":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:6613:3173":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:1804:637":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"11:787:5141":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6562:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:40657:2893":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:39768:13532":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5020:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:4518:4622":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:7610:5269":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:40714:2889":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:2516:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:1671:6764":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:5005:31519":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:4248:8243":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11153:3504":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11430:7665":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:5476:5814":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:22048:5489":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:7667:3219":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:11358:5985":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:22435:8445":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:30668:8203":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11634:3581":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6077:4728":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:2593:4569":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12328:3667":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:46776:5681":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:6892:8351":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11557:3564":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:15426:4303":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:1511:5138":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:725:8161":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:13485:3818":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12175:3653":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:5290:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:12055:25625":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2576:1791":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"1:3811:5796":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:659:3321":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:7574:5268":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:39979:2497":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:15281:4263":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:2521:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:44513:5617":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:46487:5672":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"12:0:2353":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:6275:5827":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:10444:5789":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"6:7537:7545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5352:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:15582:4360":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:4061:8219":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10769:34556":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"14:214:5133":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:1156:34460":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:41044:5557":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"10:36:6570":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:40759:2888":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:4984:421":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"0:106:2006":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"2:1717:3133":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:5298:20993":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:10983:5466":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:16249:4529":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:7546:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:12599:2542":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:795:3111":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:5984:5422":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:9490:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:39879:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:16121:4501":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"15:0:2355":{"crate_id":15,"path":["addr2line"],"kind":"module"},"11:2562:6568":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12213:3659":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13116:3741":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:44395:2550":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:10382:3224":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:43469:2535":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:7584:7567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:22769:5499":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:1824:5776":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:40991:5423":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:12395:2551":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:42229:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:8351:7613":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6546:4816":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:46287:5660":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:21371:32623":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:44429:2564":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:10030:2525":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"9:177:7817":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:811:2854":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:44848:7648":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7306:4958":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12454:3686":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:15434:4304":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:536:4538":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:5759:4674":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:13753:3887":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:4545:4623":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:6915:7424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6745:4592":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:1896:2854":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:43912:5600":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:718:3336":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2740:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:8236:5795":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:9145:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:34520:13715":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6775:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:13186:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:46208:5657":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:6141:34551":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:15383:4293":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:44607:5627":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:3056:13722":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:4237:13487":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:7684:4993":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11773:3595":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:12083:697":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:14599:4041":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:21403:32621":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:5225:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13972:3616":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:7987:2530":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:1054:5148":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11419:3503":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11069:25636":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:3237:5160":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:3216:33891":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:5546:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:914:5138":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:6532:7266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"11:1087:34539":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12724:21066":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:1574:5137":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:7960:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:7869:5030":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:1565:6690":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:5919:20997":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:47111:5703":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:523:6609":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4952:6891":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10185:3346":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2617:4570":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4870:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:2284:20107":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:3600:3392":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6929:4878":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4932:6882":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:21388:32633":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:3240:26510":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:41969:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:10230:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:3614:5137":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:726:8204":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:8278:5561":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:1585:2854":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:6227:3190":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:4621:2743":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:4190:5405":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:9817:2517":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:640:5771":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:670:3327":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"18:481:3295":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:9886:21060":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:4718:7477":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:7485:7505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:16050:3782":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:32702:2750":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"5:40:2853":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:9755:21040":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:4897:6865":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12530:3697":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:4312:5800":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:213:3106":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:10738:25629":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:13723:3878":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7565:4979":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:6979:3216":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:1811:2910":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13497:3819":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:9196:5956":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14876:4157":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13568:3843":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:8381:8097":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11324:3545":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:1522:5139":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:10383:3177":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:9299:5779":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:11702:3586":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"14:7:5128":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4837:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:9035:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:14111:3941":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7103:34553":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:48237:5745":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:7245:1851":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:8328:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:46877:5684":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6880:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1503:6655":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12464:21189":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:22794:5500":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:1501:5155":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:40870:5542":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:42695:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:9671:21043":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:40740:2892":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:7620:5270":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:16187:4518":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:42157:5576":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:2818:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:2375:4559":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:40614:2563":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:12579:2548":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:9781:21058":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:267:3108":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:12094:853":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:3473:3375":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4811:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13999:3926":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:42343:5580":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:2569:2503":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:7816:8088":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:6597:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:40803:5539":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2727:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:44280:2570":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6724:4848":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:4572:8247":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:3211:5159":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:832:5155":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:22887:5513":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:3100:4894":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10170:3488":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:47879:5740":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:1596:5159":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2859:2515":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:2450:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:44162:2578":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:5557:7127":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:22480:8161":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:12808:3714":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:42135:31243":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:7837:5852":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:13512:2851":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9916:21061":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:7984:7576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:2422:7624":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:12357:5479":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12572:3503":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:14449:4017":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:7339:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:945:5146":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:3017:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:5794:3133":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:2079:5243":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:4396:2749":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13375:3798":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:47081:5702":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:8285:2557":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:48386:5753":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:1517:6660":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:14912:4186":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:7401:1858":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10612:3500":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:10439:3489":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:48351:5750":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:893:2856":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:2336:4552":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:2469:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"14:0:2354":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"0:26:1824":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"2:11111:2575":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:2687:8161":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12621:3700":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"18:521:25252":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:9041:5946":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:9048:25630":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:918:5139":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:13946:3917":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:48340:5749":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:44840:7646":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:16079:4490":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:5329:7025":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:12070:403":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:4844:4632":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:48275:5746":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13187:3754":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13089:3735":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5134:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5038:4638":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:43708:7641":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:41428:5438":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"11:2140:5148":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3273:5787":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:15:1802":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:10847:5852":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:21620:8356":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:908:5137":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:6441:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:15324:4275":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:6725:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10137:21041":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5598:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12422:3681":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:5043:5413":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:1663:6763":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:5541:4643":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:10659:8161":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:12093:1644":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:7616:3361":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:15418:4301":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7653:4989":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:6624:8315":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:12076:332":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:2671:3180":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10251:3348":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"9:391:19984":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:11077:6111":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:12095:1703":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:11621:3579":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"15:306:20089":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:46603:5675":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:4431:3133":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:12593:2543":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:1581:2856":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:9017:5942":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:40733:2891":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:38500:13717":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"18:623:34568":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:41242:5437":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:12810:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:10447:5791":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:4386:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:3356:5792":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:515:3294":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:1582:5156":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:14025:3929":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:6677:8317":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:44836:7645":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:12659:3702":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:8385:5914":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:3010:3387":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"18:608:3314":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:32718:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11075:3523":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:41484:5443":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:4109:8222":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:22366:8161":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:32719:2585":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:13922:3916":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:46309:5661":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:3205:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11812:3602":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:2266:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:3589:8179":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:1692:6774":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:11495:3232":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:2443:2856":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11510:3560":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:2724:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:44262:2569":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:588:8081":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:5370:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:7377:5260":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:10032:2526":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"9:0:2350":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:7357:2856":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:15814:4421":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:5052:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:10689:5976":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:8288:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10092:21065":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5306:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:5649:7385":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:13437:3806":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12043:3644":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:10018:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:22818:31245":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:4355:4617":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:10710:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:5423:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12225:3660":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:5581:5817":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:12092:1647":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:6821:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:10729:5795":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:15197:4244":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6221:4768":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12792:3453":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8478:5925":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:11042:3516":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"10:0:2351":{"crate_id":10,"path":["adler"],"kind":"module"},"6:5266:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:2399:4560":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"0:45:1865":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"2:8378:2539":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12264:3663":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:1841:1195":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:559:6629":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:10339:5935":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"11:1903:5158":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4885:6860":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:3271:5161":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:40631:2894":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:4547:2750":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:12478:3688":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6555:4817":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:7774:3225":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:3830:4613":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:7335:4596":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"11:1142:5152":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:504:3125":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:3451:13488":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:14079:3937":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"11:1603:5157":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:2274:7619":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:12433:3683":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:46655:5677":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:45144:5648":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:11045:5936":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:939:5145":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:10229:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:8604:5804":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:12388:3678":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:33195:4892":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6320:4778":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:14147:3947":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12251:3662":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:7922:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:1607:5161":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:45132:5166":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:3627:5154":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:41021:5430":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:2492:6235":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:6142:3133":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:11865:3608":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:15301:4270":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:4985:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11026:21077":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:8069:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:41069:3318":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2688:2508":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:1040:4879":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:12097:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:47347:5707":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4916:6878":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"11:2304:4879":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:22258:8439":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:13363:3795":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:3177:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:43490:5592":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11688:3585":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:15010:4199":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"0:54:1879":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"1:12084:802":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:44386:2552":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:4649:4625":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:34693:4898":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13455:3814":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12508:3693":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:3819:1858":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:2558:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:4601:2751":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:7697:3203":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:5720:5818":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:6377:8447":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:46457:5671":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:2566:1792":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"2:42412:5137":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:10887:5938":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:5878:4540":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:14986:4197":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:15390:4294":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:14723:4043":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:44559:5626":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:4886:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11367:3523":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:12023:5992":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:12150:3651":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8310:5907":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11661:3583":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13473:3815":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:4965:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:12073:1664":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:4813:4631":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:8291:2574":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:6030:4721":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:46557:5674":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"9:501:5220":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:33978:13710":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6152:4763":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:16176:4517":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:621:2511":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:15092:4219":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1292:5149":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"11:742:5139":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:4464:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:928:8093":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:43987:5542":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:0:2356":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5200:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6422:3095":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:11405:3552":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:7503:2504":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"0:21:1807":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"17:11493:3558":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:1585:6704":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:261:3354":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:1826:5777":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:479:6583":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6908:4876":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:1485:6647":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:13422:5488":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:43230:5008":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:13412:3804":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:15289:4264":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:5512:5816":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:10720:34559":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:9460:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:8085:5861":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:7971:5039":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:2254:34392":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:3039:4893":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:43861:5599":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13146:3745":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:14051:3933":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:12091:1646":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:41451:5440":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:3190:8098":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4979:6904":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3051:13721":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:4011:8217":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:2982:3199":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:1809:661":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8090:8190":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13173:3753":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:1628:6738":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:3423:13533":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13594:3848":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10524:3499":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:11399:5839":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:0:535":{"crate_id":2,"path":["core"],"kind":"module"},"2:2447:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:10945:5465":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:6396:8448":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:282:2545":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:48450:5757":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:46327:5662":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5662:20995":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"11:1891:2856":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:26344:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:5521:4588":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:6874:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:15944:3768":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:15078:4216":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:5250:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5846:4683":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:9160:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:39919:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:7822:8119":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:44000:5608":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:4787:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:5588:7136":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:9970:2512":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:4353:5408":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:2749:4576":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:5580:4587":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:2552:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13553:3837":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:4825:8235":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:2999:34359":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2973:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:21612:8161":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:44404:2549":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:15748:4409":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:11385:5838":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:4706:8221":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:7409:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:11547:3432":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:7637:3341":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:9235:25643":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:32695:5520":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:42461:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:5006:4637":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:9737:21042":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:4864:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:123:3096":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:3250:33893":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7452:21004":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"11:2124:4879":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:856:5145":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"0:65:1919":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"2:32720:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:2162:3125":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:15646:4379":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:4040:2856":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:8461:8282":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:3175:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:42965:2527":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:4787:4630":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:4464:5802":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5825:4534":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:22524:8436":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:12851:3716":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:5160:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"0:105:1997":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"11:837:5142":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:11160:7660":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:517:6606":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:2978:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:8259:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10818:3504":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:4879:3200":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7619:21005":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:5870:5420":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10887:34557":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:687:5154":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:44528:5622":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:10466:3180":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:7446:7489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:6519:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:7113:3217":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:14189:3968":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:42303:1858":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:15368:4289":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:581:2491":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:14091:3938":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:30956:31237":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:11242:3535":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:7367:3120":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:13292:3783":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:3773:4612":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:40863:5541":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:10218:3347":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:9984:21063":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:12584:2541":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:2995:20136":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:38445:13716":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:31013:31260":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:149:3093":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:43940:5604":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6692:4844":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:46102:5653":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15463:4311":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:8425:32797":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:40959:5419":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:1496:6652":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:3240:2850":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:15039:4207":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:14066:3936":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:21561:8357":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:7926:5853":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:15102:4220":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:11624:5470":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:11595:3576":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:6763:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:7889:5031":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:12085:799":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:497:6589":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:2859:4581":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:7194:34552":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:7518:3137":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:40912:5546":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:40699:2563":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"11:1566:20063":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"11:2423:1858":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"14:31:5128":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10573:34560":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:14436:4016":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:11579:5798":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:14271:3983":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:43478:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:42972:2528":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14284:3985":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:15596:4366":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11269:21094":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:9178:5833":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:34174:13713":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:7337:1858":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:42023:8201":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:12707:3706":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:513:3360":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:6629:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:22495:8435":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"11:364:3098":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:15342:4279":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:15569:4354":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13046:3731":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12949:3377":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6621:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:80:25239":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:13384:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:5389:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7176:34554":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:12071:1040":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"11:1007:4879":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8224:5899":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:2971:2734":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4992:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:2231:3569":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"14:187:20076":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7386:4598":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:4:1121":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:5209:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:16069:4489":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"16:3856:4614":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:16259:3799":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"18:598:34567":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:15992:4475":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"5:7345:5259":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:8526:5592":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:2733:5786":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:21349:2491":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10534:34563":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:7348:7455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"8:0:2349":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:5064:6949":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:9069:5950":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:10676:5854":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:47989:5741":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:7730:8161":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:4968:4636":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:11558:5797":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:22662:5492":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6542:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:16269:3804":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:6529:2856":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:11142:3503":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:15608:4369":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:3570:26835":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:11605:3577":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12969:3723":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"11:328:6563":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:3234:29107":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:15206:4245":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12584:3504":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:5260:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13272:3782":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2819:4579":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:45034:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:4214:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:6657:1858":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:16138:4503":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:4399:4618":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:45105:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:3417:13534":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:7429:34549":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8012:5240":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:7223:28627":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:44180:2577":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5677:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:4272:5137":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:2729:4575":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:4075:8221":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7387:33887":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10018:21044":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12127:3650":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6768:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:4119:8223":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:8268:5545":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:44316:2571":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:2992:2820":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:4761:4629":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:3024:8347":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:6900:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2276:8143":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:6849:4866":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11214:3533":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12300:21188":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8080:5860":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13252:3772":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13235:3769":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:14038:3931":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8248:8160":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:2709:4574":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:8029:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6669:4843":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13424:3805":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:1490:6649":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"19:0:1138":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5181:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:44671:5628":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:5084:859":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:44071:2561":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:1621:6734":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:15410:4300":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:5331:3488":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:11313:3543":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:12075:1158":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:31494:2491":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"11:299:6560":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:5706:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:4823:8234":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6773:4852":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14386:3999":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:43453:2533":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:6737:4850":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:538:6618":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:2175:21122":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:40833:3167":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:42539:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:44098:2557":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:32684:5519":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:38555:13718":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:2469:2854":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"11:2383:5137":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:7118:5578":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:538:3304":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:6698:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:2693:5785":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:34037:13712":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:12044:8089":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:5278:4640":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12683:3704":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:8358:7651":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:46854:5683":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:485:6585":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:8631:5934":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:10237:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:8012:7579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:6524:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:1934:5272":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:16223:4525":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:44856:7650":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:1483:5140":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:6062:4726":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:46346:5663":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:44492:13519":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:10838:5154":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:15176:4239":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:3685:2856":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:2995:7616":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:2369:5164":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:14529:4025":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11915:21164":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:42578:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:8549:5928":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:15400:4297":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:3020:2739":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:1680:6770":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:473:6580":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5296:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:44832:7644":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:41435:5439":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12929:3721":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:5959:20106":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"14:40:3769":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:2440:8151":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:46679:5678":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:6378:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:42428:1858":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5219:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:2353:638":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:48397:5754":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7270:4694":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:13538:3831":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:9807:21048":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:3245:5158":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:6243:3208":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:47271:5705":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:44334:2572":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:8377:5905":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11574:3569":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4240:8242":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:44088:2558":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:5102:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:15445:4308":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:2689:4573":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:14788:4094":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:3211:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"0:113:1799":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"2:46012:5649":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:21405:32630":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:11051:3518":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:4322:5407":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:3399:8187":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:16093:4494":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:465:6575":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:45096:5646":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:12516:3695":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:2035:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:22381:8444":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"11:1923:5161":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"18:706:2543":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:7306:7431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:6670:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:4123:8224":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:15058:4208":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:42775:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:6379:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:14372:3997":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:16151:4509":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:12076:3647":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:42007:5449":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11189:3531":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:849:5154":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:46257:5659":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:8282:7598":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:45042:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"0:20:1804":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"6:5436:7074":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:3264:3373":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:4433:4619":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44828:7643":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:8387:13697":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:6739:3108":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:8428:5803":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:15456:4309":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:5409:2546":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:22730:7626":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:22023:8359":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:6610:4830":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:1639:6746":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:32776:2741":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:5122:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:7754:5845":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:7314:7436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:41093:5558":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:14516:4024":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:3354:5791":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:6017:3141":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:15678:4394":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:1526:6665":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6282:4775":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:40009:5528":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:4781:8273":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:9938:21062":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:3237:26521":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:11130:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:8300:7601":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:2641:4571":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:44058:2566":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:7400:4599":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:4550:8246":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:11424:7664":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:12281:5474":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:1643:1796":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:5466:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:3406:4608":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:4902:8231":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:10671:7658":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:4733:4628":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"11:2536:6565":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:5485:4583":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:8931:1858":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:2553:4567":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:3741:4611":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:10317:3350":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:32709:5521":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:2496:2363":{"crate_id":1,"path":["std","io"],"kind":"module"},"18:698:3331":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:7437:1858":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:22395:13733":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"5:3003:34360":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:4821:3382":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:21742:5490":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:5617:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:2403:5154":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:491:6586":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:22172:8355":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:1461:1858":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11102:3525":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:12650:13513":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:8055:4937":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:6788:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6803:4855":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:7597:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:5794:4677":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:637:5769":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6445:4792":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:645:8084":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:1602:5160":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:1968:2510":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:651:3297":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:4986:3384":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:1445:5154":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4891:6862":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:43191:7633":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:256:3353":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:44112:2574":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:1276:4879":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"11:1910:5159":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:41053:5432":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:9964:5573":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:8341:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8915:5137":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:5861:5825":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11898:3611":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:557:5768":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"0:62:1897":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"16:7595:4589":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:2352:5149":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:43218:31212":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:5906:3202":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:2234:3372":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:7366:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:43961:5606":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:9213:5957":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"6:5489:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:11058:5937":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:10855:5817":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:4131:8226":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:16235:4528":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:14212:3977":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:22880:7629":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:38610:13719":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6268:4584":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:5321:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:5985:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6788:34550":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:7984:5041":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:14977:4196":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:14575:3683":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11524:3561":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4876:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11392:3551":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11293:21095":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:41991:5447":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:10026:2528":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"18:113:25241":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:3488:13491":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:1559:6688":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:1066:20062":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:15521:4353":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:12078:1544":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:2268:5783":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7914:5033":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:44852:7649":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:2438:8150":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:22393:31779":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:5515:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"11:1887:1858":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:11115:3527":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13899:3911":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:43693:5598":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:40202:29241":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:4256:13536":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"11:2151:5149":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:8966:8321":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:7070:6269":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:42353:8090":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:42051:7632":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:2993:34367":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:6714:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:3504:5908":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"11:700:1858":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:774:5140":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:6756:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"5:5413:2547":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:4462:4620":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:42378:137":{"crate_id":2,"path":["strsim","HammingResult","Err"],"kind":"variant"},"2:22529:8434":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:12342:3672":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:6447:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:6547:3213":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"15:394:20098":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:13855:3903":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13325:3789":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:6706:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:7376:4971":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:11230:5984":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"11:1883:5137":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:10272:2532":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:6292:4776":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:5653:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:6895:4873":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:5713:4666":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7414:4972":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13832:3900":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13387:3799":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5146:6955":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:48412:5755":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"9:356:19998":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:39901:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:726:3339":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14475:4019":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7355:4970":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:44824:7642":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:22715:5493":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:22900:5514":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:42437:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:12604:2540":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6689:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:14177:3966":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:1063:5149":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:30945:2516":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:4720:7479":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:47531:5709":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:5528:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4971:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:46823:5682":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:351:34531":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:45024:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:2459:4563":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:11139:5469":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11256:3537":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:11755:3593":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:10069:5778":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:4017:8216":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5039:6936":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:48313:5747":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:7461:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:4112:5154":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:4572:4624":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42951:2519":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:6691:3214":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13064:3734":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:0:883":{"crate_id":6,"path":["libc"],"kind":"module"},"16:2489:4564":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:0:2358":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:10997:3513":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:8315:8200":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:11657:5471":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:2439:4562":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5046:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7345:4969":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:12096:1254":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:44366:2567":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:6664:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8406:7464":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:2769:4577":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5483:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:47317:5706":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:21559:8161":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:1492:5141":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:532:6615":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:2424:8146":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:11413:5841":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:46156:5655":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:5674:2860":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:42278:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:6435:7224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:15822:4424":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:4113:3133":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:8004:5859":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:3442:5563":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:2271:3161":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:5316:3487":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:1051:5149":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:10235:153":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:5496:5815":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6244:20998":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"0:44:1863":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"11:673:5137":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:11635:5986":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:10905:3506":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:10022:2519":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:42355:13786":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44013:5609":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:48191:5744":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:7417:5261":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:11095:5833":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:40707:2562":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:15720:4400":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:14560:4031":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5382:7043":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:7586:3142":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:3436:32461":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:1510:6657":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6579:21000":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:1107:5151":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"9:329:6571":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:10156:8303":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:9057:5455":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12201:3658":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:40899:5545":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:10247:26635":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:6919:2861":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:8013:2588":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:9102:25616":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2807:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:7366:4597":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:14131:3942":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:4702:4627":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:6099:4743":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:12086:800":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:33919:13711":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:44234:2575":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12647:3701":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:5132:5809":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:44902:5638":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:10915:34564":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:8271:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:46226:5658":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:2917:20135":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6408:4790":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:7467:26621":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:9467:5853":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:7294:4957":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:1307:5148":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:45121:5647":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"14:165:20069":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12371:3721":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5624:7158":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:15356:4286":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"15:327:7803":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:7482:4976":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:40016:5529":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:5376:7040":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11715:3587":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:3015:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:8363:8245":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:14356:3996":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:4937:4635":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:1691:3108":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:8012:5043":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:48527:5760":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:44411:2562":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:11654:5842":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"11:2326:5148":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:6462:20999":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:491:3296":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:3916:5798":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:22060:32631":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:8298:2567":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:5831:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:6431:4590":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:15023:4204":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:2319:4550":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5174:6957":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:9677:7826":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:5713:3209":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:39864:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4824:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:680:3328":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:4202:3133":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:7562:5265":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:46056:5651":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:7089:3160":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:14402:4003":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:4232:8241":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"0:53:1874":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"6:1593:6709":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10419:3355":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:2172:5244":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:2355:4558":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6759:4593":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:3204:5137":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:8402:5916":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:43712:5462":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:15799:4420":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:0:1536":{"crate_id":1,"path":["std"],"kind":"module"},"2:46509:5673":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:14968:4192":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13581:3847":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46725:5680":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:0:2348":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:6460:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13774:3891":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:39939:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:43201:2516":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:10747:25627":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13877:3910":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:1580:6702":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:12089:1648":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"15:288:20088":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:5834:5824":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:10088:5961":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:12887:3718":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:46124:5654":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:7931:5854":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:1207:3364":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"9:446:19983":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:42958:2520":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:10952:3229":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7609:4981":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:1072:5153":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13986:3925":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5191:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:12095:13794":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:1533:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:36569:4899":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:11853:3607":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:42853:5460":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:643:3297":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:1393:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12399:3679":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:6811:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:7932:5035":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:13509:3820":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14489:4020":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:40620:5531":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:43950:5605":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:533:3193":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:6330:3209":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:14847:4146":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:15760:4411":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:922:5142":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:951:5147":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10759:3503":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6811:21001":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:2509:4565":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:15313:4271":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:9485:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:9081:5952":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:2363:13733":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:5502:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:15769:4415":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:8620:5933":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:2983:2735":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:3758:5240":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11227:3534":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:7328:2852":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:15266:4261":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10622:34558":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12824:21067":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:43246:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:7686:3221":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:23944:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:7881:13699":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:430:34534":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:44022:5610":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:22802:5501":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:40670:2895":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10877:3505":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:8197:7589":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13399:3802":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12557:3523":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}