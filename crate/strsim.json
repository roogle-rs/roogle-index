{"root":"0:0:1910","crate_version":"0.10.0","includes_private":false,"index":{"1:6778:2607":{"id":"1:6778:2607","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6779:52975"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13351:58409":{"id":"2:13351:58409","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3543:2567":{"id":"2:3543:2567","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3545:737"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3539:2566","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3276:2259":{"id":"2:3276:2259","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13471:53005":{"id":"2:13471:53005","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2923:166":{"id":"2:2923:166","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2924:401","2:2925:1535","2:2926:1536","2:2927:2431"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2892:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2933:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5652:2621":{"id":"1:5652:2621","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5653:4880","1:5654:6207"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13416:55198":{"id":"2:13416:55198","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15753:2036","self::pattern":"2:12985:2220","str::splitn":"1:15759:2041"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49426:2245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10262:2189":{"id":"2:10262:2189","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10263:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:80:1634":{"id":"0:80:1634","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10252:2185":{"id":"2:10252:2185","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10253:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3313:3176":{"id":"2:3313:3176","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3315:170","2:3316:875"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3383:3107":{"id":"2:3383:3107","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3385:170","2:3386:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3679:3556":{"id":"2:3679:3556","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3610:2568","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13468:3638":{"id":"2:13468:3638","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13365:55163":{"id":"2:13365:55163","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:783:210":{"id":"5:783:210","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2492","5:785:2493","5:786:2494"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10193:2177":{"id":"2:10193:2177","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10194:1503","2:10195:57444","2:10197:2324"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13354:58411":{"id":"2:13354:58411","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15759:2041"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13445:58427":{"id":"2:13445:58427","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:12985:2220","prim@char":"1:15753:2036"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13015:2212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14169:2570":{"id":"2:14169:2570","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14170:56360","2:14171:56361","2:14172:56362","2:14173:56363","2:14174:56364","2:14175:56365","2:14176:2463"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6097:59072":{"id":"5:6097:59072","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:2217","`String`":"5:8352:204"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2571","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13713:149":{"id":"2:13713:149","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13714:170","2:13715:149","2:13716:750"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6707:2599":{"id":"1:6707:2599","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6708:6201"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5706:2625":{"id":"1:5706:2625","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5707:53357"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13360:55165":{"id":"2:13360:55165","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15770:2050"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5644:2619":{"id":"1:5644:2619","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5645:4880","1:5646:56439","1:5647:56440"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10243:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:97:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2838-0:93:1540":{"id":"b:2:2838-0:93:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2840:2105"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13390:2474":{"id":"2:13390:2474","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47340:165","self::pattern":"2:12985:2220","prim@char":"1:15753:2036"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:100:590"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4605:2177":{"id":"1:4605:2177","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4606:1544","1:4607:54196","1:4609:54197","1:4610:3861","1:4611:54198","1:4612:54199","1:4613:2324","1:4622:2463"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:39:1549":{"id":"0:39:1549","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[34,0],"end":[47,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"generic","inner":"Iter1"}],["b",{"kind":"generic","inner":"Iter2"}]],"output":{"kind":"resolved_path","inner":{"name":"HammingResult","id":"0:38:1546","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Iter1"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Iter2"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6602:2622":{"id":"1:6602:2622","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6603:53113","1:6604:53114","1:6605:53115","1:6606:53116","1:6607:53117","1:6608:53118","1:6609:53119","1:6610:53120","1:6611:4922","1:6612:53121","1:6613:53122","1:6614:53123","1:6615:53124","1:6616:53125","1:6617:53126","1:6618:53127","1:6619:53128"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4630:2656":{"id":"1:4630:2656","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4631:54479","1:4632:54480","1:4633:54482","1:4635:2655","1:4636:54481","1:4638:54483","1:4639:3938"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4548:2634","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13358:58412":{"id":"2:13358:58412","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13359:291":{"id":"2:13359:291","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15770:2050","str::as_mut_ptr":"1:15759:2041"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2840:2105":{"id":"2:2840:2105","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13010:2214":{"id":"2:13010:2214","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13012:2434","2:13013:56984","2:13014:56985"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13004:2215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3487:131":{"id":"2:3487:131","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3489:170","2:3490:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13466:3370":{"id":"2:13466:3370","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12924:2235","FromStr::Err":"2:12924:2235"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47467:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12924:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12924:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3167:2433":{"id":"2:3167:2433","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3141:134"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13015:2212":{"id":"2:13015:2212","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13419:58417":{"id":"2:13419:58417","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3276:2259-0:93:1540":{"id":"a:2:3276:2259-0:93:1540","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:6870:2604":{"id":"1:6870:2604","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6871:53091"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13369:2894":{"id":"2:13369:2894","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15759:2041","crate::ops::Index":"2:3539:2566","str::slice_mut_unchecked":"1:15759:2041"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10258:2192":{"id":"2:10258:2192","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10259:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3454:115":{"id":"2:3454:115","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3455:209","2:3456:529"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6354:2599":{"id":"1:6354:2599","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6355:3012","1:6356:3013","1:6357:6200","1:6358:54053","1:6360:54057","1:6362:54054","1:6363:54055","1:6365:54056"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[28,0],"end":[28,29]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","cause","backtrace","description","type_id"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2569:126","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:81:1640":{"id":"0:81:1640","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[267,0],"end":[311,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10491:145":{"id":"2:10491:145","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10492:637","2:10493:1544","2:10494:53719","2:10495:53720","2:10496:53721","2:10497:53722","2:10498:53723","2:10499:53724","2:10500:53725","2:10501:53726","2:10502:53727","2:10503:53728","2:10504:53729","2:10505:53730","2:10506:53731","2:10507:1503"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8431:2261":{"id":"2:8431:2261","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8432:776","2:8433:1635"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13372:55185":{"id":"2:13372:55185","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15759:2041"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7886:3252":{"id":"2:7886:3252","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7887:57723","2:7888:57724","2:7889:57721","2:7890:57719","2:7891:57725","2:7892:57722","2:7893:57720"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2933:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13443:58425":{"id":"2:13443:58425","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6076":{"id":"5:6076","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5896:1316","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6077:59068","5:6078:2659","5:6081:59069","5:6084:59070","5:6096:59071","5:6097:59072","5:6098:2681","5:6099:53001","5:6100:53002"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13348":{"id":"2:13348","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12445:1316","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13349:776","2:13350:1635","2:13351:58409","2:13352:58410","2:13354:58411","2:13357:56313","2:13358:58412","2:13359:291","2:13360:55165","2:13361:1663","2:13363:55162","2:13365:55163","2:13367:55164","2:13369:2894","2:13370:58413","2:13371:55184","2:13372:55185","2:13373:1568","2:13374:3164","2:13375:2899","2:13376:30406","2:13377:30396","2:13378:3938","2:13379:58414","2:13380:30391","2:13381:55200","2:13384:54877","2:13387:54879","2:13390:2474","2:13394:2439","2:13398:54483","2:13401:30263","2:13404:55194","2:13407:58415","2:13410:58416","2:13413:55196","2:13416:55198","2:13419:58417","2:13422:58418","2:13425:1582","2:13428:58419","2:13431:58420","2:13434:58421","2:13437:58422","2:13439:58423","2:13441:58424","2:13443:58425","2:13444:58426","2:13445:58427","2:13448:58428","2:13451:12951","2:13454:55201","2:13457:58429","2:13460:58430","2:13463:58431","2:13466:3370","2:13468:3638","2:13469:53003","2:13470:53004","2:13471:53005","2:13472:58432","2:13474:2705","2:13475:58433"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3372:2767":{"id":"2:3372:2767","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:170","2:3375:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13454:55201":{"id":"2:13454:55201","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12985:2220","prim@char":"1:15753:2036"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3481:129":{"id":"2:3481:129","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:363"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3484:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13004:2215":{"id":"2:13004:2215","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13006:3157","2:13007:905","2:13008:57626","2:13009:57627"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5832:2219":{"id":"5:5832:2219","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:170","5:5835:31424"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5702:2624":{"id":"1:5702:2624","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5703:53671"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:6406-0:93:1540":{"id":"b:5:6406-0:93:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10250:118","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6404:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6408:2495"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13387:54879":{"id":"2:13387:54879","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15753:2036","self::pattern":"2:12985:2220"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3962:68":{"id":"2:3962:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3963:1403"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3144:216":{"id":"2:3144:216","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3146:126","2:3147:1390"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10481:141":{"id":"2:10481:141","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10482:700","2:10484:2430"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13422:58418":{"id":"2:13422:58418","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13375:2899":{"id":"2:13375:2899","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49290:2227","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13379:58414":{"id":"2:13379:58414","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49568:2238","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3240:2258":{"id":"2:3240:2258","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13401:30263":{"id":"2:13401:30263","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12985:2220","prim@char":"1:15753:2036"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12777:2223","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6408:2495":{"id":"5:6408:2495","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6474:2730":{"id":"1:6474:2730","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6475:53365","1:6476:53366"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2887:172":{"id":"2:2887:172","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:590","2:2890:890"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3247:208":{"id":"2:3247:208","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3174-0:93:1540":{"id":"b:2:3174-0:93:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3144:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3177:126","2:3178:1390"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10250:118":{"id":"2:10250:118","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10251:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3539:2566":{"id":"2:3539:2566","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3541:170","2:3542:736"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:0:1910":{"id":"0:0:1910","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1005,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:93:1540","0:38:1546","0:39:1549","0:44:1567","0:45:1571","0:62:1598","0:63:1600","0:71:1610","0:72:1615","0:79:1625","0:80:1634","0:81:1640","0:83:1654","0:85:1672","0:86:1682","0:89:1693"]}},"0:86:1682":{"id":"0:86:1682","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[407,0],"end":[412,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3308:2768":{"id":"2:3308:2768","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310:170","2:3311:1331"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4548:2634":{"id":"1:4548:2634","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4549:2947","1:4550:53195","1:4552:53196","1:4553:53197","1:4554:2650","1:4555:53198","1:4556:53194","1:4558:53199","1:4559:2463","1:4560:2899","1:4561:2449","1:4563:2457"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:89:1693":{"id":"0:89:1693","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[433,0],"end":[478,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3177:126":{"id":"2:3177:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"2:3141:134":{"id":"2:3141:134","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3143:666"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3737:3280":{"id":"2:3737:3280","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"a:2:3247:208-0:93:1540":{"id":"a:2:3247:208-0:93:1540","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6096:59071":{"id":"5:6096:59071","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8838:2211":{"id":"2:8838:2211","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13377:30396":{"id":"2:13377:30396","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15759:2041"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49587:2222","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10256:2191":{"id":"2:10256:2191","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10257:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[18,0],"end":[26,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10250:118","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:36:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13451:12951":{"id":"2:13451:12951","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12985:2220","prim@char":"1:15753:2036"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3213:114":{"id":"2:3213:114","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3214:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3397:3114":{"id":"2:3397:3114","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3399:344"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13463:58431":{"id":"2:13463:58431","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15753:2036","self::pattern":"2:12985:2220"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6077:59068":{"id":"5:6077:59068","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2217","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2571","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2217","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:2571","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3691:212":{"id":"2:3691:212","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3692:170","2:3693:3270","2:3694:671","2:3695:356"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3696:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3691:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3389:3110":{"id":"2:3389:3110","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3391:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13434:58421":{"id":"2:13434:58421","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"1:15759:2041","`DoubleEndedIterator`":"2:8406:119","prim@char":"1:15753:2036","self::pattern":"2:12985:2220"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49472:2240","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2832:97":{"id":"2:2832:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2834:2105"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5692:2623":{"id":"1:5692:2623","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5693:56342","1:5694:56343","1:5695:56344","1:5696:56345"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:85:1672":{"id":"0:85:1672","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[390,0],"end":[393,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:12432:3631":{"id":"2:12432:3631","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12433:1556","2:12434:1673"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3484:130":{"id":"2:3484:130","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3486:364"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3487:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8362:150":{"id":"2:8362:150","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8363:1556","2:8364:1593","2:8365:751"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13363:55162":{"id":"2:13363:55162","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47340:165"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:93:1540":{"id":"b:2:3179-0:93:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:126","2:3183:1389"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:44:1567":{"id":"0:44:1567","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"HammingResult","id":"0:38:1546","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13374:3164":{"id":"2:13374:3164","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15753:2036"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49280:2228","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3467:2660":{"id":"2:3467:2660","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3468:531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3454:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3393:3112":{"id":"2:3393:3112","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3395:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5570:2699":{"id":"1:5570:2699","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5571:4401","1:5572:56313"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3182:126":{"id":"2:3182:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38653:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"2:3774:3281":{"id":"2:3774:3281","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13457:58429":{"id":"2:13457:58429","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12985:2220","prim@char":"1:15753:2036"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5564:2701":{"id":"1:5564:2701","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5565:56424","1:5566:2393"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13413:55196":{"id":"2:13413:55196","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15753:2036","self::pattern":"2:12985:2220","str::rsplitn":"1:15759:2041"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49408:2246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:83:1654":{"id":"0:83:1654","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[327,0],"end":[380,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a_elems",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Elem"}}}}],["b_elems",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Elem"}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Elem"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2892:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10481:141","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:4623:2653":{"id":"1:4623:2653","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4624:54347","1:4625:38211","1:4626:54348","1:4627:54349"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2892:123":{"id":"2:2892:123","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13474:2705":{"id":"2:13474:2705","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15753:2036"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49612:2233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9218:2841-0:93:1540":{"id":"a:2:9218:2841-0:93:1540","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9218:2841","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3406:3119":{"id":"2:3406:3119","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3696:136":{"id":"2:3696:136","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3698:672"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3691:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3303:2858":{"id":"2:3303:2858","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3305:170","2:3306:253"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13373:1568":{"id":"2:13373:1568","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15753:2036"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49274:1539","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6704:2727":{"id":"1:6704:2727","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6705:54022","1:6706:56415"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2569:126":{"id":"1:2569:126","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2570:2427","1:2572:2020","1:2573:2428","1:2574:2429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10243:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10250:118","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3235:199":{"id":"2:3235:199","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13398:54483":{"id":"2:13398:54483","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15759:2041","prim@char":"1:15753:2036","self::pattern":"2:12985:2220","`DoubleEndedIterator`":"2:8406:119","str::rsplit":"1:15759:2041"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49304:2244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13352:58410":{"id":"2:13352:58410","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13378:3938":{"id":"2:13378:3938","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49558:2237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3350:3192":{"id":"2:3350:3192","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3352:1087"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10885:202":{"id":"2:10885:202","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10887:170","2:10888:1663","2:10889:55162","2:10890:55163","2:10891:55164","2:10892:736","2:10893:737"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10876:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3245:106":{"id":"2:3245:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14097:140":{"id":"2:14097:140","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14098:265","2:14099:504","2:14100:268","2:14101:1063"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13350:1635":{"id":"2:13350:1635","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8321:3084":{"id":"2:8321:3084","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8323:2483"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:45:1571":{"id":"0:45:1571","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[65,0],"end":[131,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13441:58424":{"id":"2:13441:58424","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22992:3199":{"id":"2:22992:3199","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23641:3194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22983:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:71:1610":{"id":"0:71:1610","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[188,0],"end":[190,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.911 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"b:2:2841-0:93:1540":{"id":"b:2:2841-0:93:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2835:2210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2843:52954"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6100:53002":{"id":"5:6100:53002","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15759:2041"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3610:2568":{"id":"2:3610:2568","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3612:56578","2:3613:56579","2:3614:55200"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13470:53004":{"id":"2:13470:53004","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13367:55164":{"id":"2:13367:55164","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5828:2218":{"id":"5:5828:2218","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:170","5:5831:418"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2835:2210":{"id":"2:2835:2210","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2837:52954"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10243:109":{"id":"2:10243:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10244:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:38:1546":{"id":"0:38:1546","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[30,0],"end":[30,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47467:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:13698:137":{"id":"2:13698:137","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13699:170","2:13700:997"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:94:1541":{"id":"0:94:1541","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[15,4],"end":[15,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13448:58428":{"id":"2:13448:58428","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15753:2036","self::pattern":"2:12985:2220"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13371:55184":{"id":"2:13371:55184","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15759:2041"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13475:58433":{"id":"2:13475:58433","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15753:2036"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49621:2234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10264:2190":{"id":"2:10264:2190","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10265:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13407:58415":{"id":"2:13407:58415","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15753:2036","str::split":"1:15759:2041","str::rsplit_terminator":"1:15759:2041","self::pattern":"2:12985:2220","`DoubleEndedIterator`":"2:8406:119"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49354:2248","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13410:58416":{"id":"2:13410:58416","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12985:2220","prim@char":"1:15753:2036","str::split":"1:15759:2041","str::split_terminator":"1:15759:2041"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49372:2247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3135:74":{"id":"2:3135:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3137:2432"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:4908:2706":{"id":"1:4908:2706","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4909:2734","1:4910:53646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8845:3251":{"id":"2:8845:3251","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7886:3252","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:100:590":{"id":"0:100:590","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13444:58426":{"id":"2:13444:58426","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8358:135":{"id":"2:8358:135","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8360:669"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3148:215":{"id":"2:3148:215","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3150:126","2:3151:1389"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9217:2842":{"id":"2:9217:2842","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3178:1390":{"id":"2:3178:1390","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47467:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3338:2860":{"id":"2:3338:2860","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3340:1332"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2843:52954":{"id":"2:2843:52954","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13431:58420":{"id":"2:13431:58420","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15753:2036","self::pattern":"2:12985:2220","`DoubleEndedIterator`":"2:8406:119","str::rmatch_indices":"1:15759:2041"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49454:2239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1079:2703":{"id":"1:1079:2703","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:2492","1:1081:3638","1:1082:53001","1:1083:53002","1:1084:53003","1:1085:53004","1:1086:53005"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13357:56313":{"id":"2:13357:56313","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12456:2225"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6780:2608":{"id":"1:6780:2608","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6781:53968"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3342:3188":{"id":"2:3342:3188","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:876"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3170:666":{"id":"2:3170:666","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13370:58413":{"id":"2:13370:58413","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15759:2041","`str`":"1:15759:2041","crate::ops::IndexMut":"2:3543:2567"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8560:156":{"id":"2:8560:156","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8561:1556","2:8562:905","2:8563:2443","2:8566:2444","2:8567:481","2:8569:2445","2:8572:2446","2:8573:2447","2:8574:2448","2:8575:2449","2:8577:1603","2:8579:2450","2:8580:2451","2:8582:824","2:8585:2452","2:8592:1694","2:8594:2453","2:8597:1586","2:8598:2454","2:8599:2455","2:8601:1604","2:8603:2456","2:8606:1284","2:8607:2457","2:8608:2458","2:8612:2459","2:8615:2460","2:8616:2461","2:8617:2462","2:8619:2463","2:8620:1618","2:8622:2464","2:8625:2465","2:8627:2466","2:8637:2467","2:8652:2468","2:8654:2469","2:8658:2470","2:8667:2471","2:8670:2472","2:8672:2473","2:8675:264","2:8682:281","2:8689:2474","2:8696:2475","2:8705:2476","2:8715:998","2:8722:2477","2:8729:1535","2:8730:1536","2:8731:2145","2:8743:2144","2:8750:2143","2:8762:2142","2:8769:2478","2:8770:2479","2:8775:2480","2:8778:2481","2:8781:2482","2:8782:2483","2:8784:2484","2:8786:401","2:8789:2485","2:8792:981","2:8795:2486","2:8798:590","2:8801:2487","2:8804:890","2:8806:809","2:8808:775","2:8810:698","2:8812:681","2:8814:2488","2:8815:2489","2:8823:2490"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3964-0:93:1540":{"id":"b:2:3964-0:93:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3962:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3966:1403"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3164-0:93:1540":{"id":"b:2:3164-0:93:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:134","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3167:2433"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3702:3270":{"id":"2:3702:3270","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3704:52397"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:36:645":{"id":"0:36:645","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[19,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47467:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:48406:126","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8325:3086":{"id":"2:8325:3086","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8327:2484"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:93:1540":{"id":"0:93:1540","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:94:1541"],"impls":["a:2:9217:2842-0:93:1540","a:2:3247:208-0:93:1540","a:2:3235:199-0:93:1540","a:2:3276:2259-0:93:1540","a:2:9218:2841-0:93:1540","b:2:3964-0:93:1540","b:2:3168-0:93:1540","b:2:3174-0:93:1540","b:2:2841-0:93:1540","b:2:2838-0:93:1540","b:2:3179-0:93:1540","b:2:3164-0:93:1540","b:5:6406-0:93:1540","0:96","0:98","0:99","0:35","0:37"]}},"2:3521:3327":{"id":"2:3521:3327","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:225","2:3524:195","2:3525:57207"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3070:3276":{"id":"2:3070:3276","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3069:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5658:2622":{"id":"1:5658:2622","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5659:53670","1:5660:53671","1:5661:4880","1:5662:53672","1:5663:3012","1:5664:3013","1:5665:53673","1:5666:1280","1:5667:53674","1:5668:53675","1:5669:53676","1:5670:53677","1:5671:53678","1:5672:53679","1:5673:53680","1:5674:53681"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13384:54877":{"id":"2:13384:54877","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15753:2036","self::pattern":"2:12985:2220"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13437:58422":{"id":"2:13437:58422","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6078:2659":{"id":"5:6078:2659","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3966:1403":{"id":"2:3966:1403","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45876:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13361:1663":{"id":"2:13361:1663","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47340:165"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3355:3099":{"id":"2:3355:3099","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3356:170","2:3357:936"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3334:2859":{"id":"2:3334:2859","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3336:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6776:2605":{"id":"1:6776:2605","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6777:54732"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8371:2262":{"id":"2:8371:2262","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8373:2440","2:8375:2441","2:8376:2442"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3330:3184":{"id":"2:3330:3184","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3331:170","2:3332:896"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13439:58423":{"id":"2:13439:58423","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7695:2812":{"id":"1:7695:2812","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7696:54136"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6376:2602":{"id":"1:6376:2602","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6377:53039","1:6378:38359","1:6379:53040","1:6380:53041","1:6381:53042","1:6382:53043"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12995:2213":{"id":"2:12995:2213","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12997:2215","2:12998:57341","2:12999:57342","2:13000:57343","2:13001:57345","2:13002:57344","2:13003:57346"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3183:1389":{"id":"2:3183:1389","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47467:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10254:2184":{"id":"2:10254:2184","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10255:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3478:2260":{"id":"2:3478:2260","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3479:564"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13404:55194":{"id":"2:13404:55194","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8406:119","prim@char":"1:15753:2036","self::pattern":"2:12985:2220","str::split":"1:15759:2041"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49322:2243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2857:104":{"id":"2:2857:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2858:395","2:2859:397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13381:55200":{"id":"2:13381:55200","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15753:2036","self::pattern":"2:12985:2220"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3377:3104":{"id":"2:3377:3104","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:170","2:3380:1209"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9217:2842-0:93:1540":{"id":"a:2:9217:2842-0:93:1540","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9217:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6098:2681":{"id":"5:6098:2681","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3362:2765":{"id":"2:3362:2765","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3364:170","2:3365:338"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4745:3135":{"id":"2:4745:3135","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4746:1556","2:4747:57647","2:4748:2444"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:59070":{"id":"5:6084:59070","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3243:206":{"id":"2:3243:206","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9218:2841":{"id":"2:9218:2841","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8406:119":{"id":"2:8406:119","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8407:2434","2:8408:2435","2:8409:2436","2:8410:2437","2:8414:2438","2:8417:2439"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3324:3181":{"id":"2:3324:3181","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3326:170","2:3327:1086"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6081:59069":{"id":"5:6081:59069","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:58419":{"id":"2:13428:58419","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:15753:2036","str::matches":"1:15759:2041","`DoubleEndedIterator`":"2:8406:119","self::pattern":"2:12985:2220"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49526:2242","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3401:3116":{"id":"2:3401:3116","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:1210"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6099:53001":{"id":"5:6099:53001","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15759:2041"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10526:2200":{"id":"2:10526:2200","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10527:145","2:10528:31672","2:10529:54316"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:63:1600":{"id":"0:63:1600","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[158,0],"end":[178,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3244:205":{"id":"2:3244:205","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13469:53003":{"id":"2:13469:53003","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:1598":{"id":"0:62:1598","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13472:58432":{"id":"2:13472:58432","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15753:2036"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49603:2232","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23641:3194":{"id":"2:23641:3194","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23642:3198"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23637:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3245:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:97:645":{"id":"0:97:645","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13376:30406":{"id":"2:13376:30406","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15759:2041"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49578:2224","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13349:776":{"id":"2:13349:776","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15753:2036"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22947:14437":{"id":"2:22947:14437","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22948:6424","2:22949:57713","2:22950:57714"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22940:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9237:2722":{"id":"1:9237:2722","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9238:54035","1:9239:54036","1:9240:54037","1:9241:54038","1:9242:3515","1:9243:37738","1:9244:54034"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13394:2439":{"id":"2:13394:2439","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:12985:2220","prim@char":"1:15753:2036","`None`":"2:47340:165"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:2214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12924:2235":{"id":"2:12924:2235","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12925:125","2:12926:53078"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22798:2725":{"id":"2:22798:2725","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22788:2611","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13460:58430":{"id":"2:13460:58430","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12985:2220","prim@char":"1:15753:2036"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5636:2620":{"id":"1:5636:2620","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5637:54615","1:5638:54617","1:5639:54616","1:5640:54618"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:72:1615":{"id":"0:72:1615","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[200,0],"end":[226,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"IntoIterator","id":"2:8362:150","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:10260:178":{"id":"2:10260:178","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10261:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5714:2627":{"id":"1:5714:2627","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5715:4880"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3235:199-0:93:1540":{"id":"a:2:3235:199-0:93:1540","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:199","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3367:2766":{"id":"2:3367:2766","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:170","2:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:79:1625":{"id":"0:79:1625","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[236,0],"end":[238,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3243:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3318:3178":{"id":"2:3318:3178","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:170","2:3321:544"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8841:3249":{"id":"2:8841:3249","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3346:3190":{"id":"2:3346:3190","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3348:545"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2933:173":{"id":"2:2933:173","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2935:981","2:2936:809","2:2937:775","2:2938:698","2:2939:681"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6404:211":{"id":"5:6404:211","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6405:2495"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3138:148":{"id":"2:3138:148","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3140:2433"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3168-0:93:1540":{"id":"b:2:3168-0:93:1540","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:134","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1540","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3170:666"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13425:1582":{"id":"2:13425:1582","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15753:2036","self::pattern":"2:12985:2220","str::matches":"1:15759:2041","`DoubleEndedIterator`":"2:8406:119"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49508:2241","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:2213","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3132:75":{"id":"2:3132:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3134:292"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13380:30391":{"id":"2:13380:30391","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49596:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:3917:2853":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:50893:6023":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3484:130":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:2163:1593":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:3308:2768":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"9:0:2009":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:4230:5567":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6269:4059":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:3070:3276":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13547:5409":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:24703:3534":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:2773:4270":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:0:2016":{"crate_id":17,"path":["object"],"kind":"module"},"17:11835:4979":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:1419:2734":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:14698:4593":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:10477:4335":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:531:38483":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7804:3995":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:7886:3252":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:49182:3476":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:6681:3728":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:3365:4236":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:3034:58160":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:6068:39308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:510:4681":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13041:5263":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:15778:2058":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:14423:53192":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13799:5493":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:4623:223":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"14:47:5846":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11254:4363":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:15767:2047":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:32210:57617":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"4:0:2007":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:8114:2575":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:11196:3463":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:14169:2570":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:8264:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6252:4058":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12610:5122":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7477:4008":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:24465:2936":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7250:4083":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:9971:59954":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:13377:6110":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:7582:2804":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:49045:3466":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:4883:3409":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:644:4447":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:10734:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:49890:3152":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:5421:4030":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"12:1667:3902":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:12726:3489":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:2769:2171":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:15776:2056":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:46627:2657":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6021:4243":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:9649:4772":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11616:4928":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12771:4874":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:9533:56311":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:12725:5142":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:2772:3674":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:4506:5574":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:374:3725":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11062:2714":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"1:10570:10224":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:46265:2533":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:1646:2748":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:53375:6090":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:790:4434":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12195:5039":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:3357:2763":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:6707:2599":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:744:59965":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46426:3302":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:14413:2652":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:14566:6127":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:48677:2781":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:4279:2976":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:6236:3009":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:1441:2746":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:10264:2190":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:8363:3650":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:2512:4373":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5563:42168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:51437:3224":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:5167:42116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:10459:2611":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7738:4085":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:3892:41465":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:48117:2191":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:1235:3670":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:3370:3662":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:2399:6108":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:12081:2828":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:47511:2734":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:22570:57249":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:5170:2417":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:8539:3016":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:10635:4809":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:4392:2674":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:5570:2699":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:46556:3309":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:24079:37413":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:6468:2575":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:52892:3234":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"9:469:43296":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:6085:42536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:6644:42908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13054:5270":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:13746:5476":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:3195:4251":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:3487:131":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6636:42907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:5717:4042":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:3889:3733":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"12:784:2739":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12028:5010":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:3696:136":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"0:89:1693":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"2:8406:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:670:38523":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:3401:3116":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:10801:4845":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:4164:41493":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:5414:42135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:46584:3297":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:46396:4558":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:5386:42132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:11362:2245":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10266:4374":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:45876:2175":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:7870:3992":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:4632:2642":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:511:38480":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:52214:3217":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"19:0:978":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:4438:2734":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6807:4071":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:11492:2734":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:13506:5395":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:47467:194":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:11030:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"0:44:1567":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"2:8321:3084":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:9133:45240":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:50016:3497":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:1450:2736":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12467:5099":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:5996:4051":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"14:0:2013":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5456:4032":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:6032:3976":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:1655:2749":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:3355:3099":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12051:5013":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11970:5001":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:3069:2611":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13240:5327":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:14955:2889":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:49096:3469":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:3264:4254":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:1689:3667":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3367:2766":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:857:4440":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:5346:3984":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:6947:3639":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10081:4311":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:4182:2686":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"5:8297:3562":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:49262:2231":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:10246:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:5293:2991":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:7250:4538":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:46219:2531":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:49304:2244":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:8963:2831":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:4992:2415":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:10250:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:14989:2897":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"11:0:2011":{"crate_id":11,"path":["adler"],"kind":"module"},"2:47939:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:7160:6116":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7073:4073":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:15763:2043":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"12:877:2573":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:525:38482":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:9612:2984":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:8590:3019":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:49801:3148":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:1195:58270":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11767:4959":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:4489:2684":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12234:5044":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:13772:5485":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:2856:169":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:8138:2844":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:1744:39388":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:3132:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:5528:41378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:9849:59959":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:46843:2684":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4306:41505":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:14389:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:8902:45234":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:599:38490":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:9210:45241":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:13231:3005":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4101:41487":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4371:41513":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:6106:42539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:46318:3561":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:51515:3216":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:3117:2947":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:13637:5432":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:7205:2575":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:7279:4294":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:22792:2723":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11877:2809":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:9039:2826":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:610:4445":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12946:5180":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:53345:6088":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:3754:2734":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:820:4437":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10962:4856":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2060:2642":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"0:79:1625":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"1:6376:2602":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:3708:3272":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:10321:4587":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:5147:2418":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:6200:42544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:1079:2703":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:152:51529":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:8187:1593":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:2889:4264":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"12:181:3896":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:11738:4950":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:46298:2536":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:1522:39365":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"9:1020:3824":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:11114:2244":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:11376:3467":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:6155:42541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4419:41519":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"14:11:5846":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:1156:6103":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:1472:2747":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:4120:41489":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:12442:5096":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:5877:3062":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1630:39378":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:9943:59960":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:22851:3198":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"12:463:59947":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:11330:12551":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13172:5312":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:9296:4673":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:46606:3299":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:2912:4246":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:897:2905":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:12632:5133":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:22523:2141":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:4210:2575":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:3964:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13272:5339":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:3610:2568":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4325:41507":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:1476:2575":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"14:244:5851":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:2187:2763":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:7832:54145":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:51127:3223":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:3392:4261":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:8954:4329":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10253:4375":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:3313:3176":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:14000:3137":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11159:4867":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:50024:3498":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:1534:2745":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11555:4917":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:5561:4037":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:8638:3028":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4193:41495":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:10599:4806":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"12:1762:4536":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:2887:172":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:11032:2708":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"5:994:3655":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:45629:3256":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12494:5103":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:3714:5563":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:2923:166":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:49204:3478":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:13282:5340":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:8346:57843":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:32204:3582":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"12:853:2737":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:4477:5573":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10468:4336":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:12066:2836":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11847:2807":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:294:4679":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"12:840:2736":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:6469:3305":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:9237:2722":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:14846:2854":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:13894:57519":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:12699:5140":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:13748:57521":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4023:41477":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:14363:2632":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:49322:2243":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:1194:9217":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:5428:42137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:7628:1603":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:12051:3024":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:50020:3499":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"13:120:43538":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11482:4897":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:22940:2611":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"9:809:2781":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:3834:4538":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:8808:2843":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:12559:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"0:45:1571":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"2:46486:3289":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:54:3878":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:4630:2656":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:4745:3135":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:49736:3146":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:923:3654":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:11947:4994":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:50032:3500":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:6614:53123":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:620:4654":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:50048:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:6910:41661":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:14807:2855":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:11118:45243":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:46144:2538":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4439:41522":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5522:42166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11328:4874":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11726:4949":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:51848:3245":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:48406:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:3966:41471":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:2859:168":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:432:2217":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12552:5113":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:23806:3524":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6185:42543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:3331:2762":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:6124:42540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:7604:2579":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11696:4945":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:1690:39382":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:56013:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15760:2042":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:4095:41486":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3033:2492":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:677:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12275:5050":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"9:996:3823":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:5706:2625":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:10481:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:9759:4774":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:49722:3143":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:23877:5956":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"6:6899:41660":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:5714:2627":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:3543:2567":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:1602:39375":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:46565:3295":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7303:4084":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:5531:3694":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:37472:167":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:11892:3482":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:2462:6112":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:4112:41488":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10975:4857":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13733:5470":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:5330:4765":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10128:4419":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:13748:54146":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11378:4321":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"12:2045:2764":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:5548:42167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:3877:2669":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:10547:9215":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"12:2331:2158":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:4355:2679":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:11828:2805":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:50040:3495":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4908:2706":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:6870:41656":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:11233:3060":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:3939:5566":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:88:38105":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:7360:183":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:15753:2036":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13780:5488":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:11086:2715":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"2:49900:3153":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1091:4538":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:12742:3490":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4203:41496":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:829:4438":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:10742:2968":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:15774:2054":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:13916:4592":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:51586:3204":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:22589:57252":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:49508:2241":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5130:42073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:12086:2854":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:10317:4317":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:47897:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"9:692:3757":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:46272:2534":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"3:0:416":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:3997:41474":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:46313:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11779:4962":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:3957:41470":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11948:2872":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:51711:6033":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:4028:3095":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:46435:2169":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:7534:2801":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:1136:2176":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6881:41657":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5472:4033":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:14353:54030":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:13402:5368":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:3213:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:1658:39379":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:13215:37701":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"6:605:38491":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:5790:4046":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:5882:4549":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:13609:5424":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:9217:2842":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:1511:2742":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:3962:194":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:52638:3246":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:24114:3548":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12685:5137":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:6126:4053":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:6644:4068":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12307:5057":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"12:2323:59940":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:8122:3657":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:556:142":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10543:4799":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:2941:1536":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"2:46818:5947":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11750:4951":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:11509:2787":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:7554:2802":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:45767:187":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"12:2032:2762":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:542:3958":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:47855:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:14097:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:1592:2734":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:46527:3293":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:2548:3675":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11962:4999":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5469:42139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:49114:3471":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:5063:3416":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:10331:4339":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:11399:2781":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:12262:5049":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13318:5345":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4494:41527":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"12:2303:59942":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:6923:43093":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:45836:2152":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12712:5141":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10950:4855":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:46504:5998":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:10529:4798":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:50941:3230":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:12011:2878":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:3218:4252":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:1306:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:5360:4027":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:3522:4690":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11422:2782":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:3330:3184":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4364:41512":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6518:4064":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:11348:2246":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4511:41529":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:3336:3661":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11100:4367":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:2181:2762":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:10262:2189":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:3241:2496":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:1723:39386":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:8371:2262":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:6176:42542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11519:4912":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:14983:2896":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12582:5116":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:8703:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6072:4004":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11026:4861":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:4410:41518":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6964:3566":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:5564:2701":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:632:38495":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"12:396:3894":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:8234:2158":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:9339:2213":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12327:5058":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:136:51528":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:10243:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:49354:2248":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:9933:4777":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:7816:3285":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:14876:6209":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:5433:4031":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:1497:2739":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13465:5386":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10435:4795":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:4401:41517":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:10885:202":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:4996:3410":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:51974:3237":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:3543:4566":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10690:2945":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:2376:2569":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:6396:3291":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:14884:2817":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:14055:2674":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:6569:4278":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:32198:2565":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"14:194:43582":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:10346:4589":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:3444:2665":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:22591:57250":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:14570:2702":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:7695:2812":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11847:4982":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:22788:2611":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:5231:5590":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"12:112:59946":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"9:41:3807":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:11303:2606":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:10052:4785":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:3235:199":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:1639:2737":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11678:4936":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:9896:59953":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:2843:4244":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:2794:3971":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"0:0:1910":{"crate_id":0,"path":["strsim"],"kind":"module"},"17:12155:5034":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:3244:205":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:46242:2532":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:3018:4248":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:5197:42119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:53222:3206":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"0:93:1540":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"2:12666:3487":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4046:41480":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11199:4870":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:6612:53121":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:6870:2604":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7843:4087":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11885:54172":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:53034:3238":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:7827:2932":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:4847:3408":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:22994:3198":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:1658:2739":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"12:1855:144":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:6614:38439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12385:5084":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:11992:4564":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:10028:4783":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:13370:5361":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:584:38488":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:47459:177":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:11900:54764":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:13590:5419":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:3965:4538":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4517:41530":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:49558:2237":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:11348:2771":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13429:5372":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:3549:5562":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:11065:2734":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"12:892:3880":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:49123:3472":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:12985:2220":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:52971:3218":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:45813:188":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:2951:1535":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"17:12568:5114":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11147:4866":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:46198:2540":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:15770:2050":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:10553:2750":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"12:968:2744":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:7042:4293":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11244:3003":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:57275:6099":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:12703:3488":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:10946:2683":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:1522:2743":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13119:5306":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:23970:3373":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13842:5509":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:24499:3530":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"9:1056:3817":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:1669:2740":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:563:38486":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5420:42136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:4955:5587":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:5828:2218":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:7467:3987":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"14:56:4897":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:4790:5582":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:50028:3502":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4470:41525":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13386:5364":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:47441:3568":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"12:761:2735":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13582:5417":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:5595:4038":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12073:5022":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:14406:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:6999:4072":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:52245:3220":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:15756:2038":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:46129:2233":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"13:0:2006":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:46:59934":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:10876:2611":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:49274:1539":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:2816:4263":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10407:4372":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:7971:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:50872:6022":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:47561:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:7412:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:2175:2761":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:52088:3225":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:49596:2221":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13933:5530":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10140:4339":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6577:4066":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:3702:3270":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:46406:5997":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:51365:3236":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:8090:2571":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13098:5301":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:578:11441":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:3253:2955":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:4641:5577":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:32362:57609":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:3389:3110":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"12:1235:3891":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:51181:3215":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"9:900:43324":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:5118:3417":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:5975:4050":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:48464:2404":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:9528:4583":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"12:1144:2748":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:1717:39385":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:1011:2734":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:10563:2751":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:11932:4990":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:766:4667":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:49372:2247":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5969:38361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:49454:2239":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11082:4328":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:2366:586":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:13210:5952":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:49568:2238":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:4734:5580":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:3346:3190":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:10685:2635":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8873:2840":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:1540:39368":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"0:72:1615":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"16:3488:4257":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6051:39305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"0:63:1600":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"1:6780:2608":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13627:5427":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:14010:3508":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10788:4843":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:53250:6081":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:6554:4065":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:0:1307":{"crate_id":1,"path":["std"],"kind":"module"},"1:9361:6358":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:3691:212":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:5001:3411":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13978:5536":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:49707:3140":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:15772:2052":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:53261:6082":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:51158:3211":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:3905:41466":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:4614:53356":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7236:4082":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13331:5351":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"0:83:1654":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"16:6391:4061":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"12:2025:2761":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13348:5356":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:11277:4871":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:1161:9216":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:3138:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:7549:3994":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:6208:4056":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:3539:2566":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:6893:41659":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:1236:4685":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10304:4314":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:46834:6001":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:50083:3579":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"1:10591:3678":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:14338:2729":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:46825:2843":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:46457:3306":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:38653:2172":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:49913:6016":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"6:6091:42537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:3144:216":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:48480:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:7927:2933":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:12659:5135":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:49105:3470":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:9839:4339":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:5310:189":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:11277:2728":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9809:59961":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10489:4340":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4066:41483":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:47340:165":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:9088:45239":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:681:4684":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:10587:6127":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:22798:2725":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:12432:3631":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:10481:2910":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:47519:2735":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:8130:58177":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"12:2009:1593":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"9:157:3774":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"5:5410:2642":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4281:41502":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:3255:2956":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:3118:4260":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:3287:4255":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:3383:3107":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:51239:6026":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4449:41523":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:51563:3201":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4052:41481":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:9521:56312":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"16:5295:43659":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13819:5496":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5159:42115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:14358:54173":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:1908:39524":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:7406:3989":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6101:3981":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:13843:2805":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10516:4341":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:2892:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:56026:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:6592:57646":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:45911:2414":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:5274:42124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:5632:4039":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:15258:3919":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:50966:3222":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7571:3982":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:3429:3972":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:5415:2998":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:11482:2784":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:50204:179":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:47729:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:3120:2650":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:3945:41468":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:3324:2734":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:15759:2041":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13296:5341":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7174:4076":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:2269:3127":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:3303:2858":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:1676:39381":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:13163:5311":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:6474:2730":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:2325:3671":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8093:4568":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"13:232:59948":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:3604:4694":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11588:4924":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:11439:2783":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:8325:3086":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:8841:3249":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:1708:39384":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5459:42138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"9:27:3806":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:2437:6110":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:3338:2860":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:7884:3993":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:15724:9218":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:47407:3566":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7856:4088":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:3362:2765":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:22536:57201":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:5636:2620":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:13154:5307":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:15764:2044":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:2257:3672":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:4127:41490":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:1554:39370":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2748:565":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2832:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:12783:5151":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11628:4929":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:49143:3474":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:23735:3523":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:9769:59952":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10041:4784":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11026:2237":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:51663:6032":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:14939:2888":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:161:38172":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:10526:2200":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"9:776:3804":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:47527:1593":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:5885:3064":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"7:85:43193":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:13770:2806":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:7295:4003":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:3276:2259":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13986:5539":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6239:42547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:10420:4371":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:25107:3385":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13598:5420":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5221:42121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:10702:2633":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:11089:2735":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4183:41494":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6424:4062":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:5658:2622":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"18:0:2017":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:1528:2744":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:5407:4029":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:46466:3287":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11981:5004":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12598:5120":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:3247:208":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:5228:42122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"12:354:59935":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"9:927:43290":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:2196:1034":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:8358:135":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:24033:37404":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:15719:54013":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4215:41497":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:45897:3268":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10160:4789":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:10491:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12456:5098":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13520:5402":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:5505:4035":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:3148:215":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:12456:2225":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"12:1200:3890":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:48656:2202":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:2195:4540":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:801:4435":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:5783:4538":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:5672:4040":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:49280:2228":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:9074:6118":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10071:4422":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:1622:39377":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:5292:42126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:51927:3233":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:12168:4816":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7392:3991":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:45705:185":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:2866:4245":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:1934:2573":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:50281:2174":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:48891:3635":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:48343:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"18:720:4657":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4459:41524":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7205:4079":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:4548:2634":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6219:4057":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:3091:4307":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:51484:3212":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:7420:4007":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"15:269:3915":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:46258:2232":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:1630:2736":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9592:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:2401:6109":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:3114:2946":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:1613:1593":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:10864:4846":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:2031:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:547:4228":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10211:4792":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:4300:41504":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:3135:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:23985:5963":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:11013:2227":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:157:38171":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:1021:2933":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:8144:1593":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:49879:3151":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:7158:4075":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:5652:2621":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:5644:2619":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"12:925:2738":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12431:5094":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11995:2877":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:2586:6113":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:46647:3301":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10377:4376":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:49133:3473":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:51053:3231":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:49865:3150":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:2260:3126":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:10448:4337":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:3454:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:10179:4790":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"9:234:3782":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:24635:2813":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:46616:3304":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:15735:53188":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11001:4859":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:3145:4259":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:24567:3531":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:569:38487":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:3962:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:4317:41506":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"12:812:2740":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8310:3732":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:2727:2170":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:48394:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:4145:41492":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:9551:4362":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:2933:173":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:9574:4330":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:69:2572":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:9218:2841":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:11281:12547":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"15:0:2014":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:12071:3030":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4133:41491":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"0:80:1634":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"7:0:1454":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:46279:2535":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:1700:39383":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:5987:42534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:1584:39373":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"9:722:3758":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:7264:4001":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"12:937:2742":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:0:2015":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:5241:42101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:1457:2748":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:10504:2912":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7453:3986":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:2246:3122":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"0:86:1682":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"2:51095:6024":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:10260:178":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:9476:4677":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11822:4978":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:10254:2184":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:14781:2807":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13532:5405":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:3334:2859":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:8838:2211":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11714:4946":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:47390:2735":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:10486:2931":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:23932:5958":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6087:3983":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:9280:4765":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"18:729:59962":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:49578:2224":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:4702:3278":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:10471:53184":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:5707:4041":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:8122:56960":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:2487:3136":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:45790:186":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:5766:4045":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:3506:4256":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:783:210":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:24669:3533":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:8381:2873":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:10149:4776":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13924:5526":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:6665:3694":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:4340:1593":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:8388:2874":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:9665:4585":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:519:38481":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:8288:2781":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"6:5210:42120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:24431:3529":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:4605:2177":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:53437:6092":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:3338:4235":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:903:2906":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:11889:53191":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:51767:6035":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:11258:3011":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:23916:56510":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:2543:4333":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:6848:2609":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5400:42133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:5999:3000":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:7104:4551":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:10203:133":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:8447:2574":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7119:3977":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"14:189:5846":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:46547:3294":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"12:160:3892":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:1563:39371":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:46518:3292":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13497:5394":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:12126:2856":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:10558:4802":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:46188:2539":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:45904:3269":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"0:71:1610":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"1:14826:6243":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4425:41520":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13564:5413":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:49526:2242":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:0:781":{"crate_id":6,"path":["libc"],"kind":"module"},"2:24397:3528":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:11434:4882":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:8431:2261":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:5088:645":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:47981:3572":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3567:2661":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:667:4449":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5029:5589":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:49195:3477":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:4304:5568":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:2484:45326":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13788:5489":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:6851:3308":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:49213:3479":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:1637:2747":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:50012:3494":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:15503:4596":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:15754:2037":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:6776:2605":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:739:4662":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:2733:4221":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:5563:3346":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:11859:3481":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:6014:4052":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:2991:4258":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:9729:59956":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4377:41514":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:660:4448":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:15148:2991":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:24601:3532":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"12:2039:2763":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13180:5313":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"12:469:59943":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11498:2786":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"12:2005:2734":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:6404:211":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:896:4443":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6413:3907":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:13698:137":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:610:38492":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:15769:2049":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:13468:2799":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10458:4726":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"0:85:1672":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"5:4694:4543":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:3743:159":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:8314:3687":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:8328:3688":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:8849:4361":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:3533:2666":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10279:4311":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13477:5387":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:15110:2990":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:4395:41516":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:7185:4077":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:53360:6089":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:49426:2245":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:4890:5585":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:6704:2727":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:7764:222":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:14720:4595":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"12:976:2745":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:15232:53179":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:7786:3996":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:24363:3527":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:12208:5041":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:0:474":{"crate_id":2,"path":["core"],"kind":"module"},"16:5855:4048":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8825:3038":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"16:7894:4022":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:6864:41655":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"12:0:2012":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:8430:2573":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:9245:4318":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:3397:3114":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:5898:3065":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:4282:2977":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11499:4902":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:9332:4319":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:24533:2937":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:3767:2735":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:5073:2414":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10938:4854":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8546:3018":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10001:45288":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:46637:3300":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:11834:170":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:47813:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:32262:57610":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:12106:2855":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:3478:2260":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12095:5023":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:46173:2537":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4431:41521":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:786:4586":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:3324:3181":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:4314:2676":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6136:4025":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:5927:4049":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:3918:41467":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:49828:3149":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5978:42533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:7366:1593":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12040:5012":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:8374:191":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:11269:2243":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:27918:3089":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:50293:2173":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:45721:183":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"0:94:1541":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"6:1760:39389":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6718:4281":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:699:2901":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10224:4793":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12182:5038":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:23542:2724":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:8845:3251":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:22551:57201":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:10912:4849":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11304:45244":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:11307:3465":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12142:5031":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:5191:42118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:10200:4791":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:23641:3194":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:3772:5564":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:53296:6085":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:3990:41473":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:3263:2498":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:4714:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:10926:4853":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:4852:5584":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:8375:3651":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:3868:41463":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:616:38493":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:1680:183":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:2968:4247":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:694:4450":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:49587:2222":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:21:657":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:2569:126":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:53144:3221":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:9264:4764":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5379:42131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5953:39304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7761:4086":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:8282:3686":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:1442:1593":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:50918:3242":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:4255:3010":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:3481:129":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:11089:2716":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:11015:4860":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:3365:2761":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:50070:2861":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"6:6221:42546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:5273:4238":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:12995:2213":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:11019:2244":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:7346:174":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:3406:3119":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:9719:4773":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:14061:190":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:10271:6214":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:11141:53190":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:3737:3280":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:1533:39367":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:5868:4546":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"6:1596:39374":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:7520:2800":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:4:963":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13898:5517":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:4566:2651":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11940:2734":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12537:5109":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11640:4932":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:10531:2201":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:56000:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1180:3889":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13942:5532":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"0:81:1640":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"17:13356:5359":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:4927:2413":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11406:4878":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:4316:2677":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:3467:2660":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"12:1651:3901":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:3372:2767":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:4083:41485":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12480:5101":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:10502:4797":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:15088:2717":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:8560:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5359:42129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:11226:2708":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:3320:4308":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4005:41475":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:46331:3562":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10061:4786":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:6238:3988":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:46211:2234":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:4353:2678":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9162:4364":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:7437:4538":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11915:4984":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:48640:2203":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:14000:5542":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12118:5029":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:50240:3506":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:13789:176":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:38716:2499":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:55881:3262":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:5580:4226":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:1547:39369":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:51200:6025":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:1486:2573":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:6780:4070":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:10487:141":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"17:11665:4935":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:56039:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:2013:2575":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5815:4047":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:14794:2808":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:15771:2051":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:9961:4778":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:49290:2227":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:4387:41515":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:6214:42545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:5407:42134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9886:4776":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11572:4919":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:49472:2240":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:51743:6034":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:3978:41472":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13205:5323":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6491:4063":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:10758:2669":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:8099:1593":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13446:5379":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2857:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:46575:3296":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:4386:5570":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:3800:5565":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:6366:3908":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12221:5042":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:7637:2806":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:55961:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:650:4444":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13810:5494":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:11234:3464":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12408:5093":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:10695:2632":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"19:117:59969":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"17:9005:45236":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:4478:41526":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:52431:3226":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:2945:4269":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10236:4332":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:15169:2998":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4241:41499":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6887:41658":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:5488:4034":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11358:4322":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9065:45238":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12917:5160":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:11907:6241":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"16:5941:178":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:14130:2912":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:11231:4365":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"12:1159:3888":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:15223:6213":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:1501:2740":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:6357:4060":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:3265:2961":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:53281:6084":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:811:4436":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:5370:2525":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"9:603:43366":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:24086:3597":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:1838:4538":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:3239:2951":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:53097:3203":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:14376:6208":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:11056:2709":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:14052:2678":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:11006:2657":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:3720:3273":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:7626:2580":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:10260:4684":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:7875:4568":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"17:13306:5342":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11809:4974":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:6602:2622":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:15765:2045":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:51538:3219":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:7692:2810":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:12076:2827":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"12:1688:3903":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12795:5158":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:49223:3480":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:10258:2192":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2170:2573":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:6005:12547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10532:9213":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:52167:3213":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:3774:3281":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11238:3063":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:13004:2215":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"12:774:1593":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:15751:2034":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:15773:2053":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:7378:3990":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:3377:3104":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:2164:564":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:6100:42538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:47645:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12756:5148":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:51287:3244":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"15:230:3910":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:7216:4080":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:49603:2232":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12010:5009":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5753:4044":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:11956:1593":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:57296:6100":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:15757:2039":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:12507:5104":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:9689:59958":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10117:4418":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:6250:2579":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:24011:37412":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13192:5318":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11045:45242":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:13595:2815":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:6464:3998":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11337:4323":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:4276:2975":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:11458:4896":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4013:41476":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:1432:2735":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:32163:2564":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:1736:39387":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:9930:3450":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13258:5335":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:14049:2676":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:10571:4804":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:4638:4543":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:537:38484":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:48103:2184":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:1486:2749":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:23993:5964":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:45657:3328":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:9726:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10611:4807":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:7191:6116":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9034:45237":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4060:41482":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10827:4395":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:22568:57247":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"12:930:2741":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:13396:54151":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:13865:5510":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:51220:3200":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:11604:4925":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"0:39:1549":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"2:50263:157":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6949:4289":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:10596:2169":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:24737:3535":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:10988:4858":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"18:849:4439":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:46596:3298":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:15768:2048":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11186:4868":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:23957:3372":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:13061:3142":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5255:42102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:37496:2141":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:1045:2733":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"12:949:2743":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:5832:2219":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:49408:2246":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:1729:3004":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:11157:2223":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:50196:6021":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:8105:3656":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10673:45426":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:7226:4081":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"14:250:5853":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"0:38:1546":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"typedef"},"17:11653:4934":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:6731:4282":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3350:3192":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:13015:2212":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:2314:4377":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:9488:4582":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"12:866:2575":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1527:39366":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:1665:39380":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:4510:3713":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:46157:3360":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:23637:2611":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:48110:2185":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:4521:2642":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"18:885:4442":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:48428:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:8960:3025":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12287:5051":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:4262:41500":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11059:2710":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:1623:2746":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:46863:5948":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:8181:1593":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:5314:4764":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5347:42128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:51388:3239":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"8:0:2008":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6605:4000":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:5960:4233":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:12777:2223":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:53183:3241":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:754:59963":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:3035:57844":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:3951:41469":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:11184:2993":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:45746:184":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:24049:37414":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:48665:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10953:2685":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:11862:2808":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"9:749:3759":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:15766:2046":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:7833:4556":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2192:2764":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:24101:3549":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:10962:2652":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:13760:5482":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:712:2141":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"12:1118:2747":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:2213:3664":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:10750:2667":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12247:5046":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:4704:5579":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4033:41478":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:49684:3139":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:3240:2258":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:47373:1556":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:4623:2653":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"10:0:2010":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:45869:3274":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5269:42123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:50186:190":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:9721:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"12:1253:2749":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:11390:3468":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:9219:2915":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:47771:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:8032:2933":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:9368:4674":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4501:41528":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:10828:2850":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:3237:2950":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13488:5391":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:46536:3307":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:1617:39376":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:12645:5134":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:5290:2990":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:13574:5416":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:51611:3205":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:48887:3636":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6636:4002":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:5775:3056":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:10192:194":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"12:747:2734":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12343:5063":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:3253:2420":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13620:5425":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10106:4417":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"9:686:3755":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:543:38485":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6591:4067":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13884:5515":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13963:5535":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:3679:3556":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:4341:41509":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:10716:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:52005:3240":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:1311:4423":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:10256:2191":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4073:41484":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12982:5211":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7514:4006":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:14:1544":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:52781:3214":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:47536:167":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10460:2902":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:8247:2159":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:5194:391":{"crate_id":2,"path":["core","char"],"kind":"module"},"2:3342:3188":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4293:41503":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:13824:5954":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:3521:3327":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:2460:6111":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:5185:42117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:299:4680":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:7808:4551":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:12568:4591":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:53322:6087":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:3064:4306":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:12566:2945":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"0:62:1598":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:8280:2933":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"17:9600:59955":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:823:4586":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"12:377:3895":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7928:3268":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:46236:2233":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:3862:41462":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:49753:3147":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:5736:4043":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:48695:6014":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6152:3985":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:49621:2234":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:3881:41464":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:14583:2809":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:591:38489":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"9:963:3822":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:12741:5144":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:46448:3303":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"12:429:3893":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13062:5272":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:782:4655":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5312:42127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4523:41531":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:6616:53125":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:6645:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10844:4339":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13685:5469":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:624:38494":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:4347:41510":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:51334:3232":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10887:4847":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:48648:6008":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:11252:2992":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:5127:2416":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:1505:2741":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:5522:4036":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:48367:132":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:9925:3449":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:1463:2737":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:6757:2642":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:2159:2734":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:8362:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"15:248:3911":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:3172:4250":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:9659:59957":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:46135:5986":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:46495:3290":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:1492:2738":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:3241:4253":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:3318:3178":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12671:5136":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:12924:2235":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:50249:3507":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:7146:4074":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:7333:4005":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:774:4655":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:15758:2040":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:11092:2823":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:55974:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3393:3112":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:3483:2573":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:8065:2683":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:9755:4586":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"12:2018:2573":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:13540:5408":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10584:4397":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11539:4913":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:1572:39372":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13221:5326":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11993:5006":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:13713:149":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:6682:3999":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:3245:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:53241:6080":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:5692:2623":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:2754:4237":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:4350:5569":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:22992:3199":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:10353:4378":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:9186:4327":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:6812:43067":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:169:51530":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:48376:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:2171:5939":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:10974:2654":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12521:5107":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:4157:4398":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:3743:4391":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:7022:12550":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:5589:762":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:48687:6013":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:9627:2985":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:7024:4292":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:3946:2573":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:4448:5572":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:8929:45235":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:3112:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:0:265":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:4594:4541":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:15775:2055":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:2305:3740":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:5869:3061":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:8189:2933":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:10252:2185":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:32023:3592":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4272:41501":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2166:2575":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:3972:41318":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:46348:3563":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:47398:1593":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:6116:3008":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:5542:9219":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:3141:134":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:6354:2599":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13453:5380":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:50044:3496":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11189:2994":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:6768:4285":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:4301:2735":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:8152:183":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11164:6178":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:10814:4394":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:3041:4249":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:3391:2764":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:8739:6118":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:6858:41654":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:9660:4584":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"16:7823:3997":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:48124:2192":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:13010:2214":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:52280:3202":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:704:4655":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6691:4069":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:4823:5583":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12373:5082":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"12:2315:59939":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:49612:2233":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:4535:5575":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:6778:2607":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:5945:38402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:47687:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:6110:4024":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:51076:3235":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:3621:2668":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:2835:2210":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:4922:5586":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:15777:2057":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:5384:4028":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:3043:58159":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4331:41508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:4394:2675":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:49169:3475":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13912:5524":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:6028:39331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:4417:5571":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:4762:5581":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:5847:3059":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:14714:4594":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:9528:2227":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13377:5363":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:10398:5950":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"18:636:4655":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:12027:2879":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:50036:3501":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:46852:6003":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:47450:37662":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6620:4276":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10403:4338":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4040:41479":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:607:4683":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:53270:6083":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:4614:5576":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:1215:3669":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11794:4968":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:9404:4675":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:10193:2177":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:22983:2611":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:13732:2804":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:55987:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:45956:3398":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:10838:2670":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:9799:4775":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:9440:4676":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:7195:4078":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13554:5410":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5436:59782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:11962:2875":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:4671:5578":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10656:4811":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:866:4441":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"14:231:3653":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"7:38:43186":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6935:43094":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"12:2309:6424":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:1648:2738":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:1153:6101":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6744:4283":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13394:5366":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10623:4808":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5998:42535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:49247:2236":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4227:41498":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:53398:6091":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:6176:4055":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:4237:4538":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"3:300:194":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:47603:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:23899:3377":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:47382:2734":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:7568:2803":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:5702:2624":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:15247:3919":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:4995:5588":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:46476:3288":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:4690:3277":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:12229:6111":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4358:41511":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:10996:2169":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:50989:3210":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:837:2215":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6166:4054":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11121:53186":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"12:1100:2746":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:14970:2890":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11982:2876":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:8160:3644":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:5371:42130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:6852:41653":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:48361:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:7714:3311":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"9:1075:3825":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5282:42125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:3039:58161":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:4008:4688":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:10833:2851":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:10095:4416":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:51022:3243":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:7237:175":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:7342:4019":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:53307:6086":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"14:216:43588":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:15752:2035":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:11178:2992":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:1602:2735":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:8352:204":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3243:206":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:22947:14437":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"}},"external_crates":{"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}