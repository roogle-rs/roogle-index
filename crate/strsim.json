{"root":"0:0:2433","crate_version":"0.11.1","includes_private":false,"index":{"2:13278:33382":{"id":"2:13278:33382","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12809:135","`FromStr`":"2:12808:2769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12808:2769","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12808:2769","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13263:26066":{"id":"2:13263:26066","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13176:26542":{"id":"2:13176:26542","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13210:26571":{"id":"2:13210:26571","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12848:2752","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::split_whitespace":"2:13188:31583","str::rsplit":"2:13216:26575"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43756:2778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5865:1763":{"id":"5:5865:1763","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:112:1995":{"id":"b:2:2908-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13157":{"id":"2:13157","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13158:983","2:13159:2095","2:13160:33360","2:13161:33361","2:13163:33362","2:13166:27737","2:13167:33363","2:13168:334","2:13169:26543","2:13170:2126","2:13172:2149","2:13174:26541","2:13176:26542","2:13178:33364","2:13179:33365","2:13180:26566","2:13181:2036","2:13182:26569","2:13183:26570","2:13185:2022","2:13186:5632","2:13187:5247","2:13188:31583","2:13189:31577","2:13190:30113","2:13191:33366","2:13192:31756","2:13193:26583","2:13196:26087","2:13199:26089","2:13202:3012","2:13206:2978","2:13210:26571","2:13213:26573","2:13216:26575","2:13219:33367","2:13222:33368","2:13225:26577","2:13228:26579","2:13231:26581","2:13234:26582","2:13237:2037","2:13240:33369","2:13243:33370","2:13246:33371","2:13249:33372","2:13251:33373","2:13253:33374","2:13255:33375","2:13256:33376","2:13257:33377","2:13260:33378","2:13263:26066","2:13266:26584","2:13269:33379","2:13272:33380","2:13275:33381","2:13278:33382","2:13280:26432","2:13281:26433","2:13282:26435","2:13283:26436","2:13284:26437","2:13285:26439","2:13286:26440","2:13287:26441","2:13288:33383","2:13290:8188","2:13291:33384"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13216:26575":{"id":"2:13216:26575","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12848:2752","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::split":"2:13210:26571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43774:2777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2917:1788":{"id":"2:2917:1788","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13188:31583":{"id":"2:13188:31583","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13189:31577"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44030:2756","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:1996":{"id":"0:113:1996","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[34,4],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13174:26541":{"id":"2:13174:26541","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13206:2978":{"id":"2:13206:2978","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41876:190","prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5630:8299":{"id":"5:5630:8299","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13253:33374":{"id":"2:13253:33374","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13260:33378":{"id":"2:13260:33378","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13182:26569":{"id":"2:13182:26569","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13183:26570"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:33370":{"id":"2:13243:33370","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12848:2752","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::rmatch_indices":"2:13246:33371"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43906:2773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13219:33367":{"id":"2:13219:33367","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12848:2752","str::split":"2:13210:26571","prim@char":"1:12332:459","`DoubleEndedIterator`":"2:8230:129","str::rsplit_terminator":"2:13222:33368"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43806:2782","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:34079":{"id":"5:5617:34079","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2116":{"id":"0:65:2116","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[353,0],"end":[414,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:26584":{"id":"2:13266:26584","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13186:5632":{"id":"2:13186:5632","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12332:459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43732:2762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13179:33365":{"id":"2:13179:33365","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12338:1704","crate::ops::IndexMut":"2:3397:3062","str::slice_unchecked":"2:13178:33364"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:26577":{"id":"2:13225:26577","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752","str::rsplitn":"2:13228:26579"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43860:2780","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13256:33376":{"id":"2:13256:33376","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2916:136":{"id":"2:2916:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32030:2712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13286:26440":{"id":"2:13286:26440","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:37757"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:8196-0:112:1995":{"id":"a:2:41968:8196-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:8196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:3739:1803":{"id":"2:3739:1803","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39589:5531","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2021":{"id":"0:26:2021","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13280:26432":{"id":"2:13280:26432","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:112:1995":{"id":"b:2:3737-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:2789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5632:27819":{"id":"5:5632:27819","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13284:26437"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:3012":{"id":"2:13202:3012","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41876:190","prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13180:26566":{"id":"2:13180:26566","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13182:26569","str::split_at_mut":"2:13181:2036"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:26582":{"id":"2:13234:26582","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[37,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2630:25725":{"id":"2:2630:25725","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13160:33360":{"id":"2:13160:33360","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13163:33362":{"id":"2:13163:33362","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13161:33361"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2901:2972":{"id":"2:2901:2972","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2875:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:2790-0:112:1995":{"id":"a:2:32165:2790-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:2790","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:53:2071":{"id":"0:53:2071","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[221,0],"end":[223,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.866 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13192:31756":{"id":"2:13192:31756","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44048:2753","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2060":{"id":"0:44:2060","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[186,0],"end":[188,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13255:33375":{"id":"2:13255:33375","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:26581":{"id":"2:13231:26581","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","provide","cause","type_id"],"trait":{"name":"Error","id":"2:2961:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:18:788":{"id":"0:18:788","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[38,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42907:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:2947-0:112:1995":{"id":"a:2:3156:2947-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:2947","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:63:2100":{"id":"0:63:2100","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[300,0],"end":[337,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2076":{"id":"0:54:2076","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[233,0],"end":[259,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8192:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8192:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2094":{"id":"0:62:2094","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[285,0],"end":[290,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:34078":{"id":"5:5613:34078","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2749","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2749","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13272:33380":{"id":"2:13272:33380","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:26439":{"id":"2:13285:26439","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:37757"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:112:1995":{"id":"a:2:3121:246-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13287:26441":{"id":"2:13287:26441","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:37757"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2904:818":{"id":"2:2904:818","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:1995":{"id":"0:112:1995","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[33,0],"end":[35,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:113:1996"],"impls":["a:2:32106:236-0:112:1995","a:2:3121:246-0:112:1995","a:2:3156:2947-0:112:1995","a:2:32165:2790-0:112:1995","a:2:41968:8196-0:112:1995","a:2:41969:8391-0:112:1995","b:2:2913-0:112:1995","b:2:2898-0:112:1995","b:2:2625-0:112:1995","b:2:2902-0:112:1995","b:2:2628-0:112:1995","b:2:3737-0:112:1995","b:2:2908-0:112:1995","b:5:5863-0:112:1995","0:118","0:19","0:17","0:117","0:115"]}}},"2:13199:26089":{"id":"2:13199:26089","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:112:1995":{"id":"b:2:2902-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:45:2062":{"id":"0:45:2062","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[191,0],"end":[211,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8192:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8192:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5628:34081":{"id":"5:5628:34081","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:112:1995":{"id":"a:2:32106:236-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13159:2095":{"id":"2:13159:2095","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:33369":{"id":"2:13240:33369","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12848:2752","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::matches":"2:13237:2037"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43978:2776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13191:33366":{"id":"2:13191:33366","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44020:2772","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2433":{"id":"0:0:2433","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1307,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]","#![allow(clippy::cast_possible_wrap, clippy::cast_sign_loss,\nclippy::cast_precision_loss, clippy::needless_pass_by_value,\nclippy::similar_names, clippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::must_use_candidate, clippy::range_plus_one)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:112:1995","0:20:2001","0:21:2004","0:26:2021","0:27:2025","0:44:2060","0:45:2062","0:53:2071","0:54:2076","0:61:2085","0:62:2094","0:63:2100","0:65:2116","0:105:2194","0:106:2203","0:108:2215"],"is_stripped":false}}},"2:13193:26583":{"id":"2:13193:26583","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13251:33373":{"id":"2:13251:33373","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13170:2126":{"id":"2:13170:2126","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41876:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13187:5247":{"id":"2:13187:5247","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43742:2761","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:26437":{"id":"2:13284:26437","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2004":{"id":"0:21:2004","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[53,0],"end":[72,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:2001","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8192:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8192:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2025":{"id":"0:27:2025","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[90,0],"end":[164,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8192:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8192:164","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13183:26570":{"id":"2:13183:26570","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13182:26569"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13168:334":{"id":"2:13168:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13169:26543","`u8`":"1:12351:1833"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:112:1995":{"id":"b:2:2625-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:2789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2650"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:105:2194":{"id":"0:105:2194","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[677,0],"end":[679,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:8391-0:112:1995":{"id":"a:2:41969:8391-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:8391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13283:26436":{"id":"2:13283:26436","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:112:1995":{"id":"b:2:2898-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:2972"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13158:983":{"id":"2:13158:983","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12332:459"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5629:34082":{"id":"5:5629:34082","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2749","`String`":"5:7642:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2749","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13213:26573":{"id":"2:13213:26573","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12663:2755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13166:27737":{"id":"2:13166:27737","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12395:2759"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612":{"id":"5:5612","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5613:34078","5:5614:2163","5:5617:34079","5:5620:34080","5:5628:34081","5:5629:34082","5:5630:8299","5:5631:27818","5:5632:27819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2911:136":{"id":"2:2911:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2628-0:112:1995":{"id":"b:2:2628-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:2789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:25725"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61:2085":{"id":"0:61:2085","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13178:33364":{"id":"2:13178:33364","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12338:1704","str::slice_mut_unchecked":"2:13179:33365","crate::ops::Index":"2:39420:3061"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13190:30113":{"id":"2:13190:30113","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44010:2771","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13161:33361":{"id":"2:13161:33361","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:26087":{"id":"2:13196:26087","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:33368":{"id":"2:13222:33368","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12848:2752","str::split":"2:13210:26571","prim@char":"1:12332:459","str::split_terminator":"2:13219:33367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43824:2781","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:33381":{"id":"2:13275:33381","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13281:26433":{"id":"2:13281:26433","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39775:2954","Self::is_ascii":"2:13280:26432"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39775:2954","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:26435":{"id":"2:13282:26435","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13288:33383":{"id":"2:13288:33383","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4925:33383"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44055:2766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13172:2149":{"id":"2:13172:2149","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41876:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:2163":{"id":"5:5614:2163","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13237:2037":{"id":"2:13237:2037","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12848:2752","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::rmatches":"2:13240:33369"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43960:2775","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13167:33363":{"id":"2:13167:33363","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13249:33372":{"id":"2:13249:33372","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13269:33379":{"id":"2:13269:33379","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13290:8188":{"id":"2:13290:8188","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4926:8188"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44064:2767","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:686":{"id":"0:119:686","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:33384":{"id":"2:13291:33384","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4923:33384"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44073:2768","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:26579":{"id":"2:13228:26579","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12332:459","str::splitn":"2:13225:26577","self::pattern":"2:12848:2752"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43878:2779","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:788":{"id":"0:116:788","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5863-0:112:1995":{"id":"b:5:5863-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:2789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13185:2022":{"id":"2:13185:2022","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12332:459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43726:1994","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5631:27818":{"id":"5:5631:27818","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13283:26436"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:112:1995":{"id":"b:2:2913-0:112:1995","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:20:2001":{"id":"0:20:2001","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:2627:2650":{"id":"2:2627:2650","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13169:26543":{"id":"2:13169:26543","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12351:1833"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13181:2036":{"id":"2:13181:2036","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13180:26566","str::split_at_mut_checked":"2:13183:26570"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13246:33371":{"id":"2:13246:33371","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12848:2752","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::match_indices":"2:13243:33370"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43924:2774","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:2746","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13257:33377":{"id":"2:13257:33377","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:2752"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12874:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2215":{"id":"0:108:2215","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[721,0],"end":[754,1]},"visibility":"public","docs":"Calculates a S√∏rensen-Dice similarity distance using bigrams.\nSee <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2912:1790":{"id":"2:2912:1790","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2203":{"id":"0:106:2203","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[693,0],"end":[702,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau‚ÄìLevenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"l√∂wenbr√§u\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:34080":{"id":"5:5620:34080","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13189:31577":{"id":"2:13189:31577","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13188:31583"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44039:2754","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:15616:4319":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:7917:30023":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12887:3665":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:15273:4209":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4550:5851":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13568:3790":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:15463:4258":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6880:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:10253:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:2098:5205":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:9157:5094":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:5306:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:10928:8268":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:2936:20247":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:7684:31940":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:6231:4674":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10350:3293":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:5627:5868":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6802:4782":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6562:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:3816:5207":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7604:4551":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:12315:25742":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2872:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:13946:3864":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11392:3496":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:46912:5776":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:8208:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10828:34845":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13046:3678":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:43602:5614":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:22918:8268":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:1580:6798":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:15010:4146":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:953:5099":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12201:3605":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:15582:4307":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:30510:2721":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6991:34833":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10915:34846":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:44352:5641":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:7735:13796":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:40234:31709":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:46140:5700":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:8317:7703":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:22251:8542":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:12768:21158":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:41874:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12353:3623":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:22873:5503":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:10487:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:6629:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:46334:5724":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"0:44:2060":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"2:11132:2778":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:15931:3701":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:373:5810":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:6048:5234":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:5122:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:8151:13802":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:1916:5824":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:2521:13834":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:3899:4565":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:42826:7732":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"0:112:1995":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"17:9807:21161":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:14475:3966":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:623:34858":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:3197:13592":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:12584:3449":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"14:40:3716":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:6417:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"18:613:34855":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:832:5112":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:33333:8451":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:4802:4580":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:1585:6800":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7061:4822":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:43143:5605":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:42449:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:40595:5400":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:5611:5867":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:39376:13596":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:8656:13800":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:22516:8537":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:15333:4225":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7014:21114":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:14876:4104":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:676:8190":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:46877:5773":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11083:30042":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:44064:2767":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"11:1007:4833":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:44757:5654":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"11:2562:6664":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:1621:6830":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7755:4543":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:9419:5902":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:9392:5886":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:11243:5903":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:12929:3668":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:13743:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:559:6725":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:41073:5422":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"11:2542:6441":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:835:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:46222:5704":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:15957:4392":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:6763:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:22839:31717":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6775:7468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:44159:5625":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6621:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:40291:2767":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5102:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4872:8379":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:2869:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:1735:34391":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:6270:30025":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:7389:7579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:6449:5870":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:14986:4144":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:5367:21105":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:12339:1793":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:2298:34281":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:2838:4531":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:10968:5844":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:12707:3653":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:1605:5094":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:5839:5871":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:0:2558":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:4632:5393":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"9:238:5600":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4800:6897":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:6411:8550":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:44667:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:6435:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:21728:5480":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11293:21208":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:38127:13819":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:6058:5404":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:4:1241":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:982:5104":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:4912:8342":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6849:4795":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13455:3761":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11242:3480":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:44474:7742":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:608:3255":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:42865:4963":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"0:113:1996":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"1:10956:6036":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"17:13606:3798":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12371:3668":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:4979:7000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"11:1582:5113":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:2519:13833":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:6317:4703":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:8619:5976":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11497:3504":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:1490:6745":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:532:6711":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:1527:5097":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5643:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4924:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6543:4732":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:38182:13820":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11354:3494":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:41614:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:8670:5852":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:46544:5762":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"14:220:5092":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:426:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:40863:5566":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:5101:8378":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:4278:7752":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:7740:3067":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:11042:3461":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:14235:3925":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"11:1917:5117":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4971:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13375:3745":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:43978:2776":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:8188:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:9290:25745":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:9223:8423":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:5212:7074":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:15521:4300":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:42890:2721":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:14012:3875":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:11415:5175":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:41096:5424":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:5832:5870":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:1320:4833":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:5598:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:8253:7688":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5283:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7656:21117":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5624:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:8482:5844":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:11252:5453":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:44138:13627":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:34092:13816":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5588:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11005:5869":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:5290:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:45977:5691":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:14246:3927":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:22038:31451":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4916:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8768:5600":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:5472:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:44490:7746":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:14529:3972":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:4914:8344":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:22886:5504":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:10290:2732":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"14:214:5090":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6634:4542":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:8064:8194":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11659:5909":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:6855:5899":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:7579:5242":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11524:3506":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:33061:13810":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8235:2735":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"18:598:34856":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6689:7442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:43860:2780":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:7098:4827":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:3428:5841":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:46429:5727":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:6609:34391":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:8174:5923":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:41652:5433":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:538:6714":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5014:7019":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15368:4236":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:47053:5803":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:2878:4533":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:12863:2747":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:39532:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:14977:4143":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:12647:3648":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:6532:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:6047:4636":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:7980:8268":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6758:4770":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:7168:6025":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:40544:5550":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:4965:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:7412:5239":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:3893:5845":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:43673:5619":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1628:6834":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12264:3610":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:2460:7721":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:4785:2953":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:3254:5116":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:747:8312":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:15646:4326":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:2071:5255":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:6597:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5052:7037":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:32076:4891":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:8294:7697":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:4756:13652":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:940:5112":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:13082:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13387:3746":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:2383:5094":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:7602:7667":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:3925:4566":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:45852:5676":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:4806:7572":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"18:680:3270":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:8328:7704":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:3264:3316":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:5225:7078":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:4796:8331":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:1680:6866":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6738:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:3365:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"13:0:2549":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:8070:8226":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:8265:7690":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:5802:21106":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:2006:771":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:5073:7752":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:33400:8453":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11647:3527":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:6456:21111":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4213:8336":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:2458:4514":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:7323:30044":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:4614:4575":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:4683:8358":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:8006:7674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:9136:6008":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:13513:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:22897:8325":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:14436:3963":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12949:3320":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:5504:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:11020:25737":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:9208:8424":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:7482:2055":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:911:5098":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:7867:3304":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6427:4720":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:14599:3988":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:3778:4562":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:3554:13822":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:4959:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:16176:4464":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:3801:5205":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"11:1891:3068":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5266:7096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:1098:3305":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:7592:13874":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"15:394:20210":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5415:7156":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:5329:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:4993:8341":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:742:5096":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:3597:3319":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:10949:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:7104:34426":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:11755:27997":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:2488:8263":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6962:4545":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:12869:2746":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:2062:7719":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:46769:5767":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:46267:5721":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11688:3530":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:13485:3765":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:6772:34391":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10251:3290":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:5931:3068":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:2788:4529":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:6173:7752":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:6870:5415":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:150:4481":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:2369:5121":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:2636:4522":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:21602:8456":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:5107:4590":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:9331:6025":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:40636:5407":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:12357:1894":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:11743:3536":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:16198:4466":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:14868:4103":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:43878:2779":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:1616:3066":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"0:61:2085":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"6:1535:6767":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:6756:7465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"7:0:1884":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5006:4587":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13753:3834":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:8029:7685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13774:3838":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"10:44:5125":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:46819:5769":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14260:3929":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:3046:34383":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5515:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:9259:6013":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:43654:5617":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:671:5816":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11605:3522":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:6657:7433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:12854:2745":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:14847:4093":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:44073:2768":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12808:3661":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12659:3649":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:1638:5118":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:6895:4797":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5436:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:3194:13591":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:22469:8268":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:14356:3943":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11557:3509":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:0:1696":{"crate_id":1,"path":["std"],"kind":"module"},"1:11094:30027":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:12342:722":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:7984:7673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10044:21177":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:7888:4948":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:7877:6062":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13235:3716":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:12283:6065":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"9:53:7909":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:10347:6037":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"9:502:5178":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:7382:2055":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:7446:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:3383:5838":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:619:8187":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:11702:3531":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:11574:3514":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:8333:5931":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:0:2554":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:40575:5553":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:800:3068":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:43135:5604":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:1999:2715":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:16121:4448":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:4875:8357":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:1773:1993":{"crate_id":2,"path":["core","mem"],"kind":"module"},"5:7655:5250":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:261:3296":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:44670:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10818:3449":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:10292:2733":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12225:3607":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:11601:25748":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"6:5352:7125":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:8856:5094":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:45749:5666":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:41893:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:11217:29941":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"18:531:3242":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:4637:5394":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:2711:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:15390:4241":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:10018:21157":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:44174:5630":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3385:5839":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:9317:5440":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:38761:13821":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:11308:7757":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:43732:2762":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11922:5912":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:5390:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:12349:889":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:750:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:22988:5511":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"11:2443:3068":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:8862:6004":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:43960:2775":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10439:3433":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:3406:3066":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:8085:5922":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:10890:6047":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:4701:7722":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:1918:5825":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:6606:4741":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:15023:4151":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:5400:3432":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:44733:5651":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10720:34844":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:1663:6859":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:11380:2779":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2628:5830":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:45927:5681":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:13686:5477":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:6678:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:7366:7561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:45913:5680":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:542:4487":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10419:3297":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:706:2747":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13785:3841":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"18:689:3272":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:40407:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:40306:3101":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:14091:3885":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15944:3715":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:8492:8267":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"11:2403:5111":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:3196:4501":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:570:6730":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13412:3751":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:10288:2724":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:12359:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:14912:4133":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:11419:3448":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:1566:20175":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:5260:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:9323:6023":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4864:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13497:3766":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:0:2550":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:2592:4520":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:15426:4250":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:0:988":{"crate_id":6,"path":["libc"],"kind":"module"},"2:10501:152":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"6:5244:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:5769:4605":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:3121:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:304:2749":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:5686:4535":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:1871:7752":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:12328:3614":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:14414:3952":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:1707:6877":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:4370:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:13832:3847":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:32637:4846":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:12422:3628":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:46666:5764":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2675:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:40345:3102":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"11:687:5111":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:13538:5472":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1517:6756":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:41999:5441":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:46009:5693":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:2734:5831":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:3311:13595":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:43113:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:8341:7708":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:22295:8543":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:40873:5420":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:10713:5838":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:11394:5455":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"11:2326:5105":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"18:507:3238":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:867:5094":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:44020:2772":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:12118:27831":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:14147:3894":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:22732:5484":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10759:3448":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:40488:5545":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11674:3529":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:11907:28134":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:42013:135":{"crate_id":2,"path":["strsim","HammingResult","Err"],"kind":"variant"},"17:13473:3762":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:844:8199":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"15:288:20200":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:0:2559":{"crate_id":17,"path":["object"],"kind":"module"},"2:3564:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2846:2713":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:42096:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7473:4647":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10399:2761":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:12089:3595":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:21716:8268":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14463:3965":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:1510:6753":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:8243:5928":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5002:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:22788:5491":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:43824:2781":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6706:7451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:14271:3930":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6442:4722":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:3810:4563":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:14284:3932":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:4129:8328":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:44482:7744":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:12335:1299":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:8259:7689":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8169:3376":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:46897:5775":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:47014:5787":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:6120:21109":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7910:21119":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:11366:2780":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:44783:5655":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13344:3741":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:7575:7661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:21549:8460":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:6263:4679":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:43581:5612":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:7422:5240":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:42600:2732":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:256:3295":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"11:434:34814":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"14:0:2556":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:4940:4585":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:6497:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12597:3646":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:4628:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"18:635:3262":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:5436:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7379:34838":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:16069:4436":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"11:328:6659":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:9746:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:15324:4222":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:880:5111":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:10716:5840":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:10710:3447":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:5418:34391":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:38072:13818":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:513:3303":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:40412:5537":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7813:4936":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:11206:6008":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13292:3730":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:945:5095":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:4099:8326":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:15748:4356":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:5696:5869":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:6026:4483":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:7330:7545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:9344:25755":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"12:0:2555":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:2619:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:3259:34209":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:3329:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:9311:6021":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:45802:5673":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10639:30021":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:40223:3106":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:6690:2055":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:11595:3521":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12056:3593":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:1505:2055":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:12332:459":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:15992:4422":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:12333:1855":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:22159:8458":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:44280:5468":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:43628:5547":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"14:160:5084":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:8216:4999":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:10735:30034":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:15078:4163":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:41087:5567":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:22371:8547":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:7619:5248":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:1103:5110":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:45869:5677":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:437:3302":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:479:6679":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4811:6905":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2303:20219":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:6362:30041":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:10218:3289":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:1840:683":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:43663:5618":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:22716:7725":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:1692:6870":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:5577:5862":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13999:3873":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:15445:4255":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:6955:3073":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:43328:5606":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:42007:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:22755:5489":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:15814:4368":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:42907:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:6876:7724":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:14968:4139":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11895:6059":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:23010:5513":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:8196:5926":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:12356:952":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10977:29945":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:46379:5725":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:7724:3066":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:1565:6786":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:11408:5456":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11227:3478":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:40386:3104":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:46123:5699":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11142:3448":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5546:7218":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:12343:725":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:718:3278":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:8806:8401":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:22824:31754":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:1612:3068":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:2612:4521":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:8012:7676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"13:229:6654":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:9737:21155":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:564:8176":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:2866:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:44342:5637":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:10986:29943":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:1855:5821":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"9:424:20097":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:10495:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:8022:3561":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:3750:34391":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13844:3849":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2069:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:5981:7752":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:21461:2696":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:7580:4926":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10155:3431":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15206:4192":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:14503:3970":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:5407:1228":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7618:4927":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12127:3597":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:9277:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:13972:3563":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:39424:5526":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:40187:2767":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:860:4496":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:12557:3467":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:10938:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:22999:5512":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:4816:2964":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:2875:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:2216:5209":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:2528:4517":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:4976:4586":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:41080:5423":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:9427:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:465:6671":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:10543:2739":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:563:3247":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:7339:7551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:44725:5649":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:1437:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:6346:5477":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:8301:5006":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:8351:7710":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:1094:5106":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:38017:13817":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:42928:2723":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:14752:4010":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:3314:5118":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:14038:3878":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:44486:7745":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:39492:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:15214:4194":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:40283:2768":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:44692:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:39582:5530":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7306:34837":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:2037:3308":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:30457:3058":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13674:3800":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:3114:2944":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:43571:5611":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:3491:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:2808:4530":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:1633:5117":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6379:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"19:0:1276":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:9751:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:12621:3647":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:1609:2055":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:5927:4620":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:6098:21108":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:2660:4523":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:43715:2765":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"14:31:5084":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:46091:5697":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:9463:6027":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13116:3688":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:10279:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:6681:5408":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:43756:2778":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:9409:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:14341:3939":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:8720:5996":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:23076:5519":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"5:1365:5110":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:11661:3528":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:1336:5106":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:30495:3127":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:7546:7645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:2318:7716":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:2572:4519":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7686:4931":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:9149:6009":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"11:2569:2708":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:44674:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:44048:2753":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:6466:4725":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:40657:5413":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:491:3237":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:4718:4577":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:0:551":{"crate_id":2,"path":["core"],"kind":"module"},"2:21600:8268":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12530:3644":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"11:1087:34812":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:2725:1989":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"3:0:493":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:14587:3981":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:44498:7748":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:43104:2740":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11026:21190":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6342:34839":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:9414:5901":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"5:6563:3068":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:12337:1670":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:2308:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:6749:4769":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:43343:7740":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6160:20218":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:25928:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:43502:5607":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:7429:7581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:4711:2962":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:6670:5889":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:12336:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8050:8193":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:42213:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:5885:7752":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:43591:5613":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:6821:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:33534:13811":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:22:803":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12494:3637":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:15799:4367":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:4476:5850":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:16165:4459":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"11:2554:34811":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:2418:4512":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:2258:5258":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6574:4554":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:46711:5765":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:11353:6055":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:10573:34849":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:1857:5822":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:367:5808":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13015:3630":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:8283:2792":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:16249:4476":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:30895:2696":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:754:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:5039:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6915:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:46059:5695":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:10170:3432":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:15222:4196":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5630:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:10919:5924":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:13187:3701":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:2712:30034":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:1536:5098":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2478:8258":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:14131:3889":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:14311:3934":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:4143:8329":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:14994:4145":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10997:3458":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:45785:5672":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:3646:13598":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:21500:31442":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:8512:5550":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12443:3632":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:9165:6011":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11915:21277":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:33919:13815":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:5190:32636":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:9545:5824":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:14489:3967":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:15778:4364":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:44767:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7528:4921":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6079:4489":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:40557:5551":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:15760:4358":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:41836:5434":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:42586:2724":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:15434:4251":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:651:3238":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:5502:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:5376:7137":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5557:7224":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"0:21:2004":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"17:12399:3626":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:12848:2752":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:5591:5866":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:15410:4247":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:8186:5925":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"14:187:20188":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6813:4783":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"0:105:2194":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"17:15281:4210":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11567:3511":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:8247:7687":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:710:5095":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:8197:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12572:3448":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:12362:3624":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:5324:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:14189:3915":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"9:0:2552":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:3288:5115":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:1577:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:2394:4511":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:40738:5563":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:3575:13642":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12342:3619":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:2878:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"18:521:25365":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:15635:4325":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:9173:2055":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11547:3375":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"11:837:5099":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"14:202:13629":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:6187:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43742:2761":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:4158:5111":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:44806:5656":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:40438:5538":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11673:5911":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15596:4313":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:10939:5925":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:11083:5094":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:545:6717":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:473:6676":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:3038:7713":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:2505:660":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:3600:5843":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:7446:2055":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:40249:3105":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:32072:5521":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:11128:3422":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"18:735:25363":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5037:4588":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:15176:4186":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:8522:5566":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:41958:5587":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:7620:3113":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5112:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:40299:2766":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:42135:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9984:21176":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:4558:2961":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"9:178:7920":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:6433:4721":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3287:30464":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:30489:3059":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13553:3784":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:10661:3446":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4824:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:41129:5427":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:5462:2750":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:46169:5701":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:15102:4167":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"9:330:6667":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:12347:877":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"18:581:2696":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:9318:6022":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:1893:5823":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"11:2352:5106":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:11778:5845":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:44478:7743":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:8473:5970":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11324:3490":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:7432:34207":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:3167:8450":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:11825:3550":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7633:34834":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:15569:4301":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:13706:5478":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:12348:883":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:4661:8357":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"11:1025:5105":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8703:8387":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:16105:4443":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:7355:4870":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5995:4630":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:44470:7741":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:2245:7712":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:14212:3924":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6480:4536":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7590:4550":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:41696:7731":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:2227:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:21547:8268":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:2203:3312":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:7314:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:39420:3061":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:16032:3719":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"18:80:25352":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:1555:5095":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:7514:2048":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:45884:5678":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:11467:3502":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6353:4494":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:7537:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:8529:2761":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:9938:7929":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5536:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40262:3107":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"11:299:6656":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:2151:5106":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:40566:5552":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:3362:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:1671:6860":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:12330:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:4502:4571":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"0:0:2433":{"crate_id":0,"path":["strsim"],"kind":"module"},"17:15342:4226":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:7509:4912":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:40394:3100":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:3293:34211":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"9:357:20110":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8644:5987":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:879:8200":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:7648:4930":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:32097:5523":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:42010:192":{"crate_id":2,"path":["strsim","HammingResult","Ok"],"kind":"variant"},"6:6636:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:40460:8236":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:8288:7696":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10534:34843":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:10750:31766":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:13986:3872":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:2310:5829":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:41918:2055":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:8464:3283":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:7348:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:5764:7482":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:2641:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:3397:3062":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11684:7764":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:23043:5516":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:2048:13843":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:4424:4569":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:9428:2745":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:2950:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"11:673:5094":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11877:3555":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:2338:4502":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:3831:8310":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:43553:5608":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:14545:3974":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:23528:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:1676:34808":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7111:4830":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:46857:5771":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:6965:3074":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:7352:6356":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:2998:4556":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4870:6949":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:0:2560":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:4996:3094":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:2708:4525":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:16151:4456":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"0:106:2203":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"17:15376:4239":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:4083:3068":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4992:7006":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:6016:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:41990:13888":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:578:6735":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:46207:5703":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:867:3295":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:15383:4240":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11443:3501":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5483:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:9196:6012":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:6648:4745":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13363:3742":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13723:3825":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7769:4934":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:2123:5208":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:3329:4559":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:7402:3068":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:732:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:12993:21181":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12150:3598":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:42174:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:16050:3729":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"9:392:20096":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:8300:7698":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:8226:2135":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:7462:5241":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:2882:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:9283:6017":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:40193:5533":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:45898:5679":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10612:3445":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12388:3625":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:7823:21118":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:45732:5665":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:3126:2945":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:3358:2791":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:517:6702":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:4191:8332":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:7695:4932":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:3669:3335":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:4821:3325":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:4393:13590":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9387:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11715:3532":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:3055:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:934:3066":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:40585:5555":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:403:3298":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:5146:7052":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11841:3552":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:2423:2055":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:22004:8462":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:1085:5105":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:15734:4349":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10887:34842":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6447:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:4986:3327":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:11612:5904":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:3330:5836":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:5466:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:9671:21156":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:6841:5895":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:12289:3612":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11214:3477":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:5236:7082":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:2845:8268":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"11:1887:2055":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:13486:32643":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:643:3238":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:1559:6784":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5781:4539":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:8155:4993":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:754:3287":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:2469:3066":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:11839:5847":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:3667:8286":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:4330:8354":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13814:3846":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:970:5102":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2768:4528":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:9858:21172":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"0:27:2025":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"2:40379:3103":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:9445:5903":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:1496:6748":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:8118:4988":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:8600:7750":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:3735:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7857:4944":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:10503:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:4985:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:726:3281":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6948:4544":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:7138:8454":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:12350:870":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:12358:1402":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:45831:5675":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:3842:3068":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:5191:7062":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15624:4320":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:5314:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:11967:2757":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:7619:3112":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:1653:6853":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:42369:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:43641:5616":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:12922:13621":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:40728:5418":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:15092:4166":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:15289:4211":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:1164:34299":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:21498:31454":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:43702:2770":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"11:811:3066":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:22357:8268":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:9938:21175":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:11089:3468":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:652:2716":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13024:21182":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:46866:5772":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:40666:5414":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11788:3545":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:7461:7591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:15836:4374":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:10718:32587":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:40689:5562":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8873:6005":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:21529:31456":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:924:3068":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:46961:5784":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11313:3488":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:8648:7561":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:3519:5568":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12464:21302":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:523:6705":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:3332:5837":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:96:25353":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:42881:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:22648:5482":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:9123:6007":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7085:4823":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:4771:4579":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11634:3526":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:40508:5546":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:15168:4183":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:2323:20245":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:15138:4172":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:6394:5883":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:10914:7755":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:3116:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5200:7067":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11537:3507":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5382:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:6335:4713":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:43806:2782":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:44794:5123":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:15190:4189":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:3881:3066":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:44746:32769":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:9720:29871":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:8136:4990":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:46740:5766":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4942:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:2206:8171":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:10286:2725":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:43683:5620":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:8201:2793":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:1923:5118":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:7373:3064":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:1593:6805":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:22385:13833":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"5:7129:34419":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:11214:5452":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11764:3540":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:3172:8452":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"0:53:2071":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"16:4856:4582":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13855:3850":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:586:6739":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:46886:5774":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"11:2536:6661":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:2854:4532":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:12609:5465":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:46076:5696":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:3342:8205":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7549:4924":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:5157:8383":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:10652:13908":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:4909:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:6768:7467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:5457:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"11:1883:5094":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12792:3396":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:7539:4548":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:6171:5870":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:11914:5912":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:7490:2055":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:22701:5483":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:698:3273":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10068:21160":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:4477:7752":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:11621:3524":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:34265:4852":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:40535:5549":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"11:1603:5114":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10905:3451":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10769:34847":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:41927:5585":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:23065:5518":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:41636:5431":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11898:3557":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8846:5856":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:364:34803":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:8694:31509":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:22026:5479":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:44524:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:4318:5094":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8004:5915":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:22383:32558":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:4837:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:5767:8406":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:39474:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:8647:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:7563:5233":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:11510:3505":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5296:7112":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13594:3795":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"18:589:3248":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:1526:6761":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:22511:8539":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:41802:5583":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:6471:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:32197:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:33601:13813":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:13877:3857":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:6300:4696":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5960:4627":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:7454:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:45685:5660":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:10596:6006":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:12345:720":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"6:5336:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:46840:5770":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4787:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13064:3681":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:1954:3125":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3998:5847":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:5347:4592":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:44253:5635":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:6706:5890":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:44506:6185":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"0:20:2001":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"16:6620:4743":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:4830:4581":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11645:5908":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:15039:4154":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:46467:5729":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:839:5197":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:1910:5116":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:21726:8457":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:7321:5585":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:5980:5879":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:5863:21107":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:21517:31445":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12824:21180":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:44684:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:2140:5105":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:219:5192":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5250:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:8625:5985":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:497:30039":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12189:3604":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13272:3729":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:14325:3937":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:12363:13896":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13325:3736":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:1984:1342":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:42488:5446":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:6746:7458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:7132:4832":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:12175:3600":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"7:78:20088":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:14575:3630":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"8:0:2551":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6278:4681":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5671:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11583:3517":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:42291:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:15720:4347":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:4808:7574":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:5825:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:44055:2766":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12683:3651":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:46317:5723":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:102:6655":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:8230:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:42055:5111":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:5946:5874":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:3368:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:8343:8298":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:2728:4526":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12863:3664":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:41910:5111":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:4844:788":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:12433:3630":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:6441:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"15:0:2557":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:7395:26070":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:2476:8257":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:40272:3108":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:2462:8253":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:22766:31713":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:43125:5600":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:14177:3913":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:4843:459":{"crate_id":2,"path":["core","char"],"kind":"module"},"6:5134:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:9272:6014":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10284:3291":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:42252:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:3022:5835":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:44188:5633":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4322:8353":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:6874:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12724:21179":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:1351:5105":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:41902:5094":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:40613:5556":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12278:3611":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:45994:5692":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:21471:31449":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:14386:3946":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:1896:3066":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:13211:3715":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:6664:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:11225:6185":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:22157:8268":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:32083:5522":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:22955:5508":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:4916:8345":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:3896:5846":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:44502:7749":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14560:3978":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:12395:2759":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:40698:5416":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11102:3469":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:16269:3751":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:12346:895":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"18:670:3269":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:40714:3260":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2717:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"10:0:2553":{"crate_id":10,"path":["adler"],"kind":"module"},"1:10710:5836":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:21608:8459":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:10296:2730":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:21515:31447":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:7497:4911":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:1586:5202":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:45956:5690":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:12586:5464":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:46408:5726":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:41814:5848":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:41668:8309":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:1639:6842":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5897:4614":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:45700:5661":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:3347:13597":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:890:2055":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:46923:5777":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6385:4716":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:2535:6310":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46938:5778":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8791:5999":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:39552:2702":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:3639:2717":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:9238:8425":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:32849:4843":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:6494:4728":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:30521:31727":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:7390:5238":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:11193:6007":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:7570:4549":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:11893:5457":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:13437:3753":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:5642:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:13089:3682":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11075:3467":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:45817:5674":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10954:21188":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:10877:3450":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:12808:2769":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:36141:4853":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:11579:6056":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"17:15456:4256":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:8306:7699":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:2231:3514":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:3648:29653":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:1489:5111":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:898:5097":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:481:3236":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:875:5103":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:46190:5702":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5423:7161":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:1071:4833":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:4151:8330":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5031:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:11341:3493":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:15197:4191":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:41111:5570":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:5083:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:11618:6058":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:15356:4233":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:7471:29527":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:5466:2751":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13922:3863":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:7607:5245":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:4314:8352":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:12352:1815":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11256:3482":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:22333:8544":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:11037:6009":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:9708:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:2112:5207":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:6788:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:8593:5848":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6504:4729":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11115:3471":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:4432:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:8202:4555":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11493:3503":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:2684:4524":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:7397:34836":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"14:165:20181":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:11690:7765":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5370:7135":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:3582:5979":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12695:3652":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:4113:34391":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:40:3065":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:12874:2744":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:5307:4591":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"9:447:20095":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6491:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4885:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:12338:1704":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:7936:30037":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6976:4805":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5953:5878":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:5742:4595":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:564:6727":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:41780:31721":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:5653:7265":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:32090:2962":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:4346:5389":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:741:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:7306:7528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"11:2498:20170":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"11:1066:20174":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"15:327:7906":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11100:30028":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:4447:34410":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:6542:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:3476:8293":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:1621:5115":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13308:3734":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13538:3778":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:5228:5397":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:40423:13874":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:7665:5251":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5400:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:8093:4986":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:5914:4619":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:1947:659":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:4395:5849":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:15678:4341":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:4468:4570":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:5361:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:43096:5596":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:40887:5421":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10524:3444":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:4882:4583":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:22438:13833":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"5:3042:34384":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:7631:5249":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:5846:4610":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:5756:4600":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:2175:21235":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:8073:4985":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:3670:5111":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8548:5976":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"10:36:6666":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:42330:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:23021:5514":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:3202:13593":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:2534:2565":{"crate_id":1,"path":["std","io"],"kind":"module"},"5:952:5094":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11269:21207":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:16138:4450":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:3290:25978":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:15400:4244":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:8271:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:16079:4437":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:3293:25985":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:3609:13594":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:16212:4470":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:10326:5823":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:14933:4138":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:4810:7576":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:13526:3775":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:32195:2950":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:10982:21189":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:44030:2756":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11405:3497":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:2622:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11730:3535":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:6172:5406":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:10298:2731":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:9781:21171":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6670:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:6698:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:14111:3888":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:22424:8548":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:41121:5425":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:11063:3466":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:5075:4589":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:16093:4441":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:32166:2951":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:6430:8551":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:5020:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:872:3296":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:5277:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:15116:4168":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8542:2771":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:14372:3944":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:2478:4515":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:12379:5459":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:46798:5768":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:33746:13814":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8535:2778":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:4479:5391":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:46621:5763":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13766:3836":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:11325:5454":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:39775:2954":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:11755:3539":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:15126:4169":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:3473:3318":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5617:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11853:3553":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:8155:13801":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:40604:5403":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:3247:5094":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5565:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:6560:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:4743:4578":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12107:3448":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4932:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:16187:4465":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"5:289:34391":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:4343:8355":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:14402:3950":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"15:306:20201":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:1485:6743":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6066:4643":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:22966:5509":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:3842:4564":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:3569:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:6460:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:6881:7723":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:3594:32846":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5078:8376":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:13252:3719":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:12344:741":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:39340:13640":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:8259:4891":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:30240:8311":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:6910:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5046:7035":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43906:2773":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:4157:8331":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:700:2055":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:44010:2771":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:3156:2947":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:15608:4316":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6588:4733":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:11505:30029":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5489:7200":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:5087:8377":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:14516:3971":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:7548:2709":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:6784:5891":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:44559:13941":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:3182:4847":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4970:5855":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:45764:5667":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:6532:4731":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:6729:7455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:6782:21113":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:3014:20248":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"11:787:5098":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"9:482:20094":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:14051:3880":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8251:5930":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:16259:3746":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:12351:1833":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:21483:31449":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:5831:4609":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:8338:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:6609:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7006:4808":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5320:7119":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:10078:2722":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:42836:2721":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:8282:7695":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:12331:1159":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:3975:2055":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:8175:4995":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:6478:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:6505:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:1566:5096":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5174:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12251:3609":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12543:3645":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:32165:2790":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:12299:7931":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:21999:8268":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:4641:4576":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:4587:4574":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2438:4513":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10909:7753":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"16:7559:4925":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:11166:3474":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:8230:2736":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:2773:5834":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:3644:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:3036:34390":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12318:3320":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:11107:5111":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:4891:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:8559:8308":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:22977:5510":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:15473:4263":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:1207:3307":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:4531:4572":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:44205:5634":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:2735:1988":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"17:15418:4248":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:8554:5978":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:1160:5110":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:935:8201":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:8611:5983":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:4934:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:588:5813":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:5861:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:41968:8196":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13959:3867":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10622:34848":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:2374:4510":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:10997:5922":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"18:113:25354":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:2766:6308":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:2313:6030":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:1200:34300":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:3252:4848":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:9737:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:11051:3463":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:1686:6869":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:7799:4541":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:39512:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:5415:4593":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:976:5103":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7741:4553":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4876:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:1970:2714":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:1477:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"0:54:2076":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"17:12213:3606":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:21620:5480":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:553:6722":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:7642:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:10756:3561":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:43774:2777":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:12663:2755":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"0:45:2062":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"16:5722:4540":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:12625:5466":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:680:5194":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:3614:4561":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:40627:5559":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:2317:8250":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:10930:6028":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:13797:3843":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11153:3449":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:2137:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11865:3554":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:9404:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"11:1903:5115":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:33467:13812":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:9886:21173":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:597:3304":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5064:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6872:4796":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:2698:5832":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:2355:4504":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:2548:4518":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"11:1142:5109":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:46446:5728":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:2680:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3218:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:4511:34410":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:9916:21174":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:30868:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11016:3460":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12043:3591":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5528:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11260:6190":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:9364:6186":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:3581:13641":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:14079:3884":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:40515:5547":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:42607:2733":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:856:5102":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8259:5205":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:9715:5923":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:15655:4328":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:1051:5106":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:883:5104":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:4765:2963":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:6409:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12508:3640":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:44039:2754":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:44331:13628":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:11926:5458":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:5445:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:6666:5567":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:43924:2774":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12851:3663":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:44548:5646":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13424:3752":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:1723:6882":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:15822:4371":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:23032:5515":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:15:1999":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5219:7075":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:5700:4538":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:7359:7557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46991:5786":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11367:3467":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:774:5097":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"0:108:2215":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"11:1107:5108":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:2902:20246":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:2234:3315":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"14:7:5084":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6412:21110":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:8192:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:41969:8391":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6665:21112":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:16235:4475":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:6650:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:7485:7602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:6714:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:45670:5657":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:43088:2738":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:9933:31505":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:42410:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:6524:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:40450:2761":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:14025:3876":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:1547:6776":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:10284:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:6025:5880":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12030:3590":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"0:65:2116":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"17:15313:4218":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:524:8171":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:44494:7747":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:15249:4200":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5344:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:12516:3642":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:7052:4819":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:4352:4568":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:5477:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:6900:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:12304:8195":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:538:3245":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:39602:5532":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:4412:13644":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:12238:3608":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:1839:3066":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:573:3238":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:3475:4560":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:14788:4041":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:22595:5481":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:46296:5722":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:7561:7652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:10235:2717":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:22483:8538":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:7428:21116":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:42593:2725":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:6069:14134":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5581:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14723:3990":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:23054:5517":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"5:4248:7752":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:32106:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:5247:5861":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:123:6442":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:15058:4155":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:15266:4208":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:6940:4803":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:12485:21303":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:7715:29596":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:7516:7628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:2508:4516":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:10538:2737":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8338:5932":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:14855:4096":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:46108:5698":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:15701:4342":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:43562:5609":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:765:25364":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:7412:7580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:6931:3072":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:10219:5580":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:3057:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:45717:5664":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:3426:5840":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:13173:3700":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:6721:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:41102:5568":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:1503:6751":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:14066:3883":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:2748:4527":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11278:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:11287:2777":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:10185:3288":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:6927:4801":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12671:3650":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:9179:5872":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:32108:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:9755:21153":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:10294:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:485:6681":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:6811:7481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:9106:6006":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11189:3475":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:4062:4567":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:12355:1809":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:8650:3111":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:41854:5437":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:4358:5390":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:40645:5560":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13738:3829":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:3549:7752":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:4913:4584":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:43347:5449":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:7727:4552":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:8605:8356":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:4201:8333":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:2304:4833":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:2961:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:15769:4362":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:10234:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:11812:3548":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:11175:2755":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:9400:7752":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:13509:3767":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:7999:5913":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:10137:21154":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:5270:963":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12076:3594":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:5385:3431":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:396:34801":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:4269:7752":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:1474:5094":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:1627:5116":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:15301:4217":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:668:5814":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:39437:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11818:5846":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:4897:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:32030:2712":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:44365:2783":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:12300:21301":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:12354:1827":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12408:3627":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:949:5096":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"13:110:34819":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:4560:4573":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6398:4534":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:5677:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5636:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:515:3235":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:4205:8334":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:659:3263":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12900:3667":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:5226:5234":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:7056:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:13399:3749":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:1180:34387":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:3163:2949":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"7:31:20081":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:3657:5094":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:2072:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:39452:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11799:3546":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:4510:5392":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:42072:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:3035:3032":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:7537:2708":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:959:8199":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:46038:5694":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:13581:3794":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:5278:5861":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:3029:3330":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:8188:4997":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:13798:3063":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"0:26:2021":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"1:4761:8375":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:1545:5112":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:9112:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:4093:8327":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:12549:5461":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:46976:5785":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:16223:4472":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:10413:8408":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:12478:3635":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:3657:8266":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:7907:3283":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:430:34813":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:13663:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:1073:34391":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:40679:5561":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12454:3633":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:13899:3858":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"0:63:2100":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"5:3280:5117":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"0:62:2094":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"6:6519:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:43726:1994":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:12353:1821":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:22866:7728":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4952:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:14449:3964":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:491:6682":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:10345:6038":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:22780:5490":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10317:3292":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:15151:4178":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:32107:2789":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:8224:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:7981:5812":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:10504:29872":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"5:5726:3072":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:5181:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:5169:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:7584:7664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:5817:4606":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:5160:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:7967:5881":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:2548:6662":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:40478:5539":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"11:351:34805":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:39589:5531":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:42063:2055":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:7467:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:42047:5094":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:7144:21115":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13146:3692":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5665:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:3002:2720":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:8179:5924":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:14298:3933":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6560:4537":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:7452:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:22804:31710":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12969:3670":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:1699:6873":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10092:21178":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:42853:31740":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:6787:8419":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:44383:2784":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:4292:29530":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10671:34841":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:44317:5636":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"11:2124:4833":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:497:6685":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11773:3541":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}