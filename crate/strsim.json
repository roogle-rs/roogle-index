{"root":"0:0:2012","crate_version":"0.10.0","includes_private":false,"index":{"2:12170:32813":{"id":"2:12170:32813","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082:816":{"id":"2:12082:816","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11986:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12093:23579":{"id":"2:12093:23579","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12003:1510"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:23614":{"id":"2:12137:23614","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11783:2308","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:418","str::split":"2:12131:23610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43573:2331","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11803:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12127:2513":{"id":"2:12127:2513","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41596:179","prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41594:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11803:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12205:23509":{"id":"2:12205:23509","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12199:32823":{"id":"2:12199:32823","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11744:127","`FromStr`":"2:11743:2323"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41738:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11743:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11743:2323","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12203:23507":{"id":"2:12203:23507","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5773-0:72:1644":{"id":"b:5:5773-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9219:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5771:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5775:1465"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12204:23508":{"id":"2:12204:23508","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12174:32815":{"id":"2:12174:32815","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12111:26260":{"id":"2:12111:26260","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43809:2325","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8322:6265-0:72:1644":{"id":"a:2:8322:6265-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8322:6265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12090:23500":{"id":"2:12090:23500","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11351:2313"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8321:6266-0:72:1644":{"id":"a:2:8321:6266-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8321:6266","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12131:23610":{"id":"2:12131:23610","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11783:2308","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:418","str::split_whitespace":"2:12109:30308","str::rsplit":"2:12137:23614"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43555:2332","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12164:32811":{"id":"2:12164:32811","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11783:2308","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:418","str::rmatch_indices":"2:12167:32812"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43705:2327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12113:30352":{"id":"2:12113:30352","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43847:2309","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2012":{"id":"0:0:2012","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1005,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:72:1644","0:18:1650","0:19:1653","0:24:1671","0:25:1675","0:42:1702","0:43:1704","0:51:1714","0:52:1719","0:59:1729","0:60:1738","0:61:1744","0:63:1758","0:65:1776","0:66:1786","0:68:1797"],"is_stripped":false}}},"2:12146:23616":{"id":"2:12146:23616","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308","str::rsplitn":"2:12149:23618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43659:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2251:2219":{"id":"2:2251:2219","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516:33475":{"id":"5:5516:33475","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12167:32812":{"id":"2:12167:32812","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11783:2308","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:418","str::match_indices":"2:12164:32811"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43723:2328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11803:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:1672":{"id":"2:12106:1672","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11986:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43525:1643","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12123:2548":{"id":"2:12123:2548","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41596:179","prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41594:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:24758":{"id":"5:5531:24758","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12205:23509"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:32805":{"id":"2:12112:32805","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43819:2326","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2611:2503":{"id":"2:2611:2503","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"2:3385:4860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12092:314":{"id":"2:12092:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12093:23579","`u8`":"1:12003:1510"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2553:1488":{"id":"2:2553:1488","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41738:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12109:30308":{"id":"2:12109:30308","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12110:30334"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43829:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12143:32807":{"id":"2:12143:32807","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11783:2308","str::split":"2:12131:23610","prim@char":"1:11986:418","str::split_terminator":"2:12140:32806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43623:2335","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11803:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:32802":{"id":"2:12091:32802","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12102:32803":{"id":"2:12102:32803","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11992:1407","str::slice_mut_unchecked":"2:12103:32804","crate::ops::Index":"2:2980:2637"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12120:23622":{"id":"2:12120:23622","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11803:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9214:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2539-0:72:1644":{"id":"b:2:2539-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:2507"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5511":{"id":"5:5511","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5512:33474","5:5513:11685","5:5516:33475","5:5519:33476","5:5527:33477","5:5528:33478","5:5529:6177","5:5530:24757","5:5531:24758"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:1645":{"id":"0:73:1645","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[15,4],"end":[15,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12105:23603":{"id":"2:12105:23603","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12104:23602"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12108:4846":{"id":"2:12108:4846","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43541:2315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2543-0:72:1644":{"id":"b:2:2543-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2545:697"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12117:23621":{"id":"2:12117:23621","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2313:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:19:1653":{"id":"0:19:1653","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[34,0],"end":[47,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2313:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1675":{"id":"0:25:1675","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[65,0],"end":[131,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2313:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12094:1767":{"id":"2:12094:1767","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41596:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41594:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9885:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9885:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12196:32822":{"id":"2:12196:32822","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11803:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[28,0],"end":[28,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","cause","provide","description"],"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5528:33478":{"id":"5:5528:33478","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2305","`String`":"5:7451:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2305","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12098:23577":{"id":"2:12098:23577","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9885:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9885:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12096:23576":{"id":"2:12096:23576","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41596:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41594:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9885:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9885:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2558:1487":{"id":"2:2558:1487","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41738:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12208:6071":{"id":"2:12208:6071","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:6071"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43863:2321","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12178:32818":{"id":"2:12178:32818","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11808:2300","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1644":{"id":"0:72:1644","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:73:1645"],"impls":["a:2:2740:2344-0:72:1644","a:2:8321:6266-0:72:1644","a:2:2700:228-0:72:1644","a:2:8322:6265-0:72:1644","a:2:2683:220-0:72:1644","b:2:2543-0:72:1644","b:2:2609-0:72:1644","b:2:3319-0:72:1644","b:2:2252-0:72:1644","b:2:2249-0:72:1644","b:2:2554-0:72:1644","b:2:2539-0:72:1644","b:2:2549-0:72:1644","b:5:5773-0:72:1644","0:17","0:75","0:77","0:78","0:15"]}}},"5:5530:24757":{"id":"5:5530:24757","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12204:23508"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1729":{"id":"0:59:1729","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[236,0],"end":[238,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:23578":{"id":"2:12100:23578","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9885:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9885:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1671":{"id":"0:24:1671","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:18:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12152:32808":{"id":"2:12152:32808","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41594:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2549-0:72:1644":{"id":"b:2:2549-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:128","2:2553:1488"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:43:1704":{"id":"0:43:1704","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[158,0],"end":[178,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2313:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12176:32816":{"id":"2:12176:32816","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12184:22962":{"id":"2:12184:22962","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41594:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12149:23618":{"id":"2:12149:23618","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11986:418","str::splitn":"2:12146:23616","self::pattern":"2:11783:2308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43677:2333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11803:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:33476":{"id":"5:5519:33476","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:72:1644":{"id":"a:2:2683:220-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[18,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9219:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2557:128":{"id":"2:2557:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32104:6283","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:5513:11685":{"id":"5:5513:11685","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:32799":{"id":"2:12084:32799","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12172:32814":{"id":"2:12172:32814","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12206:32824":{"id":"2:12206:32824","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:32824"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43854:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12140:32806":{"id":"2:12140:32806","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11783:2308","str::split":"2:12131:23610","prim@char":"1:11986:418","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12143:32807"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43605:2336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:6177":{"id":"5:5529:6177","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12134:23612":{"id":"2:12134:23612","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11607:2311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12202:23505":{"id":"2:12202:23505","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39633:23499","Self::is_ascii":"2:12201:23504"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41594:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39633:23499","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:613":{"id":"0:79:613","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1702":{"id":"0:42:1702","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12087:32801":{"id":"2:12087:32801","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12085:32800"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1786":{"id":"0:66:1786","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[407,0],"end":[412,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1776":{"id":"0:65:1776","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[390,0],"end":[393,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12158:1686":{"id":"2:12158:1686","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11783:2308","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:418","str::matches":"2:12158:1686"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43759:2329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5512:33474":{"id":"5:5512:33474","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2305","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2305","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16:671":{"id":"0:16:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[19,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9189:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41738:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:42668:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:1650":{"id":"0:18:1650","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[30,0],"end":[30,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"Result","id":"2:41738:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12104:23602":{"id":"2:12104:23602","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12105:23603"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12161:32810":{"id":"2:12161:32810","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11783:2308","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:418","str::matches":"2:12158:1686"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43777:2330","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11803:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12181:32819":{"id":"2:12181:32819","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12081":{"id":"2:12081","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12082:816","2:12083:1739","2:12084:32799","2:12085:32800","2:12087:32801","2:12090:23500","2:12091:32802","2:12092:314","2:12093:23579","2:12094:1767","2:12096:23576","2:12098:23577","2:12100:23578","2:12102:32803","2:12103:32804","2:12104:23602","2:12105:23603","2:12106:1672","2:12107:5202","2:12108:4846","2:12109:30308","2:12110:30334","2:12111:26260","2:12112:32805","2:12113:30352","2:12114:23620","2:12117:23621","2:12120:23622","2:12123:2548","2:12127:2513","2:12131:23610","2:12134:23612","2:12137:23614","2:12140:32806","2:12143:32807","2:12146:23616","2:12149:23618","2:12152:32808","2:12155:32809","2:12158:1686","2:12161:32810","2:12164:32811","2:12167:32812","2:12170:32813","2:12172:32814","2:12174:32815","2:12176:32816","2:12177:32817","2:12178:32818","2:12181:32819","2:12184:22962","2:12187:23623","2:12190:32820","2:12193:32821","2:12196:32822","2:12199:32823","2:12201:23504","2:12202:23505","2:12203:23507","2:12204:23508","2:12205:23509","2:12206:32824","2:12208:6071","2:12209:32825"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12209:32825":{"id":"2:12209:32825","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:32825"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43872:2322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12201:23504":{"id":"2:12201:23504","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2542:2507":{"id":"2:2542:2507","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2516:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1714":{"id":"0:51:1714","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[188,0],"end":[190,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.911 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:1797":{"id":"0:68:1797","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[433,0],"end":[478,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:671":{"id":"0:76:671","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9189:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9178:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12190:32820":{"id":"2:12190:32820","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11803:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2552:128":{"id":"2:2552:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12085:32800":{"id":"2:12085:32800","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12155:32809":{"id":"2:12155:32809","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41594:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11803:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:30334":{"id":"2:12110:30334","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12109:30308"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43838:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:72:1644":{"id":"a:2:2700:228-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2249-0:72:1644":{"id":"b:2:2249-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2219"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12107:5202":{"id":"2:12107:5202","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11986:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43531:2316","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12114:23620":{"id":"2:12114:23620","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1758":{"id":"0:63:1758","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[327,0],"end":[380,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2318:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9434:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12083:1739":{"id":"2:12083:1739","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3321:1501":{"id":"2:3321:1501","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39425:4980","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2554-0:72:1644":{"id":"b:2:2554-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2557:128","2:2558:1487"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12103:32804":{"id":"2:12103:32804","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11992:1407","crate::ops::IndexMut":"2:2984:2638","str::slice_unchecked":"2:12102:32803"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:32817":{"id":"2:12177:32817","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5775:1465":{"id":"5:5775:1465","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2252-0:72:1644":{"id":"b:2:2252-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2254:22880"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:60:1738":{"id":"0:60:1738","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:72:1644":{"id":"b:2:3319-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1501"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:1719":{"id":"0:52:1719","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[200,0],"end":[226,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7268:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2313:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:1744":{"id":"0:61:1744","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[267,0],"end":[311,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12187:23623":{"id":"2:12187:23623","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41594:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11803:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2545:697":{"id":"2:2545:697","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2254:22880":{"id":"2:2254:22880","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:2344-0:72:1644":{"id":"a:2:2740:2344-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2609-0:72:1644":{"id":"b:2:2609-0:72:1644","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3373:11504","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:72:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2611:2503"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"5:5527:33477":{"id":"5:5527:33477","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12193:32821":{"id":"2:12193:32821","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11986:418","self::pattern":"2:11783:2308"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11788:2301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:5617:2896":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:579:12431":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:554:12427":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:21797:4940":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:2826:4481":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"10:44:4748":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:10390:3271":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8209:2315":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5737:16521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12878:3666":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:4236:4720":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10223:3247":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11642:3414":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11020:3353":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:21850:4941":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:8222:2325":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:43847:2309":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:10922:4798":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:7484:4552":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:632:5348":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:6171:16636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:2795:11695":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:7599:17586":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:46568:5278":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5025:15941":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:699:3039":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"9:450:17617":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:2791:11696":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:3183:29341":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:8321:6266":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4446:15879":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:46258:5257":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:1702:6215":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11168:5699":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:2470:6150":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10832:3337":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10377:3269":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:434:3067":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6607:17014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:21065:6334":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:12010:1134":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:5956:2839":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:878:2815":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11098:3362":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:40036:2321":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:30386:29960":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:1492:4721":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:14026:3988":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:12011:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:44294:11817":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:1523:4820":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:21994:4950":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:14163:4040":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:41426:4899":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:5979:16598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:44587:5225":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:2332:4136":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:39453:2494":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:9442:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:4556:15893":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:2523:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:9016:3187":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:8794:18695":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:8332:6252":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:40307:5121":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:532:12424":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"18:564:3014":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:21986:4949":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4456:15880":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"9:507:4801":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"14:165:17705":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:2390:6145":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:1411:4720":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:9223:3059":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:11547:5570":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4420:15876":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:44274:11811":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"18:652:3005":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:7073:18637":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:1858:4745":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"11:2194:34876":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:4908:15928":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:3385:4860":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:41789:4738":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:782:2810":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:9318:3189":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:7505:16105":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3301:5374":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:13448:3836":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:2141:4824":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:6931:4438":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:7351:2273":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:3867:4198":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:7553:4555":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6531:2794":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:10237:2331":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:500:12421":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"0:68:1797":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"17:10280:3251":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:14341:4091":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:4325:2859":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:1690:13333":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6136:15782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6008:16601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"15:288:17724":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:1638:13328":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:10581:3294":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:7525:3069":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:45842:5238":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:8771:18694":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:1118:33565":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:10812:3336":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:1845:4743":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:841:4720":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6357:4355":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:400:3064":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:2691:2571":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:6592:6299":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:9926:3223":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12994:3685":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9518:3199":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13604:3884":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:8740:18693":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"18:538:3012":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:1184:3072":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:7465:4848":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:5567:4170":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:10097:3238":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:8143:3049":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8150:5377":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:9561:3200":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:20672:30294":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:13029:3697":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:5531:4873":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6289:4348":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:1776:2644":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:10529:3285":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:8021:4613":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:14054:3996":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:0:2131":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:3162:11523":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13981:3977":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:0:2125":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:7474:4180":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:3183:34009":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:5471:2832":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:477:2885":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10799:3334":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:40457:4882":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:2168:34878":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:21109:6150":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:5320:2807":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:950:4729":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4887:15926":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:21678:6150":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"9:330:17672":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:10144:5547":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:11406:2927":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:2152:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:6081:2832":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:582:6070":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:9971:5152":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:5363:18628":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"9:426:17619":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:6932:2850":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5829:16589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:2572:2873":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:40123:2321":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6128:4304":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4733:6208":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6554:4375":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:44306:11813":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5610:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7525:4182":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7693:4175":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6711:17017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5051:15943":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:3894:4199":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:2752:6328":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:40138:2608":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:12428:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:7231:11672":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:11429:5380":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:8302:5492":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:7494:4553":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:2737:2573":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:44007:5204":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13055:3699":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:8192:5124":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:42184:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4678:6191":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:47919:5330":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11111:5524":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:2690:5792":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:4441:4203":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9604:3201":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4428:15877":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:11935:5576":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:12711:3622":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9274:2315":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2811:11698":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:10057:4738":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:587:12432":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:6536:5414":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:20946:6348":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:40367:5127":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12077:3499":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:3379:5142":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6516:4373":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:5130:2839":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:3238:4745":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:6639:2807":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:35:2643":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:45719:5233":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:11556:4928":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10568:3292":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:39260:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:42585:30321":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:39386:2266":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5673:18629":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:14:1648":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:12792:3657":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8844:5525":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:7529:16109":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:8086:4618":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5890:16593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:4335:2494":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:9344:34961":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:2962:11468":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:12333:3567":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:760:2644":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:4965:4219":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4800:15916":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10066:3233":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4664:15901":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:41460:6187":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13096:3704":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:11769:2931":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11290:18701":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11164:3372":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:40115:2322":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:4436:15878":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:488:12419":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:2779:4476":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:6502:4371":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12254:3533":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:5841:2646":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:10430:3274":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"14:221:4718":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10175:3201":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:8010:6176":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4535:15890":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:42366:2290":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:43573:2331":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:42104:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:7099:5541":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:41831:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2799:11697":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:13683:3900":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:47662:5320":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:9875:6150":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:2748:2577":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:8166:4626":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:4179:6221":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:6057:17743":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:7384:4841":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:14350:4095":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:207:2805":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:5959:4275":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:21210:6150":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"9:393:17618":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6939:18636":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:42345:2280":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:6888:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:3373:11504":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:6589:12302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:4785:4213":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:2783:6329":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:14205:4053":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:48021:5336":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:10293:3252":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12921:3672":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:2773:11694":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:2180:34875":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:9665:34960":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:1928:656":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:40377:5129":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:3494:2279":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:4616:15897":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13847:3941":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:8228:5492":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:39633:23499":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:4409:2497":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6540:4174":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:5849:16549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:9032:3188":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:5626:4232":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10313:3254":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:7745:6107":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4754:15910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:11099:5523":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:2762:4475":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:7914:5445":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:2421:4145":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:2787:6331":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:8899:18698":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:1649:13329":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:42065:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13574:3878":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6724:4413":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:12003:1510":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"9:237:5170":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:21241:6344":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11388:18703":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:2215:2855":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12539:3600":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:44082:4931":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7463:4549":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"12:0:2126":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11266:5569":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:48060:5337":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:4628:22981":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"11:1826:2646":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:11788:2301":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5799:16586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:629:4815":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6214:4333":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:10033:4720":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:7876:5443":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:4323:4201":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:2931:2348":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:2781:4160":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:2495:5364":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:8547:4720":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"0:51:1714":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"16:5382:3187":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:4166:6220":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:43090:5176":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:5793:4251":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:44278:11814":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:20627:30126":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:2035:4821":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:39364:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:8893:5528":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:4957:6257":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:13673:3899":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:7247:1697":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:13697:3901":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12966:3679":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:657:1697":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12552:3306":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:9048:3054":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10957:3348":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:2516:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:7022:2912":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:582:2260":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:12004:1507":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:7043:2899":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3993:6197":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:4785:29929":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:43453:5189":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13870:3944":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:4128:28666":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:5553:4167":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:1917:4857":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:1565:2646":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:4263:4866":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:8841:18696":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:10330:2333":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:2611:4153":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10906:3341":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12691:3621":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:41594:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"11:1121:4737":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:3935:6192":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:1603:13326":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:39245:4975":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:1841:5359":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6303:4166":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:6571:18634":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:6834:11667":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:6560:1697":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10883:3340":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:7906:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:311:34882":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5044:15942":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11600:18705":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:40870:4889":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:8000:5447":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:44562:5224":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:9806:18712":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:14150:4034":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:47945:5332":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11144:3370":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:46410:5261":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:2850:11704":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:1569:13322":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:14037:3989":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:7250:12378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:914:4739":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:4186:2493":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:22392:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"18:481:3003":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:30356:4970":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:43408:5121":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"0:59:1729":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"2:21111:6336":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13069:3700":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:6438:4362":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:20674:30291":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:5414:4226":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:22098:4963":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:6983:3049":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:5075:5393":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4568:15894":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:47846:5324":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:1696:13334":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10499:3280":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:22722:4967":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4872:15925":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11210:3378":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:14177:4046":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:12006:1509":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11323:5427":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:3513:2646":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:6015:16602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:2855:11705":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"10:36:34873":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:9706:3203":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:6671:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:43777:2330":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:1557:13321":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:123:12102":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:482:12418":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:358:5345":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:45897:5241":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:7407:4279":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:2838:11701":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:20979:6343":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:12412:3580":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:6022:16603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:8997:18678":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:47904:5329":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:6063:2900":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:667:4721":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:41909:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:9664:2872":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:7663:5431":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:6648:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:9966:3201":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11815:3449":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:7440:2840":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"11:736:4724":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:4630:22983":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:5556:6282":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:5747:5408":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:4737:6211":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:4041:6200":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:12161:3527":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:8747:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4984:15937":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13732:3911":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8495:6276":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:6796:17022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:43421:5186":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:927:4725":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:47893:5328":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:22011:29949":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:47412:5317":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:44329:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:4987:2832":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:8125:4622":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:7339:2272":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:43677:2333":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"7:0:1554":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:5388:5398":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4496:15886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:2049:4823":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:2243:33637":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:10358:4919":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:5342:4225":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:6598:17013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"15:306:17725":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:1629:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:6197:4326":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:13513:3871":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:7414:4844":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:8005:5448":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:6606:2909":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:256:3061":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:2567:4151":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:10654:3301":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:47873:5326":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:8860:5527":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:41730:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:9278:5359":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:5977:12021":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:5925:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"18:609:3022":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:40157:2610":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:10410:5522":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:2265:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2471:11532":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:43809:2325":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"11:1517:4740":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:10453:2919":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:5940:4268":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:119:12101":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:7631:4560":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:12005:1508":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4955:15934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8874:5403":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:7284:1697":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:1672:2807":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:4814:6207":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:836:4729":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:40327:5123":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:12007:1506":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:4:1019":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:11038:2923":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11007:3352":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:11131:5694":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:4144:4864":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"0:72:1644":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"1:7765:4971":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:8804:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13803:3929":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:2223:34053":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:22623:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:7367:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13659:3896":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:10994:3351":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12318:3562":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:7930:4821":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:2399:4144":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6427:4361":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:755:3053":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:7331:34953":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4704:15904":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:1631:13327":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"11:644:4738":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:7193:1697":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:9899:3221":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:5424:5400":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:2558:2890":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:1755:4854":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:1442:1697":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"0:42:1702":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"17:11992:3484":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:872:4723":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7665:4184":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"9:177:17685":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7568:34950":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:1681:13332":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12148:3523":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12502:3596":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13719:3905":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"11:986:4731":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4626:15898":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11127:3401":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:30316:2634":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:43838:2310":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:2900:4165":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:7536:5573":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:45860:5239":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"14:0:2127":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6332:4352":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:10558:2920":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:653:12480":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11955:3478":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:5067:4222":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:21215:6335":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:2380:6140":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13043:3698":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12631:3613":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:2926:17770":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:547:12426":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9118:3056":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:44524:5219":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4469:15882":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:43361:5182":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:43939:11500":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5793:16585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:42875:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13787:3925":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:1820:2640":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:42887:5170":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:22689:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:8310:5501":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"11:365:2799":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:574:3005":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:2816:11699":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:10125:2311":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:7277:2350":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11968:25557":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:11997:645":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13937:3966":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:1973:3073":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:39418:4979":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:614:34967":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:10458:3276":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:5553:6281":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:4811:799":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:2162:11716":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:11952:26900":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:7523:16108":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:21131:4939":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13125:3707":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:43659:2334":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13435:3829":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:22557:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:4380:2860":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:43863:2321":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13155:3375":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:8949:18700":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:7329:2349":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:2740:2344":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:6044:34782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4695:15903":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:43705:2327":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:6018:18632":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:43623:2335":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:40197:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:44133:11501":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:45689:5232":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:6640:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:2637:4154":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:1558:4720":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:4620:4209":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:885:4724":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:47064:5286":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:22032:29968":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:531:3009":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4729:15907":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4506:15887":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:11803:2302":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:10818:28759":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:5364:2306":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:2980:2637":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:30550:29967":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:44350:5216":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:944:4728":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2174:5893":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:9681:2873":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:21935:4943":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7592:18639":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:1636:4853":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11109:3366":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:9016:5537":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:8868:1697":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:3979:6195":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:40150:2609":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:14236:4061":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5994:16600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:6386:5412":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:3503:26990":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11335:28671":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:11696:3421":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:2690:2343":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:11044:2924":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:11559:28804":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:40448:4881":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:854:4738":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:6957:2854":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:44119:5206":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12089:3500":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:474:12417":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:32140:4971":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"11:793:4739":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"13:0:2120":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:6815:4427":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:41532:5155":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:40202:5118":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:4761:671":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:4436:2496":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:7184:2642":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:11572:4929":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:0:2130":{"crate_id":17,"path":["object"],"kind":"module"},"1:3519:6168":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:11566:5428":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:40103:2615":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:2925:2346":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9821:3211":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:8993:22960":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:7866:5442":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:10555:3290":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:9477:2292":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:7546:16111":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6834:17025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:2920:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:5689:4238":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:1503:4722":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:9225:2289":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:42223:4909":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:671:3035":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:9231:2287":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:11533:4927":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4463:15881":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:23169:4850":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:1590:13324":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:908:2644":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:10520:3284":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:39198:11469":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:2313:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4291:15865":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"14:40:3449":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:9485:34966":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:4735:6210":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13368:3774":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:1709:13335":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4587:15895":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:8428:2301":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7763:18640":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7515:4554":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5807:4252":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:6484:4363":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:14282:4075":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:3737:4823":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:5972:4125":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:46234:5256":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:4723:15906":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"2:42690:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:42650:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:10323:3256":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:6675:5412":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:4475:15883":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:6850:17027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:4818:15918":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4315:15867":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4938:15931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:2363:1640":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"1:4150:6218":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:6187:5411":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:6250:4346":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:10931:3343":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10351:3266":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:10361:3267":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:7707:4562":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:8138:4624":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:2821:11700":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10110:3239":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:4489:15885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:8283:6222":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:7679:4185":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:7433:4540":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"11:1831:2644":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:4341:15869":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12106:3508":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:4196:2832":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:864:1697":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:2689:4156":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12053:3495":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:9149:5543":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:4258:4865":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:9233:2288":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:1782:5357":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:10786:3333":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:11987:1526":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:5493:5402":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:44471:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4992:15938":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4716:15905":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:590:3015":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:4506:4205":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:6740:11675":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:4693:6251":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:8294:5499":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:3220:4191":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:5612:4228":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6175:4311":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:956:4730":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:2857:4163":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10671:18798":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:4076:4738":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"0:66:1786":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"2:30372:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:10253:3249":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6789:4426":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4483:15884":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:8816:5523":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:3929:6193":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:11045:3355":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:0:2129":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:7889:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:1138:33981":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:43463:5190":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:4389:2495":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:9850:18713":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:40428:4876":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:21049:6150":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:4049:6202":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13620:3887":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:9096:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:5368:2307":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:4368:15870":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8564:5521":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:3777:4196":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:573:12430":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:9028:5539":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:11351:2313":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4854:15923":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:45565:5227":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13894:3951":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:3669:6188":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:41679:5157":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:20860:11716":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:5028:4221":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:403:34887":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:12009:1564":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:7658:5429":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:47968:5333":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:46804:5282":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:21464:6349":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:13991:3980":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:6977:4449":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:43555:2332":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:21568:30129":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:7540:16110":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:11797:2303":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:1536:13319":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"0:0:2012":{"crate_id":0,"path":["strsim"],"kind":"module"},"1:11308:5425":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6868:17028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43371:5183":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10266:3250":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:2133:3077":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:49866:6351":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:3141:11706":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:14395:4101":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:12676:2641":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:4605:2601":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:1506:13315":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:32144:4972":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"14:160:4711":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4685:15902":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:47600:5319":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:40042:5111":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:8542:18679":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:7575:16115":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:7661:11671":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:6872:4176":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:3583:4720":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:20657:30293":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:723:4723":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:3178:4743":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4973:15936":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"7:32:17603":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:7753:4564":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:6790:2651":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:615:2278":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4380:15872":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11234:3380":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:40489:4883":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10609:3297":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:7761:5439":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:7130:28667":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:2962:17771":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:43976:5200":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:1911:13500":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:1045:4462":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8202:5140":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:3455:5378":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:9475:5440":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:13591:3879":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:5301:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:12366:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"17:11467:3400":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:44310:5694":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:7517:16107":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:8234:5494":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:41489:30309":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:4618:6197":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13427:3826":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:62:12047":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:7727:6076":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11753:3433":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:5955:16596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4787:15914":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:6441:2646":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4389:15873":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4944:15932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:2510:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:2364:6135":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:5818:2898":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:40470:5135":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:1822:1697":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:7854:5440":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4794:15915":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:7738:5436":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:8605:18677":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:3635:3096":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:40405:5130":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:14189:4049":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:4592:4208":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:12394:3579":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:7313:34954":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:933:6079":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:43109:4912":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:3212:4742":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4908:6250":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:11260:5420":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:9442:34959":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8975:5530":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:2825:4162":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:8938:6304":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10943:25554":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:562:12428":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:11996:643":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:40877:4890":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:10305:5401":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:5767:16583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:2131:2824":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:3441:4193":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:12584:2883":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5015:15940":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:9887:3219":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:2759:4159":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"18:80:22648":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:9050:25399":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:2921:2345":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:1077:4737":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"11:695:4722":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:5740:5405":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:9178:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:7564:16114":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:55:4604":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"11:97:34881":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:2352:4142":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"11:2186:34880":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:3042:17772":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10621:3298":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11416:3396":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:9614:34957":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"9:52:17635":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:3647:1697":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:40336:5124":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:1611:2801":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:1818:5358":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:3802:2644":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:7799:4572":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:7539:4183":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13914:3958":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:44574:4747":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:40349:5125":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:2170:33665":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6130:16634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:22425:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:14329:4089":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:640:6073":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:3025:4188":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10845:3338":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7445:4541":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:41987:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:3580:4194":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:10753:5441":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:41662:4738":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12133:3517":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6900:4435":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:5877:16591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13167:3714":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5987:16599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8288:6223":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:4396:4202":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:6232:4343":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:45759:5235":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:9475:3198":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:4113:4863":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12303:3558":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:14315:4082":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:44282:11816":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:2049:4731":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:7609:17587":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:707:2303":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1545:13320":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11943:3475":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:12174:3528":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"18:719:3044":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:47808:5323":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:2804:4477":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6705:17016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12017:3486":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:5980:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:40358:5126":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"0:24:1671":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"17:12479:3591":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:6726:17019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:44532:5221":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:1562:1697":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11371:3394":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4833:15920":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:7263:4840":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:47270:5316":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14044:3991":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11832:3452":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:41568:4902":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:6463:2908":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:40287:5120":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5008:15939":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13557:3876":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:40079:2612":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:42613:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:11905:3469":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"18:681:3036":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"0:18:1650":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"typedef"},"17:10339:3262":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13707:3902":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:10518:5374":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:3731:5380":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:4032:4200":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:44286:11815":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11979:3482":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:43333:5178":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6841:17026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10148:3241":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:22590:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:5863:16550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:491:3004":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:3171:4720":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:45611:5229":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12727:3627":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8478:5515":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:8553:5520":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:3224:5371":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"14:31:4711":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:39439:4520":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:46136:5252":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:5439:5401":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:352:5344":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:40164:2611":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:4764:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:9071:5695":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:0:2121":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:1717:13336":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11428:3397":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6886:4177":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:40419:5133":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:5651:4171":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10544:3289":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:3181:30562":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:898:2646":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:4476:4204":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12004:3485":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:47998:5335":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12618:3611":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:9777:18711":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:39320:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:40687:4888":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6239:34956":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:6028:16604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:2243:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:4010:4862":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:9468:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:7558:16113":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:30444:29975":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:4401:15874":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:9952:3178":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:2164:3080":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:1257:4462":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10249:3248":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:42625:4591":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:22524:2618":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"11:749:2646":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13639:3888":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:43351:5181":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:7576:2914":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:12001:747":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:7855:18641":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:39276:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:10275:4917":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:40214:29954":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:2960:33579":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:11783:2308":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:4524:15889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:6539:6297":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:44362:11827":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"11:1068:4735":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4550:15892":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:690:3038":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11623:3411":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:42352:2281":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:630:4720":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"11:399:34892":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:9188:26590":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:40277:2861":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"9:486:17616":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:9296:3063":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:4328:15868":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7061:4461":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:8115:5486":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:1663:13330":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:660:3029":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:9866:3214":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:20846:6342":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:2743:2575":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:2519:4149":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:9101:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:43434:5187":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:5964:2896":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6456:4169":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:47522:5318":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13964:3973":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:12000:746":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:46090:5251":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:6156:16635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"15:394:17735":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5058:15944":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:41443:4901":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:4365:2834":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:7451:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:20810:6340":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:44302:11812":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:10234:6285":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:6372:4168":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"13:110:34939":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:43854:2320":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:45589:5228":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:2507:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:3058:3092":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:40093:2614":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11991:1377":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:4468:6224":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40244:6118":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:46914:5285":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:30125:6189":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:9913:3222":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:1569:2644":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:11573:5428":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:4996:4220":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:1520:13317":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11150:5419":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:40063:29948":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10038:3231":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:44489:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3186:25991":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12346:3569":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:10766:5562":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:9399:3197":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:1765:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:20902:6347":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:4841:4215":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:1495:13313":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10471:3277":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:40051:2613":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:41645:1660":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:4428:2834":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:4562:6242":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"13:226:34893":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:2355:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:10161:3242":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:1746:30322":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"9:357:17632":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8354:5387":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:7547:2645":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:2910:6084":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11852:3462":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6470:4186":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10511:3283":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:3233:11467":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:4814:4214":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:44167:2337":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5882:16592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:41870:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"11:1501:17700":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11498:3401":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13854:3942":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:12379:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10199:3246":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:44187:2338":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10633:3299":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:44290:11819":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12118:3511":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:4395:2832":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:1103:4736":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:9179:2279":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:923:4722":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:9409:34964":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:728:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:12573:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:8455:5170":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:2928:2347":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:6811:6332":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:40659:5140":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:9214:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:40387:4869":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2634:5366":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:42641:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:11329:18702":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:45741:5234":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:43342:5179":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6347:18633":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:7684:2920":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:8159:5379":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"18:636:3028":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:644:3005":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11241:18825":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:40899:5142":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:12401:30900":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:14301:4080":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12035:3494":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:45657:5231":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:9482:2293":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:8711:18692":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5994:18631":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:4928:4218":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:1666:1092":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:1426:4738":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11354:3155":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:3734:5381":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:3512:6148":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:8043:4614":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12457:3590":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:1733:13337":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13882:3950":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:3168:11522":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:43605:2336":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:7227:11673":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:43541:2315":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:43282:5177":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13179:3721":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:4868:4216":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:4310:5385":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:2246:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:42668:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:6427:5413":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:14359:4097":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:276:2305":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:40926:4895":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:2373:4143":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:43499:2324":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:12621:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:6350:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:10202:4916":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13862:3943":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:4034:2807":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:3222:5370":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:2984:2638":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:7622:4559":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6775:17021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12566:3605":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6573:13273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:6487:2807":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:8659:18691":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:44481:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:42026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:44154:5211":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:4230:5384":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10863:3201":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:46188:5254":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11199:3377":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:3196:11466":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41712:5159":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:40437:5134":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11056:18823":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"14:187:17712":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4963:15935":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4895:15927":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:6980:5827":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:805:6079":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:5408:5399":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:2803:4161":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:42359:2289":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10051:3232":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:8322:6265":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"11:1048:34874":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:2373:1639":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"18:727:3047":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:41670:1697":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:8980:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:6618:17015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:7586:16116":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"0:61:1744":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"16:2715:4157":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:8632:18690":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"10:0:2124":{"crate_id":10,"path":["adler"],"kind":"module"},"6:4781:15913":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:11957:6077":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9875:3216":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:47864:5325":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11726:3425":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:4027:6198":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8852:4720":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:43105:30070":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:2443:4146":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4374:15871":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:4564:4207":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:40230:5119":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12646:3616":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6688:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:44144:5207":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8405:5512":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:10512:5370":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:7712:6075":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:2513:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"7:79:17610":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:1595:13325":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"15:0:2128":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:10743:22969":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:7295:17399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:2060:4733":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5775:4246":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:494:12420":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:1464:4723":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:7859:5441":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11520:3085":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:11264:3385":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:46356:5259":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:10075:5358":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:13332:3743":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7511:16106":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"14:7:4711":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:32231:2578":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:9036:5541":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:2318:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:9571:34963":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11189:3375":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:7255:5157":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4842:15921":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:4770:15912":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6805:17023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:14259:4074":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:20655:30289":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:1302:4737":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:8210:4520":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:32104:6283":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:5121:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:39460:4983":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9840:3213":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:14216:4058":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:10164:4915":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:1482:4739":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10403:3272":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:46850:5283":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:4632:22985":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:11985:941":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12354:3571":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8830:5524":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4917:15929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:6290:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:3113:5367":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:6625:6252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:3519:3084":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:10123:3221":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:21919:30339":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:5882:4262":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12365:3574":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:42897:5174":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:6139:2883":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:21:684":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:25979:4851":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11591:3375":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:9885:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:11990:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:20808:6150":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:6896:2911":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:12864:3665":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13016:3696":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:1527:13318":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4740:15908":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:11496:4924":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:1732:11727":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:43443:5188":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10013:3229":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12769:3648":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:9223:2280":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:3295:4192":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:12936:3676":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12671:3618":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6160:4309":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:498:2824":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:41948:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:11341:26694":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"11:817:4728":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13949:3969":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7255:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:119:2795":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:3671:2807":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:5233:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:10082:2332":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43819:2326":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:2378:6139":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:7012:4453":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:9227:2290":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:21459:6341":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:919:4721":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:3722:4821":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:39300:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:10876:4921":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:13999:3981":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12605:3609":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:3836:5382":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:5805:16587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:2219:6131":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:9977:3202":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11293:5424":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:261:3062":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10094:25665":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:7657:6082":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:2970:33581":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:41797:1697":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4929:15930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:895:4720":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:5589:4875":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:2212:5363":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:7374:26891":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:11872:3463":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:43990:5203":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10969:3349":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:2105:18756":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:285:34884":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:844:4730":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:11993:1491":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:13778:3924":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44298:11818":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:40505:3026":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:45990:5248":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13830:3933":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:9367:4911":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13109:3705":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12826:3660":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:96:22649":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11272:3387":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:14417:4107":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:12009:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:10322:25669":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"9:0:2123":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:1500:13314":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:10961:5525":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:10788:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:7038:4459":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11027:2922":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11992:1407":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:7362:18638":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:39342:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:12008:793":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:1011:2807":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:1543:2832":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9528:34962":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:41509:29947":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13548:3872":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:9939:3225":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:7223:2819":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:40673:4887":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:44545:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:14380:4100":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:21556:4937":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12891:3667":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:2959:2567":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:2201:2272":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8215:2332":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:9198:26582":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:11743:2323":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:40529:5137":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:2362:6134":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:5074:15946":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10748:29152":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:5614:2650":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:12453:4935":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:11337:4922":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:7733:5355":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:9111:5418":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:43382:5184":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11542:3403":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:42145:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:822:2813":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:13971:3974":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8906:6303":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:4698:4210":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:42595:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:6820:17024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4395:15717":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:635:5350":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:7292:1697":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:14007:3983":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4606:15896":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:13492:3866":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:43513:2319":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:40918:4893":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:46212:5255":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5068:15945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2349:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:11999:745":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:41721:11771":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:10724:5556":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:2164:11717":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:149:2792":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:4045:11465":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:40893:4891":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:46020:5249":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:5843:4259":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:44055:5205":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:22077:30310":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13771:3922":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12757:3646":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:2705:2499":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:6986:4452":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:10597:3296":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:3217:34006":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12982:3683":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:4166:2832":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8387:6261":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:9990:3228":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46644:5280":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:10344:4918":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:9023:5538":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:8922:6302":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:11854:11494":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:3965:6194":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:2465:4147":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:5301:4224":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9744:34958":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:14403:4104":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:39446:4982":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:10798:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:45635:5230":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10981:3350":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:22048:29945":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:7849:3135":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:22491:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"11:1818:4720":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:6787:30474":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8276:5383":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:2832:4482":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:9166:5544":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:9189:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:3395:3083":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:1574:4742":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"0:52:1719":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"2:10316:2334":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:1068:4733":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:2663:4155":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"11:798:4725":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:8910:31139":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:4004:2646":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:3934:2832":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:10486:3279":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:624:34969":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:11470:5381":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:7025:4456":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:7922:5446":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:43759:2329":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4862:15924":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:11767:3434":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11250:3382":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:5704:4241":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6658:4399":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13140:3711":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:21234:6150":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:40131:2320":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:11984:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:5590:4172":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:526:12423":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:21903:4942":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:4949:15933":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:5639:4237":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:3204:4744":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:1852:4744":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:9083:3055":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:10931:5402":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:46387:5260":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:11808:2300":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:515:3002":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:5100:4223":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8986:5533":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:4753:4212":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:261:2807":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:5771:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:3346:6173":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:2922:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:20642:30126":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"0:25:1675":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"0:19:1653":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"17:12952:3677":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10444:3275":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:5967:16597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:41806:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7505:4181":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"11:1538:4741":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:7639:5346":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:11989:1054":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4748:15909":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:6396:4359":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:3330:2644":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:6850:4431":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:21243:4939":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:8252:4633":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:1273:4733":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:41403:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:9229:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:6067:16606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6317:4350":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:13303:3723":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:2874:4164":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6386:4358":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:2519:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:1591:4745":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:673:6074":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:11986:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:5044:5393":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:45545:5226":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:43829:2312":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11888:3467":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:12526:3597":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:2589:4152":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:1430:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:21971:29979":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:47983:5334":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:8872:18697":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6323:4351":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:599:34968":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:6651:1707":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:43723:2328":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:1075:3070":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:8915:31352":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:7654:2299":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:6155:2904":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:1288:4731":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4382:5386":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11568:18704":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:8323:4907":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5775:16584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11155:3371":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:3262:5372":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:2885:2893":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8961:5529":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:7552:16112":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:43961:5195":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:2966:33577":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:3987:6196":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:21680:6337":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:14227:4059":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:41654:4720":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:8537:5388":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:6308:6425":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:3998:4861":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:968:4462":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:3596:4738":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:10918:5439":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:3437:5495":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:45790:5236":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"11:332:2797":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:4724:4211":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4810:15917":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:14197:4052":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:39159:11521":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:521:22661":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:12851:3663":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:2314:4134":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4650:15900":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12659:3617":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:46614:5279":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13083:3703":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11074:3085":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:43872:2322":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"0:60:1738":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"2:42905:5175":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:22656:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:8176:18642":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:568:12429":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11034:3354":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7240:34955":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12579:3606":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6692:18635":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:40480:5136":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:10843:4920":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:46490:5262":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12065:3498":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7584:4558":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:6771:2650":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:506:12422":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:9219:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:5398:3188":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13923:3959":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:9440:141":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"17:13905:3955":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4037:6199":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"11:1027:17699":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4304:15866":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:2461:5794":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46166:5253":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:2590:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:10330:3259":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:30350:2635":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:4490:6225":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10808:5379":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:4543:15891":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:14102:4033":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:541:12425":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:4899:6249":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:22458:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:1513:13316":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:5737:18630":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:7595:2916":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10303:3134":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:9716:34965":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:9696:2878":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:1473:4724":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10417:3273":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:7476:4849":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:12435:3583":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"0:73:1645":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"6:5900:16594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10945:3347":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:9130:5419":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:9434:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:504:3068":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:6864:4433":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:9734:3204":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6077:16607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:46309:5258":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9153:3057":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11491:5382":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:46042:5250":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4764:15911":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:20614:2260":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:507:3005":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11998:748":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"14:202:11502":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:2846:11703":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:21117:6338":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6667:4400":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:42858:5166":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:1921:2277":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:5773:5409":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:12002:743":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:5720:4242":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:42850:2295":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:45879:5240":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"11:1012:4733":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:6423:5141":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:6744:17020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11967:3479":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:2962:33580":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:0:1399":{"crate_id":1,"path":["std"],"kind":"module"},"2:5383:2832":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:13456:3837":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:8798:5522":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9655:3202":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:1102:33980":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:47724:5321":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:11123:28757":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:7278:17398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:2293:17744":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:2497:4148":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:41781:4720":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:22110:6190":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:2767:4472":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:1586:4744":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7833:4576":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:11243:2925":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:3078:2639":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4638:15899":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:5836:16590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12905:3670":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5080:15947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:1580:4743":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:1575:13323":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:6242:2896":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:6565:12468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:7213:2646":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:7531:2644":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:47884:5327":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:40884:5141":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:11187:5418":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:8924:18699":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4824:15919":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:47770:5322":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:6800:2652":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:2737:4158":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11118:3367":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:10515:5372":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:6720:17018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:3303:5375":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:46726:5281":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:42866:2294":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:7398:29954":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11454:3398":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"18:113:22650":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:4536:4206":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:45944:5242":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:3744:4195":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:10778:5442":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:12815:3658":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:8152:4187":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:766:22660":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6713:4412":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10080:3235":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12592:3608":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:4463:418":{"crate_id":2,"path":["core","char"],"kind":"module"},"17:12377:3576":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:7463:17558":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13566:3877":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:5624:2897":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:551:5347":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:5916:4119":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:7638:6150":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:1673:13331":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:22084:4962":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:1838:4742":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:4900:4217":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:4158:6219":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:7698:31137":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:41545:5383":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:9221:2281":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13957:3972":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:1892:2276":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:7233:34007":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:6036:16605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:40183:2607":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:40519:4885":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:43531:2316":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:43525:1643":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:2541:4150":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:736:22659":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7289:4499":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:8328:5503":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:13749:3916":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:595:12433":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2757:6330":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:3810:4197":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:9480:2918":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:11084:3357":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:7272:17397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:11607:2311":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:30920:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:20993:11716":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:7201:4839":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:9598:2869":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"8:0:2122":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7739:4173":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4696:6224":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:13757:3919":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:8068:4616":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:5374:5394":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:14015:3984":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12186:3531":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:30948:2260":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:46880:5284":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:2594:5365":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13795:3927":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:41738:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:12424:3582":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:1059:4731":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:3189:25994":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:5990:4877":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:40396:4872":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"0:43:1704":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"1:4791:2894":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:21032:6339":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:20858:29790":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"11:2033:4462":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:45820:5237":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5818:16588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:3409:2832":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6915:34951":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:9106:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:22359:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:3264:5373":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:8171:6149":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:11791:3448":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"0:65:1776":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"1:1843:5360":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11220:18824":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5920:16595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11669:3415":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:41580:4904":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:8239:6186":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"15:327:17729":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:8105:4621":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:8742:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:11321:11778":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:582:3069":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:9188:3058":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:40908:2867":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:3186:3081":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:1780:5356":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:47930:5331":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:527:2886":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:21959:4948":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6763:4425":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:2842:11702":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:530:4123":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"14:215:4716":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"0:63:1758":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"6:4848:15922":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11178:3373":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:12840:3662":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11924:3474":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:7427:4847":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:39425:4980":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:2405:2136":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:4413:15875":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4518:15888":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}