{"root":"0:0:1951","crate_version":"0.10.0","includes_private":false,"index":{"1:5580:2744":{"id":"1:5580:2744","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5581:4943"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:2541","5:846:2542","5:847:2543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8681:2306":{"id":"2:8681:2306","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8683:2488","2:8685:2489","2:8686:2490"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13722:54526":{"id":"2:13722:54526","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10581:2229":{"id":"2:10581:2229","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10582:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3828:138":{"id":"2:3828:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3830:692"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3823:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8196:3324":{"id":"2:8196:3324","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8197:57469","2:8198:57470","2:8199:57467","2:8200:57463","2:8201:57471","2:8202:57468","2:8203:57466"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2883:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2962:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3441:3188":{"id":"2:3441:3188","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3443:183","2:3444:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2858:97":{"id":"2:2858:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2860:2151"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:14056:139":{"id":"2:14056:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14057:183","2:14058:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3525:3220":{"id":"2:3525:3220","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13727:58629":{"id":"2:13727:58629","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15910:2087","crate::ops::IndexMut":"2:3675:2615","str::slice_unchecked":"1:15910:2087"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13708:58625":{"id":"2:13708:58625","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3431:2870":{"id":"2:3431:2870","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:183","2:3434:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10800:143":{"id":"2:10800:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10801:720","2:10803:2478"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3517:3216":{"id":"2:3517:3216","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3519:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3500:2796":{"id":"2:3500:2796","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3502:183","2:3503:361"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:86:1725":{"id":"0:86:1725","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[407,0],"end":[412,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"b:2:3278-0:93:1583":{"id":"b:2:3278-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:3271:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:4145:3342","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3280:2477"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:3834:3240":{"id":"2:3834:3240","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3836:52762"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10845:2240":{"id":"2:10845:2240","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10846:147","2:10847:31784","2:10848:54306"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3214:128":{"id":"2:3214:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39079:2943","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:38:1589":{"id":"0:38:1589","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[30,0],"end":[30,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47904:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:5502:2737":{"id":"1:5502:2737","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5503:56142","1:5504:56144","1:5505:56143","1:5506:56145"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3375:224":{"id":"2:3375:224","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:83:1697":{"id":"0:83:1697","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[327,0],"end":[380,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a_elems",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Elem"}}}}],["b_elems",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Elem"}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2921:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10800:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2883:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:39:1592":{"id":"0:39:1592","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[34,0],"end":[47,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"generic","inner":"Iter1"}],["b",{"kind":"generic","inner":"Iter2"}]],"output":{"kind":"resolved_path","inner":{"name":"HammingResult","id":"0:38:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2916:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13270:2274":{"id":"2:13270:2274","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13271:127","2:13272:54171"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13724:54527":{"id":"2:13724:54527","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13720:54525":{"id":"2:13720:54525","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47779:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13832:58649":{"id":"2:13832:58649","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15904:2082"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50059:2273","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23434:3268":{"id":"2:23434:3268","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24071:3264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23425:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8716:121":{"id":"2:8716:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8717:2482","2:8718:2483","2:8719:2484","2:8720:2485","2:8724:2486","2:8727:2487"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5430:2781":{"id":"1:5430:2781","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5431:56540","1:5432:2441"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8635:3329":{"id":"2:8635:3329","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8637:2533"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1031:2768":{"id":"1:1031:2768","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:2541","1:1033:3691","1:1034:53569","1:1035:53570","1:1036:53571","1:1037:53572","1:1038:53573"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5558:2740":{"id":"1:5558:2740","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5559:56522","1:5560:56523","1:5561:56524","1:5562:56525"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4096-0:93:1583":{"id":"b:2:4096-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4094:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4098:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3610:2304":{"id":"2:3610:2304","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3611:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10573:2224":{"id":"2:10573:2224","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10574:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12771:3698":{"id":"2:12771:3698","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12772:1599","2:12773:1716"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1352","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:59284","5:6165:2681","5:6168:59285","5:6171:59286","5:6183:59287","5:6184:59288","5:6185:2703","5:6186:53569","5:6187:53570"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2921:125":{"id":"2:2921:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2916:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13361:2251":{"id":"2:13361:2251","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13736:58630":{"id":"2:13736:58630","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50006:2277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13761:54558":{"id":"2:13761:54558","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15910:2087","prim@char":"1:15904:2082","`DoubleEndedIterator`":"2:8716:121","self::pattern":"2:13331:2259"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49760:2282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13709:58626":{"id":"2:13709:58626","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9153:2250":{"id":"2:9153:2250","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9533:2881-0:93:1583":{"id":"a:2:9533:2881-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9533:2881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6164:59284":{"id":"5:6164:59284","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2256","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8204:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2256","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8204:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23174:3420":{"id":"2:23174:3420","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23175:3267","2:23176:1259","2:23177:1284"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:80:1677":{"id":"0:80:1677","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:85:1715":{"id":"0:85:1715","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[390,0],"end":[393,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:23137:3146":{"id":"2:23137:3146","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23138:57589","2:23139:1237","2:23140:1238","2:23141:57590","2:23142:57591","2:23143:57592","2:23144:57593","2:23145:57594","2:23146:57595","2:23147:57596"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23150:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3474:3201":{"id":"2:3474:3201","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3476:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13731:3175":{"id":"2:13731:3175","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49718:2267","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13747:2522":{"id":"2:13747:2522","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47779:178","self::pattern":"2:13331:2259","prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2883:105":{"id":"2:2883:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2884:413","2:2885:415"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5518:2739":{"id":"1:5518:2739","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5519:4943","1:5520:6266"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3210:1429":{"id":"2:3210:1429","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47904:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3180:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3462:2871":{"id":"2:3462:2871","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3464:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10579:191":{"id":"2:10579:191","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10580:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3586:117":{"id":"2:3586:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3587:226","2:3588:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13730:1611":{"id":"2:13730:1611","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49712:1582","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13726:2812":{"id":"2:13726:2812","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15910:2087","crate::ops::Index":"2:3671:2614","str::slice_mut_unchecked":"1:15910:2087"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3446:3190":{"id":"2:3446:3190","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3448:183","2:3449:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9533:2881":{"id":"2:9533:2881","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14455:142":{"id":"2:14455:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14456:282","2:14457:523","2:14458:285","2:14459:1088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:97:665":{"id":"0:97:665","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10511:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6183:59287":{"id":"5:6183:59287","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1951":{"id":"0:0:1951","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1005,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:93:1583","0:38:1589","0:39:1592","0:44:1610","0:45:1614","0:62:1641","0:63:1643","0:71:1653","0:72:1658","0:79:1668","0:80:1677","0:81:1683","0:83:1697","0:85:1715","0:86:1725","0:89:1736"],"is_stripped":false}},"2:8741:2305":{"id":"2:8741:2305","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8742:800","2:8743:1678"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13707:1678":{"id":"2:13707:1678","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3869:3352":{"id":"2:3869:3352","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3209:128":{"id":"2:3209:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3180:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:3478:3203":{"id":"2:3478:3203","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3480:1112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10562:110":{"id":"2:10562:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10563:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4490:2674":{"id":"1:4490:2674","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4491:56046","1:4492:38222","1:4493:56048","1:4494:56047"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2867-0:93:1583":{"id":"b:2:2867-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2861:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2869:53335"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13826:53571":{"id":"2:13826:53571","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2861:98":{"id":"2:2861:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:53335"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2858:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:4098:1441":{"id":"2:4098:1441","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46307:3340","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13732:2817":{"id":"2:13732:2817","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49728:2266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89:1736":{"id":"0:89:1736","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[433,0],"end":[478,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13716:309":{"id":"2:13716:309","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15910:2087","`u8`":"1:15921:2096"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14071:151":{"id":"2:14071:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14072:183","2:14073:151","2:14074:774"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3653:3358":{"id":"2:3653:3358","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3655:242","2:3656:208","2:3657:57380"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23767:14557":{"id":"2:23767:14557","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23768:57341","2:23769:57342","2:23770:57343"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23762:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3458:3185":{"id":"2:3458:3185","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3459:183","2:3460:920"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3368:2302":{"id":"2:3368:2302","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2864-0:93:1583":{"id":"b:2:2864-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2858:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2866:2151"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13734:30479":{"id":"2:13734:30479","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15910:2087"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50025:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13814:58645":{"id":"2:13814:58645","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15904:2082","self::pattern":"2:13331:2259"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13350:2254":{"id":"2:13350:2254","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13352:3168","2:13353:929","2:13354:57309","2:13355:57310"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9160:3323":{"id":"2:9160:3323","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8196:3324","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13714:56544":{"id":"2:13714:56544","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12795:2264"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93:1583":{"id":"0:93:1583","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:94:1584"],"impls":["a:2:3404:2303-0:93:1583","a:2:3375:224-0:93:1583","a:2:3363:215-0:93:1583","a:2:9533:2881-0:93:1583","a:2:9532:2882-0:93:1583","b:2:3206-0:93:1583","b:2:2864-0:93:1583","b:2:4096-0:93:1583","b:2:2867-0:93:1583","b:2:3200-0:93:1583","b:2:3211-0:93:1583","b:2:3278-0:93:1583","b:2:3196-0:93:1583","b:5:6500-0:93:1583","0:96","0:98","0:99","0:35","0:37"]}},"2:13791:58637":{"id":"2:13791:58637","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8716:121","self::pattern":"2:13331:2259","str::match_indices":"1:15910:2087","prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49910:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13811:54567":{"id":"2:13811:54567","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15904:2082","self::pattern":"2:13331:2259"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:1641":{"id":"0:62:1641","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6750:2725":{"id":"1:6750:2725","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6751:54184"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6185:2703":{"id":"5:6185:2703","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13800:58641":{"id":"2:13800:58641","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13767:58632":{"id":"2:13767:58632","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:15910:2087","str::split":"1:15910:2087","prim@char":"1:15904:2082","self::pattern":"2:13331:2259"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49810:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13341:2252":{"id":"2:13341:2252","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13343:2254","2:13344:58345","2:13345:58346","2:13346:58347","2:13347:58349","2:13348:58348","2:13349:58350"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3280:2477":{"id":"2:3280:2477","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:4160:3346","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13825:3691":{"id":"2:13825:3691","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10575:2231":{"id":"2:10575:2231","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10576:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3371:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:94:1584":{"id":"0:94:1584","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[15,4],"end":[15,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:7607:2942":{"id":"1:7607:2942","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7608:53383"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13773:54562":{"id":"2:13773:54562","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13331:2259","str::splitn":"1:15910:2087","prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49864:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3505:3205":{"id":"2:3505:3205","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3507:183","2:3508:1243"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23237:2778":{"id":"2:23237:2778","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23227:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4415:2656":{"id":"1:4415:2656","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4416:3000","1:4417:53976","1:4419:53977","1:4420:53978","1:4421:2671","1:4422:53979","1:4423:53433","1:4425:53980","1:4426:2511","1:4427:2817","1:4428:2497","1:4430:2505"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4497:2677":{"id":"1:4497:2677","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4498:56336","1:4499:56337","1:4500:56338","1:4502:2676","1:4503:56339","1:4505:54555","1:4506:4001"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4415:2656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6652:2652":{"id":"1:6652:2652","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6653:54143"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10583:2230":{"id":"2:10583:2230","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10584:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3466:2872":{"id":"2:3466:2872","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3468:1368"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23386:14538":{"id":"2:23386:14538","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23387:6487","2:23388:57573","2:23389:57574"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23379:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2952:179":{"id":"2:2952:179","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2953:420","2:2954:1578","2:2955:1579","2:2956:2479"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2921:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2962:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13733:30489":{"id":"2:13733:30489","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15910:2087"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50016:2263","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3180:232":{"id":"2:3180:232","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3182:128","2:3183:1428"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6654:2648":{"id":"1:6654:2648","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6655:56131"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5910:2258":{"id":"5:5910:2258","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:31540"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6650:2651":{"id":"1:6650:2651","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6651:53351"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3363:215-0:93:1583":{"id":"a:2:3363:215-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3363:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:63:1643":{"id":"0:63:1643","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[158,0],"end":[178,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2916:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13751:2487":{"id":"2:13751:2487","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13331:2259","`None`":"2:47779:178","prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3196-0:93:1583":{"id":"b:2:3196-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3173:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3170:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3199:2481"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10810:147":{"id":"2:10810:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10811:657","2:10812:1587","2:10813:55940","2:10814:55941","2:10815:55942","2:10816:55943","2:10817:55944","2:10818:55945","2:10819:55946","2:10820:55947","2:10821:55948","2:10822:55949","2:10823:55950","2:10824:55951","2:10825:55952","2:10826:1546"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3675:2615":{"id":"2:3675:2615","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3677:760"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3671:2614","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3823:229":{"id":"2:3823:229","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3824:183","2:3825:3240","2:3826:691","2:3827:374"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3828:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3823:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23101:3365":{"id":"2:23101:3365","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23102:3267","2:23103:57589","2:23104:1237","2:23105:1238","2:23106:1782","2:23107:57632","2:23108:57633","2:23109:57634","2:23110:57635","2:23111:57636","2:23112:57590","2:23113:57591","2:23114:57592","2:23115:57593","2:23116:57594","2:23117:57595","2:23118:57596"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23150:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9156:3322":{"id":"2:9156:3322","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4757:2751":{"id":"1:4757:2751","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4758:2788","1:4759:54194"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13831:2770":{"id":"2:13831:2770","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15904:2082"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50050:2272","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3102:3142":{"id":"2:3102:3142","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3101:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13802:58643":{"id":"2:13802:58643","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15904:2082","self::pattern":"2:13331:2259"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13361:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6581:2720":{"id":"1:6581:2720","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6582:6260"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13770:54560":{"id":"2:13770:54560","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13331:2259","prim@char":"1:15904:2082","str::rsplitn":"1:15910:2087"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49846:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3599:2682":{"id":"2:3599:2682","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3600:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3586:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[18,0],"end":[26,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:36:665"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:36:665":{"id":"0:36:665","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[19,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:10522:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47904:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:48842:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[28,0],"end":[28,29]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","provide","cause","type_id","description"],"trait":{"name":"Error","id":"2:3271:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3404:2303":{"id":"2:3404:2303","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13782:1625":{"id":"2:13782:1625","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15910:2087","self::pattern":"2:13331:2259","prim@char":"1:15904:2082","`DoubleEndedIterator`":"2:8716:121"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49946:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8873:158":{"id":"2:8873:158","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8874:1599","2:8875:929","2:8876:2491","2:8879:2492","2:8880:500","2:8882:2493","2:8885:2494","2:8886:2495","2:8887:2496","2:8888:2497","2:8890:1646","2:8892:2498","2:8893:2499","2:8895:848","2:8898:2500","2:8905:1737","2:8907:2501","2:8910:1629","2:8911:2502","2:8912:2503","2:8914:1647","2:8916:2504","2:8919:1320","2:8920:2505","2:8921:2506","2:8925:2507","2:8928:2508","2:8929:2509","2:8930:2510","2:8932:2511","2:8933:1661","2:8935:2512","2:8938:2513","2:8940:2514","2:8950:2515","2:8965:2516","2:8967:2517","2:8971:2518","2:8980:2519","2:8983:2520","2:8985:2521","2:8988:281","2:8995:299","2:9002:2522","2:9009:2523","2:9018:2524","2:9028:1021","2:9035:2525","2:9042:1578","2:9043:1579","2:9044:2191","2:9056:2190","2:9063:2189","2:9075:2188","2:9082:2526","2:9083:2527","2:9088:2528","2:9091:2529","2:9094:2530","2:9095:2531","2:9097:2532","2:9099:2533","2:9101:420","2:9104:2534","2:9107:1004","2:9110:2535","2:9113:609","2:9116:2536","2:9119:914","2:9121:833","2:9123:799","2:9125:718","2:9127:701","2:9129:2537","2:9130:2538","2:9138:2539"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3613:131":{"id":"2:3613:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3615:381"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3616:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6502:1409":{"id":"5:6502:1409","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3529:3222":{"id":"2:3529:3222","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3531:1244"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6186:53569":{"id":"5:6186:53569","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15910:2087"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13755:54555":{"id":"2:13755:54555","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:15904:2082","self::pattern":"2:13331:2259","str::rsplit":"1:15910:2087","`DoubleEndedIterator`":"2:8716:121","str::split_whitespace":"1:15910:2087"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49742:2283","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4094:68":{"id":"2:4094:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4095:1441"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13729:54548":{"id":"2:13729:54548","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15910:2087"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3906:3351":{"id":"2:3906:3351","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3616:132":{"id":"2:3616:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3618:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3619:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2916:185":{"id":"2:2916:185","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2918:609","2:2919:914"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3215:1428":{"id":"2:3215:1428","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47904:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:3180:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3534:3225":{"id":"2:3534:3225","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3536:1247"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6846:2785":{"id":"1:6846:2785","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6847:53611","1:6848:53612"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3511:3213":{"id":"2:3511:3213","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3513:183","2:3514:1246"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3470:3199":{"id":"2:3470:3199","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3472:900"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13706:800":{"id":"2:13706:800","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13764:58631":{"id":"2:13764:58631","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13331:2259","`DoubleEndedIterator`":"2:8716:121","prim@char":"1:15904:2082","str::rsplit_terminator":"1:15910:2087","str::split":"1:15910:2087"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49792:2287","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4145:3342":{"id":"2:4145:3342","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4146:2477"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13728:54547":{"id":"2:13728:54547","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15910:2087"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5524:2732":{"id":"1:5524:2732","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5525:53891","1:5526:53892","1:5527:4943","1:5528:53893","1:5529:3063","1:5530:3064","1:5531:53894","1:5532:1316","1:5533:53895","1:5534:53896","1:5535:53897","1:5536:53898","1:5537:53899","1:5538:53900","1:5539:53901","1:5540:53902"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5436:2783":{"id":"1:5436:2783","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5437:4442","1:5438:56544"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10577:2232":{"id":"2:10577:2232","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10578:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3811:3620":{"id":"2:3811:3620","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3742:2616","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3167:74":{"id":"2:3167:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3169:2480"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3271:128":{"id":"2:3271:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3272:2301","2:3274:2475","2:3275:2476","2:3276:2477"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13828:53573":{"id":"2:13828:53573","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6168:59285":{"id":"5:6168:59285","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13796:58639":{"id":"2:13796:58639","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3371:222":{"id":"2:3371:222","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13711:58627":{"id":"2:13711:58627","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15910:2087"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5906:2257":{"id":"5:5906:2257","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:437"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6472:2732":{"id":"1:6472:2732","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6473:56466","1:6474:53708","1:6475:53709","1:6476:53711","1:6477:53710","1:6478:53712","1:6479:53713","1:6480:53715","1:6481:4985","1:6482:53718","1:6483:53719","1:6484:53720","1:6485:53721","1:6486:53722","1:6487:53723","1:6488:53716","1:6489:53717"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:71:1653":{"id":"0:71:1653","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[188,0],"end":[190,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.911 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"b:2:3206-0:93:1583":{"id":"b:2:3206-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3180:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3176:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3209:128","2:3210:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13801:58642":{"id":"2:13801:58642","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6578:2735":{"id":"1:6578:2735","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6579:53671","1:6580:53672"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3200-0:93:1583":{"id":"b:2:3200-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3173:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3202:686"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:44:1610":{"id":"0:44:1610","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"HammingResult","id":"0:38:1589","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:72:1658":{"id":"0:72:1658","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[200,0],"end":[226,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2916:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:3363:215":{"id":"2:3363:215","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3483:3206":{"id":"2:3483:3206","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3484:183","2:3485:959"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13779:58634":{"id":"2:13779:58634","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13808:13052":{"id":"2:13808:13052","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13331:2259","prim@char":"1:15904:2082"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8672:152":{"id":"2:8672:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8673:1599","2:8674:1636","2:8675:775"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9155:2775":{"id":"1:9155:2775","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9156:56897","1:9157:56898","1:9158:56899","1:9159:56900","1:9160:56901","1:9161:37817","1:9162:56896"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10569:120":{"id":"2:10569:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10570:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:221":{"id":"2:3372:221","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6224:2720":{"id":"1:6224:2720","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6225:3063","1:6226:3064","1:6227:6259","1:6228:53445","1:6230:53449","1:6232:53446","1:6233:53447","1:6235:53448"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10512:2220":{"id":"2:10512:2220","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10513:1546","2:10514:54274","2:10516:2373"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6344:2771":{"id":"1:6344:2771","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6345:56510","1:6346:56511"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3211-0:93:1583":{"id":"b:2:3211-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3170:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3180:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3214:128","2:3215:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6246:2723":{"id":"1:6246:2723","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6247:56312","1:6248:38372","1:6249:56313","1:6250:56314","1:6251:56315","1:6252:56316"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13823:3460":{"id":"2:13823:3460","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:13270:2274","FromStr::Err":"2:13270:2274"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47904:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13270:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13270:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23048:3419":{"id":"2:23048:3419","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23049:3267","2:23050:57589","2:23051:57819","2:23052:57820","2:23053:57821","2:23054:1782","2:23055:57823","2:23056:57824","2:23057:57825","2:23058:57826","2:23059:57827","2:23060:57828","2:23061:57829","2:23062:57830","2:23063:57831","2:23064:57832","2:23065:57636","2:23066:57833","2:23067:57342","2:23068:57341","2:23069:57343","2:23070:57590","2:23071:57591","2:23072:57592","2:23073:57593"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23150:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3742:2616":{"id":"2:3742:2616","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3744:58394","2:3745:58395","2:3746:54564"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8631:3327":{"id":"2:8631:3327","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8633:2532"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13776:58633":{"id":"2:13776:58633","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13744:54566":{"id":"2:13744:54566","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13331:2259","prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13735:4001":{"id":"2:13735:4001","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49996:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3164:75":{"id":"2:3164:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3166:310"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13737:30474":{"id":"2:13737:30474","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50034:2260","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81:1683":{"id":"0:81:1683","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[267,0],"end":[311,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"a:2:3404:2303-0:93:1583":{"id":"a:2:3404:2303-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3404:2303","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3199:2481":{"id":"2:3199:2481","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3173:136"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13717:54528":{"id":"2:13717:54528","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15921:2096"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8668:137":{"id":"2:8668:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8670:689"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3521:3218":{"id":"2:3521:3218","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:79:1668":{"id":"0:79:1668","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[236,0],"end":[238,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6184:59288":{"id":"5:6184:59288","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8459:220","`Box<str>`":"5:444:2256"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2256","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8204:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14539:2618":{"id":"2:14539:2618","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14540:56599","2:14541:56600","2:14542:56601","2:14543:56602","2:14544:56603","2:14545:56604","2:14546:2511"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3170:150":{"id":"2:3170:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3172:2481"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13718:1706":{"id":"2:13718:1706","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47779:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:6500-0:93:1583":{"id":"b:5:6500-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:6498:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:6502:1409"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13356:2253":{"id":"2:13356:2253","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13358:2482","2:13359:57791","2:13360:57792"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13350:2254","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13715:58628":{"id":"2:13715:58628","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13817:58646":{"id":"2:13817:58646","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13331:2259","prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6165:2681":{"id":"5:6165:2681","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13829:58648":{"id":"2:13829:58648","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15904:2082"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50041:2271","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2962:186":{"id":"2:2962:186","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2964:1004","2:2965:833","2:2966:799","2:2967:718","2:2968:701"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2916:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3375:224-0:93:1583":{"id":"a:2:3375:224-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3375:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6171:59286":{"id":"5:6171:59286","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3173:136":{"id":"2:3173:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3175:686"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4895:3417":{"id":"2:4895:3417","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4896:1599","2:4897:57167","2:4898:2492"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5510:2738":{"id":"1:5510:2738","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5511:4943","1:5512:56878","1:5513:56879"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3490:2794":{"id":"2:3490:2794","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3492:183","2:3493:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13798:58640":{"id":"2:13798:58640","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5572:2742":{"id":"1:5572:2742","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5573:53603"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4472:2220":{"id":"1:4472:2220","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4473:1587","1:4474:56187","1:4476:56188","1:4477:3924","1:4478:56189","1:4479:56190","1:4480:2373","1:4489:2511"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:24071:3264":{"id":"2:24071:3264","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24072:3267"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24067:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10571:2225":{"id":"2:10571:2225","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10572:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13741:54565":{"id":"2:13741:54565","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13331:2259","prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3452:3193":{"id":"2:3452:3193","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3454:183","2:3455:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6187:53570":{"id":"5:6187:53570","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15910:2087"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9532:2882-0:93:1583":{"id":"a:2:9532:2882-0:93:1583","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9532:2882","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13820:58647":{"id":"2:13820:58647","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13331:2259","prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13794:58638":{"id":"2:13794:58638","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3619:133":{"id":"2:3619:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3621:183","2:3622:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:100:609":{"id":"0:100:609","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13758:30356":{"id":"2:13758:30356","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13331:2259","prim@char":"1:15904:2082"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13123:2262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3247:116":{"id":"2:3247:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3671:2614":{"id":"2:3671:2614","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3673:183","2:3674:759"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5568:2741":{"id":"1:5568:2741","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5569:53892"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13827:53572":{"id":"2:13827:53572","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2866:2151":{"id":"2:2866:2151","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9532:2882":{"id":"2:9532:2882","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13705":{"id":"2:13705","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12784:1352","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13706:800","2:13707:1678","2:13708:58625","2:13709:58626","2:13711:58627","2:13714:56544","2:13715:58628","2:13716:309","2:13717:54528","2:13718:1706","2:13720:54525","2:13722:54526","2:13724:54527","2:13726:2812","2:13727:58629","2:13728:54547","2:13729:54548","2:13730:1611","2:13731:3175","2:13732:2817","2:13733:30489","2:13734:30479","2:13735:4001","2:13736:58630","2:13737:30474","2:13738:54564","2:13741:54565","2:13744:54566","2:13747:2522","2:13751:2487","2:13755:54555","2:13758:30356","2:13761:54558","2:13764:58631","2:13767:58632","2:13770:54560","2:13773:54562","2:13776:58633","2:13779:58634","2:13782:1625","2:13785:58635","2:13788:58636","2:13791:58637","2:13794:58638","2:13796:58639","2:13798:58640","2:13800:58641","2:13801:58642","2:13802:58643","2:13805:58644","2:13808:13052","2:13811:54567","2:13814:58645","2:13817:58646","2:13820:58647","2:13823:3460","2:13825:3691","2:13826:53571","2:13827:53572","2:13828:53573","2:13829:58648","2:13831:2770","2:13832:58649"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:97:665"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13738:54564":{"id":"2:13738:54564","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15904:2082","self::pattern":"2:13331:2259"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3373:107":{"id":"2:3373:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2883:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2916:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:93:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:100:609"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23762:3269":{"id":"2:23762:3269","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23763:1282","2:23764:1281","2:23765:1279","2:23766:1278"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23174:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3176:233":{"id":"2:3176:233","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3178:128","2:3179:1429"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11204:218":{"id":"2:11204:218","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11206:183","2:11207:1706","2:11208:54525","2:11209:54526","2:11210:54527","2:11211:759","2:11212:760"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11195:2727","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3202:686":{"id":"2:3202:686","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2869:53335":{"id":"2:2869:53335","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3495:2795":{"id":"2:3495:2795","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3497:183","2:3498:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13785:58635":{"id":"2:13785:58635","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13331:2259","prim@char":"1:15904:2082","`DoubleEndedIterator`":"2:8716:121","str::matches":"1:15910:2087"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49964:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:2253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13788:58636":{"id":"2:13788:58636","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13331:2259","prim@char":"1:15904:2082","`DoubleEndedIterator`":"2:8716:121","str::rmatch_indices":"1:15910:2087"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49892:2278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3436:2797":{"id":"2:3436:2797","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3438:183","2:3439:1367"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13805:58644":{"id":"2:13805:58644","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13331:2259","prim@char":"1:15904:2082"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45:1614":{"id":"0:45:1614","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[65,0],"end":[131,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8672:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2916:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1409"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"2:24239:3596":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10422:4858":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:2359:6167":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:13073:5364":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:637:4718":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:51584:3282":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:4183:2699":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:46602:2585":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:5331:42156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7449:4057":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10082:4478":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:3164:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:11174:3109":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:10565:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:53534:3292":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:23231:2776":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11265:3117":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10407:4463":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:5605:4103":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:15086:2814":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:3586:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:777:5989":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11068:4390":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:49864:2284":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:10941:2707":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10831:4401":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"0:93:1583":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"14:194:43922":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:5142:2463":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:539:38497":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4425:41544":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10253:4427":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:11515:3541":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13602:5490":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:14952:2860":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"0:38:1589":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"typedef"},"2:50265:3160":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:50006:2277":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:7947:4618":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:3458:3185":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:8553:2622":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:11384:2788":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:1456:2825":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:2619:3789":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:1909:4600":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:7121:4143":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"12:432:3955":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:15928:2103":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:4198:5630":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:7319:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:46849:3372":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:8849:4453":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:3908:5629":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10660:45766":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:1701:2821":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:11521:2788":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:6190:4122":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:2005:2621":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:50144:3151":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:2651:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:0:282":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4110:41512":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:3755:2929":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:15922:2097":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:24853:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:5752:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:161:38183":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:5166:665":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:11258:2753":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:1460:2826":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:14800:4656":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12758:5214":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:50122:3150":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13129:5370":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:15654:4659":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:2055:2663":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:46202:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:2981:4320":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:6129:42577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11937:5062":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:52120:6092":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:5572:2742":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:1533:2832":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:49662:3557":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:5297:2466":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:5488:42168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:6433:4127":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5216:42148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:14455:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:5974:38415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:47811:1599":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6643:4344":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3500:2796":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:12107:2860":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:5558:2740":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:6097:39325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:5412:4096":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:7721:4060":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:6654:2648":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10937:4918":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"13:233:60609":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:13016:5326":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:2397:6169":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12237:5112":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:22878:58189":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:13341:2252":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:14437:6267":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:3371:2688":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:11085:4459":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:10715:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:1567:39386":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:5948:4608":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:3478:4318":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:49760:2282":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4148:41517":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:15909:2086":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:10136:4839":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:13155:5376":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:6688:42948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11335:4384":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9240:4380":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:13123:2262":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7718:2627":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:4481:54273":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:47963:1636":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:1518:2833":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:5887:4291":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5288:42152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:6899:57262":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:6277:4123":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5274:42129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13708:5533":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:3371:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"9:41:3870":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:47779:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:973:2987":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:10448:53663":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:47302:6011":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:5743:3119":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:48803:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"14:56:4960":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:12327:4627":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:5518:2739":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:52614:3288":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:10806:143":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"9:1020:3887":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"9:809:2899":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1764:39404":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:2147:2791":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:7141:4145":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3042:3003":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13507:5468":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:11019:2753":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:53637:6140":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10058:4484":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:47904:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:15923:2098":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:46327:3415":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:15336:6273":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:11964:2788":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:3686:5626":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:6929:12650":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10476:4402":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13361:5427":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5204:42146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:299:4743":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"12:2412:60607":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:22899:58187":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:50701:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:49076:2243":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13859:5578":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12957:5274":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:4127:41514":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:6141:4120":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"12:1121:2832":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:46307:3340":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13472:5457":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:4488:1636":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"8:0:2053":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:32573:2612":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:1441:2621":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:3381:4629":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:3407:3717":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13595:5488":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13938:5598":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11856:2935":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:1296:3784":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:9446:4646":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"16:5443:4098":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:14414:53725":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:4472:2220":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13584:5487":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:50481:3578":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"12:2036:1636":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:48039:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:12716:5207":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:32607:2613":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:48081:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:46068:3246":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:24363:6020":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:3906:3351":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:1236:4748":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"12:1103:2831":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:49810:2286":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:7098:6174":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:12578:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:6931:4354":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:10934:2705":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"18:790:4496":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:5326:4091":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:47947:2788":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:7792:4085":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:7110:4142":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:10809:2926":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:4094:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:3840:3243":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:10723:3021":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:11408:2820":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"12:1784:4598":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11013:4924":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:10810:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:53732:6147":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:15044:2806":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:3981:41497":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:766:4730":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:25117:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9561:4392":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:4665:4603":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:46975:3382":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"12:856:2822":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:3613:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:46646:2579":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:6671:42947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"12:2032:2788":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"0:71:1653":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"17:2314:4467":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"7:38:43226":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:3106:58484":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10775:4906":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:46685:2271":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:53785:6150":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:1694:39397":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12557:5179":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:24439:37530":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:53176:3285":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:5217:4297":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:9160:3323":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:8929:45575":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:23227:2727":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:24310:6018":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"5:8407:3626":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13306:5414":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:3653:3358":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:7169:4064":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:11204:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"12:472:60596":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:49910:2279":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:4526:41555":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:997:2774":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:1719:2823":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:15924:2099":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:626:38507":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5547:41404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:3129:4321":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:4467:5637":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:15907:2084":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:56630:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:668:4511":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:15870:56570":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:46341:2462":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:9587:60621":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:15903:2081":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:50327:3163":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:13764:2934":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:2905:4308":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5293:42153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:6027:42574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4098:41511":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:4573:5639":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:2422:6171":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:4411:5635":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:52254:3316":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:1418:2822":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:3534:3225":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"12:466:60603":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:5344:409":{"crate_id":2,"path":["core","char"],"kind":"module"},"18:169:51870":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:46:60595":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11457:4960":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:49327:3689":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4075:41508":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"12:787:2824":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:4351:5633":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:7544:2936":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:13879:2935":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"14:189:5908":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7051:4137":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"12:2269:2832":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:11530:4980":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:3247:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:8423:3772":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:10658:2733":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:3470:3199":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:50469:3575":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:2135:2789":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:13953:5599":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4516:41554":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:46224:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4379:41538":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"9:963:3885":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:1276:3783":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:10663:2997":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:50526:3645":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:46095:3359":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:2284:3720":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:5362:4093":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:52828:3297":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:37923:2187":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:3177:4313":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:24460:37522":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:4493:41552":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9131:45580":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:48560:2232":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:3671:2614":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:47828:2820":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:2484:45666":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:11681:2284":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:4757:2751":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"5:3825:2788":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:11154:53669":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"5:3110:58621":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:51624:6084":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:5906:2257":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:46565:6048":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:4036:4600":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4142:41516":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:294:4742":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:5685:4107":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:10717:6013":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13755:5551":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:3103:4322":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:1108:6162":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:4149:3029":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:22833:2187":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:13407:3153":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"12:162:3954":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:6750:2725":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6060:4088":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"18:720:4720":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:3511:3213":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13440:5449":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:4454:41548":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:56578:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:12771:3698":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:12496:5170":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:47845:3630":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:8986:6176":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:8436:3773":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:8213:1636":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11671:5008":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"12:114:60599":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:1760:3781":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:12018:2853":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:47878:3632":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:11108:2759":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:10115:4481":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:14490:53628":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:5223:2462":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:47291:6065":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:24347:57017":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:15886:53350":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:3972:41496":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:7295:4054":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11002:4923":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:3474:3201":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:5998:4067":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:0:805":{"crate_id":6,"path":["libc"],"kind":"module"},"2:14147:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4160:41518":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4005:41499":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:52174:6094":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10464:4397":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:24505:37531":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10093:4479":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:9654:2252":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13180:5386":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:5156:3041":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"12:843:2821":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:13803:2936":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"12:750:2788":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:13361:2251":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:49481:3544":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:6243:42584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:49742:2283":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:11221:3045":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:7922:4613":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:3058:3008":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:48539:2224":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:1055:3723":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:9033:45577":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:13495:5465":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11511:2902":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"0:79:1668":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"17:13917:5595":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:23174:3420":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:0:2060":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13094:5369":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:13948:4655":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:50730:3355":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:56591:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:0:1343":{"crate_id":1,"path":["std"],"kind":"module"},"1:9673:4649":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:6016:42573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13481:5458":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:6482:53718":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:47887:37744":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:3340:4294":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:2512:4465":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:4346:41534":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:9396:4738":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7637:4148":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:47045:3392":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:6679:4347":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:49113:2899":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11907:5053":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7782:4056":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:14907:53626":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:3180:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:32613:3648":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:5923:4114":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10925:4917":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:49964:2281":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9279:6421":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:9004:45576":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"14:47:5908":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:13331:2259":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:10698:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:46865:3370":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"12:1256:2834":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11653:4999":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:11972:2848":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:46739:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12222:5109":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:46663:2272":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10445:4789":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:4372:2820":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10068:4373":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10291:4376":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:10988:4922":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:50190:3158":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"9:749:3822":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:3404:2303":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"0:89:1736":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"16:7415:4069":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5447:42166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:47257:6010":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:5609:3733":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:5698:4108":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:5303:4090":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:5530:4101":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:9259:4827":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:13433:54343":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:3265:4317":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:9155:2775":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7754:4151":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:3459:2690":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:2754:4295":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:10249:3528":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:23767:14557":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:48842:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:15904:2082":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10015:4846":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"10:0:2055":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:10569:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:49581:3552":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:4392:41540":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:48916:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:10537:2799":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:10516:4861":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"13:121:43878":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:5524:2732":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:4143:3027":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12026:5076":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6896:41679":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:8192:2987":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"17:12646:5199":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:22880:58185":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:5959:4039":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:3801:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:24476:37532":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:696:2954":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:50316:3162":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13352:5426":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:2396:3785":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6717:4134":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10558:4867":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13345:5424":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12620:5197":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"12:1703:3966":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:3102:3142":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:5541:42195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:51784:3307":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:9883:60615":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"2:3446:3190":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:51661:6085":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:52151:6093":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:2285:3233":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:48900:2452":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:15918:2093":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:39115:3792":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:3436:2797":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8651:6176":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:3007:4310":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:10104:4480":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:6581:2720":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:10437:2955":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:5510:2738":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:53747:6148":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11890:5047":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:1601:2833":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13529:5473":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:11862:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12512:5172":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:51998:3275":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:8266:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:1531:39381":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:49633:3554":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:5721:4109":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:3828:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11563:4987":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:8459:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12360:5147":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:6846:2785":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"2:2861:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:5159:3042":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11754:5025":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:5582:42197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11381:4941":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:22861:57944":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"14:11:5908":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:39155:2547":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:14655:2784":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:618:38506":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11797:5041":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"9:603:43406":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"0:81:1683":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"17:10545:4865":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:49532:3547":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4198:41520":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:521:38494":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:6557:4131":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:56565:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3405:2683":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:22901:58190":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12543:5177":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:48546:2225":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11256:4934":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12674:5203":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:9153:2250":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:8872:3076":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:8196:3324":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"12:928:2823":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:8222:3775":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:49541:3548":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:15915:2090":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:5186:42145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11197:3110":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:9431:4739":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:11013:2276":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:2361:6168":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:6034:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:3297:4370":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6114:42575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11234:4455":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:7355:4049":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:46772:3627":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:7744:55913":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:1105:6160":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:1152:4600":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11354:4383":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10198:4855":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:11538:2905":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11640:4998":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:9873:4839":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:383:3752":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:5641:3113":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:14419:53697":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:39079:2943":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:5398:42160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:5033:3487":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11379:2889":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:7158:3383":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:8873:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:7144:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:14686:2939":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:51643:3271":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:4864:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:11314:4385":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:1600:39389":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:7878:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:3436:2789":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:24512:3663":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:1727:39401":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:2123:1636":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6907:4135":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:11433:2283":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:1673:2820":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:50016:2263":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:7935:1646":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:12660:5200":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:52022:3276":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9206:45581":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:7379:4071":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"9:927:43330":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:10323:4652":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:15925:2100":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:8716:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:3155:4312":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13257:5403":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:1405:2821":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"12:2404:60605":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4373:41537":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:9930:60618":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6331:3970":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:6130:4119":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:10048:4849":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:48797:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:15910:2087":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:50465:3576":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9183:4389":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:7741:4150":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11547:4982":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:6159:4051":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4315:41530":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10489:4860":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:4840:3143":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5260:42128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6012:4046":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:6873:3630":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:754:60627":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:3243:4316":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:4975:5652":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:46300:3245":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:10570:6185":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4474:41550":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:15409:3982":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:7944:2987":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"12:895:3949":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"12:2059:2790":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"12:2253:2831":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10340:4468":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:47035:3391":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:2914:3000":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12455:5164":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13147:5375":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:712:2187":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6173:4121":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:46692:2581":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3811:3620":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"12:2066:2791":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11603:4992":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:10913:4916":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:3369:2544":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:9706:4836":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:49652:3556":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:24787:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:4277:41526":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:4834:2866":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"2:28329:3332":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:4509:2788":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:32621:57024":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"2:3869:3352":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6482:4340":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:15360:53664":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:3948:2691":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:4709:4605":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:4287:41527":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:46819:4621":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:1477:2828":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10147:4852":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46829:6059":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:24919:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"12:1183:3951":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:634:38508":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"15:0:2059":{"crate_id":15,"path":["addr2line"],"kind":"module"},"0:83:1697":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"17:11102:45583":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:8720:2883":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:12097:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:782:4718":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4485:41551":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4242:41524":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:3466:2872":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:2792:4034":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:11195:2727":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:14252:57088":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:24331:3467":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:7207:4613":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"18:744:60626":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4270:3061":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:580:11561":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:14081:2698":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:10298:4650":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:3770:5628":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:88:38116":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:2764:584":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:50302:3161":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:4495:5638":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:0:2061":{"crate_id":17,"path":["object"],"kind":"module"},"12:2040:2623":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:50025:2261":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:15919:2094":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10364:4466":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:24952:2990":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:6342:4125":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:3823:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"0:62:1641":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"12:353:60600":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:6925:41683":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:8737:3089":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:53364:3289":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:11181:4933":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:51754:3303":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:8481:3709":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:23973:57947":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:50688:3584":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:52332:3304":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:10394:4464":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:23137:3146":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:50050:2272":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:4362:41536":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11985:5072":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"14:0:2058":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:49792:2287":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:513:38493":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:6250:42585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:50370:2289":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:3441:3718":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:9160:4456":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:53286:3305":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6035:4087":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:6914:41682":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:1489:2830":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:13049:3565":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:48417:3636":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:49560:3550":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:46887:3373":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:4316:5632":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:10522:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:10318:4401":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:48165:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:5751:3121":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:11874:2937":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:3478:3203":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6937:41685":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13404:5435":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:25084:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11725:5014":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:1733:3055":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:7607:2942":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13037:5335":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"12:399:3956":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13549:5479":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:15902:2080":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:50680:3583":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:2813:4325":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:8448:2884":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:50489:3573":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11125:2865":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"6:6943:41686":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:47836:1636":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:4145:3342":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:5567:42196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:8258:1636":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:1537:39382":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:14668:53348":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6089:4117":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:3877:41488":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:4581:3761":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"18:136:51868":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:69:2620":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12048:5085":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:10574:3792":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:8453:58483":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:547:4286":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:13452:5450":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:694:4512":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:866:4503":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12746:4937":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:3517:3216":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:1311:4485":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:49550:3549":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6643:38452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"9:692:3820":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:15059:2807":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:24387:3462":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5301:42154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:8348:2205":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:46246:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:545:38498":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:14816:4657":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:8954:4391":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12003:5073":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"12:2280:2833":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:46638:2273":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:4402:41541":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:9451:56520":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:12183:5104":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:1526:39380":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"12:2398:6487":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:13265:3056":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:56552:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13763:5552":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:9534:2969":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:5268:3495":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:3363:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:14106:57090":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:15914:2089":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:7659:4149":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:4440:41546":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:1397:1636":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:48207:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"12:1203:3952":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"15:248:3974":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:4160:3346":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:7067:6174":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:651:4506":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5366:42157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:5865:3051":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:46943:6060":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:1031:2768":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:7477:1636":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:672:38536":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13196:5389":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:3896:41490":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7184:4356":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:5238:43999":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:9646:60622":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:6246:2723":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10675:2999":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6518:4063":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:6652:2652":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6468:4128":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:46334:3416":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13873:5580":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:3610:2304":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:5639:4104":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:6908:41681":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:15191:2760":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:51453:3314":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:11091:2758":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"6:5311:42155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:8126:3424":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:11216:3044":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4067:41507":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:2152:2792":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:5151:3489":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:49946:2280":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:5516:4284":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6595:4062":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:23436:3267":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:15929:2104":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:13660:5532":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10975:4921":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:9583:4648":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:11769:5031":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:12005:2852":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:3366:4323":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12157:5101":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:3743:5627":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:4490:2674":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:8228:2623":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:4840:5648":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:14457:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:53628:6139":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:10983:2678":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:10304:4379":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:51375:3301":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10028:4847":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11474:4965":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:5668:4106":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:10949:4919":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:14182:6016":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13785:5557":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:9786:4838":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:4008:4751":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:46559:2272":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:11312:12647":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:24168:3595":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11986:2851":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10435:4399":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:53694:6145":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:6214:42582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:8681:2306":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12143:4879":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:6080:39322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:46586:3483":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:4765:4605":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:1146:9289":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:50173:3157":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:1721:39400":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:50059:2273":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:661:4510":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:11006:2283":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:52644:3291":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11914:53347":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:11130:4929":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:10922:2709":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:5705:9291":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"12:379:3957":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:48812:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:14424:2749":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:25519:3475":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:56617:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:39119:3366":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:7238:4068":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:15926:2101":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:6224:2720":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13908:5593":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:3176:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:23101:3365":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:3060:3009":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:14087:2696":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"0:45:1614":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"1:4220:2700":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:1544:39383":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:11689:5009":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:53824:6151":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4038:41503":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:49570:3551":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:12248:6170":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:3521:5625":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:5320:2465":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:11784:5037":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:4356:2706":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:1431:2623":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:3483:3206":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13233:5398":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13369:5429":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:14822:4658":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:8951:2952":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:14981:6269":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:10950:2673":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:4716:5644":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:10801:4435":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:10547:2835":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:7063:4138":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:32433:3658":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"12:1238:3953":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:3960:3776":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:5439:42165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:46915:3376":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:7312:2623":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:50337:3164":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:7427:2930":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"0:80:1677":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"17:9716:60620":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10436:2727":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6026:4044":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:11212:4457":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:4259:2696":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"0:86:1725":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"6:4179:41519":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:52568:3284":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:24820:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10166:4853":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:1606:39390":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8286:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:4895:3417":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5210:42147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6691:4133":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:10039:4848":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:4871:5649":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13565:5482":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"12:815:2825":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:5998:38374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4321:41531":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"12:0:2057":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:10244:3527":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:7461:2932":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:14358:3325":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:47264:2883":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:1452:2824":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:23290:3267":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:3373:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11932:6301":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"5:4308:4600":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:53426:3309":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6310:4124":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:3987:41344":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13463:5454":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:5419:42162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:152:51869":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5247:42151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:645:4509":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:47055:3393":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:4852:3144":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"9:469:43336":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:2970:1579":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"12:971:2829":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:5427:4097":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:23048:3419":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:6344:2771":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1669:39395":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:3402:4035":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:4803:5647":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13281:5405":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:51329:6082":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12442:5162":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:6205:42581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:9087:45579":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"18:774:4718":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:7702:4058":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:23961:2777":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:4942:5651":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:7200:4066":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:3525:3220":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:621:4717":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13840:5573":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:14539:2618":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9636:4835":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"12:2419:2205":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:7090:4140":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11142:4930":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11615:4995":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:6057:39348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:5941:4115":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:51483:3302":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:2266:4602":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:46896:3374":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:1662:39394":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13899:5589":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:12102:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:1578:2831":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:46957:3379":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11628:4997":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:50718:3357":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:4388:2663":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:11168:4931":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5149:42100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10127:4401":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:8219:3724":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:46874:2678":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:32773:57002":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:12616:6253":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"5:7551:4600":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:1558:39385":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:2654:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:11701:5012":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7281:4053":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:46142:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:3619:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:6775:3746":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:3743:4432":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4538:41557":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:5649:4105":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:4181:2698":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:3441:3188":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:586:38501":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12482:5167":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13271:5404":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11713:5013":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"12:183:3958":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:7441:2931":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"9:27:3869":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:12770:5221":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:12092:3081":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:11626:3543":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:9532:2882":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13573:5483":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:53657:6142":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6381:4061":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:10583:2230":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:50627:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11822:5045":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:50041:2271":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:4997:3486":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:13323:5419":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:2180:583":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:607:38504":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:13356:2253":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4356:41535":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7471:4045":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10488:2966":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:5735:3118":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2952:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:3905:4600":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:53034:3317":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:3554:2621":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:8360:2206":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12431:5161":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7309:4052":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13794:5559":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:3852:3244":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:52678:3273":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:6562:2623":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:13501:2888":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"15:269:3978":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13138:5374":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:53683:6144":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:47972:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12406:5157":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:829:4500":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:12073:3075":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:2980:1578":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:896:4505":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:5478:42167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"14:216:43928":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:2839:4306":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:1712:39399":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13721:5539":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:15908:2085":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:4296:41528":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13293:5408":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5390:42159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"14:244:5913":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6980:4136":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:46182:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:4903:5650":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:6902:41680":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:4628:5641":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:5430:2781":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12700:5205":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:23150:2727":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:11945:5064":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:681:4747":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:6728:2653":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:9578:4647":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"5:8204:2619":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"9:996:3886":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:23386:14538":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"16:3576:4757":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:10237:4747":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:11210:3043":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:11494:4975":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:4497:2677":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:2937:4331":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4230:41523":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:3907:41491":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10598:4870":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:15213:3041":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6120:42576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:565:38499":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:51976:3272":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"11:54:3941":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:13975:5605":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:50461:3574":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:10739:2691":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:25150:3599":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:52408:3311":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"7:0:1494":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:6472:2732":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:14651:6185":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:21:677":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:3616:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:11980:1636":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:593:38502":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:48830:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:1387:2820":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:6650:2651":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:51930:3287":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:3462:2871":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"12:933:2826":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:14:1587":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:10850:2241":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:3599:2682":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:13559:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:48123:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:157:38182":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:50637:6080":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12573:5183":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:1912:39539":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:6484:53720":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:46995:3387":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:3170:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:5528:2573":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:47820:2788":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:11922:5057":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10266:4373":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:11054:2755":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:9988:45628":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7131:4144":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"19:0:1001":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11305:4937":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:5460:4099":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:25018:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"0:94:1584":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"5:2843:3788":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"9:686:3818":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:49642:3555":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"7:85:43233":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"9:776:3867":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:3920:41492":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:50473:3579":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12093:5092":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:7739:2986":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:46725:2584":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:50645:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:8785:2880":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"18:837:2254":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:10899:4912":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:57926:6159":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:9361:4737":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:4222:2701":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4061:41506":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13515:5471":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:1576:39387":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:7208:4147":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:3314:4293":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:11308:2734":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:3402:2790":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:4782:2663":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:6229:42583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:15875:9290":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:14419:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:49846:2285":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:15074:2808":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:1256:58617":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:13012:3564":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:3051:4368":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:49996:2276":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:533:38496":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"9:234:3845":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:5240:42150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:11000:2266":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:53572:3312":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:10668:2749":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:11469:2901":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"18:811:4498":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11810:5042":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:9533:2881":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:1663:2788":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"9:900:43364":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:15916:2091":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:12130:5097":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:3494:4753":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:48864:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:11553:3542":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:51523:6083":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:5764:3122":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:783:4649":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:56195:3361":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"18:0:2062":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6504:4130":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:8875:2921":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:9275:4828":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7768:4055":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:3495:2795":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4340:41533":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:7369:4050":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:12126:2867":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:4081:41509":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4433:2672":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4434:41545":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:2911:2998":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:10554:10296":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:12070:5086":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:10814:2927":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:51854:3295":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:12795:2264":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:4036:2708":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:7604:2940":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:1704:39398":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4116:41513":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:9948:4841":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:2883:4326":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:10458:2964":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:10573:2224":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:5374:4094":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10851:4909":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:48291:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:13781:55919":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:14933:6305":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:5580:2744":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:12050:2855":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:47273:6063":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10211:4856":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:8432:57545":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:612:38505":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:14084:2700":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:49728:2266":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:10503:4403":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:12145:2868":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13817:5572":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:3960:41494":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8300:2850":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:12034:2854":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:53488:3274":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:1740:2825":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:6153:42579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:23434:3268":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:46158:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:3221:4315":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7155:4146":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:24422:6026":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:47066:2679":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11031:45582":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:9826:4401":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:2212:1057":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"18:849:4501":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:8470:3708":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"12:777:1636":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:11514:4976":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:3461:4319":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9064:45578":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"12:1682:3965":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:50514:2873":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"6:4048:41504":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:3505:3205":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:3675:2615":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"12:952:2828":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:10571:2225":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:9539:4454":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:12282:5120":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:14071:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:7048:3706":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:10579:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:47004:3388":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4020:41501":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"0:0:1951":{"crate_id":0,"path":["strsim"],"kind":"module"},"2:24067:2727":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11591:4991":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:48333:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:5566:4102":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:6268:42586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"9:722:3821":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:11667:2285":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:8244:58440":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:885:4504":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:47014:3389":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8200:2899":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:24538:3612":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13428:5443":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12921:5243":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:5436:2783":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:1072:2788":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:1088:2219":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:12587:4654":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:50485:3572":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:7247:4082":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:6533:4338":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4088:41510":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:50493:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:1680:39396":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:2959:4309":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:49712:1582":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:15092:2815":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:24414:6025":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:13735:5545":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:3114:58622":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4410:41542":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8458:3069":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"12:869:2623":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"0:39:1592":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"16:2733:4296":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:25051:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:12585:5185":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:2328:3786":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:4028:41502":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:15398:3982":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:46756:3626":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4308:41529":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:9530:3036":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:8005:4631":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"6:5982:39321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11042:2754":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:3742:2616":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:5983:3059":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:571:38500":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:3167:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:2187:6002":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46574:2586":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:12196:5105":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:15905:2083":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4464:41549":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:3966:41495":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:3490:2794":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:12087:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:3372:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:11910:53707":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:15345:53670":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"0:63:1643":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"2:49718:2267":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:6135:42578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:4381:5634":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:6099:4118":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:984:3722":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"9:0:2054":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"0:85:1715":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"1:14480:2673":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:10577:2232":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:46986:3386":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:8536:2621":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:12262:5114":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3101:2727":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:15274:3049":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:859:2959":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6665:42946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11452:2900":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12015:5075":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:5178:42144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11579:4988":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13167:5381":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11282:45584":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:10455:4398":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:51900:3283":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:601:38503":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:6105:3060":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5455:60568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"3:321:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"12:1666:3964":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:14473:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:8550:3079":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:6075:4048":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:8376:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:6639:3380":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:704:4718":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:6007:42572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:8301:1636":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:14368:3585":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2501:3418":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:6954:41687":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11409:4945":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:5378:42158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:6759:3733":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6656:4345":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:50350:2288":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"9:157:3837":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:12585:2997":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9796:60619":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:8274:3715":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:46616:2587":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4135:41515":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:48553:2231":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"12:2052:2789":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:49686:2275":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:8293:2849":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:9545:3037":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10187:4854":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:3381:2468":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:13088:3567":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:14399:2736":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:15917:2092":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:24526:3613":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:46966:3385":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"0:72:1658":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"13:0:2051":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:11742:5022":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:12469:5166":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:5861:4600":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:8631:3327":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1740:39402":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:3395:2788":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:4157:4439":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:10038:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:10575:2231":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:9676:60617":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:2858:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:2376:3803":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:10581:2229":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:11334:2726":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:5498:4100":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:6050:4116":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:10819:2692":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:8101:2987":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:51952:3290":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:23379:2727":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:2962:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11361:12651":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:3029:4311":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:50477:3577":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:7826:3415":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:56604:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:8393:3771":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:8295:1636":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4416:41543":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8615:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:51606:3286":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:49620:3553":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:5213:3494":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4012:41500":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9958:60613":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11902:2939":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:3431:2870":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5229:42149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"12:940:2827":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:4281:2623":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:1502:2831":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:49092:2242":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6604:4132":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:1634:39393":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"12:1162:3950":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11956:5067":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12687:5204":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:0:2056":{"crate_id":11,"path":["adler"],"kind":"module"},"6:1748:39403":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10390:4400":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:5405:42161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:2420:6170":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:4146:3028":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:15911:2088":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:5962:4611":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:46386:3444":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:23762:3269":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:5396:4095":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:10033:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:3077:4369":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:510:4744":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:3428:2791":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"9:1056:3880":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:10800:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:2921:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"0:44:1610":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"1:7475:2933":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:3104:2541":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:2481:2217":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:51309:6081":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:1729:2824":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:53648:6141":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:5426:42163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:32969:3335":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:51708:3315":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:6184:42580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:10531:9287":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13421:5442":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:2119:2788":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13747:5548":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:5713:3116":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:6340:2627":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:8902:45574":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12318:5126":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:8672:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:49607:3372":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:5568:2741":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11284:3043":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:4017:2621":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:51505:3306":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"12:880:2621":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:5855:4112":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:47076:3394":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:5283:3049":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:1588:39388":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:3933:41493":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:13627:2945":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:12892:5223":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:6979:43134":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:2510:2218":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:3521:3218":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:1447:2823":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:50159:3154":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:23237:2778":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:49084:6070":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:6486:53722":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:1684:1636":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:10516:9285":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:8375:2705":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:10530:4862":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:6949:4355":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:11429:2899":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:11925:53434":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:13522:5472":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"12:2072:2792":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"12:979:2830":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:7025:4040":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:3375:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:6967:43133":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:13612:5495":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7684:4059":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:8635:3329":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:2262:3229":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:23425:2727":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:46934:3378":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4256:41525":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:13350:2254":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:50457:3571":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:5273:4828":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:53668:6143":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:32673:57026":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:10610:4871":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"18:611:4507":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:14883:2937":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:10685:2750":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:4743:5645":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:10845:2240":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13539:5476":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:8451:3067":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:53762:6149":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:6851:2663":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11068:2757":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"16:4689:5643":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:51554:3294":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7079:4139":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:3529:3222":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"9:1075:3888":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:7787:4631":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:57905:6158":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:50034:2260":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:5726:3421":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12348:5145":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:5077:2461":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:52073:6091":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:37899:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:4775:5646":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:0:2052":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13215:5390":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10814:4436":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:1621:39391":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:853:2958":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:7839:2987":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"5:1547:2834":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"15:230:3973":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:14162:2966":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:49700:2270":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:1466:2827":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"14:231:3711":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:1374:2788":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:5289:4047":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:3070:3014":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:52490:3296":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:13270:2274":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12117:5094":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:10463:2985":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:7489:2934":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:2861:4307":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:607:4746":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:4660:5642":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:542:4021":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2276:3232":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:2130:2621":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:2390:2617":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:1626:39392":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:3883:41489":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:1610:2834":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:12194:3558":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:47086:3384":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:9920:4840":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:8236:3725":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:2141:2790":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:46905:3375":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"12:2392:60606":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12250:5113":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:2772:4332":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:10248:6274":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:47023:3390":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:10962:2675":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"18:857:4502":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10622:4872":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:48375:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:46706:2583":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:4599:5640":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:8741:2305":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:10223:4394":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12302:5121":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:11588:2282":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:729:60629":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:2543:4395":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:11709:3546":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:4332:41532":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10586:4869":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13887:5587":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:13414:6169":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:53709:6146":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:24399:3463":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:49323:3688":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5784:4111":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13331:5422":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4386:41539":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:10643:4874":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:5146:3488":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:5948:4305":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:3993:41498":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:9406:4645":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:6856:43107":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4208:41521":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:14056:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"12:764:2820":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12527:5176":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:50238:3159":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:6716:3381":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:12227:3559":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:7358:4600":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:444:2256":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:47997:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9326:4381":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4446:41547":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9466:4740":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:5348:4092":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:22846:57944":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:14915:2867":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:2916:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:46268:2199":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12383:5156":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4532:41556":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2883:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:11476:2262":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:7253:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:3199:4314":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10788:4908":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:5257:4827":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:49892:2278":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:11433:4959":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:14989:2947":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13029:5333":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12417:5159":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:10511:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:48249:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:5910:2258":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6490:4129":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:820:4499":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:1710:2822":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:7740:2628":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:12731:5211":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:13072:3566":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:6407:4126":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:4:986":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:51806:3310":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11276:3054":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:9517:2266":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:10240:4424":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7100:4141":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:2126:2623":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:13557:5480":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:46744:3625":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:14449:2999":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:5902:4113":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:10571:4438":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:10731:2689":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:24985:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:46925:3377":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2917:2671":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:3044:3004":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4055:41505":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12634:5198":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:6931:41684":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6858:4351":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:13774:5556":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:52378:3308":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:8021:3371":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:10562:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:10512:2220":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13961:5602":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:5745:4110":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:1592:2832":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:53610:3277":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:5502:2737":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:8502:3070":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7323:4070":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:3391:2546":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:3452:3193":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:3838:2820":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9836:60614":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:47955:2820":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:4415:2656":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:14895:2938":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:8668:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:11888:2938":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:49131:6076":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:3368:2302":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:48779:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:15921:2096":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:11695:3545":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:51399:3293":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11968:5069":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"12:1147:2833":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:51353:3313":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:46699:2582":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"18:801:4497":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12170:5102":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:5277:2464":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:9756:60616":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:3271:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:10962:4920":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4509:41553":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:11270:3120":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:2326:605":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:15927:2102":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:1483:2829":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:11290:3062":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:3284:2687":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:3173:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:12607:5196":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6630:4343":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:49101:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:5488:2663":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:6578:2735":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:739:4725":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:46626:2588":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:3834:3240":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:10993:2679":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:4261:2697":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6286:3971":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:3462:2792":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:9291:4736":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"12:2045:2621":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:9439:56519":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:12209:5107":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:46669:2580":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:49123:6075":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:9746:4837":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:24071:3264":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:47282:2706":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:3105:58623":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:4439:5636":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:9156:3322":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:51421:3281":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13247:5402":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"14:250:5915":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:527:38495":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4218:41522":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:4271:5631":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:1551:39384":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5176:5653":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:5433:42164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10874:4910":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:47896:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:11527:2904":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6549:4065":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13377:5431":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:1113:9288":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:15920:2095":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:24886:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:15253:3042":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"}},"external_crates":{"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}