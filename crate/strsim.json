{"root":"0:0:1948","crate_version":"0.10.0","includes_private":false,"index":{"2:11457:3368":{"id":"2:11457:3368","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11003:125","`FromStr`":"2:11002:2273"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48199:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11002:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11002:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11466:59679":{"id":"2:11466:59679","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4465:59679"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50340:2272","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75":{"id":"0:75","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:76:654"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2516:2479":{"id":"2:2516:2479","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2490:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11354:55677":{"id":"2:11354:55677","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48057:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11407:55717":{"id":"2:11407:55717","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2258","str::splitn":"2:11404:55715"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50145:2283","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:72:1580":{"id":"b:2:2513-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:2479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11462:52685":{"id":"2:11462:52685","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11461:52684":{"id":"2:11461:52684","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11392:55711":{"id":"2:11392:55711","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2258"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10865:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2531:126":{"id":"2:2531:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39299:2809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:11342:59654":{"id":"2:11342:59654","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11341:1675":{"id":"2:11341:1675","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11436:59673":{"id":"2:11436:59673","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11041:2258","prim@char":"1:12300:407"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11066:2250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11372:55719":{"id":"2:11372:55719","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2258"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:1665":{"id":"0:59:1665","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[236,0],"end":[238,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11395:55713":{"id":"2:11395:55713","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"2:11389:55709","self::pattern":"2:11041:2258","`DoubleEndedIterator`":"2:7079:119","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50041:2281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[18,0],"end":[26,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:16:654"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2241-0:72:1580":{"id":"b:2:2241-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:52652"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:72:1580":{"id":"0:72:1580","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[14,0],"end":[16,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:73:1581"],"impls":["a:2:7736:3005-0:72:1580","a:2:2676:224-0:72:1580","a:2:2726:2302-0:72:1580","a:2:7735:3006-0:72:1580","a:2:2662:216-0:72:1580","b:2:2238-0:72:1580","b:2:2585-0:72:1580","b:2:2517-0:72:1580","b:2:2523-0:72:1580","b:2:2513-0:72:1580","b:2:3321-0:72:1580","b:2:2241-0:72:1580","b:2:2528-0:72:1580","b:5:5372-0:72:1580","0:75","0:77","0:78","0:15","0:17"]}},"5:5111:60314":{"id":"5:5111:60314","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11463:59678":{"id":"2:11463:59678","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4467:59678"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50322:2270","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11398:59661":{"id":"2:11398:59661","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:7079:119","str::split":"2:11389:55709","self::pattern":"2:11041:2258","str::rsplit_terminator":"2:11401:59662","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50073:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66:1722":{"id":"0:66:1722","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[407,0],"end":[412,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2285:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:599"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11360:59658":{"id":"2:11360:59658","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2987:2614","`str`":"1:12306:1351","str::slice_mut_unchecked":"2:11361:59659"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:3006-0:72:1580":{"id":"a:2:7735:3006-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:3006","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5121:2927":{"id":"5:5121:2927","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2240:2147":{"id":"2:2240:2147","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5104:60312":{"id":"5:5104:60312","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2255","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2255","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1712":{"id":"0:65:1712","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[390,0],"end":[393,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2527:1426":{"id":"2:2527:1426","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48199:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2497:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61:1680":{"id":"0:61:1680","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[267,0],"end":[311,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:59669":{"id":"2:11430:59669","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:55680":{"id":"2:11351:55680","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12317:1447"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11460:52683":{"id":"2:11460:52683","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11419:59665":{"id":"2:11419:59665","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:7079:119","self::pattern":"2:11041:2258","prim@char":"1:12300:407","str::matches":"2:11416:1622"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50245:2280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11361:59659":{"id":"2:11361:59659","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12306:1351","crate::ops::IndexMut":"2:2991:2615","str::slice_unchecked":"2:11360:59658"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5372-0:72:1580":{"id":"b:5:5372-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5370:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5374:1405"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2726:2302-0:72:1580":{"id":"a:2:2726:2302-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:60:1674":{"id":"0:60:1674","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[252,0],"end":[257,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[28,0],"end":[28,29]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","type_id","source","cause","provide"],"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11435:59672":{"id":"2:11435:59672","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:53137":{"id":"2:11442:53137","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11041:2258","prim@char":"1:12300:407"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11368:57597":{"id":"2:11368:57597","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11367:57603"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50306:2260","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1581":{"id":"0:73:1581","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[15,4],"end":[15,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"kind":"plain","discriminant":null}},"2:11345:59656":{"id":"2:11345:59656","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11343:59655"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11362:55701":{"id":"2:11362:55701","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11363:55702"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11367:57603":{"id":"2:11367:57603","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11368:57597"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50297:2262","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5108:60313":{"id":"5:5108:60313","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79:599":{"id":"0:79:599","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68:1733":{"id":"0:68:1733","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[433,0],"end":[478,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee http://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:216-0:72:1580":{"id":"a:2:2662:216-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11363:55702":{"id":"2:11363:55702","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11362:55701"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11459:3689":{"id":"2:11459:3689","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2532:1425":{"id":"2:2532:1425","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48199:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2497:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:72:1580":{"id":"b:2:2517-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:672"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:24:1607":{"id":"0:24:1607","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[59,0],"end":[61,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"HammingResult","id":"0:18:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11401:59662":{"id":"2:11401:59662","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:11398:59661","prim@char":"1:12300:407","str::split":"2:11389:55709","self::pattern":"2:11041:2258"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50091:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:55314":{"id":"2:11348:55314","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10609:2263"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11389:55709":{"id":"2:11389:55709","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:11395:55713","self::pattern":"2:11041:2258","prim@char":"1:12300:407","`DoubleEndedIterator`":"2:7079:119","str::split_whitespace":"2:11367:57603"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50023:2282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11371:57607":{"id":"2:11371:57607","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50315:2259","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11364:1608":{"id":"2:11364:1608","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49993:1579","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:72:1580":{"id":"b:2:2523-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:126","2:2527:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11350:308":{"id":"2:11350:308","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11351:55680","`u8`":"1:12317:1447"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428:59668":{"id":"2:11428:59668","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5122:52681":{"id":"5:5122:52681","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11461:52684"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:59663":{"id":"2:11410:59663","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2585-0:72:1580":{"id":"b:2:2585-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2578:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3370:2652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2587:2475"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"a:2:2676:224-0:72:1580":{"id":"a:2:2676:224-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:25:1611":{"id":"0:25:1611","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[65,0],"end":[131,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:148","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:148","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2285:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:19:1589":{"id":"0:19:1589","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[34,0],"end":[47,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"generic","inner":"Iter1"}],["b",{"kind":"generic","inner":"Iter2"}]],"output":{"kind":"resolved_path","inner":{"name":"HammingResult","id":"0:18:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:148","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:148","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2285:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43:1640":{"id":"0:43:1640","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[158,0],"end":[178,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:148","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:148","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2285:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[13,16],"end":[13,25]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2672:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2587:2475":{"id":"2:2587:2475","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3382:2651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11340:788":{"id":"2:11340:788","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12300:407"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:72:1580":{"id":"b:2:3321-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11356:55678":{"id":"2:11356:55678","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:59674":{"id":"2:11439:59674","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2258"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11385:2485":{"id":"2:11385:2485","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11041:2258","`None`":"2:48057:175","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42:1638":{"id":"0:42:1638","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[153,0],"end":[155,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76:654":{"id":"0:76:654","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[13,9],"end":[13,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8556:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8545:206","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11425:59667":{"id":"2:11425:59667","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"2:11422:59666","self::pattern":"2:11041:2258","prim@char":"1:12300:407","`DoubleEndedIterator`":"2:7079:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50191:2278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11343:59655":{"id":"2:11343:59655","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11404:55715":{"id":"2:11404:55715","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12300:407","str::rsplitn":"2:11407:55717","self::pattern":"2:11041:2258"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50127:2284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11454:59677":{"id":"2:11454:59677","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11041:2258","prim@char":"1:12300:407"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:59671":{"id":"2:11434:59671","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18:1586":{"id":"0:18:1586","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[30,0],"end":[30,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48199:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:2243:52652":{"id":"2:2243:52652","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11451:59676":{"id":"2:11451:59676","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2258"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11422:59666":{"id":"2:11422:59666","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"2:11425:59667","`DoubleEndedIterator`":"2:7079:119","prim@char":"1:12300:407","self::pattern":"2:11041:2258"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50173:2277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:3005-0:72:1580":{"id":"a:2:7736:3005-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:3005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11378:55338":{"id":"2:11378:55338","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11041:2258","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11413:59664":{"id":"2:11413:59664","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16:654":{"id":"0:16:654","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[19,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"2:8556:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48199:206","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"fmt::Error","id":"2:49097:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5103":{"id":"5:5103","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5014:1351","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5104:60312","5:5105:2906","5:5108:60313","5:5111:60314","5:5119:60315","5:5120:60316","5:5121:2927","5:5122:52681","5:5123:52682"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5119:60315":{"id":"5:5119:60315","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11465:2658":{"id":"2:11465:2658","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4468:2658"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50331:2271","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11358:55679":{"id":"2:11358:55679","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5120:60316":{"id":"5:5120:60316","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2255","`String`":"5:6992:220"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2255","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6737:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2519:672":{"id":"2:2519:672","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11366:3694":{"id":"2:11366:3694","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50009:2265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11339":{"id":"2:11339","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10604:1351","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11340:788","2:11341:1675","2:11342:59654","2:11343:59655","2:11345:59656","2:11348:55314","2:11349:59657","2:11350:308","2:11351:55680","2:11352:1703","2:11354:55677","2:11356:55678","2:11358:55679","2:11360:59658","2:11361:59659","2:11362:55701","2:11363:55702","2:11364:1608","2:11365:3293","2:11366:3694","2:11367:57603","2:11368:57597","2:11369:4004","2:11370:59660","2:11371:57607","2:11372:55719","2:11375:55336","2:11378:55338","2:11381:2520","2:11385:2485","2:11389:55709","2:11392:55711","2:11395:55713","2:11398:59661","2:11401:59662","2:11404:55715","2:11407:55717","2:11410:59663","2:11413:59664","2:11416:1622","2:11419:59665","2:11422:59666","2:11425:59667","2:11428:59668","2:11430:59669","2:11432:59670","2:11434:59671","2:11435:59672","2:11436:59673","2:11439:59674","2:11442:53137","2:11445:55720","2:11448:59675","2:11451:59676","2:11454:59677","2:11457:3368","2:11459:3689","2:11460:52683","2:11461:52684","2:11462:52685","2:11463:59678","2:11465:2658","2:11466:59679"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11381:2520":{"id":"2:11381:2520","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:11041:2258","prim@char":"1:12300:407","`None`":"2:48057:175"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52:1655":{"id":"0:52:1655","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[200,0],"end":[226,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:148","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7042:148","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2285:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11352:1703":{"id":"2:11352:1703","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48057:175"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11369:4004":{"id":"2:11369:4004","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50277:2275","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:3293":{"id":"2:11365:3293","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49999:2266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11370:59660":{"id":"2:11370:59660","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50287:2276","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5123:52682":{"id":"5:5123:52682","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11462:52685"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3323:1439":{"id":"2:3323:1439","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46527:2653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11448:59675":{"id":"2:11448:59675","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2258"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5105:2906":{"id":"5:5105:2906","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6992:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5374:1405":{"id":"5:5374:1405","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6992:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11432:59670":{"id":"2:11432:59670","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11375:55336":{"id":"2:11375:55336","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11041:2258","prim@char":"1:12300:407"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:59657":{"id":"2:11349:59657","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1650":{"id":"0:51:1650","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[188,0],"end":[190,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.911 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63:1694":{"id":"0:63:1694","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[327,0],"end":[380,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["a_elems",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Elem"}}}}],["b_elems",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Elem"}}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2290:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:8819:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:55720":{"id":"2:11445:55720","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12300:407","self::pattern":"2:11041:2258"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48055:177","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11061:2252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11416:1622":{"id":"2:11416:1622","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"2:11416:1622","prim@char":"1:12300:407","self::pattern":"2:11041:2258","`DoubleEndedIterator`":"2:7079:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50227:2279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11046:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1948":{"id":"0:0:1948","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1005,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:72:1580","0:18:1586","0:19:1589","0:24:1607","0:25:1611","0:42:1638","0:43:1640","0:51:1650","0:52:1655","0:59:1665","0:60:1674","0:61:1680","0:63:1694","0:65:1712","0:66:1722","0:68:1733"],"is_stripped":false}},"b:2:2238-0:72:1580":{"id":"b:2:2238-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2301","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2147"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2526:126":{"id":"2:2526:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2497:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:2:2528-0:72:1580":{"id":"b:2:2528-0:72:1580","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"StrSimError","id":"0:72:1580","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:126","2:2532:1425"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}}},"paths":{"6:4745:41946":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3230:2924":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9362:4435":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:4545:5754":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:7249:42081":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:9764:4958":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:54219:6272":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:8631:4824":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10394:4502":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:4115:41881":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11547:5183":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:12271:9524":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4096:41879":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"0:19:1589":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"3:0:431":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:8605:2221":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:13340:5649":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:7962:10517":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6735:4193":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:46919:2582":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:52001:3427":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:5219:4924":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:1737:3651":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:6828:1633":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:48258:1633":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:6376:4230":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4598:41929":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:50519:3275":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:47099:2698":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:11046:2251":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:9844:4549":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:50315:2259":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:2705:4343":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6052:4222":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11174:5093":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"12:777:3946":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:10426:6290":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:12282:54675":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12322:5318":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6704:4191":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5178:2945":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:2763:2777":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:11161:5091":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:646:38682":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:9283:4945":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:12266:55004":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:3263:5736":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:11763:2952":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:1500:39526":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:11041:2258":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:2300:4363":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:9261:2692":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6538:42997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:3010:4349":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:4403:3231":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:5981:4106":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:681:6283":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:690:4580":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:47200:2859":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:10609:2263":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:12323:1500":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:5646:2796":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:9637:6291":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:11947:3985":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:8599:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"18:590:4807":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6284:4182":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:46926:2583":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:1811:596":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:7150:6630":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:7929:4249":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:49155:2452":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:6095:1633":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:7214:42076":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:4191:203":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4726:41944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:1771:4425":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:6886:213":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:53929:3433":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:1211:2971":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:4530:2573":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:11268:3041":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:545:3112":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:49999:2266":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:3184:3339":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"14:215:6035":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6316:4198":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:513:38642":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12934:5530":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:6807:3700":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13203:5597":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:47529:6132":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:20303:3079":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:6791:1633":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:545:38645":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11271:5109":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:5472:42556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:7875:3115":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:5996:4219":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:21396:3589":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:1595:39537":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5510:42560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12103:5279":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:51724:6203":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:8448:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:5506:186":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:2026:181":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:21:664":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:53759:3430":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:54127:6268":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:50322:2270":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:2827:2673":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:2250:3128":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7435:4211":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:12304:306":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8639:3173":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:2285:184":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:931:2960":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:8701:4826":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:6409:42988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:2282:4043":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6109:4067":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:12756:5485":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:2476:3752":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:1395:2960":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:1077:3748":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:0:1343":{"crate_id":1,"path":["std"],"kind":"module"},"1:4302:2710":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:5582:42564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:21205:58210":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:9596:2757":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:12730:5479":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11315:5126":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"12:1836:1633":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:47570:6135":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4139:41883":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:5894:2981":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:8441:4526":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:49339:6192":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9885:4962":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:2758:2699":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:2959:3696":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12307:5314":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12337:4525":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13192:5593":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:1889:6292":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11288:5117":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4653:41936":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:51848:3455":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:4693:57830":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:1562:39534":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:21645:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:8973:3028":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:11704:4732":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:9384:6383":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:50945:191":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:8596:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:1962:4486":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:7909:4188":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:2497:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11873:5228":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"15:193:3977":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:10495:3042":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"11:44:3944":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:19981:2182":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:7825:4247":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12278:5311":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:5541:4084":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:8339:46087":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:46347:3406":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10520:5028":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:3404:2725":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:49923:2752":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4126:41882":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2335:1576":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"18:644:4805":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:54063:6264":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"12:1832:2692":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:1600:39538":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"0:0:1948":{"crate_id":0,"path":["strsim"],"kind":"module"},"2:1919:3068":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8217:3045":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:9389:3069":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4527:41920":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8435:2282":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:869:2692":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:6619:4235":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4200:41888":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10682:4529":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:48267:179":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3377:2894":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:49582:2735":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:8546:2217":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10321:4556":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8904:3024":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:1604:2692":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:1114:2971":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13214:5598":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:538:4592":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"12:834:2966":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4195:3479":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:8737:2827":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:3199:3359":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:20456:3313":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:4969:2826":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12964:5535":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6330:4228":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:2833:2676":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:11639:5199":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:5839:4100":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4551:41923":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:969:2963":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:9309:2750":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:7567:4199":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:2515:2914":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:2935:2305":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10182:5002":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:21297:57800":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:7057:3076":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:5348:6295":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4461:41915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:4505:3181":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:50597:3278":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11787:5216":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:5525:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11436:5142":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:2869:3048":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9433:4951":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5741:42578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:7426:2249":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:10668:53476":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:8774:4400":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:6277:39467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:20454:3410":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:20971:3314":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:48292:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12148:5286":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:11670:6309":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:11841:5224":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:5727:42576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:4585:3189":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:47578:6137":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:3147:3602":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:9820:4546":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:49378:6197":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:56960:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2784:2773":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:2672:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:6424:42990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:562:4834":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:9128:2663":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"0:66:1722":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"5:1594:4680":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:8295:46086":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4152:41884":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:8212:4523":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:4626:2894":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10207:5004":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:11863:3557":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:9239:2804":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4559:41924":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:47285:2871":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:51794:3434":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:1626:2694":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:9118:61219":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4575:41926":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:13134:5581":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:21711:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:9947:46276":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:4329:41903":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:8139:2916":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:52249:3436":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:12298:365":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4706:41942":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4437:41913":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:1608:39539":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:47140:2853":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:519:38643":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:2713:2544":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"0:43:1640":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"17:12836:5507":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11761:5213":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:2932:2304":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10245:5010":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11661:5200":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:5545:3707":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6298:4197":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"9:622:3833":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:7166:4035":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:5203:4923":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8412:2698":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:8822:61218":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:10546:46088":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:7059:3612":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:5561:3719":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13327:5643":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4335:41904":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:10332:4564":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:515:4590":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:9250:4942":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:6321:2628":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:52295:3424":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:5411:4074":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:53223:3438":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:2918:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:1637:2696":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:1123:2972":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:48482:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:7429:2994":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:3616:1633":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:5523:42561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:58321:6280":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:9568:2284":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:11847:3179":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:11235:5104":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11939:5253":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:8131:3151":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:11636:31656":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:49356:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5605:42567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:6017:3200":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:5574:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:7372:4380":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:6241:4226":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:7279:43557":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:47039:4699":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:6322:42987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11087:5078":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:3314:2911":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:7267:4239":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:8471:2837":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:8222:3046":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:9527:2755":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:5835:42607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:51979:3423":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:4441:3236":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:9377:2261":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:7736:3005":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:0:484":{"crate_id":2,"path":["core"],"kind":"module"},"1:7192:4720":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13572:5709":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:20047:58860":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:50774:3626":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:22407:3258":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:47551:2930":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11014:5061":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11684:5204":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:50041:2281":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8534:54663":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"17:10854:4485":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:5525:4083":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:49821:2746":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:12198:5303":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:1887:39686":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:9274:4944":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:4894:2709":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:6496:2980":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:4944:2256":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11500:5171":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:2385:3134":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:54078:6265":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:20049:58863":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:8066:3085":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:51900:3447":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:2805:2666":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:48520:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:46488:2197":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:8324:3519":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:1369:1633":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13580:5712":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:46889:2580":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:7945:2701":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:6516:2849":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:9577:4426":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:13024:5550":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:50618:3280":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:12315:721":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:2738:59068":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:12317:1447":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:6010:3198":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:3157:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:8505:2839":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5554:42529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:9339:4540":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:6509:42995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4257:41894":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:2822:2671":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:4986:4688":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:4519:5753":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:6761:2623":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4224:41890":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:54052:6263":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9700:4487":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:8749:6139":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:8911:61224":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:46527:2653":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:9370:3206":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"12:2190:61168":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"18:736:4584":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:6953:38597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"9:33:3882":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:5908:4693":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:4262:5746":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:50454:3273":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:4786:5762":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7249:4038":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:9539:4420":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12361:5328":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12674:5473":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:2938:2306":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:7970:4184":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:52179:3448":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:6782:3207":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:539:38644":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:46905:2270":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:4179:41885":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:3269:2920":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:7557:4174":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12884:5513":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:1580:39536":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:1105:2970":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4367:41908":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:4:982":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"9:382:3786":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:9021:4934":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:8093:2719":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:3362:2750":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12550:5381":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:3194:2923":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:4239:41892":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:29548:3473":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:8110:46081":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"14:165:44386":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7452:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:8475:4412":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7211:4036":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10506:5025":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:4026:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9395:3116":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:50227:2279":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12291:5312":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:2903:206":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"12:119:3962":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:2557:4341":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:2248:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:50793:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"12:1534:3968":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:8814:3012":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:507:38641":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:271:4680":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5861:42608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:21384:3590":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:58300:6279":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:46836:2587":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"12:985:2969":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:46846:2588":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:50546:3276":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:2894:4354":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:9515:163":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:62:38259":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:574:3117":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:49891:2733":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:10902:3094":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:49034:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:11496:2998":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:47191:2864":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:20028:58862":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:6956:3765":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:54104:6267":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:49067:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"9:896:3793":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:487:38638":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:56590:3562":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"12:697:2963":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:6463:4693":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:8123:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:1938:2214":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10350:4401":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:2788:2788":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"7:32:43652":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:609:4812":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:7896:3094":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:7357:4192":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:4433:3234":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"14:187:44392":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:9475:4423":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:49878:2732":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1636:39540":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:11709:6141":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6981:43369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:47545:6133":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:11289:53134":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:8442:2275":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:21843:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:7086:2622":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:46466:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9791:4959":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9658:4954":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:1678:39544":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"0:59:1665":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"2:52371:3413":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:47182:2856":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:46785:6174":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:50340:2272":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:11748:5212":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:5370:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:6079:3210":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:11137:5087":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:13374:5661":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:8752:2265":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:51030:3082":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"18:521:4587":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:49331:2242":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:135:38326":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:4635:5757":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:3461:2217":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"12:853:2967":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:2742:59066":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:131:38325":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:4369:2464":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:8494:4923":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:11828:5223":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6302:42985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:5122:5767":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:2433:4042":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:8069:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:9303:4433":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46362:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:10420:4558":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:21975:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:1414:2962":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:9317:4538":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:487:4833":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:50754:3551":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:3338:159":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:7319:4244":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:12320:1446":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:10857:2922":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:5684:42571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:11002:2273":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:8699:3235":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:3486:2816":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:5457:2858":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6017:4220":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:9347:2986":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"10:0:2051":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6034:4221":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:534:4096":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:495:38639":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:50651:2288":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:4810:41952":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:7300:54660":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:2411:3144":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:6352:39494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:47130:2852":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:5163:4111":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12087:5277":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4191:41887":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12349:5321":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:8873:2240":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"12:762:2621":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:29570:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:608:38654":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4417:41911":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:1668:39543":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:0:281":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:1654:39542":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:9485:6503":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:1091:2969":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:3084:2616":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:11343:5136":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:47168:6186":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:53009:3429":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4581:41927":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:8625:2950":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:8941:4932":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:46945:2584":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:910:1633":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:10814:3537":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10075:4999":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:46806:3323":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:5211:2627":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:2930:4110":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:652:4805":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4804:41951":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:4657:3190":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13221:5600":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:7156:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:2991:2615":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:54142:6269":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:20297:3077":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:9627:4431":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:4216:3060":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:20344:3313":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:12303:1016":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:1541:39532":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:2320:4044":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:5672:42570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"12:1120:3957":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:5227:12851":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:4144:5744":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:4247:41893":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:50145:2283":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:5815:4099":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:6743:4237":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:2605:4393":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:50297:2262":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:11761:58718":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:52515:6213":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:5380:2857":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:6430:42991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:4438:654":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"12:1840:2623":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:8833:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:2401:3139":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:12322:766":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:1358:2750":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:29333:3641":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:6392:39471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5443:42500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:10860:2924":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:8429:2265":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:2737:59080":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:6799:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11786:3171":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6998:43370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:49981:2269":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:48815:2231":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5498:42558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5876:42609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:9458:4398":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:7860:54667":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:9407:53107":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:1404:2961":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:21272:6150":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12008:5267":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"12:815:2964":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:46822:2585":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:52201:3451":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:11576:5188":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:6375:39468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6668:4371":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10403:4403":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:12313:719":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:2487:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:560:38647":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:6302:2627":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:9253:2805":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"13:108:61215":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:12312:722":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"18:507:4805":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:46959:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:48330:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"0:72:1580":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"2:3236:3358":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:6430:1643":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:660:4577":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"9:709:3022":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:8694:3232":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:6170:4680":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:9328:4539":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"12:2205:2203":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:50980:3555":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:52393:3416":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:54032:6261":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:2341:4356":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:2029:180":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:4262:2708":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"12:632:2692":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5841:41794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4605:41930":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11774:5215":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:4606:5756":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:7117:4033":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7659:4168":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:46378:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:1695:39546":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:1511:39528":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:7093:4030":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:1240:2972":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:4267:41895":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9526:4421":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:3347:2930":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:3160:3159":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:12318:1444":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:10088:5000":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:8831:139":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"16:5664:4090":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:11894:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:5772:42579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:2727:4344":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:19994:58819":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:4425:3233":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:9437:6388":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:7166:43529":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:2579:4392":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:2487:4339":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:50023:2282":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:12306:1351":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:4475:41916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10121:4466":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:5845:2860":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:50191:2278":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"9:111:3849":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:11655:6307":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:11267:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"12:2198:61169":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:6975:43368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:2726:2302":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:5733:42577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:9155:4936":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:411:161":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:6269:38560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"12:98:3958":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:48140:3612":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:9430:6387":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:48801:2222":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:46866:2579":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:46779:2271":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:48199:206":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:4385:5750":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:6719:4369":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:50826:3628":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:5614:4088":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:7038:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:6161:4223":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:1195:2969":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:1636:575":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:6676:4177":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"12:1518:3967":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:1021:4543":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:5374:4170":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:1611:2623":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:12948:5532":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:2792:2790":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:47121:2851":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:10774:4401":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13007:5543":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5713:42574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11734:4971":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:47295:2872":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:47321:2874":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:9531:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12033:5270":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13393:5666":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:9193:61217":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:6544:202":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:8613:2949":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8687:2662":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:7847:4248":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:719:9523":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:52019:6205":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:624:61231":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12972:5537":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:4948:2257":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:9909:4964":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"12:2080:2971":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:48055:177":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:1615:2621":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:11247:5107":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:4744:2828":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:51918:6204":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13091:5567":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:7208:42075":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:9536:2990":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:11623:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:5720:42575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:47049:6185":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:11112:6406":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:2588:4709":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"9:977:3794":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:4003:3067":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:887:2692":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4117:3179":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12134:5284":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:2484:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:51748:3454":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:11975:2618":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:20706:3316":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"9:956:3789":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:50814:3001":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:9334:2282":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:13184:5592":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:10528:4521":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:6969:3766":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:7939:9521":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:10752:4403":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:2290:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:6746:1633":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:52649:3457":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"12:300:3961":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:9165:61222":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:49097:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"12:725:2959":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:11657:58985":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:6479:42993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:21115:3573":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12748:5484":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13114:5575":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:2847:2683":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12022:5269":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:3026:4843":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:47234:2867":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:5624:58926":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:7872:4187":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:918:2959":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:10128:2749":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:5880:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:678:6281":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:9371:4935":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12617:5436":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:46422:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:686:9522":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:48250:2750":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:48182:37889":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:8981:4933":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:8165:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:51704:6202":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:29542:2612":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:1672:1054":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:8014:4050":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:9526:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:1550:39533":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3980:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:11921:54670":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:686:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:774:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:4737:41945":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:21168:6143":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"5:3429:4680":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:20295:2663":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:47560:4705":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"9:592:3832":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"9:505:3781":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:6610:2997":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:21876:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:11164:55249":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6690:4178":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:420:4113":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:5013:2766":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4816:41953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:6217:2980":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"12:1852:2693":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4361:41907":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2465:4362":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:4904:52871":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:13047:5553":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"12:659:1633":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:8076:2718":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"0:51:1650":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"2:20863:3078":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:20266:3315":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:10445:4525":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:2578:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:46858:2272":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:9138:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:10756:2801":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:2509:4351":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:4454:3237":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:4644:41935":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:2947:2692":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:7001:2862":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:9582:2283":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:5887:2980":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12046:5272":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6200:4224":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:7255:42082":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:6293:38519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12630:5443":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:38142:2182":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"18:766:4586":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:7388:4194":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:8422:2873":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:49119:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:11903:6413":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:13382:5662":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1953:3699":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:11264:6316":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:50073:2286":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:5793:4098":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7298:4242":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:727:4583":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"18:96:52488":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:6604:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11154:2810":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:12237:5306":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:524:4707":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:3106:2621":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:5000:4691":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:8705:3184":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:1828:6289":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:6567:4189":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:6252:4227":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:6865:4376":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13031:5551":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:2916:4462":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:4357:5749":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:12768:5490":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:4540:41922":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"14:40:5058":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:6852:3168":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10497:46349":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:46444:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:10310:5015":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:49831:2744":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13557:5708":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:7735:3006":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:21245:3370":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:531:4591":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:50631:2287":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:8227:2919":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:6563:3305":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:3472:2918":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:9277:1633":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4611:41931":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:5963:190":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:50583:3277":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:2261:4068":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:5628:4089":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:4014:3171":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:661:2216":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"0:42:1638":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"1:965:2962":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:0:2058":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:1887:6291":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:9331:2985":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:4272:2462":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:3908:2894":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:49368:3022":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:57025:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5699:42573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13492:5690":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:11054:5072":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4300:41900":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:49752:3533":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:9422:4950":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:4838:3062":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:630:6111":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:10608:4408":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:8596:4823":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:8561:4484":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:10651:2800":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:5436:2623":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:47220:2866":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:8055:4399":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:8241:4527":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"12:1044:3954":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"14:31:6030":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:217:3727":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:9873:4961":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:5388:4073":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:8645:3174":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:6500:42994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:6681:3211":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11070:5076":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:9930:4966":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:6769:3731":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:5433:4075":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:9464:53122":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:1425:2963":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:8147:2918":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10625:4410":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:5596:4087":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:996:2967":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:113:52489":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2321:178":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:38125:179":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:7890:4186":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:9857:4473":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:3968:3404":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:54157:6270":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:9824:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:7309:4243":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12909:5522":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:21334:57809":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:13506:5697":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:574:4805":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"12:1628:4678":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8956:2692":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:8162:4471":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:5394:187":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:49058:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:1686:39545":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:1981:3750":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:967:4835":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4797:41950":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:47090:2848":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:47112:2850":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"18:671:4578":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:8330:2933":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:9401:4949":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:3249:4474":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:49904:2751":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:48672:3618":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:5780:4097":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:52325:3428":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:6311:42986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8763:2829":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5087:2720":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:7924:9519":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:2800:2794":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:56973:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9108:4935":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:50331:2271":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:10108:4465":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:3541:2621":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:11445:2803":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:11893:5229":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:12316:717":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:10139:4435":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11515:5176":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"14:221:6037":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:3953:2947":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:2493:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:52569:6215":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:1552:2894":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:8391:2903":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:6940:3608":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:8609:2231":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13148:5583":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"12:1866:2695":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4635:41934":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:5480:42557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:4316:2705":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:1643:39541":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:4849:5764":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:2746:59067":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12060:5273":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:48115:2692":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:7243:42080":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:7539:55018":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:7841:2251":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:21678:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:2928:2303":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:14:1584":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:6329:12845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12073:5274":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:54005:3418":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:1226:2970":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"11:36:61157":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:7748:6414":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:10205:4706":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:944:2623":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:12311:629":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:7426:4195":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11536:5180":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:4200:3480":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11124:3129":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:6737:2619":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:599:61230":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:3014:2696":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6554:42999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"12:353:3959":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:50403:3266":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:8370:2931":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:2631:4353":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:4017:3172":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:5009:2721":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4346:41905":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:3763:4680":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:2670:2542":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:50091:2285":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:53821:3450":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:7603:4196":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4489:3192":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10455:4559":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:3594:2840":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:3560:4680":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:52885:3437":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:7226:42078":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:46606:3328":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:9489:2281":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12926:5527":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12695:5478":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:4126:2461":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:7135:4034":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:8951:61225":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13158:5586":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:1505:39527":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:22008:3576":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:6270:4172":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:5692:42572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13536:5705":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:7637:4185":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:1903:46171":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4212:41889":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:2905:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:39348:2545":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"12:387:61165":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:2843:2681":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:48191:189":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:9691:4488":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:50937:207":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:50738:3543":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:11951:5255":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:4441:5752":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11997:5265":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:49803:2743":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:20428:14726":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:5625:42568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10360:4557":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:7042:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"12:1845:2621":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:9442:6389":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:9416:2747":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"12:822:2965":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:2839:2679":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:11601:6302":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:11055:2253":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:3632:5740":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:12609:5433":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"15:175:3976":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:3154:3157":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:481:4588":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:9263:4943":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4427:41912":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:9302:2983":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:592:38652":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:12860:5511":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:10997:5058":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:5822:14938":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:3232:2925":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:2257:2902":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:48634:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"12:810:2961":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:11134:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:13478:5688":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:47270:2870":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6842:5841":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:52149:3444":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"0:73:1581":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"17:10894:4467":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:4059:3477":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:5761:4095":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"12:1138:2972":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:5558:4085":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:3086:2932":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:8363:2929":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6146:4215":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:52038:3412":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10270:5012":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:11469:55251":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:11688:53479":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:6572:43000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:8796:4409":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:10822:46089":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:1826:6288":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:1864:6290":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:6316:4711":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:0:2052":{"crate_id":11,"path":["adler"],"kind":"module"},"5:7014:3691":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:46300:3256":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:7737:3066":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:48558:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:2780:2785":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:21318:57816":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:9225:2803":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:8554:3227":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:1722:39549":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"12:393:61162":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:2674:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:2411:4357":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46912:2581":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13126:5578":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"14:202:3693":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9553:4435":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:4531:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:4766:2834":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:4294:41899":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:51001:157":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:20009:58819":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:2383:3133":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:4246:2706":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:8603:2222":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:1931:4419":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"13:0:2047":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:5782:42580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"9:800:43794":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13279:5642":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:9382:4948":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:7343:4179":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:20241:3475":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:6881:2203":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10796:4522":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:52803:3452":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:2868:4109":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:11457:2804":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13100:5568":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:1967:2215":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:598:3065":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:4761:41947":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:5011:2764":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4565:41925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:2980:2695":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"14:0:2054":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:9836:4725":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:5595:42566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:2662:216":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:48242:2692":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:54043:6262":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:973:2964":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:7511:4049":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:4719:772":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:8160:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11373:4727":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:10445:53477":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:11514:6507":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13518:5699":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11259:5108":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6210:4225":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:567:38648":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6781:4190":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:4908:52875":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11330:5132":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:47253:2869":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13059:5559":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"9:0:2050":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:4086:3478":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:12319:1445":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:56947:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50009:2265":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"12:1555:3969":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"12:2184:6696":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:11533:2990":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:6545:42998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:582:2182":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:12955:5534":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13168:5589":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:52417:3417":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:8864:3022":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4102:41880":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8488:2838":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:47336:2863":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10949:5043":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:20447:2663":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:484:4732":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:1574:39535":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4621:41932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:4574:5755":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:50770:3545":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:7005:2861":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:5317:6295":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:48406:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:2856:2688":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:6759:2929":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"12:274:61158":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10845:4525":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"18:755:4585":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:11384:4728":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:5504:42559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:9283:2982":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:9207:2801":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:49578:3687":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:12324:1090":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:9350:4541":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:46520:3340":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8741:12845":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11800:5218":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11106:5083":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:11094:54979":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11034:5071":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11594:5189":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:1620:2693":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:21909:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:9722:4957":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:54023:6260":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:9454:2758":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:4906:52873":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:5235:5768":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:21744:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6593:4234":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:6992:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:4749:5761":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:9601:4424":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:1518:39529":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:8368:4402":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:6777:59061":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:51816:3422":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:949:4680":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:9897:4963":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:29748:3601":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:25217:3309":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6472:3974":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:6752:3730":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:50766:3544":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:57012:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1386:2959":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9671:4458":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:2253:3130":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:2749:4345":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:5447:4076":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:46964:3607":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12816:5499":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10296:5014":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:9574:2999":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:5064:2767":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:3125:4838":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"12:669:2962":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6877:4027":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:3157:3158":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:11617:5192":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:10595:3685":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:7469:4180":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:6331:2629":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:7102:2307":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8713:3173":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6186:4171":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:2969:3255":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:49841:2745":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:677:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:54089:6266":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6345:4175":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:10973:5057":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:6488:4698":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:12142:4733":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12980:5539":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:52727:3445":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2812:2668":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:50927:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:5826:2808":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:7956:4183":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:50306:2260":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2578:2915":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:9061:4435":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:6524:42996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:153:4040":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:1532:39531":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:4888:5765":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2657:4352":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:8991:61221":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"0:60:1674":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"6:4683:41940":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:6893:2204":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:7982:3756":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:11368:5140":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:9712:4956":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:54180:6271":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11217:5103":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:4312:2711":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"12:2178:61166":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6171:4216":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:3716:5742":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:53883:3415":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:20178:3310":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:4673:41939":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6528:4233":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:2612:2908":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8887:3023":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:5709:2800":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"7:0:1490":{"crate_id":7,"path":["unwind"],"kind":"module"},"18:681:4579":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12874:5512":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:10754:3535":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:49993:1579":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:53429:3458":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:11070:2830":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:10875:4468":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:49852:2734":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:12017:2188":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"17:13413:5669":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:9681:4880":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:5703:4091":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:8613:2228":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:586:38651":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:9610:2756":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:8881:61220":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:6415:42989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:11356:5137":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:51770:3442":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:46261:2770":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:719:4582":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:1632:2695":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:3349:2692":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"14:7:6030":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:20215:3407":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:2049:3749":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:21062:3572":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:8601:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:21189:3375":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7497:4176":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:2768:2779":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:12299:911":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:2564:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:9450:4028":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:3457:4847":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:2993:4350":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:5633:2894":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5568:42530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10476:46348":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:3910:2692":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8106:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:51878:3443":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:3470:57013":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4206:41734":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:53039:3432":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:6986:59076":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"0:68:1733":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"1:3479:2817":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13366:5658":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:10865:2261":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:2954:2694":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:9488:4422":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:8137:46085":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:2344:1575":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"12:861:2968":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5660:42569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6463:4231":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:49386:6198":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:50758:3549":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:6909:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:10385:4501":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12781:5495":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:53571:3426":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:8526:4504":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:9501:4433":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:2652:2917":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:50127:2284":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4274:41896":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4592:41928":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:21257:3371":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:6926:3764":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"9:19:3881":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:13527:5703":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:1701:39547":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:53073:3414":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:12305:1321":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:4231:41891":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:0:2056":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:4041:4684":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:10466:5021":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:2774:2782":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:8615:2229":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:10581:2813":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:48173:3614":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13594:5715":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:5660:2797":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:7266:42083":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:960:2961":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"7:79:43659":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13459:5683":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:4778:41949":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12896:5516":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:575:38649":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:8056:4048":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:2481:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:13071:5560":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12211:5304":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:6677:3007":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4698:41941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:3370:2652":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:10642:4531":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"0:61:1680":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:3484:3769":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12164:5290":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:21280:6151":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:50988:3556":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:12485:5330":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:247:4829":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:3956:3403":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:3162:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:1445:3745":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:1760:3650":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4515:41919":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:2988:2693":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:9213:182":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:8393:4457":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:6233:202":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:7051:2308":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9644:4417":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:50245:2280":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"12:738:2960":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9805:4545":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:3733:2623":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10062:4998":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:6137:4711":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:47150:2854":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"0:65:1712":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"5:4900:4680":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4286:41898":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6654:4236":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:1043:59078":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:48444:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:7870:3092":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:628:2656":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:3382:2651":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:49171:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:53681:3446":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:6393:3557":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10159:5001":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6829:4374":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:4393:407":{"crate_id":2,"path":["core","char"],"kind":"module"},"18:636:4817":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2771:4346":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:50742:3546":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12514:5350":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:242:4828":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:47536:3007":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:47211:2865":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"12:0:2053":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"9:649:3834":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:46794:2586":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8379:2810":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:10221:5008":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:2817:2664":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:11826:3172":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:5680:2798":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:9555:2998":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:9071:61223":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12265:5310":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:1476:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:4721:5760":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:852:3729":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5541:42563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:9831:3127":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"4:0:2048":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:4659:41937":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:47069:2732":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:8083:3129":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:20875:58822":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:3599:5739":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:50287:2276":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:29642:3600":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:4254:2707":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4398:41910":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:11144:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:3566:5738":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:51018:3084":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:5763:2802":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:5534:42562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:5472:4078":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:7069:2621":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:6903:4028":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:8819:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:4307:41901":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:4324:2713":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10434:5018":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"9:920:3790":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:7079:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:11813:5220":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:11199:5095":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:12300:407":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:2154:576":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"18:564:4593":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:2389:4041":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:2029:59152":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:48368:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11485:5167":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7483:4181":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12739:5483":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4317:41902":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:11920:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:39335:3756":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:12325:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:11559:5185":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"0:18:1586":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"typedef"},"2:2445:2887":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"12:60:61161":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:8719:3193":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:6790:4238":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:4317:3486":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:6921:6299":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:50173:2277":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"12:646:2750":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4534:41921":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:7237:42079":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:4210:3061":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:386:4830":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:2736:2539":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5587:42565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:6059:4337":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"9:676:3879":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:20969:2663":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11300:5120":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:3689:5741":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:4413:5751":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10233:5009":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:7978:6316":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"14:160:6030":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:3174:3335":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:3192:2922":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:46402:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:5695:2799":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:4280:41897":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:2254:3753":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:9293:4542":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:2753:2774":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"12:1085:3956":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:7737:4834":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4506:41918":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:1690:2621":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:5737:4094":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:49913:2754":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:7849:3105":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:8590:2662":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:6640:6299":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:36:2620":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:10921:5039":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:51949:3435":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:8510:4924":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:501:38640":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:50277:2275":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9751:4489":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:707:2253":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:49085:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:21221:6145":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:699:4581":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"0:24:1607":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"16:6359:4229":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4185:41886":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:554:38646":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:4217:5745":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11477:3626":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:52468:6212":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:12321:1443":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:12118:5283":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:52103:3456":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:10095:2748":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12850:5510":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:6409:4718":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:2490:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:4327:5748":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:6448:42992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:8545:206":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:20026:58858":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"12:1859:2694":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13039:5552":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:49347:2241":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:11682:54659":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:2367:4338":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:46992:3609":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:954:2621":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:46554:6173":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:5949:4104":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"15:214:3981":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:2904:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12638:5444":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:48794:2221":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:47522:6131":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:21370:3646":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"12:320:3960":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:56999:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13141:5582":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:2851:2685":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:7003:3690":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:614:61232":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4716:41943":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:12301:1463":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:2676:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:4449:41914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:4346:2465":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13231:5605":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:10830:3538":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:5169:2659":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:10721:5037":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:29508:2611":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:49967:2274":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11909:5234":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:7786:4721":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:1643:3471":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:10283:5013":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12797:5498":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:1436:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:2683:4342":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:491:4804":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:52773:3449":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:3854:5743":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:39299:2809":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:9831:4548":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:5976:2623":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"12:751:2623":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"12:1003:2970":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4768:41948":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"13:220:61171":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"0:25:1611":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"1:979:2965":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6123:4169":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10583:4405":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:10374:4500":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:2796:2792":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:6834:1633":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:4297:5747":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8962:3027":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5184:44459":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7980:4051":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:2825:4347":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:20423:2663":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:0:793":{"crate_id":6,"path":["libc"],"kind":"module"},"16:5460:4077":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:52963:3425":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:0:2057":{"crate_id":17,"path":["object"],"kind":"module"},"5:4747:3707":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11585:4730":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:7396:4246":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:1872:2696":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13082:5564":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:11974:5264":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:5494:4079":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:9285:2692":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:8329:3520":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:49933:2753":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:50750:3547":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:6517:3973":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:8556:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:1311:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:7044:4029":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:8577:3228":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:47159:2855":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11125:5084":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:50608:3279":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:3168:2846":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:4104:4684":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:3422:2811":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:1825:2617":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:53967:3453":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:11954:3985":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:7288:4241":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"18:80:52487":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11853:5225":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:10322:3186":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:3271:2921":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:50746:3548":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9446:4952":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"15:0:2055":{"crate_id":15,"path":["addr2line"],"kind":"module"},"12:2069:2970":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:11089:52859":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:2444:2663":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:48131:1633":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:50425:3267":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"9:863:3791":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2917:2907":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:7289:43558":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:10579:3683":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:9269:2979":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:11277:2802":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:1608:1633":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:600:38653":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10490:5023":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11606:5191":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13436:5682":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:2327:185":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11528:5178":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6070:4112":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:8871:4931":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:20254:2663":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:9315:2984":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"12:1065:3955":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:286:2255":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:50471:3274":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:2993:3697":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:3804:2750":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6816:4373":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:10257:5011":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:46883:2271":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:52546:6214":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:46547:4050":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:6022:4680":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21942:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:48123:2750":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:2793:4348":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"19:0:998":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:9738:4491":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:21363:58533":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:1525:39530":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9031:61226":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6496:4232":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11721:5208":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12225:5305":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:353:3087":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:359:3088":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:1002:2968":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:7433:2996":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:7848:2663":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:1348:2692":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:52347:3431":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:46976:3608":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2399:3138":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13354:5655":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:6785:3052":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:8272:4530":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:6819:3008":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:8418:4470":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:11061:2252":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"12:1029:2971":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"9:586:3830":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:10708:4524":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:4672:9525":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:8868:2239":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:20711:14744":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"9:188:3857":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:2669:2301":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:8666:4825":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:50762:3550":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10670:4528":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13176:5590":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:6419:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"0:52:1655":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"1:11607:2815":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8796:12852":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:11307:2805":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"9:827:3788":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:781:3728":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:4379:41909":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"0:63:1694":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"5:1059:3747":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:12314:720":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:2739:2546":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:12310:628":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:6441:6298":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:8946:3025":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:11112:3269":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:49812:2742":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:56986:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2673:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:1738:39550":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"3:223:206":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11640:6306":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:48596:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:52056:6206":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4629:41933":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4496:41917":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:4921:5766":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:8611:190":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:11066:2250":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:21777:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:581:38650":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5749:60611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13404:5667":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:11684:188":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:10863:2920":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:4817:5763":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:50440:3270":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:2987:2614":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:4268:2709":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:9223:46133":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11186:5094":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:7329:4245":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:4689:5759":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:3188:5735":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:9183:4937":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:5510:4082":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:1943:3112":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:7237:4037":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:4071:2894":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4690:972":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:1751:58424":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:6838:3167":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:29584:3599":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:11099:2718":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:4972:2828":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:47306:2873":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4665:41938":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:9631:4418":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:7805:4723":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:4326:2463":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11390:4729":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:46561:2462":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:11852:3069":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:3402:5737":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12251:5307":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:11149:5088":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:21810:3120":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:10791:3536":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:2535:4340":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:11708:5205":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:48808:2230":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:6043:3201":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:7955:2973":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:900:2750":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"8:0:2049":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7543:4173":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4354:41906":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:1714:39548":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2681:2467":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:4662:5758":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:12307:1429":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:39339:2650":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:9778:4490":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:8071:3127":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:8607:2230":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:1707:3185":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:48106:1596":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7942:4250":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:8650:3175":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:6709:3004":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:2842:4108":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12176:5292":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:47244:2868":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:990:2966":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:49052:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:5823:2806":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:5878:4101":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:10799:4726":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:7278:4240":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:4262:3485":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"12:2053:2969":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:3319:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:7220:42077":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6137:4167":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"}},"external_crates":{"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}