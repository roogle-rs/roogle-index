{"root":"0:0:2814","crate_version":"0.11.1","includes_private":false,"index":{"2:14062:34434":{"id":"2:14062:34434","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5150:34434"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:45147:3151","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:827":{"id":"0:116:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10734:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13929:1024":{"id":"2:13929:1024","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12465:490"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2445":{"id":"0:45:2445","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[191,0],"end":[211,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13940:29265":{"id":"2:13940:29265","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12484:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2814":{"id":"0:0:2814","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1307,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]","#![allow(clippy::cast_possible_wrap, clippy::cast_sign_loss,\nclippy::cast_precision_loss, clippy::needless_pass_by_value,\nclippy::similar_names, clippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::must_use_candidate, clippy::range_plus_one)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:112:2379","0:20:2385","0:21:2388","0:26:2404","0:27:2408","0:44:2443","0:45:2445","0:53:2453","0:54:2458","0:61:2466","0:62:2475","0:63:2481","0:65:2497","0:105:2575","0:106:2584","0:108:2596"],"is_stripped":false}}},"2:13961:31341":{"id":"2:13961:31341","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:45084:3154","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13990:34417":{"id":"2:13990:34417","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13618:3135","str::split":"2:13981:29292","prim@char":"1:12465:490","`DoubleEndedIterator`":"2:8516:133","str::rsplit_terminator":"2:13993:34418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44880:3165","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14057:30448":{"id":"2:14057:30448","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38312"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5742:35131":{"id":"5:5742:35131","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:3132","`String`":"5:7809:256"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3132","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14031:34428":{"id":"2:14031:34428","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14058:30449":{"id":"2:14058:30449","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38312"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2772-0:112:2379":{"id":"b:2:2772-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2766:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:3034"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14059:34433":{"id":"2:14059:34433","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5152:34433"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:45129:3149","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3303:260-0:112:2379":{"id":"a:2:3303:260-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3303:260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13943:2530":{"id":"2:13943:2530","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3948:1865":{"id":"2:3948:1865","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40544:5667","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13981:29292":{"id":"2:13981:29292","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13618:3135","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::split_whitespace":"2:13959:31887","str::rsplit":"2:13987:29296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44830:3161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3077-0:112:2379":{"id":"b:2:3077-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3080:3353"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5744:28614":{"id":"5:5744:28614","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:14054:28617"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3092-0:112:2379":{"id":"b:2:3092-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3051:174","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3095:149","2:3096:1850"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14056:30447":{"id":"2:14056:30447","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38312"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14054:28617":{"id":"2:14054:28617","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3338:3328-0:112:2379":{"id":"a:2:3338:3328-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3338:3328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13953:29290":{"id":"2:13953:29290","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13954:29291"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2466":{"id":"0:61:2466","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:827":{"id":"0:18:827","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[38,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10753:155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43985:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13950:34415":{"id":"2:13950:34415","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12471:1765","crate::ops::IndexMut":"2:3608:3445","str::slice_unchecked":"2:13949:34414"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:35127":{"id":"5:5726:35127","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:3132","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:3132","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13964:29304":{"id":"2:13964:29304","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3090:149":{"id":"2:3090:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:13952:2419":{"id":"2:13952:2419","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13951:29287","str::split_at_mut_checked":"2:13954:29291"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2408":{"id":"0:27:2408","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[90,0],"end":[164,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13960:31835":{"id":"2:13960:31835","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13959:31887"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:45113:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14043:34430":{"id":"2:14043:34430","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13928":{"id":"2:13928","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13929:1024","2:13930:2476","2:13931:34410","2:13932:34411","2:13934:34412","2:13937:30484","2:13938:34413","2:13939:350","2:13940:29265","2:13941:2507","2:13943:2530","2:13945:29263","2:13947:29264","2:13949:34414","2:13950:34415","2:13951:29287","2:13952:2419","2:13953:29290","2:13954:29291","2:13956:2405","2:13957:6043","2:13958:5652","2:13959:31887","2:13960:31835","2:13961:31341","2:13962:34416","2:13963:31866","2:13964:29304","2:13967:29305","2:13970:29306","2:13973:3394","2:13977:3359","2:13981:29292","2:13984:29294","2:13987:29296","2:13990:34417","2:13993:34418","2:13996:29298","2:13999:29300","2:14002:29302","2:14005:29303","2:14008:2420","2:14011:34419","2:14014:34420","2:14017:34421","2:14020:34422","2:14022:34423","2:14024:34424","2:14026:34425","2:14027:34426","2:14028:34427","2:14031:34428","2:14034:26107","2:14037:29307","2:14040:34429","2:14043:34430","2:14046:34431","2:14049:34432","2:14051:28612","2:14052:30444","2:14053:28616","2:14054:28617","2:14055:28618","2:14056:30447","2:14057:30448","2:14058:30449","2:14059:34433","2:14061:8534","2:14062:34434"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13938:34413":{"id":"2:13938:34413","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:14055:28618":{"id":"2:14055:28618","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3946-0:112:2379":{"id":"b:2:3946-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3944:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3948:1865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:14040:34429":{"id":"2:14040:34429","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[37,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10794:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:14011:34419":{"id":"2:14011:34419","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13618:3135","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::matches":"2:14008:2420"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:45052:3159","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14061:8534":{"id":"2:14061:8534","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5153:8534"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:45138:3150","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3083:857":{"id":"2:3083:857","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2775-0:112:2379":{"id":"b:2:2775-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2769:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:26084"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13945:29263":{"id":"2:13945:29263","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","cause","source","type_id","provide"],"trait":{"name":"Error","id":"2:3140:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13954:29291":{"id":"2:13954:29291","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13953:29290"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14046:34431":{"id":"2:14046:34431","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13937:30484":{"id":"2:13937:30484","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:13140:3142"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13970:29306":{"id":"2:13970:29306","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13987:29296":{"id":"2:13987:29296","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13618:3135","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::split":"2:13981:29292"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44848:3160","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14014:34420":{"id":"2:14014:34420","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13618:3135","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::rmatch_indices":"2:14017:34421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44980:3156","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14005:29303":{"id":"2:14005:29303","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3087-0:112:2379":{"id":"b:2:3087-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3057:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3090:149","2:3091:1852"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63:2481":{"id":"0:63:2481","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[300,0],"end":[337,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2497":{"id":"0:65:2497","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[353,0],"end":[414,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2859:146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11007:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2792:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13930:2476":{"id":"2:13930:2476","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2584":{"id":"0:106:2584","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[693,0],"end":[702,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13956:2405":{"id":"2:13956:2405","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12465:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44800:2378","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13959:31887":{"id":"2:13959:31887","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13960:31835"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:45104:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42921:8740-0:112:2379":{"id":"a:2:42921:8740-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42921:8740","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13931:34410":{"id":"2:13931:34410","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:2544":{"id":"5:5727:2544","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5743:8647":{"id":"5:5743:8647","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725":{"id":"5:5725","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5726:35127","5:5727:2544","5:5730:35128","5:5733:35129","5:5741:35130","5:5742:35131","5:5743:8647","5:5744:28614","5:5745:28615"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3080:3353":{"id":"2:3080:3353","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3054:156"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13949:34414":{"id":"2:13949:34414","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12471:1765","str::slice_mut_unchecked":"2:13950:34415","crate::ops::Index":"2:40375:3444"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13962:34416":{"id":"2:13962:34416","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:45094:3155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5730:35128":{"id":"5:5730:35128","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13932:34411":{"id":"2:13932:34411","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14034:26107":{"id":"2:14034:26107","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14049:34432":{"id":"2:14049:34432","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13579:148","`FromStr`":"2:13578:3152"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13578:3152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13578:3152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:2380":{"id":"0:113:2380","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[34,4],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:112:2379":{"id":"0:112:2379","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[33,0],"end":[35,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:113:2380"],"impls":["a:2:42920:8541-0:112:2379","a:2:33060:248-0:112:2379","a:2:3303:260-0:112:2379","a:2:3338:3328-0:112:2379","a:2:42921:8740-0:112:2379","a:2:33119:3172-0:112:2379","b:2:3087-0:112:2379","b:2:3092-0:112:2379","b:2:2772-0:112:2379","b:2:3081-0:112:2379","b:2:2775-0:112:2379","b:2:3077-0:112:2379","b:2:3946-0:112:2379","b:5:5978-0:112:2379","0:19","0:118","0:17","0:115","0:117"]}}},"2:3096:1850":{"id":"2:3096:1850","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14027:34426":{"id":"2:14027:34426","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13934:34412":{"id":"2:13934:34412","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13932:34411"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2774:3034":{"id":"2:2774:3034","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2475":{"id":"0:62:2475","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[285,0],"end":[290,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13984:29294":{"id":"2:13984:29294","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13408:3138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14017:34421":{"id":"2:14017:34421","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13618:3135","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::match_indices":"2:14014:34420"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44998:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14028:34427":{"id":"2:14028:34427","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13644:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10789:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:827"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:33119:3172-0:112:2379":{"id":"a:2:33119:3172-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:33119:3172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13951:29287":{"id":"2:13951:29287","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13953:29290","str::split_at_mut":"2:13952:2419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13993:34418":{"id":"2:13993:34418","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13618:3135","str::split":"2:13981:29292","prim@char":"1:12465:490","str::split_terminator":"2:13990:34417"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44898:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2596":{"id":"0:108:2596","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[721,0],"end":[754,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14052:30444":{"id":"2:14052:30444","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40728:3335","Self::is_ascii":"2:14051:28612"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40728:3335","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13973:3394":{"id":"2:13973:3394","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3095:149":{"id":"2:3095:149","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32984:3095","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:3091:1852":{"id":"2:3091:1852","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3061:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5745:28615":{"id":"5:5745:28615","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:14055:28618"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:112:2379":{"id":"b:2:3081-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3054:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3083:857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13963:31866":{"id":"2:13963:31866","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:45122:3136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14024:34424":{"id":"2:14024:34424","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13939:350":{"id":"2:13939:350","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13940:29265","`u8`":"1:12484:1895"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14037:29307":{"id":"2:14037:29307","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13941:2507":{"id":"2:13941:2507","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42829:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14051:28612":{"id":"2:14051:28612","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:722":{"id":"0:119:722","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2453":{"id":"0:53:2453","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[221,0],"end":[223,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.866 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13999:29300":{"id":"2:13999:29300","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12465:490","str::splitn":"2:13996:29298","self::pattern":"2:13618:3135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44952:3162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5980:1825":{"id":"5:5980:1825","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5978-0:112:2379":{"id":"b:5:5978-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10794:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:33061:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5976:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5980:1825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:33062:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2777:26084":{"id":"2:2777:26084","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14002:29302":{"id":"2:14002:29302","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14008:2420":{"id":"2:14008:2420","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13618:3135","`DoubleEndedIterator`":"2:8516:133","prim@char":"1:12465:490","str::rmatches":"2:14011:34419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:45034:3158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13996:29298":{"id":"2:13996:29298","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135","str::rsplitn":"2:13999:29300"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44934:3163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5733:35129":{"id":"5:5733:35129","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2443":{"id":"0:44:2443","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[186,0],"end":[188,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2458":{"id":"0:54:2458","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[233,0],"end":[259,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13957:6043":{"id":"2:13957:6043","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12465:490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44806:3145","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14022:34423":{"id":"2:14022:34423","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14020:34422":{"id":"2:14020:34422","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2404":{"id":"0:26:2404","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13947:29264":{"id":"2:13947:29264","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11699:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13958:5652":{"id":"2:13958:5652","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44816:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2388":{"id":"0:21:2388","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[53,0],"end":[72,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8448:176","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2854:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13967:29305":{"id":"2:13967:29305","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13977:3359":{"id":"2:13977:3359","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42829:202","prim@char":"1:12465:490","self::pattern":"2:13618:3135"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42827:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13624:3128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13639:3129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42920:8541-0:112:2379":{"id":"a:2:42920:8541-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42920:8541","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:33060:248-0:112:2379":{"id":"a:2:33060:248-0:112:2379","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:33060:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:20:2385":{"id":"0:20:2385","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:43092:237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:112:2379","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:14053:28616":{"id":"2:14053:28616","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2575":{"id":"0:105:2575","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[677,0],"end":[679,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:35130":{"id":"5:5741:35130","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7809:256"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7809:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:14026:34425":{"id":"2:14026:34425","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:14640:4291":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:14335:4245":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:12149:3930":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:16132:4704":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:41146:5944":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:23860:5924":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:8228:6340":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:44776:3153":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:14902:4346":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:7578:5644":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:35220:5260":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:10806:3113":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6680:7774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:42040:5977":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:12489:993":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:11016:3840":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:7401:35351":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"15:327:8242":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:47798:6176":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:33062:257":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:41140:3150":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:12952:4035":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:8741:8736":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:10779:6251":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:12491:1456":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:10413:6452":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:48115:6191":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:4362:8703":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:6098:5002":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:23456:5893":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:7119:8055":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:6953:5141":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:996:5509":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:40379:5938":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"11:2495:20523":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:7586:7999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:1657:7188":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:16377:4771":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:5318:4988":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:45815:6062":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:1123:34044":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12816:3704":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:22335:33438":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:13624:3128":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:47623:6142":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:5405:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6749:4895":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:12251:28491":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:2328:6242":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:6232:231":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:12480:918":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:3783:13988":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:564:7062":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:22364:33443":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:14796:4332":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:6288:8088":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11286:31733":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:11015:168":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"14:202:13975":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:8931:161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:481:3620":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5151:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7554:21468":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:15946:4643":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:7518:7963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:1085:35324":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:671:5499":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:7168:5178":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:46867:6083":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:45214:13973":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:5282:4987":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:10663:3675":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"0:113:2380":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"17:16507:4120":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:43946:31876":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:1586:5503":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:4225:8682":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5288:7442":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:6829:6303":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:1727:7217":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:651:3622":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:13578:3152":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:22484:5892":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:1626:3451":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:3576:153":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:10988:6339":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:11897:5516":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:38972:14167":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:13331:5872":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11630:3874":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:4165:34044":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4881:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5441:7506":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:42733:31821":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:15829:4611":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:7521:5238":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:16179:4722":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:0:2942":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:12465:490":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12851:4026":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:6611:7747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:4184:4966":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:430:35329":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:45034:3158":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:1930:6237":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:5285:6273":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6368:4884":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:1002:5499":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:789:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:14312:4241":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:4311:28196":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:11312:6315":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:43157:207":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:5334:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:3110:4957":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:33120:3332":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6440:21461":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:2086:208":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:4171:8678":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:5671:6280":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:16494:4106":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:47251:6112":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:3496:8641":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13119:4049":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"5:4372:5499":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"11:1005:5241":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:42855:5499":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:586:7074":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:3461:5256":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5570:7561":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"11:2323:5510":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:8152:3667":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:10368:21527":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11985:3906":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:8273:8026":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:912:5502":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:630:8533":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:1339:3691":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:2666:14184":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:7830:6738":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"6:5648:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13537:4033":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:15739:4590":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:3817:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:1415:5515":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:11777:3888":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:7539:3447":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:40295:13986":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"0:27:2408":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"17:317:3679":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:9297:6429":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7838:21469":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:15148:4388":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:4498:34051":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:42767:6261":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:23197:8893":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:15010:4371":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:5460:5805":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:2648:6243":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:8249:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:14152:4203":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:14750:4322":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:9425:198":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13055:3868":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:6904:5137":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6302:5029":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11503:3863":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"6:6765:7801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:10802:3116":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:16822:4151":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:8585:5400":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:47038:6101":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:3045:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11163:3843":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:16019:4659":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:16728:4862":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:8884:6268":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:16812:4879":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:14963:4357":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:42049:5832":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:5311:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13570:21537":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:6130:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12886:4028":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:23685:31806":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11821:6321":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:40555:5943":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:6770:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:7192:21466":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2112:3506":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2718:6245":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:44213:6016":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:1564:20528":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:929:8547":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:43181:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:4780:8723":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4842:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:8551:5976":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:10798:3107":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:16323:4761":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:8494:3667":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"18:521:25728":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"13:110:35335":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:47644:6143":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:45418:6048":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:2754:6244":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6708:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"11:835:5504":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:12083:28484":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"14:7:5489":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:6219:8088":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:9246:8773":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11124:35357":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:46782:6072":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:42999:6002":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:41826:5828":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:43255:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:15731:4587":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:3352:6250":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:8096:5336":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:3338:5520":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"0:53:2453":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"16:6942:5140":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:12716:5866":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:41510:5962":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:5069:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6740:7792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:44576:6018":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2660:4919":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:8179:5339":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:42074:5833":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:42064:5980":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:9261:8772":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:4300:8088":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:8448:176":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:15812:4603":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:735:25726":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:3308:3326":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:23893:5927":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:4702:8706":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:3866:5612":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:884:201":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:15351:4445":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:3889:3719":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6890:4937":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:7891:3449":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:10218:21522":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:9349:6437":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:13294:5869":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13491:4074":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"0:105:2575":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"1:4939:8690":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"19:0:1323":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:5976:264":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:8223:5341":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:7508:5235":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"11:2533:6996":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:15136:4033":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2570:4915":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:45582:6566":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:7361:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:23665:31798":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:7648:2438":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:6751:6302":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:39716:14171":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6748:7793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:45570:8082":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:47399:6134":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:3567:3173":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:44702:5958":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:1643:7177":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6507:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:15573:4550":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:43095:204":{"crate_id":2,"path":["strsim","HammingResult","Ok"],"kind":"variant"},"2:45428:6052":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"11:2137:5510":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:3587:4961":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"16:5198:4984":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:663:3099":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:3075:237":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:8900:6420":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12550:3997":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10031:21517":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"18:589:3632":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:11900:28190":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5265:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:33037:5934":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"11:1140:5514":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:8677:7896":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:11017:6257":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:46951:6088":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:22890:5891":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6480:7671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:13354:5873":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12798:21663":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:5070:490":{"crate_id":2,"path":["core","char"],"kind":"module"},"1:8254:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:31179:8659":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13427:4070":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:11579:3872":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:41461:5957":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:11026:35364":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10822:3965":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:5051:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:42026:5830":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:6666:7769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:6025:6291":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:16198:4728":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:5007:7348":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10442:21530":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"9:53:8245":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:44627:6019":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:8758:6412":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:5172:4983":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13070:3843":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:1632:7169":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:14807:4334":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:6640:5084":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:16084:4703":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:1625:7165":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:5839:3455":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:8343:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:43072:223":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"5:7703:3091":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:2508:8611":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:8363:6345":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:6813:7816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"14:220:5497":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:11034:31732":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:15621:4559":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:2256:8517":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8894:5499":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:904:2438":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:13639:3129":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8281:6344":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:1117:5515":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11421:3856":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:16632:4839":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:12059:6324":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:41443:8583":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:11339:31952":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:14832:4337":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6084:4997":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:41244:3150":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6389:5038":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:16786:4875":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:1524:5499":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:3051:174":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4896:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"0:62:2475":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"11:1907:5521":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:14859:4340":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"11:2539:6824":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12008:3759":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:10662:6422":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:43092:237":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:14405:4256":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:15701:4576":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:15641:4567":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13933:4151":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:2860:4928":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:2366:5526":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:4997:6267":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"15:306:20553":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:5877:6282":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:9438:8088":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:10861:150":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:8457:3177":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:43292:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:488:165":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:24389:247":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:33044:3343":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:8634:8704":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:48074:6188":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11617:3844":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:465:7006":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"18:689:3656":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:5012:3334":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12860:4027":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:6790:7810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:4956:4977":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:5325:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:3772:267":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5019:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:40487:227":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:3916:6259":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:14283:5969":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:5655:6279":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:5341:7458":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:15887:4625":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"14:31:5489":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12392:3961":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:3297:5499":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:2467:4905":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:10998:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:40429:223":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:9447:246":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:10939:6462":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"5:6717:3451":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:47721:6175":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:23700:31819":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:3620:6256":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:41468:5958":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:15050:4374":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:5305:3711":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:6599:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:3802:33384":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:9161:6423":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:39082:14169":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:0:2944":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:45624:6057":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:46799:6075":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5381:7472":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:16332:4765":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:34489:14161":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:3602:6393":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:4702:5799":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:45052:3159":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:13610:4086":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:896:4897":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:47975:6181":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:3446:6253":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:12416:6475":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:5482:7532":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13290:3779":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:4163:8677":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13719:4105":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10141:21520":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"9:236:6012":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:48043:6185":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:4233:8684":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:42055:5978":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:7832:5656":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:7308:7863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13471:3704":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:45849:191":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:698:3657":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:10734:237":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:16642:4840":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:46934:6087":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10793:3827":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"11:785:5503":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:15769:4595":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:12869:4072":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:4414:6262":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"11:0:2938":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:2896:213":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:7563:7987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:0:582":{"crate_id":2,"path":["core"],"kind":"module"},"2:41642:5972":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:4152:4965":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:472:3682":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:386:6223":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:45138:3150":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8211:6338":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13222:21533":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:3579:154":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:23734:5915":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:5319:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12983:21665":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:2620:4917":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:8829:6415":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:10246:21523":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:102:6990":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:26789:281":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:7372:4946":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:3129:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:10516:21532":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:34556:14163":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"11:685:5516":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:44166:3121":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:45574:8083":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:39027:14168":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:12478:758":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:23915:5929":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"16:7386:5213":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:613:35371":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:5449:4992":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:439:196":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7969:5331":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:43918:8073":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:46814:6076":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11818:3894":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14738:4320":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:7773:5650":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:43960:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:43479:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:45546:8076":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:3048:20600":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:23286:8897":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:14573:4282":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:13370:5874":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:15864:4620":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:6731:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:6216:6282":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:894:5516":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:47222:6111":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:4569:6264":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:48100:6190":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:3448:6254":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:7114:8056":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:11846:8100":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:7548:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:6173:5011":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:545:7052":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:39:3448":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:7402:28493":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:4221:8681":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:22902:33441":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:1494:7080":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:31409:3442":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:22381:33434":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:8648:6390":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:6935:34044":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:10735:3100":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:8212:6293":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:4189:2438":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:11577:28470":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:46913:6086":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:41589:5815":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:45865:6066":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5282:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4990:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:532:7046":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"14:160:5489":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:10285:5990":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:8031:6327":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:47272:6113":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:7628:5646":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:6565:8899":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:43027:221":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"2:4860:5802":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:47076:6103":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13451:4072":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:44898:3164":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:9211:2438":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10823:3681":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:7568:3451":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:45562:8080":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:44880:3165":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:8255:8023":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:23021:8616":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:4582:5798":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:7463:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:322:3680":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:45828:32850":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:5362:215":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:6900:6311":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:7305:5205":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:2521:8613":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"2:46831:6077":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:8626:5404":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:11963:6259":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"11:830:5517":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7223:5191":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4929:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:2551:35328":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:12485:1877":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:13662:4093":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:1932:6238":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:10729:3677":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:15315:4414":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:40392:224":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:15905:4629":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:8058:5335":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:2227:3692":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:16520:4795":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:13306:4063":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:6542:231":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:12683:5865":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:6691:7777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:1500:7083":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:44406:8074":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:12163:3931":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:6159:5008":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10977:35362":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:3851:8658":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:1555:2438":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5471:7527":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"8:0:2935":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:13644:3127":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:40447:226":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:3854:3703":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:43140:5516":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:16187:4723":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13006:4042":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:11527:3867":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7542:5240":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:7500:28192":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:985:8548":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:41816:5976":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:4210:5516":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11902:3901":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:7956:28489":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"11:740:5501":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8622:6261":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:538:7049":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:954:5517":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:11007:164":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:22590:8806":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:43672:3116":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:2652:694":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:3539:5978":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11706:3880":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12249:3944":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:11232:21547":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:22325:3079":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:809:3449":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:726:5599":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:45329:6046":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:5742:3821":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13028:4046":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:11958:3904":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:43329:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:765:25727":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"0:63:2481":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"1:6832:8768":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:12437:8540":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:45744:8085":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"7:32:20435":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"9:422:20450":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:8403:14151":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:12492:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:11386:21545":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:881:5499":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12941:4034":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:48168:6199":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:4990:3344":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:41519:5963":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:13618:3135":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:13547:4079":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:2215:5660":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:5575:3133":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11831:3868":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:5741:6281":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:15160:4392":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5551:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6588:5079":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:9328:26109":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:8028:5333":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:3140:149":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:4056:3451":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:47946:6180":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:45558:8079":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:14001:4166":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11421:6470":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:12234:3940":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:43651:3107":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:5020:8689":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:4827:7909":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:45578:8084":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:2890:206":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:12077:3160":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:22466:8805":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:43658:3108":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:11149:28481":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:45600:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5057:7372":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:42082:5835":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:4570:5797":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:3330:5522":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45264:6044":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:3694:193":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:44980:3156":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:10753:155":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6738:35349":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:33804:5251":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:11965:3138":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:973:8546":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:984:5507":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:4149:8676":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:12479:936":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:3503:3700":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:8353:8045":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:14284:4234":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2854:212":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:16714:4859":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"11:2559:6999":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13145:4050":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:9465:173":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:12476:763":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:43665:3115":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:33060:248":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:15689:4573":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7807:35347":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:583:3687":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:12170:3162":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:479:7014":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:380:6221":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7578:6441":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5349:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:10097:21518":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:3308:4902":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:16241:4744":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:47549:6140":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"18:623:35372":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:3296:276":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:4924:8054":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:5088:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"18:726:3665":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6758:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:4119:8674":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:2966:4933":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:47843:6177":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:3014:20599":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:44715:6027":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"9:355:20463":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:14299:4239":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"5:4562:8088":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"16:6696:5107":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"11:1023:5510":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"11:1900:5520":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:2802:3322":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"17:12673:4003":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:7185:8803":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:2480:8600":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:12347:3957":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:7340:6735":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8265:3118":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:4495:6263":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:3834:4963":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:4844:4973":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:10800:3115":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13921:4150":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:9452:6313":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:3350:6249":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"15:0:2941":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:8629:8086":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:45356:5876":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5025:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"0:106:2584":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"5:1636:5607":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12204:3936":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:517:7037":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:47120:6105":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:44636:6020":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:41391:5949":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:1401:5510":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:23827:5921":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:491:7017":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:7919:5319":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:7577:7996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:2668:14185":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:11013:164":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"16:6064:4941":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:5195:8732":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:11134:28487":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"18:718:3662":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:12466:1917":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:7368:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12483:911":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12906:4030":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:7118:3456":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:4333:8700":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12605:3843":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:3551:8552":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:6502:20570":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12319:3954":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7959:5330":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:7212:5190":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:34016:14160":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"13:0:2933":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12481:924":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"18:598:35370":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13909:4147":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:31462:3104":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:23727:8060":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:42807:5845":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:8296:8032":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:23221:8616":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:6638:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5205:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7282:5204":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15665:4571":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:44728:6028":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10564:3672":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:7469:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:8612:4956":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:5533:7542":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:768:165":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:44203:6012":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:4349:8702":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:15953:4644":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6111:5007":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6970:4938":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11432:21546":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:15431:4507":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:13733:4106":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6419:7643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:46966:6089":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:5579:3134":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:11923:6258":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:3403:13940":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:5689:4994":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:5145:8088":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:15586:4555":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:23343:8887":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"3:234:237":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:7219:278":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:967:5504":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:22868:8811":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:3944:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5179:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:42951:5850":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:8654:6399":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:45459:3167":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:6876:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:1521:7091":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5044:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:5001:228":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:41215:3490":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:14533:3967":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5450:7512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:2420:2438":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:990:5508":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:573:3622":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:5417:4991":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:22863:8616":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:44747:6030":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:11653:3875":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:48138:6197":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:1085:5241":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:6439:6295":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:12482:930":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:16159:4716":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11262:6423":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:11005:6451":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"16:4694:4970":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:3096:34043":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"11:1674:35325":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:15852:4614":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15121:4385":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:14043:4171":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:2684:4920":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:938:3451":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:1711:7212":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:12484:1895":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:12469:349":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:4177:8679":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:881:5509":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:553:7057":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"11:1105:5513":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:6493:7680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6713:5109":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:15531:4543":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:4492:8088":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:4815:8679":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:9402:6567":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:23376:8886":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:42789:5842":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:1869:6234":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:11807:6320":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:7454:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:10776:6249":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:2173:5613":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:10958:8089":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:9756:28247":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:44191:168":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:14554:5889":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:5682:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:2450:4903":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:16684:4851":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"9:176:8256":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:41423:5956":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"2:23593:5896":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:42863:5516":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:6852:5131":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:7938:5327":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:5144:4982":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:47378:6133":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:1652:5523":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:45393:6047":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10549:3821":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:47528:6139":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:11487:5580":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:15475:4537":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:16385:4774":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"0:65:2497":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"1:8016:6225":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:9430:6298":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:7844:6739":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"17:2437:3699":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:608:3639":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:9174:6424":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:3441:4960":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:15557:4549":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:299:6991":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:23747:5916":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4964:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12840:4022":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:6205:21460":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:1627:221":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:44419:8075":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:16761:4869":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:10938:35360":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:1893:3449":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:1630:3449":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:11873:5499":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:14019:4167":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11851:3896":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:9187:6425":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:41538:145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6882:7831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:8043:35348":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:16171:4719":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:4829:7911":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:11346:31950":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"16:6462:21462":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13838:4135":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:16555:4825":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:2498:8606":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:15286:4394":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:6544:7705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:7448:7921":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:6605:197":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:23926:5930":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:14531:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:4267:4968":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:5507:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:3699:222":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:47304:6115":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:5255:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:16595:4124":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:13408:3138":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:12044:3917":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:41548:5808":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:44221:6017":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6680:5104":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"17:13890:4146":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8206:6337":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:2083:209":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:4594:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:12040:6472":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:12776:4014":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14127:4199":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:15896:4628":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:706:3130":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:23758:8673":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:14611:163":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11294:6566":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:3851:5610":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:7350:7887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:5105:8724":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:14243:5879":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"16:6573:5076":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11852:8101":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:1871:6235":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:14821:4336":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:5727:3820":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:14574:5890":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:8368:6346":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5395:7480":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:12004:5860":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:8669:5299":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7075:21465":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7337:5209":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:45147:3151":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:4617:13939":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:2368:8051":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:1635:5520":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:8308:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:8082:8538":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12095:3926":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:531:3626":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:40375:3444":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:48230:6216":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:22464:8616":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:4733:5800":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:5223:3477":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:8934:3494":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:396:35322":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:2331:3824":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:3381:8801":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:23904:5928":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:48034:6184":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:14547:4279":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:1539:7102":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:4912:827":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:8558:3144":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:3310:28408":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5249:7420":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:8320:21472":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:13854:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:11329:6569":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:12184:5863":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13515:21536":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:11281:3845":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:10570:28246":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:6239:5016":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:6296:5812":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:47009:6092":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:113:25718":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:46995:6091":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:22393:33445":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:16701:4853":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"6:5635:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:6823:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:43403:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:33026:5933":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:2020:810":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:4941:8692":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13322:21535":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6564:7721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:5255:4986":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:39137:14170":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:14438:4264":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:7341:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:4929:4976":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:7612:2438":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:2820:4926":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:23577:8057":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:43891:8064":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:1696:7205":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:3933:3449":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:5114:8725":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:1647:5522":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4937:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:2950:4932":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:40537:5942":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:34355:8802":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14933:4351":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:4766:4971":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"9:500:5583":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:22580:8616":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:2900:4930":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:10479:8757":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:35047:14166":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:15714:4582":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:7598:34111":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:31820:207":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4875:7284":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:14375:216":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:13181:4053":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:8261:8024":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:546:4888":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:12108:3927":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:667:3688":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:16026:4661":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:13554:4080":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"2:7758:2431":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:2640:4918":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6408:5045":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:948:3449":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:11691:3878":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:48191:6200":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:12486:1883":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:1589:7135":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:8503:5391":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10274:21524":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:1888:3451":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10778:3822":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:11209:31951":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"16:7980:4950":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:13266:21534":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:16283:4750":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:1725:167":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7416:5216":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7058:5153":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:578:7070":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12687:4007":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:3556:13935":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:5809:7817":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:12225:3939":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:14599:4285":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:96:25717":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:9382:26684":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:45749:162":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:14708:4301":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:9150:210":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:3456:3449":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:23779:8616":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:4869:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:9315:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:1641:5521":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6837:5129":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:1667:7194":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:6659:7768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:22472:8808":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:12052:28848":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:10843:3828":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:10241:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:23562:5895":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:46752:6068":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:10487:21531":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"16:2530:4913":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:15997:4654":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:14460:4265":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:4902:8705":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:364:35320":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:2162:5612":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:3800:34044":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:12464:1204":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:4943:8693":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:10963:8091":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"11:1064:20527":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:2209:8600":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"17:12736:4011":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:5520:7541":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"0:61:2466":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"17:15876:4621":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5670:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:8577:6390":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8289:5610":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5629:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:13169:4052":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:6391:5889":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:8096:8539":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12028:3911":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12920:4031":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"11:2440:3451":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:44174:6008":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:7729:5638":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:123:6825":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:8054:3965":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:4483:279":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:41225:3491":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:3304:5521":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12625:4000":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13692:4097":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:44998:3157":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:1984:3097":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:11275:6424":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:8437:157":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:23649:5903":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8588:8656":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:13124:5867":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:6957:244":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:5530:34044":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:15036:4373":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11805:3893":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:46767:6071":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:41339:3487":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:14416:4257":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11465:3860":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:41202:3488":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"11:1880:5499":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:8233:21471":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:9234:6428":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:14260:5882":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"6:523:7040":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13781:4121":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:11592:3804":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10928:3839":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5562:7559":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:16218:4731":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:41580:5969":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:3538:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:7907:3450":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:2585:6689":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:15410:4497":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:7588:5645":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:3573:152":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11515:3864":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:10808:3114":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:42871:2438":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"18:491:3621":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:45094:3155":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"15:394:20562":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:14400:5884":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:15090:4379":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:6531:14492":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:42942:14244":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:8564:3161":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:13633:3130":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:1491:167":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:7748:26528":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:3391:5255":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:11922:3161":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:2326:150":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:45250:6041":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:7316:7868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:2766:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:1619:5499":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:7471:5230":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13041:4047":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:7986:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:3126:20601":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:43051:225":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"6:5271:7431":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:548:164":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:5304:5639":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:43968:3104":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:15760:4594":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13970:4157":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:12754:3140":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:44800:2378":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:15106:4381":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:15:2383":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:5316:6273":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:41598:5970":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6843:5130":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:14666:3446":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:12976:4037":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:643:3622":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4957:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11475:21547":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"6:6534:7698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8521:8615":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:8199:8021":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:42755:5993":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:507:28477":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8541:5961":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:43440:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:44816:3144":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:2148:5610":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:9369:6441":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:5441:452":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:11686:8616":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:31847:3079":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:41557:5811":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:12470:1731":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:48153:6198":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:42605:5841":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:6407:28492":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6808:4935":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:33151:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:23871:5925":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:3608:3445":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:2486:4911":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:1927:2377":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:14084:4183":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:9773:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:43985:149":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8240:151":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:15844:4613":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:41176:3489":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:3085:3414":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:2732:14268":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:7424:21467":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:3411:13942":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:1584:7133":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14072:4180":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:7797:5654":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:47917:6179":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"14:40:4121":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:23816:5920":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:2724:4922":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:5494:7535":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:6315:28473":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:3376:8799":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:3086:34040":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:3303:260":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:14917:4350":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:1907:6236":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:11864:3897":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:44645:6022":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6700:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"16:5085:4980":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:10432:8265":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:581:3079":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:45441:3166":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"11:2380:5499":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:13157:4051":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:12056:3921":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:682:6229":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:41259:3484":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:10796:3108":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:6437:7656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:2904:2373":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"16:7259:5203":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:10392:6236":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:41632:5971":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:14845:4339":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5375:7470":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11173:35358":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:12066:6324":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:42959:6001":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:41236:3151":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:14672:4295":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"18:507:3622":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11026:31730":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:15679:4572":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:2406:3696":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:11835:6323":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:3403:6251":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:14099:4189":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:3042:6248":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:33030:5299":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:43132:5499":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:3762:14172":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:4529:8088":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:16311:4759":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:6711:5977":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:9613:5849":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6984:4955":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:41610:5821":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:3789:13987":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:2772:4924":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4829:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:14220:4205":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:6886:6307":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:34701:14164":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6123:4940":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:1616:5501":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:11678:3877":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7358:4945":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11952:3903":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4984:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:7292:34079":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"14:0:2940":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:23641:5902":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:46899:6085":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:34422:14162":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:5884:6283":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:13798:4124":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:2704:4921":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:8290:8031":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:5502:1004":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:16399:4777":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12992:4039":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:2206:14194":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:47173:6108":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"10:36:7001":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13193:4054":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:14055:4172":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:12042:5861":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:2415:20571":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:42649:8063":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:16775:4873":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5139:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:12371:3959":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:15973:4650":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:42033:5831":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:41187:31811":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"0:20:2385":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"17:13205:4055":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11795:6316":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:7108:5823":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:1108:5511":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13635:4087":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:8503:6384":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:4810:4972":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:4899:8727":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12537:3995":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:14348:32405":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1597:7140":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:2435:20598":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:10597:3673":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:14997:4370":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:8260:3119":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:44952:3162":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:22592:5892":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:5117:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5217:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8583:6392":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:11788:3890":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:14375:4253":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"12:0:2939":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:8546:5395":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"15:288:20552":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:8636:2516":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13854:4139":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10968:6338":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:15989:4653":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:6902:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:23247:32132":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:11358:21544":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12723:4010":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12035:3914":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:6763:34044":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:34288:8800":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:45281:6045":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:47416:6135":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10332:21526":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12699:4008":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"11:2349:5511":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:9442:245":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:2013:3098":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:4855:5801":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"18:80:25716":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12826:4017":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11878:3843":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:15963:4647":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13818:4134":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:8319:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"11:1920:5523":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:14140:4200":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"14:214:5495":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6144:21459":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:7391:7914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"0:112:2379":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"17:15931:4639":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:42827:205":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10115:21519":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:47205:6110":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:33061:250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:41566:5966":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11757:21567":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:2482:8601":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:11155:28486":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:7864:3496":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:2105:693":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:44757:6031":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:41497:5961":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:12198:5864":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:4851:232":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:1577:5502":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:0:2943":{"crate_id":17,"path":["object"],"kind":"module"},"2:42911:5997":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:3298:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12082:3924":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:4341:8701":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:7431:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:3024:8616":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:14692:4296":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5127:7385":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:6715:6301":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:8267:5349":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:13983:4158":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:2545:6997":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:12487:1889":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:16750:4868":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"5:7267:34082":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:12463:434":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:3520:13943":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:8732:6402":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:11058:6281":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:6672:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:7980:14146":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:12488:1871":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4890:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:43017:6003":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"2:3048:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:44006:3106":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:14358:4250":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:22411:8616":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:41347:3483":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:14612:4287":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"11:772:5502":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:15836:4612":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8273:6342":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11553:3869":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:8399:14152":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:1370:5241":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:4805:7232":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7907:5318":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:8284:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:4680:8705":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6917:7856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:42880:5995":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:3677:8614":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:45554:8078":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:6411:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:46884:6084":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:687:8536":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2769:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:8137:4953":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:42621:8657":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11448:3857":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:5113:4981":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:4981:13998":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:1684:7201":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:563:3631":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:4983:4978":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:2142:1393":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:12472:1855":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:48054:6186":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11720:3882":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:43148:2438":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:11050:3120":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:16209:4729":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:9203:6427":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:3854:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:45756:230":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:3659:3100":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:6443:7659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:43098:148":{"crate_id":2,"path":["strsim","HammingResult","Err"],"kind":"variant"},"6:5224:7410":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:754:3671":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:31441:3324":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:23159:8892":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:3344:3330":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:11073:26715":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:2496:8605":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:2282:200":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:3054:156":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:47289:6114":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:43553:5854":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:328:6994":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:13692:13967":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:5998:6290":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:8528:5393":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:925:5503":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13958:4156":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:7094:3455":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:889:5602":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:14586:4283":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:23023:8807":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:1250:34027":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:5165:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"14:187:20540":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6731:5119":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:1158:5515":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:23115:8891":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:679:6227":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:5709:21458":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:6473:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:8978:31960":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7159:5177":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:4970:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:10979:6444":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:16297:4752":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:5131:3709":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:12762:4013":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:6188:5012":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:9751:6337":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:6028:4936":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:40331:13944":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:47888:6178":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:7556:5643":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:7765:5278":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4873:4974":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:14346:4248":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:3057:271":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:41681:5826":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:8218:6339":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:15064:4377":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:1563:7119":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:11483:31948":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"5:780:263":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:1539:5516":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11926:3902":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:33149:3331":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:4825:7907":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:42567:181":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:16739:4867":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:15655:4570":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"10:44:5530":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:2590:4916":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12135:3929":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:5757:4995":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:42920:8541":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:46980:6090":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:45104:3139":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:47141:6106":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:15785:4599":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:282:34044":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"11:2228:3914":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"11:1580:5518":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:45084:3154":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"18:659:3647":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:8483:5390":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3668:28529":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11347:173":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:5641:7596":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:5649:4993":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"0:54:2458":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"0:44:2443":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"16:6337:5032":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:6844:2438":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11984:6260":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"11:854:5507":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:6381:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5412:1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:6183:14484":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:41488:5960":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:23838:5922":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"5:7128:3457":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:1099:5510":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:2403:5664":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:7030:5151":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:1605:5500":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10296:21525":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7883:5049":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:506:3686":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:963:5501":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:41651:5824":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:10789:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:908:3680":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:7758:14230":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:698:2438":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4816:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:9276:8774":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:5224:4985":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:16832:4156":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:42589:5839":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:16264:4745":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:16036:4666":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:4636:13990":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:41667:3644":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12583:3999":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:1703:7208":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:6998:5142":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:7929:32044":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"11:1049:5511":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:12156:3163":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:3687:8634":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:12335:3956":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:1601:5519":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:44789:3148":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:41365:5948":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:1898:14108":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"16:7716:35346":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:23371:8888":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:12359:3958":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:44737:6029":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:41413:5950":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"2:11699:251":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10803:3144":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:6526:7693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12216:3938":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:7332:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5658:7600":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:8105:5337":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:14773:4331":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:1623:2438":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12711:4009":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:45635:14293":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:32984:3095":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:10418:21529":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"11:1884:2438":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:4135:3451":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:41619:5822":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:41298:3485":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:7604:8002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12293:3949":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:15024:4372":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:8014:4952":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:46846:6078":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:37096:5261":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12122:3928":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:798:3451":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:8151:4954":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:48063:6187":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11539:3868":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6716:7788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:12176:3932":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:44934:3163":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:8598:5402":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:14975:4359":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13592:4083":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:14114:4195":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:12749:4012":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:12471:1765":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:11731:6012":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"6:5357:7460":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:10534:3820":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:0:1029":{"crate_id":6,"path":["libc"],"kind":"module"},"17:13349:4065":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:9356:6438":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"11:842:8546":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:3307:31727":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:7656:2438":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:47594:6141":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:11606:3843":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:6462:7661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:2566:3091":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:8569:3176":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:9195:5499":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:7789:35350":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:3309:34110":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:2880:4929":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:8711:5411":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:6914:5138":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:34874:14165":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:5548:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:2506:4912":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:2266:5614":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:6623:7754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:2295:8047":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:10411:6453":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:10705:28475":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:22413:8809":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:45774:218":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5295:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"0:26:2404":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"6:4902:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:4902:4975":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10696:3676":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:43930:5368":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:3569:8088":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:12432:8267":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:5622:7587":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:8516:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:3406:13941":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:5603:7573":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:5812:8755":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6658:5098":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:2920:4931":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:2335:8597":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:23937:5931":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:44665:6024":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13361:4066":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:8165:4944":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:8699:6265":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"0:0:2814":{"crate_id":0,"path":["strsim"],"kind":"module"},"17:16145:4710":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:14393:4254":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13398:4069":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:9744:150":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:40407:221":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:41840:5829":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6256:5021":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:47190:6109":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:1386:5511":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:7785:5653":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5366:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"9:328:7002":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:47059:6102":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:9576:5848":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:45807:6060":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:43901:3104":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:47461:6136":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:497:7020":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:9217:6284":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:2029:8088":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"11:873:5508":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:6822:21463":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:12018:3909":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:1569:7121":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5488:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:12468:1348":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:4332:8088":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:1489:7078":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:4018:6260":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"10:0:2937":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13209:149":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:45888:6067":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:9361:6439":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:41528:5964":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:8000:4951":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"11:434:35330":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:2816:3323":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"5:7809:256":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11971:3905":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13095:4048":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:40467:225":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4921:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:14520:4274":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:11050:6336":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:15981:4651":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7731:5995":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:1551:7111":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4914:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12897:4029":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:10394:21528":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5241:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:2554:2949":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:45566:8081":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:15496:4542":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:23300:14184":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:12962:21664":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:22347:33438":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:5676:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:3987:3727":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"5:6584:8900":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:45550:8077":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:6494:6282":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:5043:3345":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:0:323":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:3720:3702":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5541:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:670:3653":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:559:7060":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:575:8522":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:6919:5816":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:7620:221":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:12448:26713":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:2466:3449":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:3720:5516":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:33051:5935":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:8121:221":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6269:5022":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5428:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:1230:34039":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:15077:4378":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:3338:3328":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:15549:4548":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:8911:6421":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:3695:4962":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:12280:3947":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:15939:4642":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:47349:6132":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"11:2148:5511":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:5870:231":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:3141:3714":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:1785:34044":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:8298:5353":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:6625:5082":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:47511:6138":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12931:4033":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"7:79:20442":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:8723:149":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"0:108:2596":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"6:7539:7977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:5429:13956":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:9483:6315":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:12066:3922":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:45407:13974":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:3092:34041":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:4113:8675":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5107:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:15777:4597":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:33592:5254":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:7863:3495":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:7714:3092":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:0:2934":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:4211:8680":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12306:3951":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"18:515:3619":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:45752:175":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:44848:3160":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:6449:7660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:3707:5499":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6866:21464":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:23249:14184":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:8806:6012":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:155:4882":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:45839:6065":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:9144:6422":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:1214:34031":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:903:3679":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"0:45:2445":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"11:351:35317":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:11401:3853":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:8373:8646":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:8624:189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13871:4141":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"9:390:20449":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:5420:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:41376:14230":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:6046:3451":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:45235:6036":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:40728:3335":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:2859:146":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:1889:3449":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:4947:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:2208:14195":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:4781:3342":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:13140:3142":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1507:7086":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:11090:6425":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"18:635:3646":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:7822:5655":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:47490:6137":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"9:0:2936":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:41403:3144":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:7911:6325":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:16008:4658":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:6410:5814":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:43366:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:44806:3145":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:8940:14150":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:2990:4934":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:44830:3161":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"3:0:524":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:15753:4593":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:7462:5227":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:31473:31822":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:4575:34051":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"11:2301:5241":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:40507:3085":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:3913:6258":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:2840:4927":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5462:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:16341:4767":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6723:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:41360:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:45766:238":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:45122:3136":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:10794:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"14:165:20533":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5036:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"9:445:20448":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5593:7568":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11801:6471":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:7548:2438":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:5387:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:680:3654":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:14507:4271":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:5408:32164":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"2:10572:3105":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:44655:6023":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:44182:3123":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:14031:4170":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:14872:4341":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:2793:6247":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:8267:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:12477:779":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:8066:21470":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:6521:7692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3077:149":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:16798:4878":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:9586:6237":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:12490:1957":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:7350:5211":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:31447:3508":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:8302:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:11075:35361":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:7990:5332":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11114:3842":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:13108:14253":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13945:4154":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:1220:3689":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:7495:5231":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:212:5597":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:8209:4942":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:23509:5894":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:4120:4964":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:42921:8740":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:3343:34109":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:6070:6292":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:4934:3343":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:6042:4939":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:5348:4989":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10167:21521":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"9:480:20447":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:47158:6107":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:23329:8616":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:3777:158":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:8330:8039":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:48017:6183":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:2400:5516":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:12570:3998":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:45113:3137":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:7806:6736":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"16:6781:5122":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:12524:3994":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:15602:4558":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:5635:6278":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:41252:3149":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:8844:8750":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:14560:4280":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:8565:5398":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:16656:4844":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"16:2748:4923":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:41332:3486":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:5379:4990":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:22362:33448":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:40544:5667":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:5186:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:1530:7096":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4792:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:10804:217":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:534:8517":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5477:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:9726:3128":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"0:21:2388":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"2:48089:6189":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:599:6226":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10784:3823":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"2:43218:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:15418:4500":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:570:7065":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:3364:5523":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10630:3674":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:4241:4967":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:4:1288":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:3181:3103":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"5:3088:8048":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:43516:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:1914:5522":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42846:184":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12787:4015":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11309:3846":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:8031:8020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:485:7016":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:0:1757":{"crate_id":1,"path":["std"],"kind":"module"},"17:12191:3935":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:3405:6252":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:2914:2372":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"2:45876:5528":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:2550:4914":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:22379:33447":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12409:21639":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:7016:5149":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:5621:6274":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11291:35363":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:9457:6314":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:2816:6687":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:3061:270":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3313:28378":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:6421:4890":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:8014:8011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:1854:719":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:6876:5134":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:2378:21594":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:6652:7767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:41691:5973":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:11055:3122":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:6794:5123":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"1:5478:214":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:12260:21638":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:11457:3859":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:11042:6401":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:10782:6253":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:3025:3096":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:7745:5647":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:9321:6433":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:538:3629":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:8015:8616":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:15439:4508":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:6162:5639":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:14483:4270":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:9310:6430":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:10553:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:14269:4230":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:6777:7803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:8512:6257":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:16668:4846":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:4997:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"7:0:1947":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4976:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13757:4120":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:7433:26730":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:14886:4344":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:5128:8726":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:881:8660":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:5991:6286":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:8673:6401":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:959:5500":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:1514:7088":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:297:3132":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:7414:7915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5586:7566":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:44423:5857":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:2796:4925":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:47996:6182":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:11377:8093":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13082:3844":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:8571:3154":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:23627:31788":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:7487:7937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:15540:4547":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11733:21566":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:2121:5241":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:7949:4949":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:12115:5862":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:4404:4969":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:5230:7413":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8117:6336":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:9501:6443":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:13014:4044":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:2792:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:5060:4979":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:7044:4943":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:33119:3172":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:1595:5517":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"13:229:6989":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:6608:217":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:16362:4770":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:47091:6104":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8102:8573":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:1675:7195":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6631:7755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:7818:6737":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:11319:35359":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:10427:31961":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:22:842":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:14652:4292":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:16613:4134":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:473:7011":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:2348:35223":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:23616:5901":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:10246:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:12475:760":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"6:1690:7204":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13385:4067":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:14947:4353":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11065:3841":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:45129:3149":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11566:3870":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8201:3760":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:5687:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:23882:5926":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:8008:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5196:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12648:4001":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:44676:6025":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:8036:6329":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:14627:4290":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:7901:3688":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:23235:8896":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:8640:6397":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:23849:5923":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"11:708:5500":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:15919:4636":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:14327:4243":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11998:3907":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5301:7447":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11222:3844":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":31}