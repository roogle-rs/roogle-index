{"root":"0:0:2228","crate_version":"0.11.0","includes_private":false,"index":{"5:5554:26858":{"id":"5:5554:26858","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12867:25486"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:25485":{"id":"2:12866:25485","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12790:2758":{"id":"2:12790:2758","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42031:197","prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:2536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12777:25641":{"id":"2:12777:25641","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2740:134":{"id":"2:2740:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12844:32487":{"id":"2:12844:32487","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42157:8026-0:112:1790":{"id":"a:2:42157:8026-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42157:8026","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12746:1890":{"id":"2:12746:1890","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:8127":{"id":"5:5553:8127","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32445:243-0:112:1790":{"id":"a:2:32445:243-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32445:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12773:30484":{"id":"2:12773:30484","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12772:30494"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44212:2544","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:1831":{"id":"2:12768:1831","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12767:25622"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:26859":{"id":"5:5555:26859","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12868:25487"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12833:32481":{"id":"2:12833:32481","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12786:2792":{"id":"2:12786:2792","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42031:197","prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:1871":{"id":"0:54:1871","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[233,0],"end":[259,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7789:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7789:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2487:207","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12840:32485":{"id":"2:12840:32485","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864:25482":{"id":"2:12864:25482","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12815:25639":{"id":"2:12815:25639","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12803:32476":{"id":"2:12803:32476","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12441:2542","str::split":"2:12794:25629","prim@char":"1:12032:451","`DoubleEndedIterator`":"2:7827:127","str::rsplit_terminator":"2:12806:32477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43979:2570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:717":{"id":"0:18:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[38,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:9852:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:232","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43082:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12783:25140":{"id":"2:12783:25140","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:2536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12794:25629":{"id":"2:12794:25629","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12441:2542","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::split_whitespace":"2:12772:30494","str::rsplit":"2:12800:25633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43929:2566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2426:2440":{"id":"2:2426:2440","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2487:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:661"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12775:32475":{"id":"2:12775:32475","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44193:2560","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12841:32486":{"id":"2:12841:32486","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12466:2534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:32489":{"id":"2:12856:32489","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12847:25094":{"id":"2:12847:25094","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:33168":{"id":"5:5552:33168","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2539","`String`":"5:7535:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2539","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2737-0:112:1790":{"id":"b:2:2737-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2707:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2740:134","2:2741:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:27:1820":{"id":"0:27:1820","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[90,0],"end":[164,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7789:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7789:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2487:207","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12859:32490":{"id":"2:12859:32490","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:2536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12774:28710":{"id":"2:12774:28710","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44183:2559","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:33166":{"id":"5:5543:33166","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3498:1632":{"id":"2:3498:1632","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39789:5507","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:33164":{"id":"5:5536:33164","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2539","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2539","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12772:30494":{"id":"2:12772:30494","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12773:30484"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44203:2546","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12809:25635":{"id":"2:12809:25635","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542","str::rsplitn":"2:12812:25637"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44033:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12850:25642":{"id":"2:12850:25642","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:2536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12757:1921":{"id":"2:12757:1921","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42031:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2424-0:112:1790":{"id":"b:2:2424-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:2577","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2418:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2426:2440"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:112:1790":{"id":"0:112:1790","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[33,0],"end":[35,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:113:1791"],"impls":["a:2:32445:243-0:112:1790","a:2:32527:2578-0:112:1790","a:2:42157:8026-0:112:1790","a:2:42158:8211-0:112:1790","a:2:2949:253-0:112:1790","b:2:2737-0:112:1790","b:2:3496-0:112:1790","b:2:2731-0:112:1790","b:2:2727-0:112:1790","b:2:2427-0:112:1790","b:2:2742-0:112:1790","b:2:2424-0:112:1790","b:5:5809-0:112:1790","0:19","0:117","0:118","0:115","0:17"]}}},"b:2:2742-0:112:1790":{"id":"b:2:2742-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2745:134","2:2746:1617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2427-0:112:1790":{"id":"b:2:2427-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:2577","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2421:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2429:25010"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12780:25138":{"id":"2:12780:25138","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12821:1832":{"id":"2:12821:1832","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12441:2542","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::rmatches":"2:12824:32478"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44133:2563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:25490":{"id":"2:12870:25490","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34698"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12744":{"id":"2:12744","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12745:873","2:12746:1890","2:12747:32469","2:12748:32470","2:12750:32471","2:12753:25580","2:12754:32472","2:12755:339","2:12756:25599","2:12757:1921","2:12759:1944","2:12761:25597","2:12763:25598","2:12765:32473","2:12766:32474","2:12767:25622","2:12768:1831","2:12769:1817","2:12770:5602","2:12771:5248","2:12772:30494","2:12773:30484","2:12774:28710","2:12775:32475","2:12776:30489","2:12777:25641","2:12780:25138","2:12783:25140","2:12786:2792","2:12790:2758","2:12794:25629","2:12797:25631","2:12800:25633","2:12803:32476","2:12806:32477","2:12809:25635","2:12812:25637","2:12815:25639","2:12818:25640","2:12821:1832","2:12824:32478","2:12827:32479","2:12830:32480","2:12833:32481","2:12835:32482","2:12837:32483","2:12839:32484","2:12840:32485","2:12841:32486","2:12844:32487","2:12847:25094","2:12850:25642","2:12853:32488","2:12856:32489","2:12859:32490","2:12862:32491","2:12864:25482","2:12865:25483","2:12866:25485","2:12867:25486","2:12868:25487","2:12869:25489","2:12870:25490","2:12871:25491","2:12872:32492","2:12874:8018","2:12875:32493"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12797:25631":{"id":"2:12797:25631","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12257:2545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3496-0:112:1790":{"id":"b:2:3496-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:2577","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63:1895":{"id":"0:63:1895","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[300,0],"end":[337,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:717":{"id":"0:116:717","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9852:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9833:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5809-0:112:1790":{"id":"b:5:5809-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9882:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32446:2577","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1594"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12750:32471":{"id":"2:12750:32471","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12748:32470"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12754:32472":{"id":"2:12754:32472","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:1791":{"id":"0:113:1791","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[34,4],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[37,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9882:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2733:744":{"id":"2:2733:744","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:1958":{"id":"5:5537:1958","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12824:32478":{"id":"2:12824:32478","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12441:2542","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::matches":"2:12821:1832"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44151:2564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:2536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12770:5602":{"id":"2:12770:5602","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43905:2550","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12776:30489":{"id":"2:12776:30489","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44221:2543","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2010":{"id":"0:108:2010","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[721,0],"end":[754,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","description","cause","source"],"trait":{"name":"Error","id":"2:2789:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12763:25598":{"id":"2:12763:25598","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12761:25597":{"id":"2:12761:25597","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12872:32492":{"id":"2:12872:32492","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4671:32492"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44228:2554","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1796":{"id":"0:20:1796","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:42176:232","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:45:1857":{"id":"0:45:1857","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[191,0],"end":[211,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7789:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7789:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2487:207","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:25487":{"id":"2:12868:25487","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12800:25633":{"id":"2:12800:25633","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12441:2542","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::split":"2:12794:25629"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43947:2565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:2536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:33164","5:5537:1958","5:5540:33165","5:5543:33166","5:5551:33167","5:5552:33168","5:5553:8127","5:5554:26858","5:5555:26859"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:61:1880":{"id":"0:61:1880","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2228":{"id":"0:0:2228","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1307,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]","#![allow(clippy::cast_possible_wrap, clippy::cast_sign_loss,\nclippy::cast_precision_loss, clippy::needless_pass_by_value,\nclippy::similar_names, clippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::must_use_candidate, clippy::range_plus_one)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:112:1790","0:20:1796","0:21:1799","0:26:1816","0:27:1820","0:44:1855","0:45:1857","0:53:1866","0:54:1871","0:61:1880","0:62:1889","0:63:1895","0:65:1911","0:105:1989","0:106:1998","0:108:2010"],"is_stripped":false}}},"2:2746:1617":{"id":"2:2746:1617","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12767:25622":{"id":"2:12767:25622","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12768:1831"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:32493":{"id":"2:12875:32493","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4669:32493"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44246:2556","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12818:25640":{"id":"2:12818:25640","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:2536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2731-0:112:1790":{"id":"b:2:2731-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2733:744"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32527:2578-0:112:1790":{"id":"a:2:32527:2578-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32527:2578","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12865:25483":{"id":"2:12865:25483","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39976:25493","Self::is_ascii":"2:12864:25482"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39976:25493","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:717"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12748:32470":{"id":"2:12748:32470","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12771:5248":{"id":"2:12771:5248","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43915:2549","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1866":{"id":"0:53:1866","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[221,0],"end":[223,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.866 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12837:32483":{"id":"2:12837:32483","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12853:32488":{"id":"2:12853:32488","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12032:451","self::pattern":"2:12441:2542"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:2536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:32482":{"id":"2:12835:32482","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12871:25491":{"id":"2:12871:25491","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34698"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:1816":{"id":"0:26:1816","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12745:873":{"id":"2:12745:873","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12032:451"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12769:1817":{"id":"2:12769:1817","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12032:451"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43899:1789","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5551:33167":{"id":"5:5551:33167","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12806:32477":{"id":"2:12806:32477","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12441:2542","str::split":"2:12794:25629","prim@char":"1:12032:451","str::split_terminator":"2:12803:32476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43997:2569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:2536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12867:25486":{"id":"2:12867:25486","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:661":{"id":"0:119:661","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1911":{"id":"0:65:1911","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[353,0],"end":[414,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2492:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10093:149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2440:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:8018":{"id":"2:12874:8018","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4672:8018"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44237:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2730:2752":{"id":"2:2730:2752","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2704:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2949:253-0:112:1790":{"id":"a:2:2949:253-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2949:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:21:1799":{"id":"0:21:1799","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[53,0],"end":[72,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:1796","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7789:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:7789:162","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2487:207","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:1889":{"id":"0:62:1889","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[285,0],"end":[290,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12755:339":{"id":"2:12755:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12756:25599","`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32447:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12765:32473":{"id":"2:12765:32473","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12038:1536","str::slice_mut_unchecked":"2:12766:32474","crate::ops::Index":"2:39607:2841"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5811:1594":{"id":"5:5811:1594","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12766:32474":{"id":"2:12766:32474","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12038:1536","crate::ops::IndexMut":"2:3162:2842","str::slice_unchecked":"2:12765:32473"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12830:32480":{"id":"2:12830:32480","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12441:2542","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::match_indices":"2:12827:32479"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44097:2562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:2536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12753:25580":{"id":"2:12753:25580","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11996:2547"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:1855":{"id":"0:44:1855","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[186,0],"end":[188,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2727-0:112:1790":{"id":"b:2:2727-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2704:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2701:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2730:2752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:105:1989":{"id":"0:105:1989","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[677,0],"end":[679,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2429:25010":{"id":"2:2429:25010","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2745:134":{"id":"2:2745:134","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32375:2501","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:106:1998":{"id":"0:106:1998","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[693,0],"end":[702,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12747:32469":{"id":"2:12747:32469","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:32484":{"id":"2:12839:32484","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:1944":{"id":"2:12759:1944","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42031:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42029:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5540:33165":{"id":"5:5540:33165","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7535:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2741:1619":{"id":"2:2741:1619","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2711:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12756:25599":{"id":"2:12756:25599","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12049:1641"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12812:25637":{"id":"2:12812:25637","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12032:451","str::splitn":"2:12809:25635","self::pattern":"2:12441:2542"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44051:2567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12461:2536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42158:8211-0:112:1790":{"id":"a:2:42158:8211-0:112:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42158:8211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12827:32479":{"id":"2:12827:32479","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12441:2542","`DoubleEndedIterator`":"2:7827:127","prim@char":"1:12032:451","str::rmatch_indices":"2:12830:32480"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44079:2561","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12446:2535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12862:32491":{"id":"2:12862:32491","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12402:133","`FromStr`":"2:12401:2557"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42176:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12401:2557","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12401:2557","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:25489":{"id":"2:12869:25489","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:896:34698"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:39706:220":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:43853:5590":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:44858:233":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:15294:4276":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12366:20638":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:15329:4284":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13365:3797":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"15:0:2349":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:8134:5021":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11065:3513":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46565:5654":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4914:6996":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:4169:13462":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:3358:31016":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:596:6603":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:41219:5418":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:7368:1850":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:3081:13413":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11052:3487":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12244:3655":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10051:3471":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:787:5124":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:3155:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:1576:6650":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:48375:5735":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:14485:3666":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:40650:5519":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:1054:5131":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:10312:3167":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4968:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14373:4001":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:11816:3224":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:13922:3911":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8476:5905":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"18:538:3292":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:40:2845":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:5388:2540":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:430:33850":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:3491:28038":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:595:3349":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:3162:2842":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:22440:5468":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4860:6975":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43761:5583":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1286:5132":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12410:3676":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:1682:6724":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:5639:5795":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12273:3704":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:6843:2852":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:10569:33873":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:21392:8282":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:47441:5686":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:3994:8146":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:15535:4356":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:6889:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:4167:8168":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:44648:7551":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:15125:4230":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:12057:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:1550:5141":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"11:2562:6528":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:46733:5659":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:11399:3542":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:9467:135":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:5152:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5910:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"14:215:5116":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13869:3903":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8866:1850":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:7657:7510":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:40557:30787":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:46197:5637":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:922:5125":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:2368:8086":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:42347:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:5082:5786":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:15267:4269":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:15480:4337":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:41817:8137":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13273:3778":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:23095:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:5866:4657":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:10757:7568":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:3230:33352":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4151:8166":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:46467:5651":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:39624:219":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:2518:5761":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:46867:5662":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12387:20639":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:5004:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:5240:209":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:1743:658":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:6013:13957":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:491:3284":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4480:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:14989:4199":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:483:6540":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11485:3555":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:7621:20454":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:4:1113":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:23126:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:40587:8066":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:8891:5918":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:6929:4835":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14221:3970":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:5897:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:4450:3152":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:6543:8240":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:2421:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:15855:3751":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:42622:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:7523:4953":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:10792:5832":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:3394:3124":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6893:4833":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:0:878":{"crate_id":6,"path":["libc"],"kind":"module"},"2:22001:8097":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:6083:19556":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:2228:3360":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:4637:7382":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"15:394:19548":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12153:3645":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:7339:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:15493:4343":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:14181:3966":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2547:1783":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"16:6318:4748":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:3002:8274":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10813:33871":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:6569:4573":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:1527:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:44656:7553":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:46096:5633":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:9026:5929":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:40474:2554":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:41953:5554":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7041:4853":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:1486:5124":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13121:3751":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:44246:2556":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:32429:2742":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:22562:7534":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:44514:5607":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:8244:2533":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:7004:3143":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4724:6916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:1516:5122":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:11576:3567":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11714:3585":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:22637:5478":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:0:2352":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:46419:5650":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:1917:5143":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11605:27710":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:4932:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:5712:4636":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"9:0:2344":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:4613:4606":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:12046:796":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"11:123:3087":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:40573:5517":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:6351:8372":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:8403:5902":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"9:237:5570":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"11:774:5123":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"9:177:7754":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:43915:2549":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:42386:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:3818:2846":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:10852:20524":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:33927:13637":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:4719:4608":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:1528:6620":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"0:112:1790":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"17:16180:3787":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:15133:4232":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:12035:1150":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:22266:8370":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:951:5130":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:10432:33877":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:1151:33804":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:7334:13618":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:44377:5604":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:40708:5525":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:6872:2854":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:42661:5439":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:40446:2888":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:13042:161":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:9536:31495":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13448:3814":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:6682:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:7722:4574":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:4381:3126":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:7895:125":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:15961:3765":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:4180:8169":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:2324:635":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:5571:8226":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:6120:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14921:4182":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:6357:182":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:32422:5498":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:2048:5223":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:43833:5588":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:1796:5755":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:6012:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13235:3772":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:30623:2839":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"11:1676:3093":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:42780:2522":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:16160:4512":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:12052:1640":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:11549:3565":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12596:3689":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:501:6546":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6583:4775":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:15244:4261":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:7901:2525":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:557:5745":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11469:3549":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:621:2505":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:6596:8242":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:23343:5495":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:12445:3681":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:1507:6612":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13787:3893":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:4899:419":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:15013:4203":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:1906:5253":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11516:5774":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:5971:3197":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:40778:5404":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:12746:3699":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:7702:7521":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:7029:3147":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:5363:4623":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:8920:8245":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6764:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:4764:6930":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:41242:5420":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:22578:5471":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:48101:5721":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:8190:5523":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:44489:5606":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:13334:3788":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:10812:125":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:15027:4204":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12103:3641":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12202:20637":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:14497:4017":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6415:4758":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:3251:5144":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:47103:5681":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:9888:2521":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:4798:3188":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:6297:226":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:8167:5024":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:42759:2513":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:14296:3982":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:10247:8228":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4745:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:44331:5595":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5921:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:533:3181":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:4755:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11617:3570":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:11497:3559":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:4578:6883":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6818:4826":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:2231:3552":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:11158:5914":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:11604:3569":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:5830:4650":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5992:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:9479:3211":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:9730:20508":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:40377:2555":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4989:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6376:20448":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:38942:13644":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6071:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"11:1582:5139":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:47789:5717":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13395:3801":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:1815:1187":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:10940:5829":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4549:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:2644:4553":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:22226:13653":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:4939:1100":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:9896:2520":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:44228:2554":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:15101:4225":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:9094:183":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:11484:5449":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:588:6599":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6047:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:1570:6648":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"11:2369:5147":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:4676:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:33731:13634":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:41760:167":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:415:181":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:43009:2510":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:10422:3482":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:1406:152":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:4235:5388":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:42168:5436":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"18:681:3316":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:44652:7552":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:44922:177":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6742:4812":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:4491:8172":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:7855:5832":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:5727:4639":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12548:3685":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:1691:6730":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40830:5535":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:13064:30802":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11313:5962":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:22602:5476":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:12418:3678":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:11194:20544":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:6741:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:34273:13639":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:7436:4677":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:4569:8189":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1650:6706":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:903:2846":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:9681:2511":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:12345:3668":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:12324:3664":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13707:3879":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:44672:7557":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:1596:6664":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"11:673:5120":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:7136:30195":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:40540:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:16109:4502":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:13202:3766":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:766:24651":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4440:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:2236:33716":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:15507:4349":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:15631:4383":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:5088:4620":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:8239:4920":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"7:0:1686":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7828:4972":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1537:6625":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:3764:4593":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:5435:4624":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:21219:31225":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:2979:33248":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:5743:4640":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6346:4750":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:7651:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:46118:5634":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:2062:5225":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:7451:3128":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:42773:2521":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11767:3591":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:14934:4187":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:4411:3124":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:39607:2841":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:44901:5619":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"15:306:19539":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:10538:5768":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:5017:4618":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12898:20517":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:22546:5470":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"9:426:19436":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10315:3343":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:32447:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:1903:5141":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:7613:4958":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:7468:5243":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:15733:4407":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:10916:5446":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6513:4763":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:32446:2577":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:8796:5912":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4506:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:21390:8097":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:9971:5551":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:11355:5816":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:42425:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4800:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:2154:5226":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:5867:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:11558:13437":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:7474:4941":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6792:4825":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:7906:2524":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:43811:5586":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:10136:2526":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:44503:13446":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:3581:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:8137:3329":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:2197:3357":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:40458:2556":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:46764:5660":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:43319:5575":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:6136:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:16076:4495":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:9186:25118":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:39803:5508":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:3830:4595":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:2403:5137":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:21451:8281":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13961:3916":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:3594:5120":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:22355:8361":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:7798:2581":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4585:4605":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:687:5137":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13491:3830":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7651:4959":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:30821:30769":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"9:52:7743":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:7268:2844":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:16098:4501":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:5052:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6156:4704":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:7534:4580":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:14145:3961":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"11:700:1850":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:6819:7400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12474:3486":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:10840:27994":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7768:4572":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:5877:5403":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:44557:2572":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:21445:8278":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:1703:6734":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:14413:4006":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:2574:4550":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:4434:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8978:113":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:1541:2848":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11701:3583":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:42227:5137":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:2426:2357":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:7112:1843":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:5760:20445":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7544:4954":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:5104:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:4830:6959":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12052:3634":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:12038:1536":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:1501:6609":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:44033:2568":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:15671:4394":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:8001:5837":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:44845:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:4921:4615":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:119:14037":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:1902:2504":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:15566:4364":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:12441:2542":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:7643:8097":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7884:20456":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:4740:8157":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:849:5137":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2944:115":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12486:3682":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:1966:204":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:2975:7524":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:6804:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:32528:2733":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6467:4762":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:22727:5490":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:654:14396":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11369:3540":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:15747:4410":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:5344:3099":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11014:3510":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:12461:2536":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:6560:3086":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:30657:30773":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:6666:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:12051:1639":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:2031:3353":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:15659:4392":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15301:4277":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:3988:8145":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:482:3180":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12290:3661":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:15612:4378":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:634:5217":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:9852:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:10076:5755":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:32415:4920":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:4841:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11307:3535":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:7582:4955":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:8146:5876":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:3373:13412":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:5753:5801":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:3482:2506":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:3687:3099":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:7015:4852":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:7738:8055":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:5816:4649":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"0:54:1871":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"16:2907:4564":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10520:33874":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:33672:13635":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:7284:5556":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:4557:4604":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"14:7:5111":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:4231:5777":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:2986:2729":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:6605:1850":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4428:6812":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11155:3520":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:4115:5387":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:5446:111":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8904:8246":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:918:5122":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:12056:1246":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:45942:5627":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:5154:3132":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11690:3582":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:5392:2541":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:10530:245":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14385:4002":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:8050:5013":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:4050:8151":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:5322:4622":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:21443:8097":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:4700:8198":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:4958:5394":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"18:515:3282":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:357:5742":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:6610:3202":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:15037:4205":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:8154:5022":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:2766:4558":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:5987:226":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:2380:4542":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:3732:5773":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:39976:25493":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:4388:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:30629:2903":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10915:3498":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:1514:6615":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13832:3899":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"8:0:2343":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:48270:5728":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:7307:3111":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:102:6519":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:8281:7559":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:2554:33844":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:14346:3999":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:22197:8097":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:8453:5570":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:14001:3921":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:6927:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:40657:5520":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:3315:4590":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:44193:2560":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:46397:5649":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:43741:5581":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:9892:212":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"9:450:19434":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:15062:4214":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:7599:3209":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"11:1087:33849":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:328:6523":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:7524:3133":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:4998:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:1040:4862":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"0:26:1816":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"6:7365:7485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:3032:4587":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:7931:5223":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:5780:5802":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:12049:1641":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:46367:5648":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"14:31:5111":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:3127:137":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:39789:5507":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:12054:848":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:6960:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:1094:3350":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:9196:7564":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:6117:3124":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11051:3217":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10667:33876":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"0:62:1889":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"2:12672:117":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:12031:1033":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"0:106:1998":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"17:1203:3352":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:10953:5794":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"7:31:19420":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:16087:4500":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"16:6352:4751":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:9894:2519":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:536:4521":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:48223:5724":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:0:1528":{"crate_id":1,"path":["std"],"kind":"module"},"11:299:6520":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:22675:30782":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:609:3302":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13383:3798":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:14324:3988":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:6944:33865":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:3217:5143":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:893:2848":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:44151:2564":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6401:4567":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:2370:8087":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:7580:3207":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:3232:4532":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:40677:5522":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:1778:634":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"18:719:3324":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:6718:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:16170:3782":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:6711:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:7692:7519":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:43899:1789":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:12042:691":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:14399:4003":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8352:5780":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:5419:3471":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:2492:131":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6781:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:8291:31493":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:7342:33868":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:5982:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:1387:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:48398:5736":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:548:6578":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:14950:4190":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:4928:3372":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:11449:3417":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:23250:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:3425:5885":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:945:5129":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:42219:5120":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:12718:20516":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6079:7261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:42089:5120":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:6540:5806":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:14426:4007":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:10843:5445":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:44425:5605":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44079:2561":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:12230:3650":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:3980:8144":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11978:3630":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:15108:4227":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:15287:4275":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:22614:30779":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:46945:5678":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:40869:5414":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:15079:4219":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:707:2537":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:41783:5427":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:11170:27995":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:43055:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:4311:5778":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:46635:5657":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:2701:159":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:9877:117":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:32560:112":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43082:134":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6425:4759":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4449:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:7380:27940":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:7785:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:12048:793":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:1632:6694":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:1495:5138":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:11370:5818":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15356:4291":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12380:3671":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6687:4799":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:42114:5556":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:6898:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:8181:4586":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4595:6891":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:2696:4555":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:786:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3930:8142":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12459:3506":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:2406:4543":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:4906:8196":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:42159:13717":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11958:3629":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:671:3315":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:7598:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:811:2846":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:7754:5829":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:7604:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:13116:5464":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:14156:3963":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:44736:13764":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:3123:2579":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4824:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12784:3701":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:42999:7541":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:22326:8360":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:3201:5765":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:44237:2555":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8858:5917":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:2659:2502":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:40526:2880":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3510:8115":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:22311:8097":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:11045:3216":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:40737:5397":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:80:24639":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13322:3787":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:16049:4486":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:2658:8097":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:15177:4244":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:4042:8149":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:2183:7523":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:14099:3951":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:212:3097":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:699:3319":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:22654:30745":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:10141:2528":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:3410:13415":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:6466:3201":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:1685:3099":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10775:3488":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:12512:13439":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8157:5772":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6159:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12356:3669":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:4920:31528":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:7848:5831":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:10510:3483":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:5004:3124":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10950:3501":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:14282:3980":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:22720:7537":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:6228:7304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:489:6543":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6658:7336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12536:3684":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"18:574:3285":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:12206:5457":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44309:13445":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:6862:2853":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:15224:4254":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:40798:5409":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:15903:4458":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:39640:216":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:5111:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:7668:5822":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:15589:4377":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:2334:13653":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:11382:7572":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:1969:203":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:9886:2513":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:4915:8197":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13856:3900":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:4603:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4401:6789":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10207:3338":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:3199:5764":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:42542:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:43929:2566":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7391:20453":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4566:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:1710:6737":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:42766:2514":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11412:3543":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10657:3486":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:3251:3361":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"15:327:7740":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:1734:6746":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:46787:5661":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:1664:6717":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:4744:8160":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:2537:1784":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"1:2380:8092":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:5593:3124":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"9:507:5203":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:5381:5787":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:1558:6640":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:3837:5775":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:11517:5450":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:4212:3124":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:5961:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"14:187:19526":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11675:3578":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:12053:1637":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:6194:5804":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:22691:30776":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"0:0:2228":{"crate_id":0,"path":["strsim"],"kind":"module"},"16:7792:20455":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:38253:13641":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:48241:5725":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:5068:7078":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:742:5122":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"13:0:2341":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:1896:2846":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:11800:3594":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12140:3644":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:1534:5120":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"19:0:1130":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:4497:4602":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:10986:5915":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"0:53:1866":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"17:15990:4473":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:4529:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:2093:5256":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:8802:205":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:9833:232":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"11:883:5130":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13182:3765":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:40807:5410":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:44664:7555":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:23064:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:14904:4181":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:12222:5458":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:3241:5767":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:7006:4849":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:1536:5222":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:1697:6733":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:4561:2744":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:2911:3187":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:42308:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"0:44:1855":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"16:2832:4561":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6268:33866":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:10674:5120":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:4182:3124":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8169:8096":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:1024:3099":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:41275:5423":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:41966:5776":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:41257:3162":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:44699:128":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:5992:3132":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:14359:4000":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:21562:8097":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8959:5919":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12659:20494":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:7511:5249":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:8562:5911":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:2352:5132":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:44644:7550":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:42147:5558":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:7679:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14765:4132":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:8115:5018":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:33320:13633":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:2704:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:7560:5251":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:4893:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11041:3486":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:22280:13653":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:8973:5920":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:7827:127":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:5612:4571":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"11:2383:5120":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:836:5120":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:1025:5131":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:22134:8365":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:10097:5937":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"17:12077:3636":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:5829:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:10246:3164":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:7504:3329":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:5995:4523":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"18:564:3294":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6545:4773":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:0:533":{"crate_id":2,"path":["core"],"kind":"module"},"1:1760:5754":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:1439:5137":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7090:4861":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:40717:5526":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:46589:5655":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:7880:2580":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:41800:5429":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:6114:7275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:9099:240":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:48322:5732":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:46167:5636":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"11:396:3091":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6700:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:14698:4077":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"10:44:5150":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"0:63:1895":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"18:614:33884":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:2151:5132":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:39750:2491":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:10101:153":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:32527:2578":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:6249:3197":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:6361:4752":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:9048:25114":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:13297:3782":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5075:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:886:3107":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:43798:5520":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:9541:7763":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:4862:4613":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:2810:4560":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:10520:8097":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:9104:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2949:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:12183:5456":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"0:20:1796":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"11:2443:2848":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:6968:20451":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:15160:4236":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12091:3640":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:41226:5419":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:16123:4506":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"5:7435:2498":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:6386:4755":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:8072:5014":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:1923:5144":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:12039:1622":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:43824:5587":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:2707:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:527:6566":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:7554:4581":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:624:33883":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:39728:222":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:7376:1850":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:7752:13623":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4783:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:38363:13643":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4375:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5955:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:3255:217":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:2536:6525":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:790:3102":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:4641:4607":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4738:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:8326:5893":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:43519:7549":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"11:364:3089":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:1131:33778":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:21202:31216":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:48281:5729":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:40820:5534":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13309:3785":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:43723:5578":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:7748:13624":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12180:3647":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:14509:4024":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4516:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:44051:2567":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:15367:4292":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:939:5128":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5634:4626":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:4377:227":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8850:5120":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:30715:30754":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:5395:5791":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:6901:4575":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:1505:5121":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:7717:8023":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"18:113:24641":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:7564:3191":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10242:3339":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:4742:8159":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:4150:13411":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4776:6937":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:3323:8123":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:2209:8079":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:11632:3572":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:7923:5836":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"14:221:5118":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:11178:6088":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:8936:8247":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:16134:4508":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:13695:3877":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:42097:5137":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:13233:113":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:6485:4568":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:2256:7527":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:1604:6669":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:10822:5772":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:4020:2848":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:2830:2509":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:9474:5830":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9968:20514":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:4417:4600":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13684:3874":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:41009:5539":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:12584:3688":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:15527:4355":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:7644:5744":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:2304:4862":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"11:1051:5132":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:47291:5685":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:12033:1657":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:31191:202":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:22741:5491":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:15842:3737":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"10:0:2345":{"crate_id":10,"path":["adler"],"kind":"module"},"14:160:5111":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:5648:4630":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:2169:20571":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:38308:13642":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8828:5914":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:6059:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4710:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:2954:2727":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:48039:5720":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"9:393:19435":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:12047:797":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:11998:7765":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:15374:4294":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14887:4179":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:8237:8136":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:13724:3882":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:4159:8167":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:3888:4596":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:30645:2510":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4698:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5963:4666":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:16062:4492":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:8011:8126":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:4639:7384":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:10785:33878":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:3099:123":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:5939:4517":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12127:3643":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12335:3666":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:859:1850":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:6490:7533":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:9021:5928":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:755:3333":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:41930:30784":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:736:24650":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5009:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:4625:8146":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:14757:4129":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:4473:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12264:3660":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:40699:5524":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11144:5913":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:7277:1850":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:12055:1696":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:13419:3803":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12220:3365":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:10762:7570":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:10999:5448":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:5044:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:6644:239":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:7503:4579":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:15689:4400":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5140:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4955:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:7736:4962":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:4556:6870":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"10:36:6530":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4922:7001":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4469:8171":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1455:1850":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:32472:250":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:0:2342":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:6961:7478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:13091:211":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:5661:4635":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:48307:5731":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:14822:4169":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:9014:5927":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:580:6594":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:6943:7475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:495:6545":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:4527:4603":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:261:3342":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:4534:2735":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11290:3218":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:44964:5625":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:43772:5584":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11779:3592":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:15680:4398":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10925:20526":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:8247:8033":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:12257:2545":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:7492:4949":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:46237:5639":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:43027:30742":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:723:150":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13909:3909":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:21190:31216":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:40787:5533":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:2864:4562":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:4092:5137":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:11612:5819":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4854:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:43289:153":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:5308:126":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:10535:5766":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:15710:4403":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:48296:5730":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:9890:2522":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:40436:2887":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:45966:5628":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:44360:5603":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10430:5912":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:8991:25087":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:4129:30194":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4053:4598":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:43843:5589":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:21573:5467":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:7540:5966":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:10035:3470":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:2144:3116":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:3600:4592":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:2778:122":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"18:652:3285":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:10329:3168":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:21854:8284":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:39611:5502":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4947:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:867:5123":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:43504:5576":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:43997:2569":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:3133:139":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:401:3344":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:3328:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:21849:8097":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:7936:175":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"14:40:3752":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:11034:3215":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:3012:4876":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:14266:3979":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11743:3589":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:3239:5766":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:4462:4601":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:43272:5566":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5123:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:12037:1503":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:42269:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:10155:5939":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:9164:5934":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:5982:4673":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6226:4726":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6696:4800":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:4986:4617":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:2418:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:10095:5938":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:43039:4991":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"11:0:2346":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:637:5746":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:9274:5756":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:12032:451":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"11:2124:4862":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:7297:2848":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"11:1142:5135":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:15645:4385":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:46274:5641":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9651:20507":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:12466:2534":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"11:1603:5140":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:43873:2558":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:30589:2838":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:5500:5794":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:6279:4746":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:12146:5453":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:44346:5600":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:44524:5611":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:42244:202":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6531:4771":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:13648:3865":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:3460:3363":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:44848:225":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10881:20525":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:44133:2563":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:41233:5540":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2698:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:1556:5142":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3163:27581":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:8300:5882":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:4383:5779":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:11388:7573":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:7732:8024":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:4865:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:12115:3642":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:2933:19584":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:5128:210":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"9:357:19449":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4902:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:4127:107":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:7218:13626":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13162:3755":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:1107:5134":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"13:226:6518":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:8274:5776":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:7535:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:40394:2886":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10471:33872":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:2428:4544":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:8842:5915":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:12036:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:10962:3504":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:15212:4253":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:21571:8279":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:15432:4336":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:11197:5810":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12510:3683":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:2440:110":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:46513:5652":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"11:1910:5142":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12614:20515":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:6332:4565":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:40686:5523":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:2140:5131":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:7619:2846":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:48437:5737":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13504:3831":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8308:5891":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:1591:6662":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:7689:3213":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"18:521:24652":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:15546:4361":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:3584:3364":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:1546:6631":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:9559:20492":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:1496:6607":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:42029:200":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:40466:2555":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:574:6591":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10337:3472":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:11234:158":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:7838:3418":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:7285:5241":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:32375:2501":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:6813:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"15:288:19538":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6456:4761":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"11:2423:1850":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"16:7067:4859":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:12684:3438":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"11:1007:4862":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:7318:4899":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:41033:5417":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43947:2565":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:44097:2562":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:2881:4563":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:8006:5838":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:43301:5570":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:7423:2497":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12872:3706":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:2596:4551":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2722:4556":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:14633:4026":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:4366:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:2450:4545":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4847:6970":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:2618:4552":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:13218:3770":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:15311:4280":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5859:7147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"18:599:33886":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:40481:2881":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:43887:2553":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:40769:5532":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:8493:8221":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:6070:3192":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:2942:2726":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:3345:13459":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:22173:8366":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:4505:3153":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:12455:2537":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:2622:5762":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:3339:13460":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:30360:8139":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:10137:3336":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:9882:126":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:11141:3518":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:43064:2510":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:7633:7506":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:10578:3213":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:5625:226":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:44939:5624":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:6687:3099":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12921:3666":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:6983:6229":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:14170:3965":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:7865:5833":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:22360:8359":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:44203:2546":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:7782:4964":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:1618:1788":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:1639:6698":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13145:3752":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:5974:7199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:41248:5541":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:14208:3969":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:40493:2882":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"11:1066:19513":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:11126:3517":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12560:3686":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:12191:3648":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:3738:5223":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:7915:5835":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:46321:5642":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11426:3544":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:13056:3728":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2711:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14021:3924":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:40879:5536":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:41989:5430":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:2487:207":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:11215:3526":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:2703:6193":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14896:4180":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:542:6575":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13083:3736":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:6107:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:8545:5120":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:3797:4594":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:12050:1638":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:9884:2514":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:36322:4882":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:47021:5680":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:40630:5518":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:3196:33357":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:11996:2547":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:10802:136":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:3049:19586":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11294:3534":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:23188:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:7102:20452":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4351:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:555:6581":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1674:6723":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:22003:8280":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:42464:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"11:434:33851":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:40406:30780":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11727:3587":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3735:5774":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:11537:5775":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:44660:7554":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:7694:4583":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:40755:5529":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:15200:4247":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9624:20490":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:15943:3755":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:2695:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4814:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:533:6569":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"11:856:5128":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7513:4952":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:10723:2566":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:3915:4597":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:511:3348":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:44668:7556":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:8097:5016":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:4777:717":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:11113:3516":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4535:6859":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"11:351:33846":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:7498:5246":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:4949:4616":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:4309:2741":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:5015:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9918:20513":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:15049:4208":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:47227:5683":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:3670:8138":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:2993:2731":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"7:78:19427":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:22:731":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:4588:451":{"crate_id":2,"path":["core","char"],"kind":"module"},"17:13436:3811":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11657:3576":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:43311:5574":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:44909:5621":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4789:6941":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:43751:5582":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:3343:2846":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:7462:4940":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:7317:33358":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13809:3894":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12029:3633":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:11523:3562":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:12999:3718":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:14251:3975":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:435:3347":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:34446:4881":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4870:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:6934:7472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:10321:111":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:31219:2485":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:7668:7514":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:8984:5923":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:3065:3375":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:7529:3349":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:8205:1930":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:4835:4612":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:2336:13654":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:3461:4591":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:46543:5653":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11476:5773":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10608:3485":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:692:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"11:875:5129":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:16032:4484":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"11:2548:6526":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:44680:6088":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:43905:2550":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:6169:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:5415:5792":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"18:644:3285":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:15192:4246":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:42008:5432":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:4514:2743":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:9354:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:4908:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:281:2539":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:6426:5540":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:6753:4813":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:12446:2535":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:22224:30639":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:48360:5734":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6189:4709":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10016:20491":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:7343:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:6913:7460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11027:3461":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:1477:5123":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:2205:3148":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:21236:31221":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10716:3487":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"11:2569:2497":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:42176:232":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:11215:6093":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:4635:7380":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:5574:4566":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:4543:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:8213:2566":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:14122:3960":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12255:3659":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11321:3486":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:4031:3124":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:1521:6617":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:2523:201":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:32436:5499":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:40727:5528":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6868:7436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:4460:2742":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11243:3531":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:43104:2512":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:4703:8171":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:14455:4010":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:4103:5386":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:9069:6089":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:12828:3704":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:15345:4287":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:1913:15388":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:8551:5910":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:2526:4548":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:4569":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:6530:3099":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:14843:4174":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:5746:5798":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"14:202:13447":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:43979:2570":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11001:3508":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8814:5913":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13285:3781":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:12003:8025":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:23219:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:7549:5250":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"13:110:33855":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7708:4584":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12972:3717":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:2542:6295":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9813:20511":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:1270:4862":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:39521:13458":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13742:3883":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:660:3309":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5928:7177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:15321:4283":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13976:3919":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"11:1566:19514":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:14778:4139":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:42182:133":{"crate_id":2,"path":["strsim","HammingResult","Err"],"kind":"variant"},"1:4028:8147":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:7660:4960":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13663:3870":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:15003:4202":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:15:1794":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:13676:3872":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:5431:5793":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:9147:5933":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:1692:3124":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:15235:4258":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:45988:5629":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:14312:3986":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:33134:4872":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:48185:5723":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:10767:5831":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:8226:5882":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:5033:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:16016:4479":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:5905:4660":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:3130:138":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:1301:5131":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:928:8029":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:12044:798":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:1115:33803":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11536:3564":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13478:3826":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:710:5121":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:6086:7262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6721:20450":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:507:6549":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:10766:2545":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4461:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:1819:5756":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:6263:7329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"0:113:1791":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"17:9860:20512":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:15117:4228":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:6300:5405":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13948:3914":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:7282:30492":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:44221:2543":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:21217:31219":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11563:3566":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:475:6535":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"0:108:2010":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"2:46686:5658":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:2305:19583":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:11269:3506":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13026:3724":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:13244:3178":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4884:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11340:5815":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4686:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:844:8029":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:47899:5718":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:48250:5726":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:40500:2883":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:5650:2852":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:6146:3178":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"11:2469:2846":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:4266:5389":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:13896:3908":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:11507:3560":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:3278:5768":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:2946:134":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"12:0:2347":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:8253:13622":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:3280:5769":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:46066:5632":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:8330:7369":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:10559:3484":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:10805:5444":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:363:5743":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:5085:7086":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5117:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:13754:3885":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2944:232":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9109:158":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:48345:5733":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:11619:5819":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:14057:3930":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:11966:13725":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:9834:2506":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:4444:3126":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:149:3084":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"9:330:6531":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:5568:7290":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:2352:7532":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:33790:13636":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:26190:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:1160:5136":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:590:3295":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:2202:5760":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:4808:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:23033:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:7622:7502":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:0:2350":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:10172:3337":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:9032:2535":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:15384:4299":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:6128:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:14235:3973":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:563:6586":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:2969:19585":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:6811:8276":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:3443:5771":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:14969:4191":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10896:3496":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"0:105:1989":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"16:7597:33864":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13584:3836":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6017:20446":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:690:3318":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:4038:8148":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:727:3327":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4496:6842":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"11:1887:1850":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12432:3680":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:914:5121":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:10344:3173":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:3603:2848":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:5807:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:12043:693":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:10968:25104":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:11593:5963":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:14439:4008":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:47257:5684":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:3500:8095":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:0:2351":{"crate_id":17,"path":["object"],"kind":"module"},"17:12758:3700":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:1758:5753":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"11:800:2848":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:15868:4428":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:47647:5716":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6261:4743":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:10532:5764":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:32411:5497":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:4364:6761":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:2321:4533":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:645:8020":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11590:3568":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:13765:3886":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:3753:5225":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:4964:8203":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:44676:7558":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:880:5124":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:42105:1850":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:10067:3334":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:96:24640":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:569:6589":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:5798:4644":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13633:3861":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:48147:5722":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10944:5200":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:6243:4733":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:10941:3499":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13254:3777":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7128:5931":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:10473:3212":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:12014:25108":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:7616:7501":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:11307:5811":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:13282:148":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:15279:4272":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:4738:2874":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10293:2549":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6879:4831":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:40422:2885":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:6162:3196":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:46256:5640":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:7388:7496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:6896:3204":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:5632:3197":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:3737:1850":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:10780:5954":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:15184:4245":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12009:3486":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4610:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:9349:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:10099:149":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:33554:8273":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:39782:5506":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:8195:5026":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:23002:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:2548:4549":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:2354:8082":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:43732:5579":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12301:3662":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:23788:242":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8535:5781":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:6837:7410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:4252:5120":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"0:45:1857":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"17:11817:20613":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:3966:8143":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:2600:3168":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:12930:20518":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15557:4362":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:11395:3541":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:5688:3124":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:10726:33875":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7269:33867":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"0:61:1880":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"16:2504:4547":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:22629:5477":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12166:3646":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13463:3820":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7878:136":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:11345:3539":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:39664:218":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11168:20543":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:40507:2884":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13097:3737":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4878:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:14194:3968":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:21891:31210":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:10985:5447":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"11:832:5138":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:10738:5948":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:3112:8034":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:47181:5682":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:22089:8364":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:1789:2846":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:39560:13414":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:10974:3506":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6499:4585":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:3333:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:10831:27992":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:22212:8369":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:11945:3627":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"3:234:232":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:636:3308":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:15337:4286":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:5023:7059":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:44452:5460":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:33613:8275":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11755:3590":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:1562:5143":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:5673:4570":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13516:3834":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6204:4711":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:9891:20493":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:40620:3154":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"11:2498:19509":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:44183:2559":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:2662:5763":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:11256:3532":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:3366:5541":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:43672:5577":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:44537:2571":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:2788:4559":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:1538:1850":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:1545:2846":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:22493:5469":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:6960:4838":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:266:3099":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:62:13983":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:1883:13663":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:15087:4222":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:22753:8140":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:2744:4557":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6100:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:40545:5516":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:2284:19557":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:3655:3380":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13407:3802":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:909:5138":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:4745:4609":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:40855:3306":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:2972:2812":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:507:3285":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:46991:5679":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:44724:5616":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:10878:2565":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:44866:213":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:7645:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:46219:5638":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:42179:199":{"crate_id":2,"path":["strsim","HammingResult","Ok"],"kind":"variant"},"6:7639:7507":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:1785:2901":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:10102:3335":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:6495:3160":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:3022:4877":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:4386:5391":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:4344:4599":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:5891:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:123:14038":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"11:2326:5131":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:7610:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:9678:20497":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12572:3687":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:34100:13638":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10618:33879":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:42503:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:8286:8170":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:45922:5626":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14470:4014":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:9128:5810":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:11226:3528":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:46012:5630":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:42583:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:42235:1850":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:11991:3631":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:7556:7497":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:1883:5120":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:2200:135":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:3191:5142":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:46034:5631":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:7663:5820":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:256:3341":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6222:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:903:5120":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:41846:7540":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4584:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:38198:13640":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:46136:5635":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5146:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:6484:2848":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10988:3507":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"14:165:19519":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:40746:5400":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:14662:4046":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12701:3697":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:2983:33247":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4977:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"11:1891:2848":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:41267:5421":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:6844:4827":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:8281:5033":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:9943:20496":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:2339:4535":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:2789:134":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:1424:5120":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:5384:20443":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:32948:4875":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:2359:4541":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:4999:854":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4647:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:830:3105":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:5885:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:42157:8026":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:21464:5467":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:2670:4554":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:5969:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:3184:5120":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:12045:795":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:8232:5884":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15980:4472":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"0:21:1799":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"2:23281:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:3607:5137":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:4381:5390":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:43280:2529":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:2474:6195":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11088:3514":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:531:3289":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:4806:4611":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11981:5969":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:12030:401":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"14:0:2348":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:41019:5416":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:8292:5889":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:15725:4404":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"9:486:19433":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:23312:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:7331:1850":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:4889:4614":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:6600:20449":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:13347:3789":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:1897:7530":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:10957:2568":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:11459:3547":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:1718:6741":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:44212:2544":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:6691:7359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:46611:5656":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:2472:4546":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:12401:2557":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12310:3663":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:32558:2732":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:40383:5509":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:14087:3949":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5696:20444":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7360:33869":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7568:4582":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:5825:3190":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:4050:3099":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:3160:30370":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:11932:3626":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13935:3912":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:1315:5136":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:5877:2848":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:2973:33780":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:14041:3925":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6915:4576":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:11982:5451":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:3318:13645":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:14878:4175":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:1821:5757":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:43523:5441":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:3166:27575":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:6430:5805":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"0:27:1820":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"1:504:3116":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:2529:208":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11645:3573":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:5764:5401":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:32445:243":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:2997:8272":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:15519:4352":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:582:2485":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8200:5539":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:3936:8141":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6248:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12953:3714":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:11476:3552":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:13337:2843":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4628:6909":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:7371:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:6484:5411":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:10338:28536":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:7843:5830":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:7789:162":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13989:3920":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:4616:6900":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4666:6911":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:6798:7394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10803:3489":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:8220:2559":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:9034:5931":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:3225:5141":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5130:7112":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:4773:3370":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:10093:149":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:12850:3365":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:11453:3220":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12396:3673":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:7482:30787":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9790:20510":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:1873:2503":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:8207:2549":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:7347:5242":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:7054:4856":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3494:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:39684:221":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:8385:8207":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5049:4619":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:43264:2527":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:7026:3205":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:10971:2567":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:40839:5412":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:7635:2847":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5941:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:1063:5132":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:16146:4511":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:7862:4976":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:1567:5144":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:8872:5796":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4523:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6041:20447":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13882:3599":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:1909:704":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:11439:3545":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:21180:2485":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:481:3283":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:44951:5149":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:11666:3577":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"0:65:1911":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"6:4488:6840":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:14786:4140":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:4774:4610":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4455:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:21234:31223":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:588:8017":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:5121:4621":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:1973:185":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:21248:31212":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:15253:4262":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12797:3703":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:42158:8211":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:10698:5137":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:5051:5786":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:16004:4477":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:21879:5466":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:1072:5136":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9759:20509":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:47977:5719":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4821:8156":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:5403:3470":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:837:5125":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2586:3184":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:42080:170":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:8921:5435":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:23157:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:640:5748":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:48261:5727":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}