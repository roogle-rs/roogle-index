{"root":"0:0:2797","crate_version":"0.11.1","includes_private":false,"index":{"5:5723:2527":{"id":"5:5723:2527","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13707:33680":{"id":"2:13707:33680","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13646:32209":{"id":"2:13646:32209","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44673:3118","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13703:33678":{"id":"2:13703:33678","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5974-0:112:2362":{"id":"b:5:5974-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10535:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5972:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5976:1814"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5737:34386":{"id":"5:5737:34386","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13650:26535":{"id":"2:13650:26535","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2449":{"id":"0:61:2449","crate_id":0,"name":"levenshtein","span":{"filename":"src/lib.rs","begin":[269,0],"end":[271,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.\n\n```\nuse strsim::levenshtein;\n\nassert_eq!(3, levenshtein(\"kitten\", \"sitting\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:2391":{"id":"0:27:2391","crate_id":0,"name":"generic_jaro","span":{"filename":"src/lib.rs","begin":[90,0],"end":[164,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two sequences. The returned value\nis between 0.0 and 1.0 (higher value means more similar).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8413:168","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8413:168","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2858:204","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13734:26349":{"id":"2:13734:26349","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13620:28085":{"id":"2:13620:28085","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12848:3124"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13726:33686":{"id":"2:13726:33686","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13626:2513":{"id":"2:13626:2513","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2368":{"id":"0:20:2368","crate_id":0,"name":"HammingResult","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,52]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:42643:229","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}},{"type":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5976:1814":{"id":"5:5976:1814","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2779-0:112:2362":{"id":"b:2:2779-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2773:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2781:26097"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13705:33679":{"id":"2:13705:33679","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3339:3310-0:112:2362":{"id":"a:2:3339:3310-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3339:3310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32802:3154-0:112:2362":{"id":"a:2:32802:3154-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32802:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2858:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:119:714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112:2362":{"id":"0:112:2362","crate_id":0,"name":"StrSimError","span":{"filename":"src/lib.rs","begin":[33,0],"end":[35,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:113:2363"],"impls":["a:2:3304:252-0:112:2362","a:2:3339:3310-0:112:2362","a:2:42604:8553-0:112:2362","a:2:32743:240-0:112:2362","a:2:32802:3154-0:112:2362","a:2:42605:8752-0:112:2362","b:2:3085-0:112:2362","b:2:2776-0:112:2362","b:2:3921-0:112:2362","b:2:2779-0:112:2362","b:2:3091-0:112:2362","b:2:3081-0:112:2362","b:2:3096-0:112:2362","b:5:5974-0:112:2362","0:17","0:19","0:118","0:115","0:117"]}}},"b:2:3096-0:112:2362":{"id":"b:2:3096-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3099:141","2:3100:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13630:26885":{"id":"2:13630:26885","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13745:33690":{"id":"2:13745:33690","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5122:33690"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44698:3133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13664:26914":{"id":"2:13664:26914","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13301:3117","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::split_whitespace":"2:13642:32195","str::rsplit":"2:13670:26918"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44381:3143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2797":{"id":"0:0:2797","crate_id":0,"name":"strsim","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1307,1]},"visibility":"public","docs":"This library implements string similarity metrics.","links":{},"attrs":["#![forbid(unsafe_code)]","#![allow(clippy::cast_possible_wrap, clippy::cast_sign_loss,\nclippy::cast_precision_loss, clippy::needless_pass_by_value,\nclippy::similar_names, clippy::missing_errors_doc, clippy::missing_panics_doc,\nclippy::must_use_candidate, clippy::range_plus_one)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:112:2362","0:20:2368","0:21:2371","0:26:2387","0:27:2391","0:44:2426","0:45:2428","0:53:2436","0:54:2441","0:61:2449","0:62:2458","0:63:2464","0:65:2480","0:105:2558","0:106:2567","0:108:2579"],"is_stripped":false}}},"0:45:2428":{"id":"0:45:2428","crate_id":0,"name":"generic_jaro_winkler","span":{"filename":"src/lib.rs","begin":[191,0],"end":[211,1]},"visibility":"public","docs":"Like Jaro but gives a boost to sequences that have a common prefix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8413:168","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8413:168","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2858:204","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3304:252-0:112:2362":{"id":"a:2:3304:252-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3304:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13637:26913":{"id":"2:13637:26913","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13636:26912"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13636:26912":{"id":"2:13636:26912","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13637:26913"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13694:33675":{"id":"2:13694:33675","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13301:3117","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::matches":"2:13691:2403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44603:3141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13714:33684":{"id":"2:13714:33684","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13697:33676":{"id":"2:13697:33676","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13301:3117","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::rmatch_indices":"2:13700:33677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44531:3138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13732:33688":{"id":"2:13732:33688","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13262:140","`FromStr`":"2:13261:3134"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:13261:3134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13261:3134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:8659":{"id":"5:5739:8659","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13691:2403":{"id":"2:13691:2403","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13301:3117","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::rmatches":"2:13694:33675"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44585:3140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2464":{"id":"0:63:2464","crate_id":0,"name":"osa_distance","span":{"filename":"src/lib.rs","begin":[300,0],"end":[337,1]},"visibility":"public","docs":"Like Levenshtein but allows for adjacent transpositions. Each substring can\nonly be edited once.\n\n```\nuse strsim::osa_distance;\n\nassert_eq!(3, osa_distance(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13700:33677":{"id":"2:13700:33677","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13301:3117","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::match_indices":"2:13697:33676"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44549:3139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13632:33670":{"id":"2:13632:33670","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12458:1754","str::slice_mut_unchecked":"2:13633:33671","crate::ops::Index":"2:40057:3425"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2441":{"id":"0:54:2441","crate_id":0,"name":"generic_levenshtein","span":{"filename":"src/lib.rs","begin":[233,0],"end":[259,1]},"visibility":"public","docs":"Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one sequence into the other.\n\n```\nuse strsim::generic_levenshtein;\n\nassert_eq!(3, generic_levenshtein(&[1,2,3], &[1,2,3,4,5,6]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}}],["b",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Iter1"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8413:168","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Iter2"}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8413:168","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2858:204","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721":{"id":"5:5721","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5722:34383","5:5723:2527","5:5726:34384","5:5729:34385","5:5737:34386","5:5738:34387","5:5739:8659","5:5740:26348","5:5741:26347"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13643:32211":{"id":"2:13643:32211","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13642:32195"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44664:3119","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2371":{"id":"0:21:2371","crate_id":0,"name":"generic_hamming","span":{"filename":"src/lib.rs","begin":[53,0],"end":[72,1]},"visibility":"public","docs":"Calculates the number of positions in the two sequences where the elements\ndiffer. Returns an error if the sequences have different lengths.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"generic":"Iter1"}],["b",{"generic":"Iter2"}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Iter1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Iter2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem1","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Elem2","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Iter1"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8413:168","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem1"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Iter2"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"2:8413:168","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"Elem2"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Elem1"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2858:204","args":{"angle_bracketed":{"args":[{"type":{"generic":"Elem2"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13641:5630":{"id":"2:13641:5630","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44367:3126","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13667:26916":{"id":"2:13667:26916","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:13116:3120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13670:26918":{"id":"2:13670:26918","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13301:3117","`DoubleEndedIterator`":"2:8451:133","prim@char":"1:12452:482","str::split":"2:13664:26914"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44399:3142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3087:849":{"id":"2:3087:849","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13642:32195":{"id":"2:13642:32195","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13643:32211"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44655:3121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13673:33673":{"id":"2:13673:33673","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13301:3117","str::split":"2:13664:26914","prim@char":"1:12452:482","`DoubleEndedIterator`":"2:8451:133","str::rsplit_terminator":"2:13676:33674"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44431:3147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3094:141":{"id":"2:3094:141","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:13617:33668":{"id":"2:13617:33668","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13615:33667"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13623:26886":{"id":"2:13623:26886","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13645:33672":{"id":"2:13645:33672","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44645:3137","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:819":{"id":"0:116:819","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10475:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13740:28127":{"id":"2:13740:28127","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38317"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13653:26537":{"id":"2:13653:26537","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13634:26909":{"id":"2:13634:26909","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13636:26912","str::split_at_mut":"2:13635:2402"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13709:33681":{"id":"2:13709:33681","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:714":{"id":"0:119:714","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13644:31326":{"id":"2:13644:31326","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44635:3136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5738:34387":{"id":"5:5738:34387","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:3114","`String`":"5:7801:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3114","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13685:26924":{"id":"2:13685:26924","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[37,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10535:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:18:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5729:34385":{"id":"5:5729:34385","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:26348":{"id":"5:5740:26348","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13737:26346"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:34384":{"id":"5:5726:34384","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3084:3335":{"id":"2:3084:3335","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3058:148"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3081-0:112:2362":{"id":"b:2:3081-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3055:166","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3084:3335"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13614:33666":{"id":"2:13614:33666","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","source","provide","type_id","description"],"trait":{"name":"Error","id":"2:3144:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:113:2363":{"id":"0:113:2363","crate_id":0,"name":"DifferentLengthArgs","span":{"filename":"src/lib.rs","begin":[34,4],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13640:6018":{"id":"2:13640:6018","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44357:3127","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2567":{"id":"0:106:2567","crate_id":0,"name":"normalized_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[693,0],"end":[702,1]},"visibility":"public","docs":"Calculates a normalized score of the Damerau–Levenshtein algorithm between\n0.0 and 1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_damerau_levenshtein;\n\nassert!((normalized_damerau_levenshtein(\"levenshtein\", \"löwenbräu\") - 0.27272).abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"\", \"flower\").abs() < 0.00001);\nassert!(normalized_damerau_levenshtein(\"tree\", \"\").abs() < 0.00001);\nassert!((normalized_damerau_levenshtein(\"sunglasses\", \"sunglasses\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13676:33674":{"id":"2:13676:33674","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13301:3117","str::split":"2:13664:26914","prim@char":"1:12452:482","str::split_terminator":"2:13673:33673"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44449:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42605:8752-0:112:2362":{"id":"a:2:42605:8752-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42605:8752","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13682:26922":{"id":"2:13682:26922","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12452:482","str::splitn":"2:13679:26920","self::pattern":"2:13301:3117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44503:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2781:26097":{"id":"2:2781:26097","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2387":{"id":"0:26:2387","crate_id":0,"name":"hamming","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.\n\n```\nuse strsim::{hamming, StrSimError::DifferentLengthArgs};\n\nassert_eq!(Ok(3), hamming(\"hamming\", \"hammers\"));\n\nassert_eq!(Err(DifferentLengthArgs), hamming(\"hamming\", \"ham\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"HammingResult","id":"0:20:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13656:3375":{"id":"2:13656:3375","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42513:194","prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13720:26927":{"id":"2:13720:26927","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13633:33671":{"id":"2:13633:33671","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12458:1754","crate::ops::IndexMut":"2:3583:3426","str::slice_unchecked":"2:13632:33670"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2480":{"id":"0:65:2480","crate_id":0,"name":"generic_damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[353,0],"end":[414,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::generic_damerau_levenshtein;\n\nassert_eq!(2, generic_damerau_levenshtein(&[1,2], &[2,3,1]));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}],["b_elems",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"generic":"Elem"}}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[{"name":"Elem","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Elem"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2863:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10748:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2796:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13639:2388":{"id":"2:13639:2388","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44351:2361","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13611":{"id":"2:13611","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13612:1016","2:13613:2459","2:13614:33666","2:13615:33667","2:13617:33668","2:13620:28085","2:13621:33669","2:13622:342","2:13623:26886","2:13624:2490","2:13626:2513","2:13628:26884","2:13630:26885","2:13632:33670","2:13633:33671","2:13634:26909","2:13635:2402","2:13636:26912","2:13637:26913","2:13639:2388","2:13640:6018","2:13641:5630","2:13642:32195","2:13643:32211","2:13644:31326","2:13645:33672","2:13646:32209","2:13647:26926","2:13650:26535","2:13653:26537","2:13656:3375","2:13660:3341","2:13664:26914","2:13667:26916","2:13670:26918","2:13673:33673","2:13676:33674","2:13679:26920","2:13682:26922","2:13685:26924","2:13688:26925","2:13691:2403","2:13694:33675","2:13697:33676","2:13700:33677","2:13703:33678","2:13705:33679","2:13707:33680","2:13709:33681","2:13710:33682","2:13711:33683","2:13714:33684","2:13717:26147","2:13720:26927","2:13723:33685","2:13726:33686","2:13729:33687","2:13732:33688","2:13734:26349","2:13735:28123","2:13736:26350","2:13737:26346","2:13738:26345","2:13739:28126","2:13740:28127","2:13741:28128","2:13742:33689","2:13744:8546","2:13745:33690"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13711:33683":{"id":"2:13711:33683","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13327:3109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2579":{"id":"0:108:2579","crate_id":0,"name":"sorensen_dice","span":{"filename":"src/lib.rs","begin":[721,0],"end":[754,1]},"visibility":"public","docs":"Calculates a Sørensen-Dice similarity distance using bigrams.\nSee <https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient>.\n\n```\nuse strsim::sorensen_dice;\n\nassert_eq!(1.0, sorensen_dice(\"\", \"\"));\nassert_eq!(0.0, sorensen_dice(\"\", \"a\"));\nassert_eq!(0.0, sorensen_dice(\"french\", \"quebec\"));\nassert_eq!(1.0, sorensen_dice(\"ferris\", \"ferris\"));\nassert_eq!(0.8888888888888888, sorensen_dice(\"feris\", \"ferris\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13612:1016":{"id":"2:13612:1016","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12452:482"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13624:2490":{"id":"2:13624:2490","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13735:28123":{"id":"2:13735:28123","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40412:3317","Self::is_ascii":"2:13734:26349"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40412:3317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2776-0:112:2362":{"id":"b:2:2776-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2770:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2778:3016"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3923:1854":{"id":"2:3923:1854","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40226:5920","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13717:26147":{"id":"2:13717:26147","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:26347":{"id":"5:5741:26347","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13738:26345"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2558":{"id":"0:105:2558","crate_id":0,"name":"damerau_levenshtein","span":{"filename":"src/lib.rs","begin":[677,0],"end":[679,1]},"visibility":"public","docs":"Like optimal string alignment, but substrings can be edited an unlimited\nnumber of times, and the triangle inequality holds.\n\n```\nuse strsim::damerau_levenshtein;\n\nassert_eq!(2, damerau_levenshtein(\"ab\", \"bca\"));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13688:26925":{"id":"2:13688:26925","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13621:33669":{"id":"2:13621:33669","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13628:26884":{"id":"2:13628:26884","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,9],"end":[32,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10530:122","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42604:8553-0:112:2362":{"id":"a:2:42604:8553-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42604:8553","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:62:2458":{"id":"0:62:2458","crate_id":0,"name":"normalized_levenshtein","span":{"filename":"src/lib.rs","begin":[285,0],"end":[290,1]},"visibility":"public","docs":"Calculates a normalized score of the Levenshtein algorithm between 0.0 and\n1.0 (inclusive), where 1.0 means the strings are the same.\n\n```\nuse strsim::normalized_levenshtein;\n\nassert!((normalized_levenshtein(\"kitten\", \"sitting\") - 0.57142).abs() < 0.00001);\nassert!((normalized_levenshtein(\"\", \"\") - 1.0).abs() < 0.00001);\nassert!(normalized_levenshtein(\"\", \"second\").abs() < 0.00001);\nassert!(normalized_levenshtein(\"first\", \"\").abs() < 0.00001);\nassert!((normalized_levenshtein(\"string\", \"string\") - 1.0).abs() < 0.00001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13741:28128":{"id":"2:13741:28128","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38317"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2778:3016":{"id":"2:2778:3016","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13729:33687":{"id":"2:13729:33687","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3095:1841":{"id":"2:3095:1841","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13742:33689":{"id":"2:13742:33689","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5124:33689"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44680:3131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13622:342":{"id":"2:13622:342","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13623:26886","`u8`":"1:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13737:26346":{"id":"2:13737:26346","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13739:28126":{"id":"2:13739:28126","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1126:38317"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722:34383":{"id":"5:5722:34383","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:3114","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:3114","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13710:33682":{"id":"2:13710:33682","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13647:26926":{"id":"2:13647:26926","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13744:8546":{"id":"2:13744:8546","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5125:8546"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44689:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2436":{"id":"0:53:2436","crate_id":0,"name":"jaro_winkler","span":{"filename":"src/lib.rs","begin":[221,0],"end":[223,1]},"visibility":"public","docs":"Like Jaro but gives a boost to strings that have a common prefix.\n\n```\nuse strsim::jaro_winkler;\n\nassert!((0.866 - jaro_winkler(\"cheeseburger\", \"cheese fries\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117":{"id":"0:117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[32,16],"end":[32,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32745:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13660:3341":{"id":"2:13660:3341","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42513:194","prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3091-0:112:2362":{"id":"b:2:3091-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3061:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3094:141","2:3095:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3085-0:112:2362":{"id":"b:2:3085-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3058:148","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3087:849"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32743:240-0:112:2362":{"id":"a:2:32743:240-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32743:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3921-0:112:2362":{"id":"b:2:3921-0:112:2362","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32744:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3919:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrSimError","id":"0:112:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3923:1854"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13615:33667":{"id":"2:13615:33667","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2426":{"id":"0:44:2426","crate_id":0,"name":"jaro","span":{"filename":"src/lib.rs","begin":[186,0],"end":[188,1]},"visibility":"public","docs":"Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).\n\n```\nuse strsim::jaro;\n\nassert!((0.392 - jaro(\"Friedrich Nietzsche\", \"Jean-Paul Sartre\")).abs() <\n        0.001);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["a",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["b",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13635:2402":{"id":"2:13635:2402","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13634:26909","str::split_at_mut_checked":"2:13637:26913"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:819":{"id":"0:18:819","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[38,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"2:10494:147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42643:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"fmt::Error","id":"2:43536:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13679:26920":{"id":"2:13679:26920","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117","str::rsplitn":"2:13682:26922"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44485:3145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13723:33685":{"id":"2:13723:33685","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12452:482","self::pattern":"2:13301:3117"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:13307:3110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13322:3111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3099:141":{"id":"2:3099:141","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32667:3077","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13613:2459":{"id":"2:13613:2459","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13736:26350":{"id":"2:13736:26350","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3100:1839":{"id":"2:3100:1839","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3065:262","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13738:26345":{"id":"2:13738:26345","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:12869:4050":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:41203:5941":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12776:3992":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4997:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:0:2926":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:44680:3131":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:44673:3118":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:15475:4515":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:873:5486":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:538:3607":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:23609:5907":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:46608:6077":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:22045:32347":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5085:4958":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:8869:3475":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:465:7018":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:42806:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12524:3972":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:23521:5899":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"16:2530:4891":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:6813:7828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:11971:3883":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:16798:4856":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:34238:14175":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:15753:4571":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:328:7006":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:14845:4317":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8284:5588":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:3834:4941":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:4844:4951":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:14284:4212":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:7706:3074":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:2367:8063":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:5128:8738":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:3659:3082":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"10:44:5508":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:4881:7298":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5441:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:23012:8628":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:3403:6226":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12191:3913":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:47098:6115":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:12962:21676":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:13662:4071":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:8196:3738":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:6123:4918":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:4149:8688":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:515:3597":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:15905:4607":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4805:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7907:5296":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:22546:8628":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:10534:3798":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:41115:5928":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:22018:32351":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:6419:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"18:548:156":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:16701:4831":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:42732:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:14349:3427":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:23348:31908":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:765:25739":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2403:5642":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12095:3904":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:12992:4017":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:3095:35114":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:11777:3866":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14393:4232":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:5318:4966":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:40129:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13193:4032":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:5139:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11902:3879":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:9156:6398":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:22030:32351":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:6749:4873":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2670:14196":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"2:42451:6236":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:4566:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:4816:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"14:7:5467":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:16362:4748":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:13205:4033":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:6310:30065":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:10934:6437":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:8223:5319":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:15286:4372":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:15714:4560":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:4561:8100":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:23587:5905":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:11222:3822":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"11:0:2920":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:16132:4682":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:5689:4972":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6731:5097":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5325:7466":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:7168:5156":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:41145:5935":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:41049:5926":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:4498:34723":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:15785:4577":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:45127:8096":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:11906:5841":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1500:7095":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:40189:3067":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5241:7429":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:5282:4965":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:46853:6090":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:9256:8784":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:155:4860":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:45364:6037":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"11:2559:7011":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5381:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:430:35336":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:1530:7108":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3583:3426":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5658:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:11717:5987":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:9206:2421":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:7825:6742":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"17:15418:4478":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:45115:8093":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:7397:30050":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:40886:3469":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:3297:268":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:6507:7703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:10476:3082":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13014:4022":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:6881:6282":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:1632:7181":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12225:3917":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:903:3657":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:7612:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"9:176:8268":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:47649:6165":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:4766:4949":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:4211:8692":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:6386:5866":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:16171:4697":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:6437:7668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:12457:1720":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:635:3624":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:1158:5493":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:667:3666":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5366:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:41044:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"11:835:5482":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"9:236:5987":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"9:0:2918":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:4869:7295":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8010:8628":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:7590:34681":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:6489:6257":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:23499:5897":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"5:3084:3395":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:1569:7133":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10938:35364":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:7428:26521":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:7570:5622":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:12451:1196":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12550:3975":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5641:7608":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:2255:8529":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13471:3682":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:8636:2499":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:10535:132":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:11782:6291":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:14917:4328":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:3110:4935":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:34171:14173":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5357:7472":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:11465:3838":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:10700:30048":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:2086:200":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"0:21:2371":{"crate_id":0,"path":["strsim","generic_hamming"],"kind":"function"},"17:11579:3850":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12347:3935":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:6659:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"10:36:7013":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11831:3846":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:15812:4581":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:40943:3465":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:12466:928":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:6434:6270":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:44549:3139":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:1711:7224":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:14586:4261":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:5295:7456":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:7539:7989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:2228:3892":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:11712:5837":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:43742:160":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:16218:4709":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:1564:20539":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:12673:3981":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:4896:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:3329:5500":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:11280:6570":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:10564:3650":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:10754:156":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"6:5682:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:6904:5115":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:6126:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:4267:4946":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:6302:5007":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11691:3856":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:4341:8713":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:46416:6058":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:32803:3314":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:10993:143":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:5387:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:532:7058":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:33970:8812":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:4962:3326":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:14237:5866":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:42595:5975":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:912:5480":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:15557:4527":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:1674:35337":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:5113:4959":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:8629:8716":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:16008:4636":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:4608:14002":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"13:229:7001":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:573:3600":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:8875:14162":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:16656:4822":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"11:1880:5477":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:16145:4688":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:22096:8821":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:14299:4217":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"6:1727:7229":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:651:3600":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:3352:6225":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:881:8672":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"18:706:3112":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11358:21556":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12687:3985":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:47740:6175":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:42917:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:11605:5494":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:46348:6050":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10630:3652":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12749:3990":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:2415:20583":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6573:5054":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:3339:3310":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:973:8558":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:8273:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:7016:5127":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:41500:5954":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11386:21557":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:7789:5632":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:8598:5380":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:8096:5314":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:5709:21470":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11630:3852":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:7548:5621":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:881:5477":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:11892:5840":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:9478:6290":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:6158:5617":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:15439:4486":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5533:7554":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2209:8612":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"16:8179:5317":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:43442:8076":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:45173:6032":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:16595:4102":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:13322:21547":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:40226:5920":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:9364:6416":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:22932:14196":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"5:1213:34697":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"0:0:2797":{"crate_id":0,"path":["strsim"],"kind":"module"},"16:6890:4915":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:45008:3149":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:6449:7672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:7896:3666":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:44308:6006":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:2506:4890":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:679:6202":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"15:306:20565":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:9437:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:6179:14495":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12319:3932":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:32743:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:46500:6063":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:43511:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:925:5481":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:40928:3132":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5051:7382":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:5682:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:32709:5910":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:43067:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:8736:8748":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:7648:2421":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:8498:6359":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:6680:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:7368:7908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:123:6829":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:5255:4964":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:10537:3090":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:768:157":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:8672:7908":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6770:7814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:5879:6258":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:15602:4536":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:5198:4962":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:4929:4954":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46316:6046":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:8008:8021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:4404:4947":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13610:4064":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6631:7767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:3366:5233":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:40824:3132":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:47545:6157":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11401:3831":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:3309:3308":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2718:6220":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"19:0:1315":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"14:187:20552":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:1604:5478":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:2435:20610":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:46483:6062":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:6284:8100":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"0:108:2579":{"crate_id":0,"path":["strsim","sorensen_dice"],"kind":"function"},"17:11173:35369":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:7540:2421":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:14627:4268":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12176:3910":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"5:1585:5481":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8368:8658":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:908:3658":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"16:5172:4961":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:24072:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5670:7619":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:9305:6405":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:13349:4043":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8889:5477":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:5405:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:3014:20611":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:6638:7768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:4984:3316":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:1117:5493":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:8585:5378":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11733:21578":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:13055:3846":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:4483:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4947:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:4829:7923":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"11:1580:5496":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"11:2380:5477":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:16187:4701":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:5379:4968":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:43104:5831":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3496:8653":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:42333:8075":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:6611:7759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14933:4329":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:5676:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3446:6228":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:15431:4485":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6084:4975":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:7454:7935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5570:7573":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6389:5016":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:4369:5477":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:4311:29952":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:45323:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:42991:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:46448:6060":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:14294:155":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"0:44:2426":{"crate_id":0,"path":["strsim","jaro"],"kind":"function"},"5:4162:34727":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:16494:4084":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:507:30052":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:13838:4113":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:6827:8780":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:1521:7103":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:3747:259":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5420:7503":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:8043:35351":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13306:4041":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:12453:1906":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:7308:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:5630:6253":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:687:8548":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:45305:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:7542:5218":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:6493:7692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:9316:6408":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11592:3782":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"7:0:1936":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6098:4980":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6462:21474":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:5230:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:31124:3306":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13537:4011":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:7391:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8489:3645":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:41232:5785":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"9:328:7014":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:14001:4144":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:15315:4392":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:3141:3692":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:1984:3079":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:682:6204":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:3720:3680":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:43557:3088":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:1623:2421":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:517:7049":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:11129:30056":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:1001:5477":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:16642:4818":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:11315:6573":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:380:6196":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:2521:8625":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"2:45437:6042":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:364:35325":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"0:54:2441":{"crate_id":0,"path":["strsim","generic_levenshtein"],"kind":"function"},"1:9433:8100":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:11678:3855":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:45414:6041":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:1675:7207":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:26472:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10696:3654":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:5571:3115":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:740:5479":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:13375:13979":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:14821:4314":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:9292:6404":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:41326:5950":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:40111:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4902:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11114:3820":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:14405:4234":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:4827:5778":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:15641:4545":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:13307:3110":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:2620:4895":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:23383:31925":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12920:4009":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:47638:6164":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:16036:4644":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:3851:8670":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10823:3659":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:41733:5809":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:9768:130":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:3448:6229":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:7640:2421":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:8066:21482":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:3350:6224":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:41717:5808":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:7335:6739":{"crate_id":1,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:15655:4548":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:1491:159":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:896:4875":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:13181:4031":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:12478:1447":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:45095:8088":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:7531:3428":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:4362:8715":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:7765:5628":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:4161:2421":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:4152:4943":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:43725:5983":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:7577:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:13926:5856":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:22706:8819":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:10565:30891":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:13039:5849":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:46754:6085":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:40239:5921":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:1898:14120":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:40860:3470":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:7350:7899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:45293:8097":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:10543:3098":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:15540:4525":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:47193:6118":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:7883:3430":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:11407:6445":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:47717:6174":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:23054:8900":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:31092:3423":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:43970:8087":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:545:7064":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13921:4128":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:42417:32336":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:6666:7781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:34556:14177":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:570:7077":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:963:5479":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:44266:6002":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:4674:5776":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:5217:7421":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:7463:7938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"11:2545:7009":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:46529:6065":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:44340:3130":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:45425:5506":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13515:21548":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:10418:21541":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:40936:3131":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:46948:6109":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:46800:6087":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:34104:14174":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:6211:6257":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:43469:8085":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:15887:4603":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:9351:6413":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5375:7482":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:14140:4178":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:11788:6446":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:1523:5477":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:12452:482":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:43957:8086":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"2:11581:5477":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:15836:4590":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"11:2349:5489":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:13157:4029":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:6917:7868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11958:3882":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:11878:3144":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:1539:7114":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"0:20:2368":{"crate_id":0,"path":["strsim","HammingResult"],"kind":"type_alias"},"1:5543:132":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:46515:6064":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6411:7653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:7695:3073":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"11:299:7003":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11878:3821":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:15963:4625":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:4329:8100":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:11298:6290":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:6839:2421":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:46771:6086":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:4297:8100":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:14083:5861":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:33274:5232":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:12472:1866":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8839:8762":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:6462:7673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:7737:5625":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:4902:8717":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:1907:5499":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:2508:8623":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6173:4989":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:538:7061":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:42843:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:830:5495":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:884:193":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:317:3657":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12976:4015":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:11630:3143":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6159:4986":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:1907:6211":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:5362:207":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:15077:4356":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:41264:5947":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:4207:5494":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:43497:31920":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:9460:165":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:5301:7459":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:7895:32388":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:2112:3487":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8583:8668":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:5428:7508":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:2406:3674":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:2908:2356":{"crate_id":2,"path":["core","cmp","min"],"kind":"function"},"17:11851:3874":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:6381:7628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8011:6200":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:14312:4219":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"16:6984:4933":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4921:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:16728:4840":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:938:3432":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:47612:6162":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:10777:6228":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:5311:7462":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"11:2400:5494":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:2265:5592":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"8:0:2917":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:5341:7470":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:4970:7339":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2550:4892":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:5807:8767":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:1930:6212":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:9661:3110":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:3337:5498":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:41222:137":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"9:445:20459":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14269:4208":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:5319:7465":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:10817:3943":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"9:422:20461":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:43209:3090":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:46625:6078":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:4495:6238":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"0:62:2458":{"crate_id":0,"path":["strsim","normalized_levenshtein"],"kind":"function"},"2:6376:5791":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:2335:8609":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:13041:4025":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:10218:21534":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10549:3799":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:928:8559":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:3687:8646":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:47347:6151":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:41282:5948":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:5020:8701":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:6526:7705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:3850:5588":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:1641:5499":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:6758:34727":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"9:390:20460":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6748:7805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:12163:3909":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:10545:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:4810:4950":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:7563:7999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:15410:4475":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:41172:5938":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8879:6243":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:663:3081":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:3055:166":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:8255:8035":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:31503:199":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6443:7671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:1554:2421":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:23462:8628":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:42273:5816":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:14214:118":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:7813:6741":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:5865:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:14483:4248":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:3503:3678":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:2918:2355":{"crate_id":2,"path":["core","cmp","max"],"kind":"function"},"1:575:8534":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:2820:3305":{"crate_id":2,"path":["core","clone","InitializingSlice"],"kind":"struct"},"6:5282:7451":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10332:21538":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:3526:8564":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:8578:6367":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:32720:5911":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:16297:4730":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:44531:3138":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:12537:3973":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:8895:6395":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:7518:7975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6740:7804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:8546:5373":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:7350:5189":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11566:3848":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12886:4006":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:2020:802":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:41060:14243":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:10953:8101":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:11261:6399":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:12832:5844":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:2206:14206":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:4702:8718":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5025:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:1626:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:623:35372":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:5603:7585":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:1507:7098":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1667:7206":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12625:3978":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:47702:6173":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:6710:6276":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:30862:8671":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:23441:8685":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:40089:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:3737:14184":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:6895:6286":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:3668:30623":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6696:5085":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:1551:7123":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:5468:996":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:3048:20612":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8223:6315":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:13327:3109":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:16179:4700":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:5629:7602":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:41724:5955":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5151:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6440:21473":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:7548:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:5507:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:6765:7813":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:14672:4273":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:1871:6210":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"11:1920:5501":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:22:834":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12234:3918":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:41758:5810":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:8866:153":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13945:4132":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:2328:6217":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:44784:6011":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:5105:8736":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:1630:3430":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"14:220:5475":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:3386:13954":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:4221:8693":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:23565:5903":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"17:15621:4537":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6188:4990":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:5114:8737":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"16:2966:4911":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:8249:8034":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12018:3887":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:2105:685":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:6723:7801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:11080:32497":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"2:33486:5229":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3569:8100":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:1385:5489":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:43202:3089":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10246:21535":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:11434:243":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:11248:6398":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:14019:4145":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:2860:4906":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:12476:985":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:8422:3159":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:39:3429":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:3342:34684":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:5742:3799":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12463:755":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:12046:6299":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:5057:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:0:2924":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:2495:20534":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:16159:4694":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:6579:8912":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:6256:4999":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:4956:4955":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:1049:5489":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:3303:5499":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13145:4028":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:8546:5954":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:583:3665":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"11:1601:5497":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:44664:3119":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5069:7393":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:40219:5919":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:3436:5234":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"11:2533:7008":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:16613:4112":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:10774:6226":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:44399:3142":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:3542:3155":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:16775:4851":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5551:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6421:4868":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:1064:20538":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4957:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:6706:5955":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"3:0:516":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:11053:6256":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:7801:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3551:145":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:1085:5219":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:10861:142":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:6262:5789":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10597:3651":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:8137:4931":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13547:4057":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"16:3126:20613":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11527:3845":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:0:315":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:45107:8091":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"11:842:8558":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:3706:5477":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:11272:26148":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:1703:7220":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:43974:5834":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:8723:141":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12723:3988":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12082:3902":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11457:3837":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"5:2347:35049":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:3513:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:9377:26142":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:8612:4934":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:8268:6317":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12035:3892":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:15973:4628":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:32713:5277":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:6970:4916":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:46640:6079":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:523:7052":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:4941:8704":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:7578:6416":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:8528:5371":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:22573:5868":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:8049:3943":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:4953:14010":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"0:112:2362":{"crate_id":0,"path":["strsim","StrSimError"],"kind":"enum"},"1:12477:1946":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:36778:5239":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:5395:7492":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:11553:3847":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:15981:4629":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:44298:6005":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:1869:6209":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:9581:6212":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:12471:1884":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:40830:5922":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13554:4058":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"6:4842:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"11:2121:5219":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13082:3822":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:13635:4065":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:16198:4706":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:5255:7434":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6028:4914":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:42530:176":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:6560:8911":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:689:3634":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12008:3737":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:7604:8014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:44449:3146":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:9344:6412":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:8694:6240":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:44431:3147":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11606:3821":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:7951:30045":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:14859:4318":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7765:5256":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:4873:4952":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:1594:5495":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:11473:5558":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:7946:14158":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"11:1884:2421":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13909:4125":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4914:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13757:4098":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:904:2421":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8566:3136":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:14375:4231":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:44381:3143":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:14055:4150":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:8516:8627":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:8235:143":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:1489:7090":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:14327:4221":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:16822:4129":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:15549:4526":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:12860:4005":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:5131:3687":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:42439:5971":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:9182:6400":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:43030:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:13361:4044":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:14438:4242":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:8000:4929":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11833:8112":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5757:4973":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"18:521:25740":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6758:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:40982:3466":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11037:6376":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"16:7938:5305":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:5144:4960":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4569:6239":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:4542:5774":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:1108:5489":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:8112:6311":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:22273:8818":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:15760:4572":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12787:3993":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:11424:8628":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:47437:6153":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:10748:156":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:4998:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:11750:5838":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:386:6198":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:15531:4521":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:15769:4573":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6708:7798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:1597:7152":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:6930:34727":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:22263:8628":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6823:7831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:11068:26122":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:1888:3432":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:8358:6320":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:16377:4749":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:8320:21484":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7959:5308":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:5575:3116":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:14416:4235":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12736:3989":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:15496:4520":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:7192:21478":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12371:3937":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12066:3900":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:1625:7177":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:14872:4319":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13854:4117":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:14547:4257":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:23245:5872":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:4333:8712":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:3677:8626":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"11:2551:35323":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:5494:7547":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:7075:21477":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:44503:3144":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:23620:5908":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:3758:14000":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:23059:8898":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:7469:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"11:1893:3430":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:47392:6152":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:40871:31915":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13385:4045":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:7824:5634":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11818:3872":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:2148:5489":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:11000:6426":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"5:3085:35119":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13692:4075":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:3042:6223":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:23598:5906":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:2496:8617":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"9:53:8257":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12840:4000":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:2863:138":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:2029:8100":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:506:3664":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2215:5638":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2793:6222":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:2660:4897":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:2083:201":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41351:3622":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:22047:32345":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:32832:3313":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"11:2440:3432":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:12028:3889":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:3889:3697":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:14708:4279":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10031:21529":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:4694:4948":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:5648:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"14:202:13987":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:8624:8098":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:2570:4893":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:3752:150":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:15050:4352":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:0:2925":{"crate_id":17,"path":["object"],"kind":"module"},"16:8669:5277":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:5288:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:9548:5826":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8255:3101":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:7969:5309":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:47143:6116":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:34729:14178":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:1643:7189":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12952:4013":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:12027:6447":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:44327:3135":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:7789:35359":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:725:5577":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4929:7323":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:7085:8067":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:6731:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:46331:6047":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:3133:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:12424:8552":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:14346:4226":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:5367:444":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:47466:6154":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12044:3895":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:5285:6248":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13028:4024":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:10115:21531":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:11839:8113":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"11:2301:5219":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:2486:4889":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:43717:3103":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:8267:8037":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:3091:35115":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:613:35373":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:23299:5878":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:11087:32500":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:7080:8068":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:990:5486":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:2172:5591":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:3602:6368":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:16385:4752":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:15586:4533":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:7721:5616":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:854:5485":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:45377:32743":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"5:1400:5488":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:3267:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:43733:3105":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:2820:4904":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13933:4129":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:967:5482":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:32744:242":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:578:7082":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6623:7766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:8635:6372":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:2950:4910":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:15010:4349":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:15844:4591":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:6866:21476":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11503:3841":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:8077:8550":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:4825:7919":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:8906:6396":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12711:3987":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8276:6319":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:13316:3112":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:7830:3477":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5562:7571":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:7839:6743":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"16:7495:5209":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:44967:6023":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:9145:202":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:11309:3824":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:2815:6691":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:2323:5488":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:6408:5023":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:4939:8702":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4829:7262":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:44956:13986":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:0:1746":{"crate_id":1,"path":["std"],"kind":"module"},"1:5475:206":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:12479:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:1249:34693":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:6600:189":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10394:21540":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:16241:4722":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5107:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:31130:3489":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:10387:6211":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"11:2366:5504":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:13006:4020":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:7838:21481":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:10539:3089":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:7986:8020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:32745:249":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:2378:21606":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:7058:5131":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:1514:7100":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:4028:3432":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"15:394:20574":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:16812:4857":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:7414:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:22551:8823":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"16:2704:4899":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:11224:32501":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"6:0:1021":{"crate_id":6,"path":["libc"],"kind":"module"},"17:15024:4350":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:14031:33243":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:564:7074":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8643:6365":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:4896:8066":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:7586:8011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:4464:8100":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12983:21677":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:1494:7092":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:546:4866":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:46707:6082":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:41766:5812":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:9447:6288":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:553:7069":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:5196:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2900:205":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:5727:3798":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:13451:4050":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:22585:32348":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5593:7580":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:3381:13953":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:12474:1878":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:6700:7795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6790:7822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:6544:7717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:11563:30060":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:5450:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:4177:8691":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:2294:8059":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:2672:14197":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2:3554:146":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:12467:910":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:46301:6043":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:4171:8690":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:14520:4252":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:23430:5893":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"18:726:3643":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:16283:4728":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:2466:3430":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:888:5580":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:12455:1340":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12897:4007":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:5482:7544":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:6111:4985":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:8711:5389":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"18:563:3609":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:14257:5867":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:10368:21539":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:0:2916":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10474:8769":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:1584:7145":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:15351:4423":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:5224:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:5195:3458":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5019:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:3363:5501":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:13943:5859":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:5993:6265":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10516:21544":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:42626:14256":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:10983:6314":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:15953:4622":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11926:3880":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"0:53:2436":{"crate_id":0,"path":["strsim","jaro_winkler"],"kind":"function"},"17:13592:4061":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:3620:6231":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:7262:34741":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:1099:5488":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12280:3925":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:10791:3102":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:8369:14163":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14640:4269":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:11864:3145":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:11021:26143":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:41739:5956":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:6882:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:4705:5777":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11808:6296":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:44799:6016":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:8031:8032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7386:5191":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:15919:4614":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:8260:3100":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:12149:3908":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:3455:3430":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:581:3061":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13169:4030":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:5265:7440":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:46380:6052":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:23532:5900":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"14:165:20545":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:14652:4270":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:4827:7921":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:6526:14503":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:2245:132":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:40412:3317":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:12458:1754":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:1538:5494":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:8178:6268":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3307:31704":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:11475:21559":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:472:3660":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:42473:5819":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:42769:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:8503:5369":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:7332:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2990:4912":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:534:8529":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:16323:4739":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:9442:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:41075:5927":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:42635:5827":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"14:0:2922":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:1635:5498":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11448:3835":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:44196:5997":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6876:7842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8249:130":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8753:6387":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:586:7086":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:8302:8045":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:16668:4824":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:8402:149":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:630:8545":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:11720:3860":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:2840:4905":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:44367:3126":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:42547:5494":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:47060:6113":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:0:574":{"crate_id":2,"path":["core"],"kind":"module"},"6:7341:7898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:15106:4359":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:4589:13951":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:15989:4631":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6337:5010":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8507:6232":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:2482:8613":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:44288:6004":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:22062:32357":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:14975:4337":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"11:351:35329":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:15701:4554":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:12456:341":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:4943:8705":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:7113:3437":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:2894:198":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:1626:3432":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:47172:6117":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:3049:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:45131:6570":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:13095:4026":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:44127:5993":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:11887:29956":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:7214:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6808:4913":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6480:7683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14796:4310":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:42880:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12699:3986":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:5195:8744":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"0:113:2363":{"crate_id":0,"path":["strsim","StrSimError","DifferentLengthArgs"],"kind":"variant"},"1:9397:6571":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:3405:6227":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:7305:5183":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:45111:8092":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:984:5485":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4792:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:2208:14207":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"16:8626:5382":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6564:7733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:14043:4149":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:23554:5902":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"5:4528:8100":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:43772:5992":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:7990:5310":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:9751:30067":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:32667:3077":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:15689:4551":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2724:4900":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:1220:3667":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"12:0:2921":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10296:21537":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6953:5119":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:4120:4942":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:45149:134":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:7777:5631":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:6042:4917":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:8553:3126":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:14507:4249":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13970:4135":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:8014:8023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10928:3817":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10167:21533":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:8565:5376":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:2748:4901":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:16555:4803":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:14573:4260":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:4574:34723":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:7580:5623":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:5622:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:15036:4351":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"15:288:20564":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6144:21471":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5520:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:39398:14183":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4890:7303":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:10406:6428":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:3075:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:12216:3916":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:11085:6400":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"9:500:5561":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12409:21651":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"15:327:8254":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:5249:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:16332:4743":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:2772:4902":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:23192:5871":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:1914:5500":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:14335:4223":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:3854:3681":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:8091:8551":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7358:4923":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:1725:159":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:6777:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:12826:3995":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8213:6314":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:959:5478":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:5042:482":{"crate_id":2,"path":["core","char"],"kind":"module"},"16:6876:5112":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:16341:4745":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:2684:4898":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:10657:6397":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:42954:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:13570:21549":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:43216:3097":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:5804:7829":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:5541:7559":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:14692:4274":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:44351:2361":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:8121:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"11:685:5494":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:4414:6237":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:5036:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4937:7325":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:9496:6418":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:12403:6450":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:6239:4994":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:7829:3476":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:22969:8909":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:15931:4617":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3313:30254":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8727:6377":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"16:6852:5109":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:46838:6089":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:40149:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:15679:4550":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:11147:30064":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:44942:6022":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:14738:4298":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5488:7545":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:16311:4737":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:14750:4300":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:7949:4927":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:45119:8094":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:4163:8689":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7401:35352":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:1005:5219":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:46395:6053":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:8308:8046":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:1122:34727":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:15090:4357":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:47623:6163":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:10475:229":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1:12238:28282":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:9323:26139":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:42539:5477":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"11:488:157":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:10173:8277":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:296:3114":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:10494:147":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:16019:4637":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:708:5478":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:4349:8714":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:5060:4957":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12260:21650":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"2:44645:3137":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:1647:5500":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:5205:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:42605:8752":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:5872:6257":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:45099:8089":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:23026:8899":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:42708:199":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:3308:4880":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:3930:3430":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:22918:8908":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"9:480:20458":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:4:1280":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:11998:3885":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:43223:3098":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5044:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:47495:6155":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:9271:8786":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6521:7704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:3792:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12570:3976":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:10963:6313":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:14127:4177":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:8233:21483":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:497:7032":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:3087:8060":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:491:7029":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:7604:2421":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:6537:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12392:3939":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:13427:4048":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:11065:3819":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:7089:3436":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13798:4102":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:531:3604":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:894:5494":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:47583:6159":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:41375:5951":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:2420:2421":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:1888:3430":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:13966:5947":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"5:3865:5590":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12359:3936":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12135:3907":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:11673:3120":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:6885:5793":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:15160:4370":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6205:21472":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:40013:13956":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:4780:8735":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6672:7784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7424:21479":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:22842:8904":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:11319:35365":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:3061:263":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"18:80:25728":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:479:7026":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:6227:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:45388:6040":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:599:6201":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12762:3991":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:12475:1860":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:7487:7949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:5142:8100":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:7919:5297":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:41181:5939":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:6837:5107":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:16520:4773":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:22147:8628":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:10541:3097":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:22008:3061":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:41303:5799":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:559:7072":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:4815:8691":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:11363:8105":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:43519:3086":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:8267:5327":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:10408:6427":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:2467:4883":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"18:589:3610":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11075:35370":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:16399:4755":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:8363:6321":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:8572:6365":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:1589:7147":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:3495:13955":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:11950:6234":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:4132:3432":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:46898:6107":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:10756:160":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8536:5939":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:6942:5118":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:22094:8628":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:15997:4632":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"14:31:5467":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:14460:4243":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12249:3922":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:7560:3432":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:7282:5182":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:10784:3801":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"2:45298:154":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:12122:3906":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:5334:7469":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:9982:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:12469:922":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:3028:8628":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11432:21558":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:44635:3136":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13222:21545":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:12459:1844":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:12473:1872":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:9212:6259":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"18:481:3598":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:1486:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11788:3868":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:718:3640":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:7123:3438":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:2754:6219":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"14:214:5473":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:44227:6000":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:38709:14180":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:47603:6161":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:23260:8069":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:8559:181":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:42564:5973":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:4983:4956":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:5426:5782":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:5165:7400":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:45103:8090":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:3310:30257":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:42683:5477":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:3693:185":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:44689:3132":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:23410:8072":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:3185:3085":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:23324:5879":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:8365:14164":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:15876:4599":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"0:106:2567":{"crate_id":0,"path":["strsim","normalized_damerau_levenshtein"],"kind":"function"},"1:2480:8612":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:439:188":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:3587:4939":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"16:7807:35361":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:4753:3324":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:44253:5936":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:15:2366":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:8824:6390":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"0:26:2387":{"crate_id":0,"path":["strsim","hamming"],"kind":"function"},"16:6713:5087":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:3548:144":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13818:4112":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:14220:4183":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:5835:3436":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:32834:117":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"11:809:3430":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:12419:8279":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:9241:8785":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:47592:6160":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:32802:3154":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:16786:4853":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:46363:6051":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12306:3929":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:41510:5805":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:10313:3087":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:39977:13998":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"0:105:2558":{"crate_id":0,"path":["strsim","damerau_levenshtein"],"kind":"function"},"16:7159:5155":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:7521:5216":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:779:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4875:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:4184:4944":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:2137:5488":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6368:4862":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:42289:5818":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10141:21532":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:2450:4881":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:2590:4894":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"11:434:35332":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"11:2539:6828":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:44585:3140":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:1339:3669":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:1105:5491":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:41241:5788":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:12039:28614":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:11012:6232":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:14099:4167":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:7980:4928":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:6042:3432":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:9169:6399":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11281:3823":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10663:3653":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:4225:8694":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:2326:142":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:2437:3677":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:41023:3468":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:15829:4589":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"7:79:20453":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:7716:35357":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:3531:13947":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:4906:3325":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2806:3304":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"2:44206:5998":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:12464:771":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:43764:5991":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:41365:5803":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:13301:3117":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:13070:3821":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"13:110:35340":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:14947:4331":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"0:27:2391":{"crate_id":0,"path":["strsim","generic_jaro"],"kind":"function"},"1:2554:2931":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:46722:6083":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6902:7857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:46669:6080":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:113:25730":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:8451:133":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:5127:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:44763:13985":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:10793:3805":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"9:355:20474":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:7899:3431":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:2498:8618":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:12470:903":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:11539:3846":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:38654:14179":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:42649:140":{"crate_id":2,"path":["strsim","HammingResult","Err"],"kind":"variant"},"6:1696:7217":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:16632:4817":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:14832:4315":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13290:3757":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:11971:6235":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6064:4919":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4233:8696":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:6185:8100":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:10771:6224":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:3913:6233":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:5425:13968":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"17:13719:4083":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:9190:5477":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:7883:5027":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:40920:3133":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"14:160:5467":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:40057:3425":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8649:6374":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"11:785:5481":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:5224:4963":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10778:3800":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:31530:3061":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:44990:3148":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:6680:5082":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"6:8290:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6998:5120":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:23510:5898":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:9739:142":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:8097:8585":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:44878:6021":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:47039:6112":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:14560:4258":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:7287:34699":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:6402:30047":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:47687:6172":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:42491:5822":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:13261:3134":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:5301:5617":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"11:2566:3073":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:2858:204":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42691:5494":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5007:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:7074:5800":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:1927:2360":{"crate_id":2,"path":["core","mem"],"kind":"module"},"16:8105:5315":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:8031:6304":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:22704:8628":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:13062:5850":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11952:3881":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"10:0:2919":{"crate_id":10,"path":["adler"],"kind":"module"},"17:11291:35367":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:1652:5501":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:2656:686":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:15064:4355":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7337:5187":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:13983:4136":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:5477:7542":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:10530:122":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:42251:173":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:8014:4930":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:4823:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:22275:5869":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:42305:8669":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:22983:14196":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:6502:20582":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:22149:8817":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:47664:6166":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:12465:750":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"1:11141:30063":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11232:21559":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:5417:4969":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:2796:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:44603:3141":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9229:6403":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:10168:32299":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:41316:5949":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:6020:6266":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:8151:4932":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:2584:6693":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:3356:8813":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7508:5213":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:1576:5480":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:6065:6267":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13958:4134":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4984:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:22167:5869":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:6824:6278":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:6843:5108":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:22076:32355":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:3065:262":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:2770:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:47566:6158":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:33698:14172":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:16684:4829":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:6599:7754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:14773:4309":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12335:3934":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:5088:7394":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11805:3871":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:3304:252":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:485:7028":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:396:35327":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:40909:3472":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:44485:3145":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:14031:4148":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:11029:26135":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:2880:4907":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:14997:4348":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:46544:6066":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:16507:4098":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:2331:3802":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"15:0:2923":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6914:5116":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:15739:4568":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:984:8560":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:6822:21475":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:16209:4707":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:41125:5934":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:14084:4161":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:47779:6191":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:7814:5633":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8617:6236":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:10442:21542":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:1414:5493":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:46558:6067":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:3777:32215":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:13078:5851":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:10729:3655":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11026:35368":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4976:7342":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:4902:4953":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:15864:4598":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:15148:4366":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:3441:4938":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13733:4084":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:1229:35118":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:41152:5936":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"0:45:2428":{"crate_id":0,"path":["strsim","generic_jaro_winkler"],"kind":"function"},"16:6658:5076":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:46433:6059":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:13537:122":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:43536:141":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:42604:8553":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:41294:5798":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:7801:6740":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"16:2640:4896":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:8165:4922":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:8284:8042":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:16026:4639":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6640:5062":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:996:5487":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:5972:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:43452:3086":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:16761:4847":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:12851:4004":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:1615:5479":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:473:7023":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:10487:21543":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"16:7030:5129":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:45301:167":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:14114:4173":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:11822:6298":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"11:1140:5492":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5186:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7416:5194":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:4899:8739":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12798:21675":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:7223:5169":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:9198:6402":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12056:3899":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:14152:4181":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12583:3977":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:11016:3818":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:44187:5995":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:41250:5944":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12293:3927":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:10958:8103":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:4990:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:5179:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:1635:5585":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:8559:3143":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:14886:4322":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13781:4099":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:7731:5973":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:1563:7131":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:15852:4592":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:23368:31932":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:10274:21536":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:3346:3312":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:12816:3682":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:8199:8033":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:44977:6027":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:9425:6273":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"14:40:4099":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:45356:6035":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:14807:4312":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:41524:5806":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:4997:6242":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:42643:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"7:32:20446":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:8330:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:3987:3705":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1:10974:6419":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:322:3658":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:9987:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:15731:4565":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:16084:4681":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:1085:35322":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6269:5000":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:16714:4837":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:12462:752":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:15896:4606":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:41097:8595":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:22155:8820":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:3351:8811":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:4119:8686":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:772:5480":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:5526:34727":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:3695:4940":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:12462:3122":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:10977:35371":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:15136:4011":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:44357:3127":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:3919:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:5462:7533":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:3916:6234":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:5305:3689":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:44279:6003":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:7724:2414":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:42511:197":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:11985:3884":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:6625:5060":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:8298:5331":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:22064:32342":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:11757:21579":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:22798:8903":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:4113:8687":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:3764:13999":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:735:25738":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:6716:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:8668:6376":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:9139:6397":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13209:141":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:40169:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:698:3635":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:5986:6261":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:44905:5853":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44216:5999":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:40899:3471":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:3829:131":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11124:35366":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:10950:32503":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:23276:5873":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:4680:8717":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:14058:208":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:14902:4324":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:38819:14182":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:670:3631":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2648:6218":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:47524:6156":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:2920:4909":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:46462:6061":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:3719:5494":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:14358:4228":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:41748:5958":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:3299:120":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:5316:6248":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:7448:7933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:3058:148":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:41273:5792":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:6652:7779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12941:4012":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:12108:3905":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:23332:5880":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:22880:8905":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:13890:4124":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:13002:5846":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:15939:4620":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:7431:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13398:4047":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:7372:4924":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:5271:7443":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12605:3821":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:32734:5912":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:46690:6081":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:41087:3126":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:9310:118":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"11:671:5477":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:2732:14279":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10548:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:954:5495":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:2900:4908":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:5449:4970":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:2282:192":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:10549:3096":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8201:6312":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12931:4011":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:14612:4265":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:41016:3467":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:3029:3078":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"11:102:7002":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:31156:31934":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:13322:3111":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:11045:6311":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:40074:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2142:1385":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:1369:5219":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:12204:3914":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"0:65:2480":{"crate_id":0,"path":["strsim","generic_damerau_levenshtein"],"kind":"function"},"6:7361:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46739:6084":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11515:3842":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:11823:5839":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:5650:6254":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:43754:5987":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12906:4008":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:12468:916":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:7495:29953":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:34902:5238":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:5388:32560":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:8296:8044":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:34037:8814":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:16750:4846":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:15665:4549":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:7462:5205":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:15946:4621":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:3308:34689":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:44830:6020":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:44655:3121":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:22904:8628":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:42555:2421":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:46821:6088":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:12391:5842":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:13871:4119":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:41212:5942":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:13491:4052":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:32727:3325":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"18:643:3600":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:5666:6255":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:44813:6019":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:42699:2421":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5649:4971":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:41335:5801":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:11910:6233":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:6608:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:14599:4263":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:8353:8057":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:698:2421":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:3674:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5117:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:44178:5994":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:7750:14243":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:948:3430":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:47010:6111":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:8261:8036":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5349:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:10843:3806":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:23139:5870":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:3799:34727":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:23310:32308":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:9511:5825":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"17:14533:3945":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:10280:5968":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:11794:6295":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:4554:5775":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6738:35360":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:1023:5488":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"11:1900:5498":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:9746:6312":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:7259:5181":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:3077:141":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6534:7710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:5586:7578":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:608:3617":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:96:25729":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:12424:5843":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:8026:6302":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:2013:3080":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:7212:5168":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:47077:6114":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12648:3979":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"18:491:3599":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:8058:5313":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:211:5575":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:2227:3670":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:8209:4920":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:45123:8095":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:12053:6299":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:4909:819":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:5348:4967":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"0:61:2449":{"crate_id":0,"path":["strsim","levenshtein"],"kind":"function"},"5:788:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:6781:5100":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:12450:426":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"18:659:3625":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11706:3858":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:1619:5477":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5635:7605":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:8343:8055":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:12070:30054":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1:5736:6256":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11653:3853":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:5616:6249":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:8319:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:16264:4723":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:3052:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:10796:3104":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:12848:3124":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:6746:6277":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:2773:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:1932:6213":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:1690:7216":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:45315:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:12435:26129":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:14072:4158":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:5015:3327":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:3378:13952":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:43481:5346":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:44698:3133":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:11333:165":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"0:63:2464":{"crate_id":0,"path":["strsim","osa_distance"],"kind":"function"},"5:2161:5590":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11421:3834":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:4241:4945":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:46965:6110":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:598:35375":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"11:798:3432":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:507:3600":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1657:7200":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11617:3822":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:16739:4845":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:2147:5588":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:10097:21530":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:22930:32573":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:9452:6289":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:23576:5904":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:15777:4575":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7554:21480":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:680:3632":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:38764:14181":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:1854:711":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:1684:7213":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:10547:3095":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6794:5101":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"5:3296:5477":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6588:5057":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"17:11864:3875":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:8028:5311":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:3539:5956":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"13:0:2915":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13119:4027":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"18:754:3649":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:4832:5779":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:23543:5901":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:8206:6313":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:7471:5208":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:4964:7337":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:11785:3142":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:40061:5915":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6691:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:9420:190":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:6952:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:46587:6076":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:11163:3821":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:7620:5624":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:6473:7681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:13116:3120":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:15121:4363":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:14963:4335":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:8483:5368":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2796:4903":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:3144:141":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:8801:5987":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:31145:3086":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:23417:5892":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:4018:6235":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:41710:5807":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"11:881:5487":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:45398:183":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:1784:34727":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:8118:3645":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:9356:6414":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:34383:14176":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:45184:14304":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:41031:3464":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:42646:196":{"crate_id":2,"path":["strsim","HammingResult","Ok"],"kind":"variant"},"17:10803:3126":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:8504:3158":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:7316:7880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7044:4921":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:6712:3432":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:12816:14264":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:8413:168":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:7906:6300":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:47270:6150":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:16832:4134":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:8913:32298":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5471:7539":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:7180:8815":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:15573:4528":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:281:34727":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5412:1267":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:13266:21546":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:7743:31162":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:46927:6108":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:41194:5940":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}