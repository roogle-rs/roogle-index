{"root":"0:0:2418","crate_version":"1.19.0","includes_private":false,"index":{"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1275,4],"end":[1292,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:234:1154","0:235:2299"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3138:2973-0:124:2289":{"id":"a:2:3138:2973-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"function_pointer":{"decl":{"inputs":[],"output":{"generic":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:156:612":{"id":"0:156:612","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[842,8],"end":[844,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:2249":{"id":"0:288:2249","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[160,4],"end":[165,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13124:3317":{"id":"2:13124:3317","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2899:1756":{"id":"2:2899:1756","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:2201":{"id":"0:283:2201","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[127,4],"end":[129,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:2246":{"id":"0:274:2246","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[73,4],"end":[82,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"2:23235:2631","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"NonZeroUsize","id":"2:23235:2631","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13141:27481":{"id":"2:13141:27481","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:6192":{"id":"2:13152:6192","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43352:4278","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:368:2632":{"id":"b:2:2880-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:3310"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13253:33978":{"id":"2:13253:33978","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4896:33978"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43665:6475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:33972":{"id":"2:13222:33972","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12839:14587","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32040:2976-0:124:2289":{"id":"a:2:32040:2976-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2893:136":{"id":"2:2893:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:2:41599:2186-0:174:2199":{"id":"a:2:41599:2186-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:94:781":{"id":"0:94:781","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[430,8],"end":[435,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:33966":{"id":"2:13211:33966","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12813:14590","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::match_indices":"2:13208:33965"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43534:6567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31983:236-0:368:2632":{"id":"a:2:31983:236-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1373,4],"end":[1378,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3311:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:250:248","0:251:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13158:27522":{"id":"2:13158:27522","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3138:2973-0:294:2643":{"id":"a:2:3138:2973-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:211:2249":{"id":"0:211:2249","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[1152,8],"end":[1166,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and\nthe cell remains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`.\nThe exact outcome is unspecified. Current implementation\ndeadlocks, but this may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302":{"id":"0:302","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[187,0],"end":[191,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:305:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:278:2249":{"id":"0:278:2249","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[91,4],"end":[109,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonZeroUsize","id":"2:23235:2631","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonZeroUsize","id":"2:23235:2631","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32040:2976-0:216:2289":{"id":"a:2:32040:2976-0:216:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3103:246-0:124:2289":{"id":"a:2:3103:246-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"function_pointer":{"decl":{"inputs":[],"output":{"generic":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:3713-0:216:2289":{"id":"b:2:3713-0:216:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:310":{"id":"0:310","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[199,0],"end":[288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:313:1154","0:314:2201","0:315:2228","0:316:2246","0:320:2249"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32040:2976-0:294:2643":{"id":"a:2:32040:2976-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:374:2641":{"id":"0:374:2641","crate_id":0,"name":"OnceBool","span":{"filename":"src/race.rs","begin":[114,0],"end":[116,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:281","a:2:3103:246-0:374:2641","a:2:31983:236-0:374:2641","a:2:3138:2973-0:374:2641","a:2:32040:2976-0:374:2641","a:2:41599:2186-0:374:2641","a:2:41598:2187-0:374:2641","b:2:2605-0:374:2641","b:2:2895-0:374:2641","b:2:2608-0:374:2641","b:2:2890-0:374:2641","b:2:3713-0:374:2641","b:2:2884-0:374:2641","b:2:2880-0:374:2641","0:378","0:376"]}}},"0:82:2199":{"id":"0:82:2199","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[411,4],"end":[414,5]},"visibility":"public","docs":"A cell which can be written to only once. It is not thread safe.\n\nUnlike [`std::cell::RefCell`], a `OnceCell` provides simple `&`\nreferences to the contents.\n\n[`std::cell::RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nlet value: &String = cell.get_or_init(|| {\n    \"Hello, World!\".to_string()\n});\nassert_eq!(value, \"Hello, World!\");\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:107","a:2:3103:246-0:82:2199","a:2:31983:236-0:82:2199","a:2:3138:2973-0:82:2199","a:2:32040:2976-0:82:2199","b:2:2605-0:82:2199","b:2:2895-0:82:2199","b:2:2608-0:82:2199","b:2:2890-0:82:2199","b:2:3713-0:82:2199","b:2:2884-0:82:2199","b:2:2887-0:82:2199","b:2:2880-0:82:2199","b:5:725-0:82:2199","0:102","0:85","0:99","0:87","0:95","0:104","0:89","0:92"]}}},"b:2:3713-0:174:2199":{"id":"b:2:3713-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2608-0:82:2199":{"id":"b:2:2608-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2610:26309"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13148:27510":{"id":"2:13148:27510","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13147:27509"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:811":{"id":"0:106:811","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[463,8],"end":[465,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13256:33979":{"id":"2:13256:33979","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4894:33979"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43683:6474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:2208":{"id":"0:151:2208","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[835,8],"end":[837,9]},"visibility":"public","docs":"Gets the mutable reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get_mut(&mut lazy), None);\nassert_eq!(*lazy, 92);\nassert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3715:1771":{"id":"2:3715:1771","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39282:6465","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:26700":{"id":"2:13228:26700","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5606:34676":{"id":"5:5606:34676","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1260,4],"end":[1264,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:224:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2605-0:174:2199":{"id":"b:2:2605-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2607:2766"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2890-0:82:2199":{"id":"b:2:2890-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[454,4],"end":[458,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:101:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:114:2229":{"id":"0:114:2229","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[551,8],"end":[563,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:113:2228"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}},{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},{"generic":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[429,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:94:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:320:2249":{"id":"0:320:2249","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[249,4],"end":[270,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13132:33958":{"id":"2:13132:33958","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:612":{"id":"0:251:612","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1375,8],"end":[1377,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:33959":{"id":"2:13143:33959","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12301:1673","str::slice_mut_unchecked":"2:13144:33960","crate::ops::Index":"2:39113:2956"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13150:6406":{"id":"2:13150:6406","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43336:6398","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:33973":{"id":"2:13225:33973","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:248":{"id":"0:155:248","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[841,8],"end":[841,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:316:2246":{"id":"0:316:2246","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[231,4],"end":[240,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13208:33965":{"id":"2:13208:33965","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12813:14590","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::rmatch_indices":"2:13211:33966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43516:6566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[847,4],"end":[851,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:160:614"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:215:2273":{"id":"0:215:2273","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1217,8],"end":[1219,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value. Returns\n`None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3713-0:124:2289":{"id":"b:2:3713-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31983:236-0:216:2289":{"id":"a:2:31983:236-0:216:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41598:2187-0:294:2643":{"id":"a:2:41598:2187-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13184:33962":{"id":"2:13184:33962","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12813:14590","str::split":"2:13175:26894","prim@char":"1:12295:458","`DoubleEndedIterator`":"2:8197:129","str::rsplit_terminator":"2:13187:33963"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43416:6564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:2201":{"id":"0:349:2201","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[334,8],"end":[340,9]},"visibility":"public","docs":"Gets a reference to the underlying value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:348:1154":{"id":"0:348:1154","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[329,8],"end":[331,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13125:33955":{"id":"2:13125:33955","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[909,4],"end":[916,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:183:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:305:781":{"id":"0:305:781","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[188,4],"end":[190,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3138:2973-0:174:2199":{"id":"a:2:3138:2973-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:350:2228":{"id":"0:350:2228","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[346,8],"end":[359,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"resolved_path":{"name":"Box","id":"5:296:2660","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Box","id":"5:296:2660","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:2249":{"id":"0:119:2249","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[622,8],"end":[636,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:333:2658":{"id":"b:2:2880-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2883:3310"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:377:60":{"id":"0:377:60","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[113,9],"end":[113,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:1154":{"id":"0:198:1154","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[950,8],"end":[952,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:2249":{"id":"0:355:2249","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[385,8],"end":[406,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"5:296:2660","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270":{"id":"0:270","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[39,0],"end":[110,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:271:1154","0:272:2201","0:273:2228","0:274:2246","0:278:2249"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[853,4],"end":[858,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:163:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:243:2314":{"id":"0:243:2314","crate_id":0,"name":"force_mut","span":{"filename":"src/lib.rs","begin":[1327,8],"end":[1336,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and\nreturns a mutable reference to the result. This is equivalent\nto the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force_mut(&mut lazy), &mut 92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:26895":{"id":"2:13155:26895","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43620:6570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:82:2199":{"id":"b:2:2605-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2607:2766"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:146:2308":{"id":"0:146:2308","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[773,8],"end":[778,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and returns a reference to\nthe result.\n\nThis is equivalent to the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31983:236-0:333:2658":{"id":"a:2:31983:236-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2608-0:374:2641":{"id":"b:2:2608-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2610:26309"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13216:33968":{"id":"2:13216:33968","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:27296":{"id":"5:5618:27296","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13249:27294"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32040:2976-0:174:2199":{"id":"a:2:32040:2976-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:164:1695":{"id":"0:164:1695","crate_id":0,"name":"sync","span":{"filename":"src/lib.rs","begin":[863,0],"end":[863,12]},"visibility":"public","docs":"Thread-safe, blocking version of `OnceCell`.","links":{},"attrs":["#[cfg(any(feature = \"std\", feature = \"critical-section\"))]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:174:2199","0:216:2289"],"is_stripped":false}}},"0:0:2418":{"id":"0:0:2418","crate_id":0,"name":"once_cell","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1412,13]},"visibility":"public","docs":"# Overview\n\n`once_cell` provides two new cell-like types, [`unsync::OnceCell`] and\n[`sync::OnceCell`]. A `OnceCell` might store arbitrary non-`Copy` types, can\nbe assigned to at most once and provides direct access to the stored\ncontents. The core API looks *roughly* like this (and there's much more\ninside, read on!):\n\n```rust,ignore\nimpl<T> OnceCell<T> {\n    const fn new() -> OnceCell<T> { ... }\n    fn set(&self, value: T) -> Result<(), T> { ... }\n    fn get(&self) -> Option<&T> { ... }\n}\n```\n\nNote that, like with [`RefCell`] and [`Mutex`], the `set` method requires\nonly a shared reference. Because of the single assignment restriction `get`\ncan return a `&T` instead of `Ref<T>` or `MutexGuard<T>`.\n\nThe `sync` flavor is thread-safe (that is, implements the [`Sync`] trait),\nwhile the `unsync` one is not.\n\n[`unsync::OnceCell`]: unsync/struct.OnceCell.html\n[`sync::OnceCell`]: sync/struct.OnceCell.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n[`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n# Recipes\n\n`OnceCell` might be useful for a variety of patterns.\n\n## Safe Initialization of Global Data\n\n```rust\nuse std::{env, io};\n\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct Logger {\n    // ...\n}\nstatic INSTANCE: OnceCell<Logger> = OnceCell::new();\n\nimpl Logger {\n    pub fn global() -> &'static Logger {\n        INSTANCE.get().expect(\"logger is not initialized\")\n    }\n\n    fn from_cli(args: env::Args) -> Result<Logger, std::io::Error> {\n       // ...\n#      Ok(Logger {})\n    }\n}\n\nfn main() {\n    let logger = Logger::from_cli(env::args()).unwrap();\n    INSTANCE.set(logger).unwrap();\n    // use `Logger::global()` from now on\n}\n```\n\n## Lazy Initialized Global Data\n\nThis is essentially the `lazy_static!` macro, but without a macro.\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\n\nuse once_cell::sync::OnceCell;\n\nfn global_data() -> &'static Mutex<HashMap<i32, String>> {\n    static INSTANCE: OnceCell<Mutex<HashMap<i32, String>>> = OnceCell::new();\n    INSTANCE.get_or_init(|| {\n        let mut m = HashMap::new();\n        m.insert(13, \"Spica\".to_string());\n        m.insert(74, \"Hoyten\".to_string());\n        Mutex::new(m)\n    })\n}\n```\n\nThere are also the [`sync::Lazy`] and [`unsync::Lazy`] convenience types to\nstreamline this pattern:\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\nuse once_cell::sync::Lazy;\n\nstatic GLOBAL_DATA: Lazy<Mutex<HashMap<i32, String>>> = Lazy::new(|| {\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    Mutex::new(m)\n});\n\nfn main() {\n    println!(\"{:?}\", GLOBAL_DATA.lock().unwrap());\n}\n```\n\nNote that the variable that holds `Lazy` is declared as `static`, *not*\n`const`. This is important: using `const` instead compiles, but works wrong.\n\n[`sync::Lazy`]: sync/struct.Lazy.html\n[`unsync::Lazy`]: unsync/struct.Lazy.html\n\n## General purpose lazy evaluation\n\nUnlike `lazy_static!`, `Lazy` works with local variables.\n\n```rust\nuse once_cell::unsync::Lazy;\n\nfn main() {\n    let ctx = vec![1, 2, 3];\n    let thunk = Lazy::new(|| {\n        ctx.iter().sum::<i32>()\n    });\n    assert_eq!(*thunk, 6);\n}\n```\n\nIf you need a lazy field in a struct, you probably should use `OnceCell`\ndirectly, because that will allow you to access `self` during\ninitialization.\n\n```rust\nuse std::{fs, path::PathBuf};\n\nuse once_cell::unsync::OnceCell;\n\nstruct Ctx {\n    config_path: PathBuf,\n    config: OnceCell<String>,\n}\n\nimpl Ctx {\n    pub fn get_config(&self) -> Result<&str, std::io::Error> {\n        let cfg = self.config.get_or_try_init(|| {\n            fs::read_to_string(&self.config_path)\n        })?;\n        Ok(cfg.as_str())\n    }\n}\n```\n\n## Lazily Compiled Regex\n\nThis is a `regex!` macro which takes a string literal and returns an\n*expression* that evaluates to a `&'static Regex`:\n\n```\nmacro_rules! regex {\n    ($re:literal $(,)?) => {{\n        static RE: once_cell::sync::OnceCell<regex::Regex> = once_cell::sync::OnceCell::new();\n        RE.get_or_init(|| regex::Regex::new($re).unwrap())\n    }};\n}\n```\n\nThis macro can be useful to avoid the \"compile regex on every loop\niteration\" problem.\n\n## Runtime `include_bytes!`\n\nThe `include_bytes` macro is useful to include test resources, but it slows\ndown test compilation a lot. An alternative is to load the resources at\nruntime:\n\n```\nuse std::path::Path;\n\nuse once_cell::sync::OnceCell;\n\npub struct TestResource {\n    path: &'static str,\n    cell: OnceCell<Vec<u8>>,\n}\n\nimpl TestResource {\n    pub const fn new(path: &'static str) -> TestResource {\n        TestResource { path, cell: OnceCell::new() }\n    }\n    pub fn bytes(&self) -> &[u8] {\n        self.cell.get_or_init(|| {\n            let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n            let path = Path::new(dir.as_str()).join(self.path);\n            std::fs::read(&path).unwrap_or_else(|_err| {\n                panic!(\"failed to load test resource: {}\", path.display())\n            })\n        }).as_slice()\n    }\n}\n\nstatic TEST_IMAGE: TestResource = TestResource::new(\"test_data/lena.png\");\n\n#[test]\nfn test_sobel_filter() {\n    let rgb: &[u8] = TEST_IMAGE.bytes();\n    // ...\n# drop(rgb);\n}\n```\n\n## `lateinit`\n\n`LateInit` type for delayed initialization. It is reminiscent of Kotlin's\n`lateinit` keyword and allows construction of cyclic data structures:\n\n\n```\nuse once_cell::sync::OnceCell;\n\npub struct LateInit<T> { cell: OnceCell<T> }\n\nimpl<T> LateInit<T> {\n    pub fn init(&self, value: T) {\n        assert!(self.cell.set(value).is_ok())\n    }\n}\n\nimpl<T> Default for LateInit<T> {\n    fn default() -> Self { LateInit { cell: OnceCell::default() } }\n}\n\nimpl<T> std::ops::Deref for LateInit<T> {\n    type Target = T;\n    fn deref(&self) -> &T {\n        self.cell.get().unwrap()\n    }\n}\n\n#[derive(Default)]\nstruct A<'a> {\n    b: LateInit<&'a B<'a>>,\n}\n\n#[derive(Default)]\nstruct B<'a> {\n    a: LateInit<&'a A<'a>>\n}\n\n\nfn build_cycle() {\n    let a = A::default();\n    let b = B::default();\n    a.b.init(&b);\n    b.a.init(&a);\n\n    let _a = &a.b.a.b.a;\n}\n```\n\n# Comparison with std\n\n|`!Sync` types         | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`Cell<T>`             | `T`                    | requires `T: Copy` for `get`                  |\n|`RefCell<T>`          | `RefMut<T>` / `Ref<T>` | may panic at runtime                          |\n|`unsync::OnceCell<T>` | `&T`                   | assignable only once                          |\n\n|`Sync` types          | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`AtomicT`             | `T`                    | works only with certain `Copy` types          |\n|`Mutex<T>`            | `MutexGuard<T>`        | may deadlock at runtime, may block the thread |\n|`sync::OnceCell<T>`   | `&T`                   | assignable only once, may block the thread    |\n\nTechnically, calling `get_or_init` will also cause a panic or a deadlock if\nit recursively calls itself. However, because the assignment can happen only\nonce, such cases should be more rare than equivalents with `RefCell` and\n`Mutex`.\n\n# Minimum Supported `rustc` Version\n\nIf only the `std`, `alloc`, or `race` features are enabled, MSRV will be\nupdated conservatively, supporting at least latest 8 versions of the compiler.\nWhen using other features, like `parking_lot`, MSRV might be updated more\nfrequently, up to the latest stable. In both cases, increasing MSRV is *not*\nconsidered a semver-breaking change and requires only a minor version bump.\n\n# Implementation details\n\nThe implementation is based on the\n[`lazy_static`](https://github.com/rust-lang-nursery/lazy-static.rs/) and\n[`lazy_cell`](https://github.com/indiv0/lazycell/) crates and\n[`std::sync::Once`]. In some sense, `once_cell` just streamlines and unifies\nthose APIs.\n\nTo implement a sync flavor of `OnceCell`, this crates uses either a custom\nre-implementation of `std::sync::Once` or `parking_lot::Mutex`. This is\ncontrolled by the `parking_lot` feature (disabled by default). Performance\nis the same for both cases, but the `parking_lot` based `OnceCell<T>` is\nsmaller by up to 16 bytes.\n\nThis crate uses `unsafe`.\n\n[`std::sync::Once`]: https://doc.rust-lang.org/std/sync/struct.Once.html\n\n# F.A.Q.\n\n**Should I use the sync or unsync flavor?**\n\nBecause Rust compiler checks thread safety for you, it's impossible to\naccidentally use `unsync` where `sync` is required. So, use `unsync` in\nsingle-threaded code and `sync` in multi-threaded. It's easy to switch\nbetween the two if code becomes multi-threaded later.\n\nAt the moment, `unsync` has an additional benefit that reentrant\ninitialization causes a panic, which might be easier to debug than a\ndeadlock.\n\n**Does this crate support async?**\n\nNo, but you can use\n[`async_once_cell`](https://crates.io/crates/async_once_cell) instead.\n\n**Does this crate support `no_std`?**\n\nYes, but with caveats. `OnceCell` is a synchronization primitive which\n_semantically_ relies on blocking. `OnceCell` guarantees that at most one\n`f` will be called to compute the value. If two threads of execution call\n`get_or_init` concurrently, one of them has to wait.\n\nWaiting fundamentally requires OS support. Execution environment needs to\nunderstand who waits on whom to prevent deadlocks due to priority inversion.\nYou _could_ make code to compile by blindly using pure spinlocks, but the\nruntime behavior would be subtly wrong.\n\nGiven these constraints, `once_cell` provides the following options:\n\n- The `race` module provides similar, but distinct synchronization primitive\n  which is compatible with `no_std`. With `race`, the `f` function can be\n  called multiple times by different threads, but only one thread will win\n  to install the value.\n- `critical-section` feature (with a `-`, not `_`) uses `critical_section`\n  to implement blocking.\n\n**Can I bring my own mutex?**\n\nThere is [generic_once_cell](https://crates.io/crates/generic_once_cell) to\nallow just that.\n\n**Should I use `std::cell::OnceCell`, `once_cell`, or `lazy_static`?**\n\nIf you can use `std` version (your MSRV is at least 1.70, and you don't need\nextra features `once_cell` provides), use `std`. Otherwise, use `once_cell`.\nDon't use `lazy_static`.\n\n# Related crates\n\n* Most of this crate's functionality is available in `std` starting with\n  Rust 1.70. See `std::cell::OnceCell` and `std::sync::OnceLock`.\n* [double-checked-cell](https://github.com/niklasf/double-checked-cell)\n* [lazy-init](https://crates.io/crates/lazy-init)\n* [lazycell](https://crates.io/crates/lazycell)\n* [mitochondria](https://crates.io/crates/mitochondria)\n* [lazy_static](https://crates.io/crates/lazy_static)\n* [async_once_cell](https://crates.io/crates/async_once_cell)\n* [generic_once_cell](https://crates.io/crates/generic_once_cell) (bring\n  your own mutex)","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:69:2179","0:164:1695","0:260:1933"],"is_stripped":false}}},"2:13181:27514":{"id":"2:13181:27514","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12813:14590","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::split":"2:13175:26894"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43384:6388","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:374:2641":{"id":"b:2:2880-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:3310"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2895-0:333:2658":{"id":"b:2:2895-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3713-0:82:2199":{"id":"b:2:3713-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32040:2976-0:368:2632":{"id":"a:2:32040:2976-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2605-0:294:2643":{"id":"b:2:2605-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2607:2766"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13193:27518":{"id":"2:13193:27518","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12295:458","str::splitn":"2:13190:27516","self::pattern":"2:12813:14590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43488:6391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:27521":{"id":"2:13199:27521","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13251:28695":{"id":"2:13251:28695","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:979:39015"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2889:811":{"id":"2:2889:811","crate_id":2,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:1154":{"id":"0:282:1154","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[121,4],"end":[123,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:27297":{"id":"5:5617:27297","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13248:27295"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41598:2187-0:374:2641":{"id":"a:2:41598:2187-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:122:2272":{"id":"0:122:2272","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[667,8],"end":[669,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:174:2199":{"id":"b:2:2880-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2883:3310"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174:2199":{"id":"0:174:2199","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[901,4],"end":[901,35]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.\n\n`OnceCell` provides `&` references to the contents without RAII guards.\n\nReading a non-`None` value out of `OnceCell` establishes a\nhappens-before relationship with a corresponding write. For example, if\nthread A initializes the cell with `get_or_init(f)`, and thread B\nsubsequently reads the result of this call, B also observes all the side\neffects of `f`.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<String> = OnceCell::new();\nassert!(CELL.get().is_none());\n\nstd::thread::spawn(|| {\n    let value: &String = CELL.get_or_init(|| {\n        \"Hello, World!\".to_string()\n    });\n    assert_eq!(value, \"Hello, World!\");\n}).join().unwrap();\n\nlet value: Option<&String> = CELL.get();\nassert!(value.is_some());\nassert_eq!(value.unwrap().as_str(), \"Hello, World!\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:196","a:2:3103:246-0:174:2199","a:2:31983:236-0:174:2199","a:2:3138:2973-0:174:2199","a:2:32040:2976-0:174:2199","a:2:41599:2186-0:174:2199","a:2:41598:2187-0:174:2199","b:2:2605-0:174:2199","b:2:2895-0:174:2199","b:2:2608-0:174:2199","b:2:2890-0:174:2199","b:2:3713-0:174:2199","b:2:2884-0:174:2199","b:2:2887-0:174:2199","b:2:2880-0:174:2199","b:5:725-0:174:2199","0:191","0:188","0:184","0:181","0:194","0:178"]}}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[934,4],"end":[938,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:190:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2608-0:216:2289":{"id":"b:2:2608-0:216:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2610:26309"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[312,4],"end":[316,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:342:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[34,18],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:373:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:324-0:333:2658":{"id":"0:324-0:333:2658","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[291,0],"end":[291,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"import":{"source":"self::once_box::OnceBox","name":"OnceBox","id":"0:333:2658","glob":false}}},"0:139:1154":{"id":"0:139:1154","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[742,8],"end":[744,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing function.\n\n# Example\n```\n# fn main() {\nuse once_cell::unsync::Lazy;\n\nlet hello = \"Hello, World!\".to_string();\n\nlet lazy = Lazy::new(|| hello.to_uppercase());\n\nassert_eq!(&*lazy, \"HELLO, WORLD!\");\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["init",{"generic":"F"}]],"output":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:113:2228":{"id":"0:113:2228","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[530,8],"end":[535,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.set(92), Ok(()));\nassert_eq!(cell.set(62), Err(62));\n\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13161:27523":{"id":"2:13161:27523","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:216:2289":{"id":"b:2:2880-0:216:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2883:3310"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13237:33975":{"id":"2:13237:33975","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2884-0:368:2632":{"id":"b:2:2884-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:190:811":{"id":"0:190:811","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[935,8],"end":[937,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3713-0:294:2643":{"id":"b:2:3713-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13196:27520":{"id":"2:13196:27520","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342:60":{"id":"0:342:60","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[313,8],"end":[315,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:60":{"id":"0:371:60","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[34,9],"end":[34,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13175:26894":{"id":"2:13175:26894","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12813:14590","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::split_whitespace":"2:13153:32076","str::rsplit":"2:13181:27514"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43366:6383","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3138:2973-0:82:2199":{"id":"a:2:3138:2973-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2884-0:124:2289":{"id":"b:2:2884-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5600:3486":{"id":"5:5600:3486","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[34,9],"end":[34,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:241:2308":{"id":"0:241:2308","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[1308,8],"end":[1313,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and\nreturns a reference to the result. This is equivalent\nto the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:464":{"id":"0:186:464","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[919,8],"end":[924,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:781":{"id":"0:183:781","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[910,8],"end":[915,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2246":{"id":"0:207:2246","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[1115,8],"end":[1124,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell\nwas empty.\n\nMany threads may call `get_or_init` concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. The\nexact outcome is unspecified. Current implementation deadlocks, but\nthis may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41598:2187-0:333:2658":{"id":"a:2:41598:2187-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13202:2776":{"id":"2:13202:2776","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12813:14590","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::rmatches":"2:13205:33964"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43570:6568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[185,0],"end":[185,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112:2208":{"id":"0:112:2208","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[508,8],"end":[511,9]},"visibility":"public","docs":"Gets a mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\n*cell.get_mut().unwrap() = 93;\nassert_eq!(cell.get(), Some(&93));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:82:2199":{"id":"b:5:725-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:727:3381","5:728:3382","5:729:3383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:193:679":{"id":"0:193:679","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[941,8],"end":[943,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2895-0:82:2199":{"id":"b:2:2895-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:200:2201":{"id":"0:200:2201","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[963,8],"end":[970,9]},"visibility":"public","docs":"Gets the reference to the underlying value.\n\nReturns `None` if the cell is empty, or being initialized. This\nmethod never blocks.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13123:975":{"id":"2:13123:975","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12295:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[462,4],"end":[466,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:106:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:339:781":{"id":"0:339:781","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[307,8],"end":[309,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2894:1758":{"id":"2:2894:1758","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:2228":{"id":"0:204:2228","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[1058,8],"end":[1063,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<i32> = OnceCell::new();\n\nfn main() {\n    assert!(CELL.get().is_none());\n\n    std::thread::spawn(|| {\n        assert_eq!(CELL.set(92), Ok(()));\n    }).join().unwrap();\n\n    assert_eq!(CELL.set(62), Err(62));\n    assert_eq!(CELL.get(), Some(&92));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:2273":{"id":"0:123:2273","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[687,8],"end":[691,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value.\n\nReturns `None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234:1154":{"id":"0:234:1154","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[1278,8],"end":[1280,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13245:27298":{"id":"2:13245:27298","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:2347":{"id":"0:203:2347","crate_id":0,"name":"get_unchecked","span":{"filename":"src/lib.rs","begin":[1031,8],"end":[1033,9]},"visibility":"public","docs":"Get the reference to the underlying value, without checking if the\ncell is initialized.\n\n# Safety\n\nCaller must ensure that the cell is in initialized state, and that\nthe contents are acquired by (synchronized to) this thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[940,4],"end":[944,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:193:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1273,4],"end":[1273,94]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2608-0:174:2199":{"id":"b:2:2608-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2610:26309"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13153:32076":{"id":"2:13153:32076","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13154:32077"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43640:6572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13167:3357":{"id":"2:13167:3357","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41506:190","prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:124:2289":{"id":"b:2:2880-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2883:3310"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5598":{"id":"5:5598","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5599:34674","5:5600:3486","5:5603:34675","5:5606:34676","5:5614:34677","5:5615:34678","5:5616:9348","5:5617:27297","5:5618:27296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:214:2272":{"id":"0:214:2272","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[1197,8],"end":[1199,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:124:2289":{"id":"b:2:2605-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2607:2766"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13122":{"id":"2:13122","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13123:975","2:13124:3317","2:13125:33955","2:13126:33956","2:13128:33957","2:13131:26587","2:13132:33958","2:13133:334","2:13134:27482","2:13135:2201","2:13137:2208","2:13139:2347","2:13141:27481","2:13143:33959","2:13144:33960","2:13145:27505","2:13146:27506","2:13147:27509","2:13148:27510","2:13150:6406","2:13151:6582","2:13152:6192","2:13153:32076","2:13154:32077","2:13155:26895","2:13156:33961","2:13157:32074","2:13158:27522","2:13161:27523","2:13164:27524","2:13167:3357","2:13171:3316","2:13175:26894","2:13178:27512","2:13181:27514","2:13184:33962","2:13187:33963","2:13190:27516","2:13193:27518","2:13196:27520","2:13199:27521","2:13202:2776","2:13205:33964","2:13208:33965","2:13211:33966","2:13214:33967","2:13216:33968","2:13218:33969","2:13220:33970","2:13221:33971","2:13222:33972","2:13225:33973","2:13228:26700","2:13231:27525","2:13234:33974","2:13237:33975","2:13240:33976","2:13243:33977","2:13245:27298","2:13246:28691","2:13247:27299","2:13248:27295","2:13249:27294","2:13250:28694","2:13251:28695","2:13252:28696","2:13253:33978","2:13255:9224","2:13256:33979"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41599:2186-0:294:2643":{"id":"a:2:41599:2186-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:31983:236-0:124:2289":{"id":"a:2:31983:236-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41598:2187-0:368:2632":{"id":"a:2:41598:2187-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:368:2632":{"id":"0:368:2632","crate_id":0,"name":"OnceNonZeroUsize","span":{"filename":"src/race.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:270","a:2:3103:246-0:368:2632","a:2:31983:236-0:368:2632","a:2:3138:2973-0:368:2632","a:2:32040:2976-0:368:2632","a:2:41599:2186-0:368:2632","a:2:41598:2187-0:368:2632","b:2:2605-0:368:2632","b:2:2895-0:368:2632","b:2:2608-0:368:2632","b:2:2890-0:368:2632","b:2:3713-0:368:2632","b:2:2884-0:368:2632","b:2:2880-0:368:2632","0:372","0:370"]}}},"2:2898:136":{"id":"2:2898:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31911:7638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[946,4],"end":[946,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:216:2289":{"id":"0:216:2289","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[1255,4],"end":[1258,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\nThis type is thread-safe and can be used in statics.\n\n# Example\n\n```\nuse std::collections::HashMap;\n\nuse once_cell::sync::Lazy;\n\nstatic HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {\n    println!(\"initializing\");\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    m\n});\n\nfn main() {\n    println!(\"ready\");\n    std::thread::spawn(|| {\n        println!(\"{:?}\", HASHMAP.get(&13));\n    }).join().unwrap();\n    println!(\"{:?}\", HASHMAP.get(&74));\n\n    // Prints:\n    //   ready\n    //   initializing\n    //   Some(\"Spica\")\n    //   Some(\"Hoyten\")\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"function_pointer":{"decl":{"inputs":[],"output":{"generic":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:231","0:238","a:2:31983:236-0:216:2289","a:2:3138:2973-0:216:2289","a:2:32040:2976-0:216:2289","a:2:41598:2187-0:216:2289","b:2:2605-0:216:2289","b:2:2895-0:216:2289","b:2:2608-0:216:2289","b:2:2890-0:216:2289","b:2:3713-0:216:2289","b:2:2884-0:216:2289","b:2:2880-0:216:2289","0:228","0:221","0:256","0:225","0:247","0:252"]}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[460,4],"end":[460,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5616:9348":{"id":"5:5616:9348","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:258:60":{"id":"0:258:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1388,8],"end":[1390,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32040:2976-0:333:2658":{"id":"a:2:32040:2976-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2895-0:368:2632":{"id":"b:2:2895-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31983:236-0:294:2643":{"id":"a:2:31983:236-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13147:27509":{"id":"2:13147:27509","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13148:27510"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315:2228":{"id":"0:315:2228","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[215,4],"end":[223,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13128:33957":{"id":"2:13128:33957","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13126:33956"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13133:334":{"id":"2:13133:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13134:27482","`u8`":"1:12312:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32040:2976-0:374:2641":{"id":"a:2:32040:2976-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13156:33961":{"id":"2:13156:33961","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43630:6571","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13255:9224":{"id":"2:13255:9224","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4897:9224"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43674:6329","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3138:2973-0:374:2641":{"id":"a:2:3138:2973-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:41599:2186-0:333:2658":{"id":"a:2:41599:2186-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69:2179":{"id":"0:69:2179","crate_id":0,"name":"unsync","span":{"filename":"src/lib.rs","begin":[383,0],"end":[383,14]},"visibility":"public","docs":"Single-threaded version of `OnceCell`.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:82:2199","0:124:2289"],"is_stripped":false}}},"b:2:2890-0:216:2289":{"id":"b:2:2890-0:216:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:91:60":{"id":"0:91:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[424,8],"end":[426,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41598:2187-0:216:2289":{"id":"a:2:41598:2187-0:216:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13146:27506":{"id":"2:13146:27506","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13145:27505","str::split_at_mut_checked":"2:13148:27510"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:33974":{"id":"2:13234:33974","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196":{"id":"0:196","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[948,4],"end":[1220,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:198:1154","0:199:2206","0:200:2201","0:201:2360","0:202:2208","0:203:2347","0:204:2228","0:205:2229","0:207:2246","0:211:2249","0:214:2272","0:215:2273"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2605-0:333:2658":{"id":"b:2:2605-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2607:2766"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:284:2228":{"id":"0:284:2228","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[136,4],"end":[138,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13249:27294":{"id":"2:13249:27294","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:2246":{"id":"0:115:2246","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[586,8],"end":[595,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f`\nif the cell was empty.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[840,4],"end":[845,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3311:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:155:248","0:156:612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[721,4],"end":[725,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:135:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:174:2199":{"id":"b:5:725-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:727:3381","5:728:3382","5:729:3383"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:728:3382":{"id":"5:728:3382","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:2314":{"id":"0:148:2314","crate_id":0,"name":"force_mut","span":{"filename":"src/lib.rs","begin":[794,8],"end":[803,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and returns a mutable reference to\nthe result.\n\nThis is equivalent to the `DerefMut` impl, but is explicit.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force_mut(&mut lazy), &92);\nassert_eq!(*lazy, 92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:174:2199":{"id":"b:2:2890-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97:464":{"id":"0:97:464","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[439,8],"end":[444,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13190:27516":{"id":"2:13190:27516","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590","str::rsplitn":"2:13193:27518"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43470:6390","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:727:3381":{"id":"5:727:3381","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:294:2643":{"id":"0:294:2643","crate_id":0,"name":"OnceRef","span":{"filename":"src/race.rs","begin":[179,0],"end":[182,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:310","a:2:31983:236-0:294:2643","a:2:3138:2973-0:294:2643","a:2:32040:2976-0:294:2643","a:2:41599:2186-0:294:2643","a:2:41598:2187-0:294:2643","b:2:2605-0:294:2643","b:2:2895-0:294:2643","b:2:2608-0:294:2643","b:2:2890-0:294:2643","b:2:3713-0:294:2643","b:2:2884-0:294:2643","b:2:2880-0:294:2643","0:302","0:299","0:306"]}}},"0:250:248":{"id":"0:250:248","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1374,8],"end":[1374,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:199:2206":{"id":"0:199:2206","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[955,8],"end":[957,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[918,4],"end":[932,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:186:464","0:187:466"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3103:246-0:82:2199":{"id":"a:2:3103:246-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:31983:236-0:174:2199":{"id":"a:2:31983:236-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2880-0:294:2643":{"id":"b:2:2880-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2883:3310"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:729:3383":{"id":"5:729:3383","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309:60":{"id":"0:309:60","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[194,4],"end":[196,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13145:27505":{"id":"2:13145:27505","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13147:27509","str::split_at_mut":"2:13146:27506"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:2201":{"id":"0:150:2201","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[818,8],"end":[820,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get(&lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get(&lazy), Some(&92));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41598:2187-0:174:2199":{"id":"a:2:41598:2187-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:272:2201":{"id":"0:272:2201","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[48,4],"end":[51,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonZeroUsize","id":"2:23235:2631","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:2228":{"id":"0:273:2228","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[58,4],"end":[65,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"resolved_path":{"name":"NonZeroUsize","id":"2:23235:2631","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[420,4],"end":[420,72]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3138:2973-0:368:2632":{"id":"a:2:3138:2973-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13187:33963":{"id":"2:13187:33963","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12813:14590","str::split":"2:13175:26894","prim@char":"1:12295:458","str::split_terminator":"2:13184:33962"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43434:6565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:294:2643":{"id":"b:2:2890-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13250:28694":{"id":"2:13250:28694","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:979:39015"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:2208":{"id":"0:202:2208","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[1019,8],"end":[1021,9]},"visibility":"public","docs":"Gets the mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3713-0:368:2632":{"id":"b:2:3713-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:285:2246":{"id":"0:285:2246","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[146,4],"end":[151,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31983:236-0:374:2641":{"id":"a:2:31983:236-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2608-0:124:2289":{"id":"b:2:2608-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2610:26309"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[719,4],"end":[719,94]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:101:679":{"id":"0:101:679","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[455,8],"end":[457,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238":{"id":"0:238","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1294,4],"end":[1371,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:241:2308","0:243:2314","0:245:2201","0:246:2208"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:224:781":{"id":"0:224:781","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1261,8],"end":[1263,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41599:2186-0:368:2632":{"id":"a:2:41599:2186-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[327,4],"end":[407,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:348:1154","0:349:2201","0:350:2228","0:351:2246","0:355:2249"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13246:28691":{"id":"2:13246:28691","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39468:3253","Self::is_ascii":"2:13245:27298"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39468:3253","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[438,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:97:464","0:98:466"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2880-0:82:2199":{"id":"b:2:2880-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2883:3310"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:235:2299":{"id":"0:235:2299","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[1285,8],"end":[1291,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:2201":{"id":"0:314:2201","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[206,4],"end":[209,5]},"visibility":"public","docs":"Gets a reference to the underlying value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2607:2766":{"id":"2:2607:2766","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13221:33971":{"id":"2:13221:33971","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[727,4],"end":[756,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:139:1154","0:140:2299"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2605-0:216:2289":{"id":"b:2:2605-0:216:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2607:2766"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2884-0:294:2643":{"id":"b:2:2884-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135:781":{"id":"0:135:781","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[722,8],"end":[724,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3138:2973-0:333:2658":{"id":"a:2:3138:2973-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:110:2206":{"id":"0:110:2206","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[475,8],"end":[477,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13214:33967":{"id":"2:13214:33967","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13154:32077":{"id":"2:13154:32077","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13153:32076"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43649:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187:466":{"id":"0:187:466","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[926,8],"end":[931,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1380,4],"end":[1384,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:255:614"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2605-0:374:2641":{"id":"b:2:2605-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2766"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:160:614":{"id":"0:160:614","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[848,8],"end":[850,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[758,4],"end":[838,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:146:2308","0:148:2314","0:150:2201","0:151:2208"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41599:2186-0:374:2641":{"id":"a:2:41599:2186-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:2186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2895-0:374:2641":{"id":"b:2:2895-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:466":{"id":"0:98:466","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[446,8],"end":[451,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:60":{"id":"0:163:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[855,8],"end":[857,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:60":{"id":"0:180:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[904,8],"end":[906,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32040:2976-0:82:2199":{"id":"a:2:32040:2976-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:201:2360":{"id":"0:201:2360","crate_id":0,"name":"wait","span":{"filename":"src/lib.rs","begin":[993,8],"end":[1001,9]},"visibility":"public","docs":"Gets the reference to the underlying value, blocking the current\nthread until it is set.\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell = std::sync::Arc::new(OnceCell::new());\nlet t = std::thread::spawn({\n    let cell = std::sync::Arc::clone(&cell);\n    move || cell.set(92).unwrap()\n});\n\n// Returns immediately, but might return None.\nlet _value_or_none = cell.get();\n\n// Will return 92, but might block until the other thread does `.set`.\nlet value: &u32 = cell.wait();\nassert_eq!(*value, 92);\nt.join().unwrap();\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2884-0:82:2199":{"id":"b:2:2884-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:178":{"id":"0:178","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[903,4],"end":[907,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:180:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2884-0:333:2658":{"id":"b:2:2884-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3103:246-0:174:2199":{"id":"a:2:3103:246-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[318,4],"end":[325,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3335:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:345:652"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2608-0:294:2643":{"id":"b:2:2608-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2610:26309"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2884-0:216:2289":{"id":"b:2:2884-0:216:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2884-0:374:2641":{"id":"b:2:2884-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13131:26587":{"id":"2:13131:26587","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12361:14591"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2608-0:368:2632":{"id":"b:2:2608-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2610:26309"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13231:27525":{"id":"2:13231:27525","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:1154":{"id":"0:271:1154","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[42,4],"end":[44,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:33977":{"id":"2:13243:33977","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12774:135","`FromStr`":"2:12773:2995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12773:2995","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12773:2995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:34678":{"id":"5:5615:34678","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:2660","`String`":"5:7617:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2660","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[423,4],"end":[427,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:91:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2605-0:368:2632":{"id":"b:2:2605-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2766"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3713-0:374:2641":{"id":"b:2:3713-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[113,18],"end":[113,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:379:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[409,4],"end":[409,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13126:33956":{"id":"2:13126:33956","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13178:27512":{"id":"2:13178:27512","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12629:6385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2289":{"id":"0:124:2289","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[714,4],"end":[717,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy: Lazy<i32> = Lazy::new(|| {\n    println!(\"initializing\");\n    92\n});\nprintln!(\"ready\");\nprintln!(\"{}\", *lazy);\nprintln!(\"{}\", *lazy);\n\n// Prints:\n//   ready\n//   initializing\n//   92\n//   92\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"function_pointer":{"decl":{"inputs":[],"output":{"generic":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:136","0:143","a:2:3103:246-0:124:2289","a:2:31983:236-0:124:2289","a:2:3138:2973-0:124:2289","a:2:32040:2976-0:124:2289","a:2:41598:2187-0:124:2289","b:2:2605-0:124:2289","b:2:2895-0:124:2289","b:2:2608-0:124:2289","b:2:2890-0:124:2289","b:2:3713-0:124:2289","b:2:2884-0:124:2289","b:2:2880-0:124:2289","0:161","0:129","0:157","0:152","0:132"]}}},"a:2:41598:2187-0:124:2289":{"id":"a:2:41598:2187-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13144:33960":{"id":"2:13144:33960","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12301:1673","crate::ops::IndexMut":"2:3374:2957","str::slice_unchecked":"2:13143:33959"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2208":{"id":"0:246:2208","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[1368,8],"end":[1370,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get_mut(&mut lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2883:3310":{"id":"2:2883:3310","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2857:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:33976":{"id":"2:13240:33976","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313:1154":{"id":"0:313:1154","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[201,4],"end":[203,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2299":{"id":"0:140:2299","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[749,8],"end":[755,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2887-0:82:2199":{"id":"b:2:2887-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2889:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:373:781":{"id":"0:373:781","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[34,18],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:27299":{"id":"2:13247:27299","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13248:27295":{"id":"2:13248:27295","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1386,4],"end":[1391,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:258:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13137:2208":{"id":"2:13137:2208","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41506:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376":{"id":"0:376","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[113,9],"end":[113,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:377:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2608-0:333:2658":{"id":"b:2:2608-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2610:26309"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3103:246-0:374:2641":{"id":"a:2:3103:246-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[421,4],"end":[421,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:245:2201":{"id":"0:245:2201","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[1351,8],"end":[1353,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get(&lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get(&lazy), Some(&92));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:333:2658":{"id":"b:2:2890-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2895-0:174:2199":{"id":"b:2:2895-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13157:32074":{"id":"2:13157:32074","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43658:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2884-0:174:2199":{"id":"b:2:2884-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13164:27524":{"id":"2:13164:27524","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13218:33969":{"id":"2:13218:33969","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:374:2641":{"id":"b:2:2890-0:374:2641","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[468,4],"end":[692,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:109:1154","0:110:2206","0:111:2201","0:112:2208","0:113:2228","0:114:2229","0:115:2246","0:119:2249","0:122:2272","0:123:2273"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3138:2973-0:216:2289":{"id":"a:2:3138:2973-0:216:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"function_pointer":{"decl":{"inputs":[],"output":{"generic":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:2973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2890-0:368:2632":{"id":"b:2:2890-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:260:1933":{"id":"0:260:1933","crate_id":0,"name":"race","span":{"filename":"src/race.rs","begin":[1,0],"end":[419,1]},"visibility":"public","docs":"Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.\n\nIf two threads race to initialize a type from the `race` module, they\ndon't block, execute initialization function together, but only one of\nthem stores the result.\n\nThis module does not require `std` feature.\n\n# Atomic orderings\n\nAll types in this module use `Acquire` and `Release`\n[atomic orderings](Ordering) for all their operations. While this is not\nstrictly necessary for types other than `OnceBox`, it is useful for users as\nit allows them to be certain that after `get` or `get_or_init` returns on\none thread, any side-effects caused by the setter thread prior to them\ncalling `set` or `get_or_init` will be made visible to that thread; without\nit, it's possible for it to appear as if they haven't happened yet from the\ngetter thread's perspective. This is an acceptable tradeoff to make since\n`Acquire` and `Release` have very little performance overhead on most\narchitectures versus `Relaxed`.","links":{"Ordering":"2:41682:195"},"attrs":["#[cfg(feature = \"race\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:368:2632","0:374:2641","0:294:2643","0:324-0:333:2658"],"is_stripped":false}}},"0:111:2201":{"id":"0:111:2201","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[483,8],"end":[489,9]},"visibility":"public","docs":"Gets a reference to the underlying value.\n\nReturns `None` if the cell is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2895-0:124:2289":{"id":"b:2:2895-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:1154":{"id":"0:109:1154","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[470,8],"end":[472,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3713-0:333:2658":{"id":"b:2:3713-0:333:2658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:2579","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13135:2201":{"id":"2:13135:2201","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41506:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31983:236-0:82:2199":{"id":"a:2:31983:236-0:82:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2887-0:174:2199":{"id":"b:2:2887-0:174:2199","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2889:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3103:246-0:368:2632":{"id":"a:2:3103:246-0:368:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2632","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2890-0:124:2289":{"id":"b:2:2890-0:124:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5599:34674":{"id":"5:5599:34674","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2660","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:2660","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2895-0:294:2643":{"id":"b:2:2895-0:294:2643","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2886:811":{"id":"2:2886:811","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[193,0],"end":[197,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2643","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:309:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[118,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:1154","0:283:2201","0:284:2228","0:285:2246","0:288:2249"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:333:2658":{"id":"0:333:2658","crate_id":0,"name":"OnceBox","span":{"filename":"src/race.rs","begin":[301,4],"end":[304,5]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:346","a:2:31983:236-0:333:2658","a:2:3138:2973-0:333:2658","a:2:32040:2976-0:333:2658","a:2:41599:2186-0:333:2658","a:2:41598:2187-0:333:2658","b:2:2605-0:333:2658","b:2:2895-0:333:2658","b:2:2608-0:333:2658","b:2:2890-0:333:2658","b:2:3713-0:333:2658","b:2:2884-0:333:2658","b:2:2880-0:333:2658","0:337","0:340","0:358","0:343"]}}},"2:13171:3316":{"id":"2:13171:3316","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41506:190","prim@char":"1:12295:458","self::pattern":"2:12813:14590"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:652":{"id":"0:345:652","crate_id":0,"name":"drop","span":{"filename":"src/race.rs","begin":[319,8],"end":[324,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:2229":{"id":"0:205:2229","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[1080,8],"end":[1087,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:204:2228"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}},{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},{"generic":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[306,4],"end":[310,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2658","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:339:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13134:27482":{"id":"2:13134:27482","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12312:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13139:2347":{"id":"2:13139:2347","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13151:6582":{"id":"2:13151:6582","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43342:6562","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13220:33970":{"id":"2:13220:33970","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2895-0:216:2289":{"id":"b:2:2895-0:216:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13252:28696":{"id":"2:13252:28696","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:979:39015"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:34675":{"id":"5:5603:34675","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2610:26309":{"id":"2:2610:26309","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:34677":{"id":"5:5614:34677","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379:781":{"id":"0:379:781","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[113,18],"end":[113,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255:614":{"id":"0:255:614","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1381,8],"end":[1383,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1270,4],"end":[1270,74]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"OnceCell","id":"0:174:2199","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2289","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13205:33964":{"id":"2:13205:33964","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12813:14590","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::matches":"2:13202:2776"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43588:6569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:14588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:351:2246":{"id":"0:351:2246","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[367,8],"end":[376,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3345:141","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Box","id":"5:296:2660","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:4675:2809":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:15214:5174":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:5157:31974":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:6116:4138":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:9145:3321":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:42938:6543":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:43191:6549":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:1692:7848":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8304:9347":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:1591:6084":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5636:8239":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:828:4041":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:1903:6084":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:5477:8175":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:43516:6566":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:7306:8506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:5522:6805":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:39295:6466":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:564:7706":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:9151:6814":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:15596:5293":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:8012:8654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:16121:5428":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:2394:5489":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"0:374:2641":{"crate_id":0,"path":["once_cell","race","OnceBool"],"kind":"struct"},"17:12530:4625":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:40257:6499":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:7554:6187":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:9210:9434":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6895:5775":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5134:8027":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:15521:5280":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11075:4450":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:7446:8564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11634:4508":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:40726:6361":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:41444:6794":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:5565:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:7348:3027":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:14025:4856":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:40037:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:4268:2559":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:5136:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"11:328:7632":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:15390:5221":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:11046:3394":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2287:9298":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5472:8173":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:4372:3020":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:6721:8432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:7686:5900":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:33184:2939":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14038:4858":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11102:4452":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:8692:6917":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:4641:5554":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:39922:6471":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"11:2304:5810":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:3552:2962":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:7769:5903":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:2058:8695":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:7497:5880":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"10:0:2669":{"crate_id":10,"path":["adler"],"kind":"module"},"6:8294:8675":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:42491:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:7682:29304":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:12399:4607":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:45429:6627":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:9882:781":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"0:164:1695":{"crate_id":0,"path":["once_cell","sync"],"kind":"module"},"1:10534:6927":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:43470:6390":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:22988:6450":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:6729:8433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:7934:2800":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:6651:2860":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:12314:1788":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"15:394:21145":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:3380:6787":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13922:4843":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:43172:6546":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:5712:4073":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8016:9229":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"12:0:2671":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:45362:6619":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:41298:9358":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10170:4415":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:44343:6603":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:2355:5482":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:12318:1860":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:7366:8539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:1945:3488":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:15701:5322":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:14091:4865":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10524:4426":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:7561:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:14855:5076":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8299:6851":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:42957:6381":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:299:7213":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:5415:5571":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:7567:14825":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10534:35352":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:2469:4075":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:2984:6199":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:16249:5456":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:8818:6799":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:5385:4414":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:15769:5342":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:4042:9361":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:6427:5698":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:45636:6646":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:6768:8445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"5:6392:9530":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:12310:882":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:15222:5176":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12408:4608":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:9709:375":{"crate_id":2,"path":["core","sync","atomic"],"kind":"module"},"6:6478:8314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:482:4125":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12362:4605":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:5367:22040":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:946:6072":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:14994:5125":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:7546:8623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4897:7939":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:5556:6810":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1526:7740":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4150:9367":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:5712:9429":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:6849:5773":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:2932:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:570:7709":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:22769:32021":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:8136:5960":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:15778:5344":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6872:5774":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:46142:6714":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:5104:2821":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:4811:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:4786:2813":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:13855:4831":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:45788:6654":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:643:4221":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:1189:34854":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:10639:6784":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"5:669:6160":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:2458:9311":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:45467:6629":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:5995:5608":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:2448:9306":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:7052:5797":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:10911:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:4753:8550":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:21475:32957":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:5536:6809":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:7288:26881":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:6650:8410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:3669:4319":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:2175:22172":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:8202:5533":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12317:944":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:10461:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:1485:7722":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:14516:4951":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:6417:8286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:9121:6930":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13553:4765":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:14177:4893":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:9244:6933":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"14:31:6054":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"8:0:2667":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:4391:14631":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:7602:8645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:10185:4272":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:4325:6330":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:21568:9441":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:6678:8417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:1593:7784":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:15126:5149":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:5898:2847":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11367:4450":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:33302:2940":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:21507:9316":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:2848:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:4106:9365":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:45865:6673":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:44392:3025":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2864:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:42753:6542":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10284:4275":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:45977:6677":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:15734:5329":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:2678:4112":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:22922:6444":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"9:424:21033":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:5802:22041":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:5048:9412":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:41326:7527":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:10317:4276":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"7:31:21017":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13064:4662":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:46521:6729":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:7465:3321":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:735:26300":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:7314:8511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:1534:6081":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:4248:2559":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:856:6070":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:824:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:23235:2631":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"type_alias"},"1:1976:764":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:7084:4092":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:22966:6448":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"11:832:6081":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:6456:22046":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:4685:2810":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:8301:5976":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:41940:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:12813:14590":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:16069:5416":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:43748:14602":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:8675:2825":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:1169:7216":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:15814:5348":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:558:2897":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:42723:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:14051:4860":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:39907:32017":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:12312:1800":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:6698:8426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:14298:4913":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:42059:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:3103:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:3287:6783":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:11889:6395":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:11635:6832":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:40:3028":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:40368:6504":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:5546:8196":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:1761:2183":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:6629:8398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5643:8242":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:9886:22110":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:1535:7746":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3108:2629":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:43238:6487":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:31960:6458":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:7640:6195":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:2599:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:3248:31195":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:44092:8777":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:42446:3298":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:7618:5896":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:46589:6738":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:7881:4147":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6398:5512":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12851:4644":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:4532:2181":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:41599:2186":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12557:4450":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:6763:8444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:14545:4954":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:4822:9391":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:10848:6956":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:12307:888":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:42500:3298":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:3345:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"14:165:21116":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:46396:6720":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10642:6786":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:4743:5556":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13252:4700":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:6782:22048":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:10577:4152":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:3780:9359":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:46536:6730":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:10264:6770":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:4759:2182":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:1041:5810":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:2708:5503":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13046:4659":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"11:2151:6076":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:4073:4058":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11865:4536":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:22461:9519":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:12508:4621":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:837:3394":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12043:4572":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:4271:9387":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12107:4430":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:14560:4958":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:32040:2976":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:7348:8530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"11:2352:6076":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"18:698:4256":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:12621:4628":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:4468:5548":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:6411:9531":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:4976:5564":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:1888:6772":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:44096:8778":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:46338:6718":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:8175:5964":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:3925:5544":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10828:35348":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:45689:6649":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"14:40:4697":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:9137:6931":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:13503:6413":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4909:7948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:10901:6844":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:6723:2854":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5083:8023":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:6307:4137":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:13424:4733":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8583:6904":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:32041:2978":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:7841:6977":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12494:4618":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:2660:5501":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:42098:2845":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:42538:3299":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12030:4571":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:23473:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:2684:5502":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:44365:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:6788:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:534:2895":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:11115:4454":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4979:7978":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6560:5515":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:44088:8776":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:6157:2559":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:6811:8459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:2430:3697":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:6409:8284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:3264:4300":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:4437:4065":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:513:4287":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:3427:9344":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13972:4544":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:43890:6408":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:45511:6632":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:2569:6186":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:8253:8666":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:6139:6342":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:4819:9413":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:6435:8299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:15092:5146":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:11215:6387":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:924:4046":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:44277:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13375:4726":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:32646:2932":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:41432:6521":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:7485:8580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:15569:5281":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:15760:5338":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:6231:5652":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:5025:9410":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:2660:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:5671:8252":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6385:5694":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13606:4779":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:10258:3291":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:31911:7638":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6802:5760":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:8740:6537":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:9670:4151":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:6025:6340":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6342:35347":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6120:22044":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:11717:4159":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:7528:5890":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:80:26289":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:45298:6613":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:46559:6736":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:6574:5532":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:6317:5681":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:5404:4038":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:41523:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"11:1142:6079":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:14912:5113":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:42714:6533":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:11177:6386":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12464:22239":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:43312:6558":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:9372:2559":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"6:7984:8651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"11:687:3395":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:46417:6721":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:4425:6796":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:8499:4278":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:46264:6716":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:14012:4855":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7656:22052":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:11179:26705":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:7584:8642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11256:4464":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:6466:5703":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:42436:8765":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:8306:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:14752:4990":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:11329:6390":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:14933:5118":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:0:1665":{"crate_id":1,"path":["std"],"kind":"module"},"5:1153:34853":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11089:4451":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:7910:22054":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:6991:35338":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:1525:6066":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:4730:2811":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:3208:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:8030:9230":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:8620:8539":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:3242:27284":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:3616:9336":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:8462:9315":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:5160:8029":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:5916:4058":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:7457:3321":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:680:4253":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5212:8050":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:507:4221":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:8763:6920":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:7585:14808":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:3842:6791":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11583:4499":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11405:4479":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:7874:4267":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:22278:9526":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:3154:2936":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:12278:26694":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:598:35362":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:733:2998":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:33125:2941":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:16212:5450":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5581:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:8288:8674":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11128:4405":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:9386:2857":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:9078:6927":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:8247:8665":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:41823:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5306:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7473:5625":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:2432:9301":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12342:4600":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:12773:2995":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:9903:32256":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:32070:2977":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:5914:5597":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:15078:5143":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11270:8790":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:3571:32388":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:919:6064":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9108:6929":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:5407:1219":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:4349:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:14284:4912":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:41784:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:14977:5123":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:1447:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:21431:32961":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:21963:9444":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:5200:8043":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"14:220:6061":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6689:8420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:5031:8005":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"14:214:6059":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:12301:1673":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:14325:4917":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:14402:4930":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:44108:8781":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10997:4440":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12056:4574":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:22414:9316":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:10252:3288":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"9:502:6146":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:1585:7779":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:14868:5083":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:13766:4817":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6335:5691":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:43264:6554":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"11:1025:6074":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13387:4727":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:8174:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:44356:6606":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"11:2124:5810":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:16105:5423":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"18:589:4232":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:45383:6624":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"18:531:4225":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11799:4527":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:15931:4682":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:4308:3394":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:872:4281":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"9:53:7494":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:868:4044":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:351:35310":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:6620:5721":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:8271:8669":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6670:8415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:43112:6544":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:44280:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:2655:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:3647:3394":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:12302:1761":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:6843:8697":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:3164:2934":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:538:4228":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13986:4852":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12572:4430":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:4971:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7355:5840":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2748:5505":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:32460:2933":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:6053:7220":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11853:4535":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:15992:5402":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:5927:5598":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:40344:4243":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:10684:2533":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:364:4030":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:12315:1794":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:40174:6490":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:1671:7838":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"11:700:3321":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12792:4380":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:15720:5327":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:3475:5538":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5052:8013":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:10250:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:6780:2861":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"16:2592:5498":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:2039:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:883:6073":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:4154:9368":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:3810:5541":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:7831:4288":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:15281:5190":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:754:4271":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11755:4520":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:8135:4360":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:5037:5566":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:9129:3394":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10612:4427":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:7575:8639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:13478:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:9336:7528":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5102:8024":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5219:8051":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13363:4723":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:16198:5446":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:11605:4504":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12543:4626":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:5846:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"3:0:487":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:41410:32090":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:14386:4926":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:517:7681":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:3500:2559":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:15151:5158":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:14876:5084":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:9249:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:915:6063":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:46574:6737":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:40205:6493":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"19:0:1249":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10573:35354":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:3588:3287":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"18:670:4252":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:5266:8073":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:5948:2559":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:521:26302":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:40319:6502":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:7331:4145":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:8265:8668":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:12305:718":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:3028:7239":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:1628:7812":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:491:2325":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"9:238:6537":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12887:4646":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:12298:1270":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:43163:6545":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:718:4262":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:5046:8011":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4965:7970":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:15206:5172":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:37765:2949":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:4424:5547":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:635:4245":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:11095:6383":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:3283:35216":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10720:35350":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:39964:6329":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2943:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:5452:14578":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13946:4844":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6648:5723":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:46065:6681":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:1883:3394":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:15010:5126":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:9497:6771":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:1309:5810":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:22369:9528":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:9665:6842":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:12311:863":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:4337:6331":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:12175:4581":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:7741:5531":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:10622:35349":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:8197:8664":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:14847:5073":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:45496:6631":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:39167:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:15273:5189":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:39225:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7006:5786":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12213:4587":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:10698:4112":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"11:1923:6087":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11341:4475":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:43798:6583":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:5891:2846":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:12316:1776":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:43570:6568":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:7715:4079":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:7516:8606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:14079:4864":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:15655:5308":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:5572:6811":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11715:4514":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:33066:2937":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"7:78:21024":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:46612:6739":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:22818:3010":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:45657:6647":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:5237:955":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:46464:6724":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:5817:5583":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:15822:5351":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:13785:4822":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:5624:8233":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:2602:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:45767:6653":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:3145:2975":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:12839:14587":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:8616:6908":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:2517:3708":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"10:36:7641":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13455:4742":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:8250:3031":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"11:2369:6090":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:5852:2559":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:7429:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:2860:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:15:2645":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:43658:6405":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4859:9376":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:6160:21153":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8140:6842":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:4611:2802":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:559:7704":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:2504:2683":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:2133:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:3473:4302":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5236:8058":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:11343:6391":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:11392:4478":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:742:6064":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:4830:5559":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:10264:3293":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:22955:6447":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:45330:6617":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:40108:4099":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11269:22144":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:7429:8559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:5863:22042":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:46044:6680":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:150:4026":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:6504:5707":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:3623:2817":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:22842:3011":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12659:4630":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:8118:5958":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10939:26701":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:2768:5506":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:43683:6474":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:1426:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:622:6760":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:4718:5555":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:13047:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:15138:5152":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5064:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:7098:5804":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:8492:6507":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:6962:5523":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:2636:5500":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:13024:22119":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:14788:5021":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6433:5699":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:5897:5592":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11242:4462":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:7523:9241":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15473:5243":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:2536:7634":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:12591:6404":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5039:8009":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:31974:6459":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:6544:4058":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:22900:6442":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:11419:4430":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:2700:6780":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:15058:5135":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:589:9223":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13832:4828":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:2987:4130":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:8618:3396":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:5831:5586":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:11354:4476":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:21489:32964":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:22711:32087":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:13451:32696":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:15289:5191":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:7412:8558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:41673:3321":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"13:226:7493":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11841:4534":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:9658:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:14271:4910":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:45450:6628":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:43993:6409":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:22:796":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:14147:4874":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:9984:22113":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12443:4613":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:10710:4429":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"11:1160:6080":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11042:4443":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:15678:5321":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:10999:6930":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:21685:9439":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:2826:9316":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:1859:2559":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:15313:5198":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:10901:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12371:4649":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5283:8084":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:7512:6186":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"15:0:2673":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:1098:4289":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:5781:5517":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:11045:4154":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:5436:8149":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10068:22097":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:14489:4947":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:4743:9365":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:12238:4589":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7379:35344":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:8216:5969":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:4489:2199":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:39145:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:4959:7968":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:9289:2832":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:1517:7735":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:6519:8335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:14587:4961":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5457:8164":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:13292:4711":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:7857:5913":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:3036:7241":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:45915:6675":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:736:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:22196:9524":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:16138:5430":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:6278:5659":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:3871:4075":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:12900:4648":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6976:5783":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7061:5800":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:12267:9231":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:1478:3395":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7727:5530":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:13757:3026":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"11:811:4075":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:13344:4722":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:6749:5747":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:9084:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:7900:4149":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:11915:22214":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:15324:5202":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:1621:7808":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11189:4458":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:15368:5216":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:12328:4595":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:6379:8259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:3096:2815":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:13877:4838":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11764:4521":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:6940:5781":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:43588:6569":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:43434:6565":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11313:4470":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:44084:8775":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:4821:4309":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:1863:6770":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:3597:4303":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:12515:6399":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:41609:2904":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:6636:8399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:12329:14835":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:5536:8190":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:8450:6790":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:13235:4697":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:22428:9520":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:11621:6830":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:904:4075":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:8196:6778":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:43201:6550":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:6215:4133":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:39117:2958":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:8615:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6915:8499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:5107:5568":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:5769:5582":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:21421:4231":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:41266:6368":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:497:7664":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:2691:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:43534:6567":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:15116:5148":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:2280:6777":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:11187:7526":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:21458:32972":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"0:216:2289":{"crate_id":0,"path":["once_cell","sync","Lazy"],"kind":"struct"},"5:5448:14577":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:21999:32968":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:4140:9366":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:6621:8397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:6615:2851":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:10504:9320":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:46510:6728":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:6394:4138":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:30197:2994":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:40296:6350":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4942:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:2205:6169":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:3293:2965":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:10948:26689":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:22661:7520":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:7480:3329":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:3098:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:9858:22109":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:21509:9442":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:43769:6575":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:5722:5518":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"11:2554:35314":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11497:4486":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"0:294:2643":{"crate_id":0,"path":["once_cell","race","OnceRef"],"kind":"struct"},"1:11876:6833":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13999:4853":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:10982:22126":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:9303:6942":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:22911:6443":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:11856:6394":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:22111:9440":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:1940:6773":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:5846:5588":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:14436:4943":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:31985:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11493:4485":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:3237:3394":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:8122:14806":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:22863:9316":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:46455:6723":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:1579:3321":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:5777:4138":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5515:8184":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:12819:6376":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:860:3321":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:22700:2996":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:6657:8411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:434:35316":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:42463:32010":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:39205:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:41588:2831":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:45592:6644":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:1463:3394":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:40090:9284":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:6480:5514":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:102:7238":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"15:288:21135":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:12319:1372":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:5212:2844":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13774:4819":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:8328:8682":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:8152:6844":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:3245:31193":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:41532:3394":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:3270:6086":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45674:6648":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:40493:6507":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"11:2548:7636":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:4757:8554":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"11:2423:3321":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:9376:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:0:545":{"crate_id":2,"path":["core"],"kind":"module"},"6:5483:8176":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:3014:21183":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:8306:8677":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12949:4304":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:597:4288":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:41540:3395":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:41548:3321":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:5062:2559":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:4940:5563":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:1354:6080":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:2338:5480":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6300:5674":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5960:5605":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:7823:22053":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:39935:6472":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"0:124:2289":{"crate_id":0,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"2:43815:6584":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:41901:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12353:4604":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5588:8211":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:12264:4591":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:43665:6475":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:21460:32966":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:21560:9316":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:5400:4415":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6634:5520":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:6947:4087":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:7538:2903":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:14189:4895":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:12308:870":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:219:3030":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"11:1007:5810":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:4103:4038":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:5381:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:8051:6841":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:2067:3725":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:7582:6190":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:43620:6570":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:45607:6645":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8226:6166":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11773:4522":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11166:4457":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46309:6717":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:7467:8570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11524:4488":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12969:4651":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:3196:5479":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:14260:4909":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11743:4517":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:6746:8436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:3597:31639":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:40215:6495":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:14475:4946":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:11607:6829":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4885:7934":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:7461:8569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:8828:3394":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:3025:3381":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:724:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:850:3395":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:923:6067":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:710:6063":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:16050:4710":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:10867:8785":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:5250:8064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11702:4513":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:22383:3707":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"2:40358:6354":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"11:396:4032":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:12262:7529":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13568:4771":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7306:35345":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:8572:8783":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:5756:5577":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:9391:2858":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"5:4467:2559":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:13116:4669":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:6738:8435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"14:0:2672":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:15957:5372":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:5223:6804":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:16165:5439":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"10:44:6092":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:40517:6357":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5630:8236":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:41282:6370":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:7888:5917":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:43366:6383":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:2728:5504":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:0:2666":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:41466:6371":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:1699:7851":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10818:4431":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:10256:3290":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:44169:14878":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:5320:8097":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:2112:6168":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:12828:4258":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:44335:6601":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12278:4592":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:6460:8304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13015:4611":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:910:6081":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:3374:2957":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:3546:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:2697:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:45482:6630":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:3335:6784":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12422:4609":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:10351:9031":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:30469:3298":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:3138:2973":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:4263:9386":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:3396:4075":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:6339:6819":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:7633:35337":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:1490:7724":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:1510:7732":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12516:4623":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:9938:22112":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:41244:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:0:2675":{"crate_id":17,"path":["object"],"kind":"module"},"1:646:9226":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8524:6899":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:1566:21110":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:14066:4863":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:11574:6825":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:4279:9388":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:1064:6076":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:40710:6360":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:6000:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:44284:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11510:4487":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"11:2231:4496":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:14341:4919":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:3947:6793":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:787:6066":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:45554:6642":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:5784:6813":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:12246:6980":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:1575:3394":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14414:4932":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:1503:7730":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:3249:35215":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:15616:5299":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:35834:2947":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:837:6067":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:8201:6847":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:11250:6388":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5677:8255":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:40005:14647":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:22240:9525":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:894:4058":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:21687:6417":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:7570:5527":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:1565:7765":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5277:8081":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:1653:7831":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:296:2660":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:11227:4461":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5665:8250":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:33243:2938":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5329:8100":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:1608:6087":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:11580:6973":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4824:7893":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:21443:32961":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:638:6761":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:623:35359":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:15410:5227":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:1597:6085":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:12299:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:14372:4924":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8591:6897":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11063:4448":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:39979:14646":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:8006:8652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"9:357:21046":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:9255:2894":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:2374:5488":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:6794:2862":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:10872:8787":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:2254:3022":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:33958:2946":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:15249:5180":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5352:8103":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:22456:9521":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:7014:22049":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"11:2403:3395":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:22328:2580":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"18:613:35360":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:15748:5336":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13497:4747":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5502:8183":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:5770:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:7617:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:12081:4163":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:4771:5557":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:11056:4155":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:1810:676":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:40266:6343":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5376:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"0:69:2179":{"crate_id":0,"path":["once_cell","unsync"],"kind":"module"},"17:15102:5147":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:2501:653":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:46484:6726":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:437:4286":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:10425:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:41600:3109":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:7963:2900":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:1586:4075":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:14463:4945":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:40287:6349":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13526:4756":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:2323:21180":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:3244:6085":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:2418:5490":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13473:4743":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:40187:6491":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:7799:5519":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:3845:6792":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:651:4221":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:7648:5899":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:46219:6715":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43630:6571":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:15176:5166":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:0:980":{"crate_id":6,"path":["libc"],"kind":"module"},"2:12834:14588":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:31949:6457":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:4755:8552":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:6714:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:10967:6812":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:39945:6473":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:6532:5709":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:46367:6719":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:40309:6501":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:6900:8488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:581:4231":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:8341:8686":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:39245:2959":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:23010:6452":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:42210:3290":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:16093:5421":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:40225:6336":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9180:9433":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:9290:6939":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12089:4576":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5344:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:42196:3289":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:941:3394":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:2854:5510":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10954:22125":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:46006:6678":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5260:8070":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2808:5508":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:12127:4578":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:45805:6655":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5146:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:10509:6380":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:45347:6618":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:22944:6446":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:22733:6427":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:1544:6063":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:41665:3395":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8145:6843":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:9364:2849":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:7945:2913":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:3234:2945":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12863:4645":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:8512:6570":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:473:7653":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:6442:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:44100:8779":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:2508:5494":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:39886:6467":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:12361:14591":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:1087:35309":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13899:4839":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:5075:5567":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:8093:5955":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"9:447:21031":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11214:4460":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:5307:5569":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:31967:2810":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:6611:2850":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:2197:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:11933:3723":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:6542:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:3304:6087":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:42020:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:5709:8460":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:7988:2533":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:44302:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:256:4280":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:22999:6451":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:8159:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:0:2676":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:11646:8797":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:3558:2964":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:43352:4278":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:40243:6496":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:8073:5954":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:12320:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:39185:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:504:2891":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:4802:5558":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6047:5614":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:7365:6183":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10283:6947":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:41706:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:15342:5206":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:2044:3726":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:1680:7844":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6664:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:44294:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:43212:6551":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"11:2542:7635":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:2854:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:41557:2830":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10661:4428":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:6441:8302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:2303:21154":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:43251:6553":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:4923:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"9:330:7642":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6079:5467":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4870:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:11357:6392":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:14449:4944":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:4913:5562":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:7437:30638":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:11884:6833":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:578:7714":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:6813:5761":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:9316:26696":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:32832:2935":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:42745:6541":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:11574:4496":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:8505:6383":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:12993:22118":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4891:7936":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:0:2674":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:41484:6373":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:30823:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3337:6785":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:16151:5436":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:43416:6564":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:10245:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:10890:6962":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:46495:6727":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:1603:6086":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:16176:5444":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"11:1910:6085":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:39275:2961":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:9359:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"0:82:2199":{"crate_id":0,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"2:9908:7524":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11537:4489":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:7452:8566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:281:4038":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:6848:4105":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:415:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:14503:4950":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:8351:8688":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9095:6928":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:11467:4157":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:6263:5657":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3820:4058":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:43342:6562":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:1066:21109":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:1340:6074":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12433:4611":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:11740:6791":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:3778:5540":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:9755:22090":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10018:22094":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:4531:5550":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:39991:6477":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:41745:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13187:4682":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6756:8443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:12768:22095":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:940:6070":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8036:9271":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:40234:6339":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4985:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:1887:3321":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:8155:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7428:22051":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:44104:8780":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:22646:6420":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:9781:22108":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:16032:4700":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:11557:4491":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:1580:7777":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:7077:9436":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:30454:3492":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:12300:1639":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:10350:4277":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:515:4219":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:532:7690":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13797:4824":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13844:4830":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:6588:5711":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7695:5901":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:465:7648":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:5192:6804":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:11288:6389":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:485:7659":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:22977:6449":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:13538:4759":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:2548:5496":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5445:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4864:7926":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:2936:21182":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:6874:8473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5244:8062":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:39113:2956":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:9435:6944":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"11:875:6072":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11661:4510":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13308:4715":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:4238:2559":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12808:4642":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5466:8170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"14:7:6054":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6665:22047":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:308:1724":{"crate_id":1,"path":["std","thread"],"kind":"module"},"16:6353:5472":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:6706:8429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:5370:8113":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:3029:4314":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:15426:5230":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:6937:4086":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:39998:6478":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:46475:6725":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11788:4526":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:7389:8557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12929:4649":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:538:7693":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:5034:9411":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:10048:3306":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:40024:6482":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:3339:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:4861:9378":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:11153:4431":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"11:673:3394":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:2572:5497":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:12695:4633":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:45706:6650":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:43952:6588":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:6914:4073":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"15:306:21136":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:11377:6143":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:8317:8681":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:5269:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:40717:2850":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:1055:6074":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:15608:5296":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:11857:6974":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:8259:8667":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:15190:5169":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:15400:5224":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5382:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:15836:5354":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:10681:4111":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:15333:5205":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:3791:6166":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:40741:4107":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:7387:4050":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:40165:6489":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:4917:4131":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:15023:5131":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:12296:1821":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:4708:9409":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:11142:4430":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:7038:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:42217:3291":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:42517:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:4837:7903":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:545:7696":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:11070:3395":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:43863:6586":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:42475:5932":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:2998:5534":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:5700:5516":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:30416:3490":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:8624:14805":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:1566:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:3468:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12289:4593":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:14235:4905":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13674:4781":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:3329:5537":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:881:6066":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:11467:4484":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:15168:5163":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:6609:8390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:4162:9370":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11547:4359":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:8529:9357":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:46027:6679":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:113:26291":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:12485:22240":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:3020:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:1707:7855":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:43640:6572":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13581:4775":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:1062:4038":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:5336:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"9:178:7509":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:14723:4970":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:563:4230":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:4352:5546":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:4499:6797":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5390:8123":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:4241:30648":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14529:4952":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:14311:4914":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:4963:14640":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:22593:6419":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:40145:6487":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:21958:9316":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"11:1676:4034":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:6291:4122":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:43649:6573":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:9381:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:42706:6532":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:40118:6485":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:6494:5706":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:1516:6065":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6775:8446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:11898:4539":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:22677:6421":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:5686:5513":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:8168:3032":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5014:7997":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:22784:32020":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"11:2383:3394":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:13702:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:12552:6402":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:15434:5231":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:4344:6795":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:44134:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5174:8030":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:12309:876":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:11652:8798":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"11:1582:6082":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:4882:5561":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:11541:6971":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"17:9807:22098":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6758:5748":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:641:6763":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11315:6970":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:12076:4575":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:7132:5809":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:2446:9305":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:6590:4038":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:2307:7519":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:12629:6385":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"0:260:1933":{"crate_id":0,"path":["once_cell","race"],"kind":"module"},"17:13211:4696":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11595:4503":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:4932:7956":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:1825:6768":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:357:2911":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:1207:4291":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:8118:14807":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:39972:6475":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:2739:6781":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13738:4810":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:15635:5305":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:5557:8202":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:9231:2848":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8482:6490":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:479:7656":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:41657:3394":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:14111:4868":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4916:7952":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8778:9424":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12225:4588":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12300:22238":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:659:4246":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:7537:8620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:43941:14603":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:2287:35254":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7357:3321":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10137:22091":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4924:7954":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:45315:6616":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:7606:4071":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:12345:6396":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:7109:4095":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:45283:6612":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:1663:7837":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:16223:5452":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:39468:3253":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:45268:6609":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:37710:2948":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:3324:2185":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:12671:4631":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:7944:9316":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:45932:6676":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:9399:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:929:9242":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:9671:22093":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:15266:5188":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:2851:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:4986:4311":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:11324:4472":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:22749:32003":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8190:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:43784:6580":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11825:4532":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:706:4258":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:40275:6500":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11443:4483":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:40068:6484":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:6505:8334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4292:9389":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:7421:3321":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8438:6889":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:1073:6080":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:6447:8303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:46438:6722":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:12683:4632":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:12597:4627":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:43283:6556":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:40042:6483":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:4560:5551":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:39069:2966":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"9:392:21032":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:7699:4075":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:3184:2955":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:6132:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6026:5461":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:1975:1313":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11647:4509":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:2234:4299":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:15582:5287":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:45575:6643":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:12478:4616":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:8188:5967":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:7085:5801":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:9721:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:2101:6167":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:44381:6607":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:8259:5860":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:39033:2967":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:14246:4907":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:1555:6064":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5225:8054":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:16187:5445":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"11:430:35315":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:42953:8773":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:8282:8673":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:40703:6359":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:38454:2952":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:41598:2187":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13753:4815":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:4062:5545":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"0:0:2418":{"crate_id":0,"path":["once_cell"],"kind":"module"},"17:2037:4292":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:12824:22117":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:15301:5197":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:40080:4278":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"16:3842:5542":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:5122:8026":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7604:5529":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:1917:6086":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4787:7866":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:45738:6652":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:10920:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"5:1724:4038":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4952:7965":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:30850:4231":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"0:174:2199":{"crate_id":0,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"17:10092:22115":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:4856:5560":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6412:22045":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:13627:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11812:4530":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:4630:9392":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11205:6824":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:13437:4734":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:21987:6416":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:9417:6824":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:8029:8663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8565:6794":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:7377:4058":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:31984:2579":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:41979:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:5449:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:4100:9364":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:40751:6362":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13146:4673":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:40503:6356":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:46651:6755":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:45400:6625":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:860:5474":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"11:0:2670":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11062:4156":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:4608:9391":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:10262:3292":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:403:4283":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:11877:4537":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:15197:5171":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:22302:9316":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:3806:6167":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7559:5894":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:41617:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:3335:2562":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6098:22043":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10251:4274":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:6849:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:1559:7763":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:40196:6492":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:6837:6351":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:14599:4968":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:4614:5553":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10759:4430":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:6524:8336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:7702:14801":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:4078:9362":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:9283:6938":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6927:5779":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"0:368:2632":{"crate_id":0,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"1:1969:9281":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:40759:6364":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:39282:6465":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:5423:8139":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12150:4579":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:553:7701":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12251:4590":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:8294:6850":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:3022:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:7321:2830":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:15456:5236":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13173:4681":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:4587:5552":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13272:4710":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:15383:5220":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:10200:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:2087:6166":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:14986:5124":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:261:4281":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:4458:2818":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:5290:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:3342:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:43273:6555":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11051:4445":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:6505:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:10930:6790":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:40328:6352":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10155:4414":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:45820:6656":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:8226:22055":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:41682:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:12313:1782":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11155:6928":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:22725:6426":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:6753:4038":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:3531:2960":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"9:482:21030":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:12575:6403":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:10285:6946":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:10615:4109":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"11:2498:21105":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:8577:9390":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:6471:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10044:22114":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:2525:7217":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:9195:9432":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4992:7984":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11240:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:11168:6929":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:39896:6468":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:96:26290":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:10254:3289":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:5347:5570":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:16235:5455":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:11222:8789":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:33439:2942":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:7586:14809":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:726:4265":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:43975:6596":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:10891:9316":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:12295:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:7407:35217":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10399:4278":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:4739:2812":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:44116:7526":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:13485:4746":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:15356:5213":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:5006:5565":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:9399:6376":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:22316:9527":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:7594:6193":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13089:4663":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:10469:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"11:2562:7639":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:22933:6445":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:12388:4606":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:1325:6076":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:3378:6786":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10218:4273":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:2458:5492":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:481:4220":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8218:6849":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"11:2443:4058":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:5415:8134":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:5587:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:1886:6771":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:1496:7727":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5314:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:8155:5963":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:10671:35356":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:9262:26695":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:6491:8323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:5112:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12707:4634":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:12887:14596":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:608:4239":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:2438:5491":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:3740:4038":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:1639:7820":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:5653:8243":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:868:6065":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12724:22116":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:23021:6453":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"5:1828:4075":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:11869:31257":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:11138:6385":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:43293:6557":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7580:5895":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:3660:3395":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:14356:4923":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13412:4732":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:7650:32289":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:586:7718":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:7590:5528":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:44404:6608":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:15624:5300":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:42698:6530":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5002:7991":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12584:4431":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:37875:2951":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11016:4442":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:2528:5495":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:13645:4122":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:22831:2997":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:10201:3287":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:2612:5499":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"14:160:6054":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:22540:6418":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:5641:6812":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:4502:5549":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"9:0:2668":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:44112:8782":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:2827:14656":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11730:4516":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:11780:6792":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:3149:2931":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9737:22092":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:21676:9316":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:2756:8692":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:523:7684":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:9168:6932":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:12201:4586":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:4800:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:14131:4869":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:6726:2855":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:2203:4296":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:22811:8698":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:573:4221":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:10260:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:10439:4416":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:31983:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:8210:6848":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:16079:5417":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:5181:8031":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:5195:6334":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:10887:35351":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:4606:2801":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:45525:6633":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13814:4827":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:6597:8385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:8162:6845":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:3899:5543":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:5191:8038":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6880:8474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:10713:4117":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:1827:6769":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:4602:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5296:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43674:6329":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:2664:4127":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:3634:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:40138:6486":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:11371:6393":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:22330:3707":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"2:13665:4124":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:2596:6779":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:15799:5347":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8597:6906":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:10157:6518":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"1:12306:734":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:5598:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:9716:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:30448:3491":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10769:35355":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:6543:5710":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:11621:4506":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:8197:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:41504:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5489:8178":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:10905:4433":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:2042:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:11026:22127":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:8518:6897":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7755:5521":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:42735:6537":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:10959:6841":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:10877:6843":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:13509:4748":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:33612:2943":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5617:8230":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:3179:2954":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:3549:6789":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5361:8107":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:5925:2826":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7168:6942":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:45721:6651":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:43181:6548":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:39956:6474":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"13:109:35321":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:5970:2859":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:7630:6194":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:31953:5860":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:5742:5573":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:800:4058":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1723:7860":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6948:5522":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:9295:6940":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:10636:6782":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:7397:35346":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:42203:3288":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"15:327:7490":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:2478:5493":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:40732:6508":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:15445:5235":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:1582:4058":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:1051:6076":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:2326:6074":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:1547:7755":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:2621:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:10982:26704":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"14:202:14604":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:3176:2953":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:3278:6084":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:11563:31593":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"2:37820:2950":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:15646:5306":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:3026:34753":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:15418:5228":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:3606:9314":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:13594:4776":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"7:0:1850":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:43927:6587":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:4092:9363":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"13:0:2665":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:10915:35353":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:1107:6078":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"11:844:9242":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:3531:6900":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:32072:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:15039:5134":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8845:6926":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:7359:8535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5528:8185":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12647:4629":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:7813:5905":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:2857:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"18:689:4255":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:491:7661":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:15463:5238":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:43488:6391":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:14212:4904":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14575:4611":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12189:4585":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:21562:9438":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:2838:5509":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:363:2912":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:5020:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:12293:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:6032:2844":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:43962:6592":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:10219:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12454:4614":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:16259:4727":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:43325:6561":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"14:187:21123":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:12294:1150":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:6821:8462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:7509:5881":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:2515:3707":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:7549:5893":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4876:7929":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:2878:5511":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:1494:3321":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:7968:2902":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:2140:6074":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"11:1891:4058":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:3586:2816":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13325:4717":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:2278:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:1938:652":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:10442:7223":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:3285:6782":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11801:6793":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:7144:22050":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:4863:9379":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:123:4028":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:6606:5719":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:4148:3395":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:44158:6598":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:33785:2944":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12318:4304":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:14968:5119":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6442:5700":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:7437:6185":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:4940:9375":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:7339:8529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:3614:5539":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:7330:8523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:15944:4696":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:7259:4144":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:6648:6344":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:3541:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:952:6073":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:730:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:40053:14825":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:774:6065":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:16269:4732":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:6562:8364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7539:5526":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13399:4730":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13959:4847":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:867:4280":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:11567:4493":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:8429:4267":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:30480:32024":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:2234:7518":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:9916:22111":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5400:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:10419:4282":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:39130:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:6671:3321":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:3032:7240":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:15376:5219":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7111:5807":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:39880:6329":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:22109:9316":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:4501:4065":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:43336:6398":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11674:4511":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:4048:9360":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:1575:6165":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13723:4806":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:43384:6388":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11293:22145":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:8642:6798":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:3954:3321":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:4:1232":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:542:5465":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8834:6925":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:2283:3713":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:21580:6417":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:21477:32971":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:7397:6184":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:11688:4512":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:45894:6674":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:45415:6626":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:3470:6508":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:8300:8676":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:2902:21181":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:41862:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:2195:2891":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:44080:8774":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"11:1603:6083":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:6066:5621":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:765:26301":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:3711:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:25873:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6532:8341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:3311:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:10877:4432":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:8662:32260":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:1686:7847":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:2788:5507":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"11:1896:4075":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}