{"root":"0:0:1957","crate_version":"1.12.0","includes_private":false,"index":{"0:194:1330":{"id":"0:194:1330","crate_id":0,"name":"sync","span":{"filename":"src/lib.rs","begin":[769,0],"end":[1255,1]},"visibility":"public","docs":"Thread-safe, blocking version of `OnceCell`.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:222:1750","0:264:1839"]}},"2:13204:31642":{"id":"2:13204:31642","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49414:3903","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:368":{"id":"0:368","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[190,4],"end":[194,5]},"visibility":{"restricted":{"parent":"0:346:2156","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:370:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:337:1799":{"id":"0:337:1799","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[157,4],"end":[162,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:2320-0:222:1750":{"id":"a:2:3218:2320-0:222:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:295:523":{"id":"0:295:523","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1220,8],"end":[1222,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2782:2268":{"id":"2:2782:2268","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:289:1859":{"id":"0:289:1859","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[1210,8],"end":[1215,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and\nreturns a reference to the result. This is equivalent\nto the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3186:201":{"id":"2:3186:201","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[685,4],"end":[689,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"fmt::Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["0:168:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3155:110":{"id":"2:3155:110","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3280:2462":{"id":"2:3280:2462","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3282:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2783-0:157:1839":{"id":"b:2:2783-0:157:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:3650","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:2785:52502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10710:198":{"id":"2:10710:198","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10712:166","2:10713:1753","2:10714:1759","2:10715:1885","2:10716:52736","2:10717:730","2:10718:731"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10701:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13275:14288":{"id":"2:13275:14288","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12809:3602","prim@char":"1:15720:2198"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:263:1823":{"id":"0:263:1823","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1118,8],"end":[1120,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value. Returns\n`None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3309:2464":{"id":"2:3309:2464","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3311:166","2:3312:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2780-0:402:2146":{"id":"b:2:2780-0:402:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:2268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:239":{"id":"0:239","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[846,4],"end":[850,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:241:584"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3185:202":{"id":"2:3185:202","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3904:68":{"id":"2:3904:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3905:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:10107:2761":{"id":"2:10107:2761","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10108:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:332:1753":{"id":"0:332:1753","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[124,4],"end":[126,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:120":{"id":"0:120","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[388,4],"end":[388,53]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:321:1753":{"id":"0:321:1753","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[45,4],"end":[48,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24357:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13296:58594":{"id":"2:13296:58594","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15720:2198"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49421:3904","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6050:59230":{"id":"5:6050:59230","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2159","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2159","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13261:58584":{"id":"2:13261:58584","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:184:205":{"id":"0:184:205","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[746,8],"end":[746,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"T"},"generics":{"params":[],"where_predicates":[]}}},"2:13246:58580":{"id":"2:13246:58580","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3115:660":{"id":"2:3115:660","crate_id":2,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"primitive","inner":"never"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3297:2466":{"id":"2:3297:2466","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3298:166","2:3299:930"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10103:2759":{"id":"2:10103:2759","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10104:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3463:2483":{"id":"2:3463:2483","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:221","2:3466:191","2:3467:58146"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13178:58573":{"id":"2:13178:58573","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15726:2203"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:241:584":{"id":"0:241:584","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[847,8],"end":[849,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:228:59":{"id":"0:228:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[810,8],"end":[812,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:376:558":{"id":"0:376:558","crate_id":0,"name":"drop","span":{"filename":"src/race.rs","begin":[203,8],"end":[208,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3113-0:222:1750":{"id":"b:2:3113-0:222:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3115:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13172":{"id":"2:13172","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12269:1310","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13173:770","2:13174:2798","2:13175:58571","2:13176:58572","2:13178:58573","2:13181:54610","2:13182:58574","2:13183:287","2:13184:52737","2:13185:1753","2:13187:1759","2:13189:1885","2:13191:52736","2:13193:3359","2:13194:58575","2:13195:52757","2:13196:52758","2:13197:3922","2:13198:3631","2:13199:3364","2:13200:31657","2:13201:31647","2:13202:4367","2:13203:58576","2:13204:31642","2:13205:52774","2:13208:52775","2:13211:52776","2:13214:2837","2:13218:2797","2:13222:52765","2:13225:31514","2:13228:52768","2:13231:58577","2:13234:58578","2:13237:52770","2:13240:52772","2:13243:58579","2:13246:58580","2:13249:2277","2:13252:58581","2:13255:58582","2:13258:58583","2:13261:58584","2:13263:58585","2:13265:58586","2:13267:58587","2:13268:58588","2:13269:58589","2:13272:58590","2:13275:14288","2:13278:52777","2:13281:58591","2:13284:58592","2:13287:58593","2:13290:3831","2:13292:4018","2:13293:52658","2:13294:52659","2:13295:52660","2:13296:58594","2:13298:3255","2:13299:58595"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6070:59234":{"id":"5:6070:59234","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8302:200","`Box<str>`":"5:421:2159"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2159","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8061:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8378:152":{"id":"2:8378:152","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8379:2802","2:8380:899","2:8381:2804","2:8382:477","2:8384:2805","2:8387:2806","2:8388:2807","2:8389:2808","2:8390:2809","2:8392:2810","2:8394:2811","2:8395:2812","2:8397:818","2:8400:2813","2:8407:2814","2:8409:2815","2:8412:2816","2:8413:2817","2:8414:2818","2:8416:2819","2:8418:2820","2:8421:1278","2:8422:1821","2:8423:2821","2:8427:2822","2:8430:2823","2:8431:2824","2:8432:2825","2:8434:2826","2:8435:2543","2:8437:2827","2:8440:2828","2:8442:2829","2:8452:2830","2:8467:2831","2:8469:2832","2:8473:2833","2:8482:2834","2:8485:2835","2:8487:2836","2:8490:260","2:8497:277","2:8504:2837","2:8511:2838","2:8520:2839","2:8530:992","2:8537:2840","2:8544:2788","2:8545:2789","2:8546:2841","2:8558:2842","2:8565:2843","2:8577:2844","2:8584:2845","2:8585:2846","2:8590:2847","2:8593:2848","2:8596:2849","2:8597:2850","2:8599:2851","2:8601:397","2:8604:2852","2:8607:975","2:8610:2853","2:8613:584","2:8616:2854","2:8619:884","2:8621:803","2:8623:769","2:8625:692","2:8627:675","2:8629:2855","2:8630:2856","2:8638:2857"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3409:1736":{"id":"2:3409:1736","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:525"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3335:2470":{"id":"2:3335:2470","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3337:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[427,4],"end":[427,37]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3177:195-0:222:1750":{"id":"a:2:3177:195-0:222:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:83:1730":{"id":"0:83:1730","crate_id":0,"name":"unsync","span":{"filename":"src/lib.rs","begin":[346,0],"end":[765,1]},"visibility":"public","docs":"Single-threaded version of `OnceCell`.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:115:1750","0:157:1839"]}},"0:128":{"id":"0:128","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[405,4],"end":[419,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:130:391","0:131:393"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5555:3251":{"id":"1:5555:3251","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5556:54653","1:5557:4114"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[211,4],"end":[291,5]},"visibility":{"restricted":{"parent":"0:346:2156","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:379:897","0:380:1753","0:381:1778","0:382:1796","0:386:1799"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3083:130":{"id":"2:3083:130","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3085:660"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3119:122":{"id":"2:3119:122","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:7707:3672":{"id":"2:7707:3672","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7708:58187","2:7709:58188","2:7710:58192","2:7711:58190","2:7712:58189","2:7713:58193","2:7714:58191"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12828:3604":{"id":"2:12828:3604","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12830:3624","2:12831:899","2:12832:57410","2:12833:57411"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6593:3234":{"id":"1:6593:3234","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6594:56605","1:6595:7720","1:6596:7721","1:6597:7723","1:6598:7722","1:6599:7724","1:6600:7725","1:6601:7727","1:6602:5350","1:6603:7730","1:6604:7731","1:6605:7732","1:6606:7733","1:6607:7734","1:6608:7735","1:6609:7728","1:6610:7729"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:407:639":{"id":"0:407:639","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[31,18],"end":[31,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3074:74":{"id":"2:3074:74","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3076:288"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:5:776-0:222:1750":{"id":"b:5:776-0:222:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:772:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["5:778:2859","5:779:2860","5:780:2861"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:276":{"id":"0:276","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1175,4],"end":[1175,94]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5805:4038":{"id":"5:5805:4038","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5807:166","5:5808:2124"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3121-0:157:1839":{"id":"b:2:3121-0:157:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10105:2760":{"id":"2:10105:2760","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10106:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3112:660":{"id":"2:3112:660","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:3148":{"id":"1:6861:3148","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:55307"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:296":{"id":"0:296","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1225,4],"end":[1230,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3409:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["0:299:525"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13182:58574":{"id":"2:13182:58574","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3110-0:264:1839":{"id":"b:2:3110-0:264:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3121-0:364:2157":{"id":"b:2:3121-0:364:2157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8179:131":{"id":"2:8179:131","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8181:663"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3218:2320-0:408:2154":{"id":"a:2:3218:2320-0:408:2154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13205:52774":{"id":"2:13205:52774","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15720:2198","self::pattern":"2:12809:3602"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13249:2277":{"id":"2:13249:2277","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:8227:115","str::matches":"1:15726:2203","self::pattern":"2:12809:3602","prim@char":"1:15720:2198"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49326:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13200:31657":{"id":"2:13200:31657","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15726:2203"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49396:3901","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8142:3680":{"id":"2:8142:3680","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8144:2850"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3429:127":{"id":"2:3429:127","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3431:166","2:3432:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:778:2859":{"id":"5:778:2859","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"T"},"generics":{"params":[],"where_predicates":[]}}},"a:2:3189:204-0:402:2146":{"id":"a:2:3189:204-0:402:2146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:386:1799":{"id":"0:386:1799","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[269,8],"end":[290,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2159","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12256:4025":{"id":"2:12256:4025","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12257:2802","2:12258:57514"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13196:52758":{"id":"2:13196:52758","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15726:2203"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3272:2455":{"id":"2:3272:2455","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:166","2:3274:890"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4682:2531":{"id":"2:4682:2531","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4683:2802","2:4684:57297","2:4685:2804"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3177:195-0:408:2154":{"id":"a:2:3177:195-0:408:2154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2785:52502":{"id":"2:2785:52502","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1171,4],"end":[1171,74]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3116-0:402:2146":{"id":"b:2:3116-0:402:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:146:1778":{"id":"0:146:1778","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[491,8],"end":[496,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.set(92), Ok(()));\nassert_eq!(cell.set(62), Err(62));\n\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13193:3359":{"id":"2:13193:3359","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15726:2203","crate::ops::Index":"2:3481:2474","str::slice_mut_unchecked":"1:15726:2203"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3481:2474":{"id":"2:3481:2474","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:166","2:3484:730"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:303:59":{"id":"0:303:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1234,8],"end":[1236,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179:1859":{"id":"0:179:1859","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[737,8],"end":[742,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and returns a reference to\nthe result.\n\nThis is equivalent to the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10351:3324":{"id":"2:10351:3324","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10352:141","2:10353:32863","2:10354:54559"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:189:525":{"id":"0:189:525","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[753,8],"end":[756,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13237:52770":{"id":"2:13237:52770","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15720:2198","self::pattern":"2:12809:3602","str::rsplitn":"1:15726:2203"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49226:3864","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3113-0:115:1750":{"id":"b:2:3113-0:115:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3115:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13231:58577":{"id":"2:13231:58577","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15726:2203","self::pattern":"2:12809:3602","str::rsplit_terminator":"1:15726:2203","`DoubleEndedIterator`":"2:8227:115","prim@char":"1:15720:2198"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49172:3891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9207:3287":{"id":"1:9207:3287","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9208:55203","1:9209:55204","1:9210:55205","1:9211:55206","1:9212:3933","1:9213:38743","1:9214:55202"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3906-0:264:1839":{"id":"b:2:3906-0:264:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9113:1737-0:408:2154":{"id":"a:2:9113:1737-0:408:2154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1232,4],"end":[1237,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:110","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:110","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:303:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8183:146":{"id":"2:8183:146","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8184:2802","2:8185:2803","2:8186:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3906-0:408:2154":{"id":"b:2:3906-0:408:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:379:897":{"id":"0:379:897","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[213,8],"end":[215,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3292:2461":{"id":"2:3292:2461","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3294:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:234:391":{"id":"0:234:391","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[825,8],"end":[830,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3339:2471":{"id":"2:3339:2471","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13295:52660":{"id":"2:13295:52660","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:251:1885":{"id":"0:251:1885","crate_id":0,"name":"get_unchecked","span":{"filename":"src/lib.rs","begin":[934,8],"end":[936,9]},"visibility":"public","docs":"Get the reference to the underlying value, without checking if the\ncell is initialized.\n\n# Safety\n\nCaller must ensure that the cell is in initialized state, and that\nthe contents are acquired by (synchronized to) this thread.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10099:114":{"id":"2:10099:114","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10100:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:238:660":{"id":"0:238:660","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[841,8],"end":[843,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:2320-0:264:1839":{"id":"a:2:3218:2320-0:264:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[683,4],"end":[683,94]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10306:137":{"id":"2:10306:137","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10307:694","2:10309:54233"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10316:141":{"id":"2:10316:141","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10317:631","2:10318:2161","2:10319:56689","2:10320:56690","2:10321:56691","2:10322:56692","2:10323:56693","2:10324:56694","2:10325:56695","2:10326:56696","2:10327:56697","2:10328:56698","2:10329:56699","2:10330:56700","2:10331:56701","2:10332:1497"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,4],"end":[655,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:142:897","0:143:1757","0:144:1753","0:145:1759","0:146:1778","0:147:1779","0:148:1796","0:152:1799","0:155:1821","0:156:1823"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6345:3160":{"id":"1:6345:3160","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6346:3503","1:6347:3504","1:6348:6629","1:6349:57012","1:6351:57016","1:6353:57013","1:6354:57014","1:6356:57015"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3110-0:115:1750":{"id":"b:2:3110-0:115:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:157:1839":{"id":"0:157:1839","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[677,4],"end":[680,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy: Lazy<i32> = Lazy::new(|| {\n    println!(\"initializing\");\n    92\n});\nprintln!(\"ready\");\nprintln!(\"{}\", *lazy);\nprintln!(\"{}\", *lazy);\n\n// Prints:\n//   ready\n//   initializing\n//   92\n//   92\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:169","0:176","a:2:3177:195-0:157:1839","a:2:3218:2320-0:157:1839","a:2:9112:1738-0:157:1839","a:2:3189:204-0:157:1839","b:2:2780-0:157:1839","b:2:3106-0:157:1839","b:2:3121-0:157:1839","b:2:2783-0:157:1839","b:2:3906-0:157:1839","b:2:3110-0:157:1839","b:2:3116-0:157:1839","0:162","0:165","0:181","0:186","0:191"]}},"5:6377:207":{"id":"5:6377:207","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6378:2862"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:282:897":{"id":"0:282:897","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[1180,8],"end":[1182,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3621:2478":{"id":"2:3621:2478","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3552:2477","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9113:1737-0:402:2146":{"id":"a:2:9113:1737-0:402:2146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3189:204":{"id":"2:3189:204","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3177:195":{"id":"2:3177:195","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3110-0:157:1839":{"id":"b:2:3110-0:157:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6695:3259":{"id":"1:6695:3259","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6696:54399","1:6697:54674"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13195:52757":{"id":"2:13195:52757","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15726:2203"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3426:126":{"id":"2:3426:126","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3106-0:115:1750":{"id":"b:2:3106-0:115:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3109:2791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3012:3679":{"id":"2:3012:3679","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3011:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3121-0:402:2146":{"id":"b:2:3121-0:402:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[752,4],"end":[757,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3409:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["0:189:525"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3116-0:364:2157":{"id":"b:2:3116-0:364:2157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3343:2472":{"id":"2:3343:2472","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5697:3237":{"id":"1:5697:3237","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:56654"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6769:3154":{"id":"1:6769:3154","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6770:55221"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3177:195-0:364:2157":{"id":"a:2:3177:195-0:364:2157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10109:174":{"id":"2:10109:174","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10110:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13299:58595":{"id":"2:13299:58595","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15720:2198"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49439:3905","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3218:2320":{"id":"2:3218:2320","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:147:1779":{"id":"0:147:1779","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[512,8],"end":[526,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:115:1750"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"generic","inner":"T"}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3116-0:157:1839":{"id":"b:2:3116-0:157:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13234:58578":{"id":"2:13234:58578","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12809:3602","str::split":"1:15726:2203","prim@char":"1:15720:2198","str::split_terminator":"1:15726:2203"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49190:3892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3348:2473":{"id":"2:3348:2473","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3350:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2774:93":{"id":"2:2774:93","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2776:2268"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1161,4],"end":[1165,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"fmt::Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["0:272:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13294:52659":{"id":"2:13294:52659","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1177,4],"end":[1194,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["0:282:897","0:283:1849"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3106-0:222:1750":{"id":"b:2:3106-0:222:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3109:2791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3121-0:115:1750":{"id":"b:2:3121-0:115:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2780-0:115:1750":{"id":"b:2:2780-0:115:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2782:2268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3124:122":{"id":"2:3124:122","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38477:3264","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"b:2:2783-0:264:1839":{"id":"b:2:2783-0:264:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:3650","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:2785:52502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8146:3682":{"id":"2:8146:3682","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8148:2851"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13189:1885":{"id":"2:13189:1885","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12748:2508":{"id":"2:12748:2508","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12749:121","2:12750:56676"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13281:58591":{"id":"2:13281:58591","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15720:2198","self::pattern":"2:12809:3602"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10111:2762":{"id":"2:10111:2762","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10112:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3106-0:157:1839":{"id":"b:2:3106-0:157:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:3109:2791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3110-0:402:2146":{"id":"b:2:3110-0:402:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6049":{"id":"5:6049","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5869:1310","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6050:59230","5:6051:1822","5:6054:59231","5:6057:59232","5:6069:59233","5:6070:59234","5:6071:3214","5:6072:53756","5:6073:53757"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3266:2456":{"id":"2:3266:2456","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3268:166","2:3269:1080"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3187:102":{"id":"2:3187:102","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13176:58572":{"id":"2:13176:58572","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13183:287":{"id":"2:13183:287","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15737:2212","str::as_mut_ptr":"1:15726:2203"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13181:54610":{"id":"2:13181:54610","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12280:3984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:319":{"id":"0:319","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[36,0],"end":[107,1]},"visibility":{"restricted":{"parent":"0:305:1516","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:320:897","0:321:1753","0:322:1778","0:323:1796","0:327:1799"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3906-0:222:1750":{"id":"b:2:3906-0:222:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:9113:1737":{"id":"2:9113:1737","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3304:2463":{"id":"2:3304:2463","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306:166","2:3307:334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:412":{"id":"0:412","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[110,18],"end":[110,23]},"visibility":{"restricted":{"parent":"0:305:1516","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:413:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:373:59":{"id":"0:373:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[197,8],"end":[199,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13203:58576":{"id":"2:13203:58576","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49386:3900","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3906-0:402:2146":{"id":"b:2:3906-0:402:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10113:2763":{"id":"2:10113:2763","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10114:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13269:58589":{"id":"2:13269:58589","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15720:2198","self::pattern":"2:12809:3602"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12839:3606","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142:897":{"id":"0:142:897","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[437,8],"end":[439,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8252:2548":{"id":"2:8252:2548","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8253:770","2:8254:2798"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13201:31647":{"id":"2:13201:31647","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15726:2203"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49405:3902","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3110-0:222:1750":{"id":"b:2:3110-0:222:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:294:205":{"id":"0:294:205","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1219,8],"end":[1219,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"generic","inner":"T"},"generics":{"params":[],"where_predicates":[]}}},"a:2:3189:204-0:157:1839":{"id":"a:2:3189:204-0:157:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:3906-0:115:1750":{"id":"b:2:3906-0:115:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3314:2465":{"id":"2:3314:2465","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3316:166","2:3317:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3121-0:408:2154":{"id":"b:2:3121-0:408:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:246:897":{"id":"0:246:897","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[856,8],"end":[858,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3638:132":{"id":"2:3638:132","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3640:666"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:374":{"id":"0:374","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[202,4],"end":[209,5]},"visibility":{"restricted":{"parent":"0:346:2156","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Drop","id":"2:3420:2083","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:376:558"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6054:59231":{"id":"5:6054:59231","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:253:1779":{"id":"0:253:1779","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[983,8],"end":[990,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:222:1750"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"generic","inner":"T"}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:2320-0:402:2146":{"id":"a:2:3218:2320-0:402:2146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10042:2753":{"id":"2:10042:2753","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10043:1497","2:10044:58310","2:10046:2715"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13252:58581":{"id":"2:13252:58581","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8227:115","prim@char":"1:15720:2198","self::pattern":"2:12809:3602","str::matches":"1:15726:2203"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49344:3899","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5561:3249":{"id":"1:5561:3249","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5562:4820","1:5563:54610"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13214:2837":{"id":"2:13214:2837","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15720:2198","self::pattern":"2:12809:3602","`None`":"2:47164:161"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222:1750":{"id":"0:222:1750","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[807,4],"end":[807,35]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.\n\n`OnceCell` provides `&` references to the contents without RAII guards.\n\nReading a non-`None` value out of `OnceCell` establishes a\nhappens-before relationship with a corresponding write. For example, if\nthread A initializes the cell with `get_or_init(f)`, and thread B\nsubsequently reads the result of this call, B also observes all the side\neffects of `f`.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<String> = OnceCell::new();\nassert!(CELL.get().is_none());\n\nstd::thread::spawn(|| {\n    let value: &String = CELL.get_or_init(|| {\n        \"Hello, World!\".to_string()\n    });\n    assert_eq!(value, \"Hello, World!\");\n}).join().unwrap();\n\nlet value: Option<&String> = CELL.get();\nassert!(value.is_some());\nassert_eq!(value.unwrap().as_str(), \"Hello, World!\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:244","a:2:9113:1737-0:222:1750","a:2:3177:195-0:222:1750","a:2:3218:2320-0:222:1750","a:2:9112:1738-0:222:1750","a:2:3189:204-0:222:1750","b:2:2780-0:222:1750","b:2:3106-0:222:1750","b:2:3121-0:222:1750","b:2:2783-0:222:1750","b:2:3906-0:222:1750","b:2:3110-0:222:1750","b:2:3113-0:222:1750","b:2:3116-0:222:1750","b:5:776-0:222:1750","0:226","0:229","0:232","0:236","0:239","0:242"]}},"b:2:2780-0:157:1839":{"id":"b:2:2780-0:157:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:2782:2268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[421,4],"end":[425,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:134:584"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2565:122":{"id":"1:2565:122","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:1758","1:2568:2181","1:2569:56880","1:2570:56881"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10099:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8656:2939":{"id":"2:8656:2939","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6767:3153":{"id":"1:6767:3153","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6768:54457"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2783-0:364:2157":{"id":"b:2:2783-0:364:2157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:3650","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2785:52502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:262:1821":{"id":"0:262:1821","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[1099,8],"end":[1101,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[429,4],"end":[433,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:139:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4621:3167":{"id":"1:4621:3167","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4622:54259","1:4623:54260","1:4624:54261","1:4626:3187","1:4627:54262","1:4629:52765","1:4630:4367"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:264:1839":{"id":"0:264:1839","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[1156,4],"end":[1159,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\nThis type is thread-safe and can be used in statics.\n\n# Example\n\n```\nuse std::collections::HashMap;\n\nuse once_cell::sync::Lazy;\n\nstatic HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {\n    println!(\"initializing\");\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    m\n});\n\nfn main() {\n    println!(\"ready\");\n    std::thread::spawn(|| {\n        println!(\"{:?}\", HASHMAP.get(&13));\n    }).join().unwrap();\n    println!(\"{:?}\", HASHMAP.get(&74));\n\n    // Prints:\n    //   ready\n    //   initializing\n    //   Some(\"Spica\")\n    //   Some(\"Hoyten\")\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:279","0:286","a:2:3177:195-0:264:1839","a:2:3218:2320-0:264:1839","a:2:9112:1738-0:264:1839","b:2:2780-0:264:1839","b:2:3106-0:264:1839","b:2:3121-0:264:1839","b:2:2783-0:264:1839","b:2:3906-0:264:1839","b:2:3110-0:264:1839","b:2:3116-0:264:1839","0:269","0:273","0:276","0:291","0:296","0:301"]}},"2:3485:2475":{"id":"2:3485:2475","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3481:2474","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:145:1759":{"id":"0:145:1759","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[469,8],"end":[472,9]},"visibility":"public","docs":"Gets a mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9112:1738-0:157:1839":{"id":"a:2:9112:1738-0:157:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13265:58586":{"id":"2:13265:58586","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13298:3255":{"id":"2:13298:3255","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15720:2198"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49430:3256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1196,4],"end":[1216,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["0:289:1859"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13211:52776":{"id":"2:13211:52776","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12809:3602","prim@char":"1:15720:2198"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22771:15699":{"id":"2:22771:15699","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22772:6956","2:22773:57870","2:22774:57871"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22764:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9112:1738-0:364:2157":{"id":"a:2:9112:1738-0:364:2157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5693:3236":{"id":"1:5693:3236","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:52510"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:134:584":{"id":"0:134:584","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[422,8],"end":[424,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2783-0:115:1750":{"id":"b:2:2783-0:115:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:3650","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2785:52502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[396,4],"end":[403,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"fmt::Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:127:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3116-0:264:1839":{"id":"b:2:3116-0:264:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:408:2154":{"id":"0:408:2154","crate_id":0,"name":"OnceBool","span":{"filename":"src/race.rs","begin":[111,0],"end":[113,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:330","a:2:9113:1737-0:408:2154","a:2:3177:195-0:408:2154","a:2:3218:2320-0:408:2154","a:2:9112:1738-0:408:2154","a:2:3189:204-0:408:2154","b:2:2780-0:408:2154","b:2:3106-0:408:2154","b:2:3121-0:408:2154","b:2:2783-0:408:2154","b:2:3906-0:408:2154","b:2:3110-0:408:2154","b:2:3116-0:408:2154","0:410","0:412"]}},"0:155:1821":{"id":"0:155:1821","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[630,8],"end":[632,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13278:52777":{"id":"2:13278:52777","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12809:3602","prim@char":"1:15720:2198"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13228:52768":{"id":"2:13228:52768","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12809:3602","str::split":"1:15726:2203","prim@char":"1:15720:2198","`DoubleEndedIterator`":"2:8227:115"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49140:3861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[390,4],"end":[394,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:110","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:124:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:168:639":{"id":"0:168:639","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[686,8],"end":[688,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9112:1738-0:222:1750":{"id":"a:2:9112:1738-0:222:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:772:206":{"id":"5:772:206","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:2859","5:774:2860","5:775:2861"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13522:133":{"id":"2:13522:133","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13523:166","2:13524:991"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:381:1778":{"id":"0:381:1778","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[230,8],"end":[243,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2159","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2159","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3423:125":{"id":"2:3423:125","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:359"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3426:126","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:152:1799":{"id":"0:152:1799","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[585,8],"end":[599,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:364:2157":{"id":"0:364:2157","crate_id":0,"name":"OnceBox","span":{"filename":"src/race.rs","begin":[185,4],"end":[188,5]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:377","a:2:9113:1737-0:364:2157","a:2:3177:195-0:364:2157","a:2:3218:2320-0:364:2157","a:2:9112:1738-0:364:2157","b:2:2780-0:364:2157","b:2:3106-0:364:2157","b:2:3121-0:364:2157","b:2:2783-0:364:2157","b:2:3906-0:364:2157","b:2:3110-0:364:2157","b:2:3116-0:364:2157","0:368","0:371","0:374","0:389"]}},"2:10092:105":{"id":"2:10092:105","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10093:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3331:2469":{"id":"2:3331:2469","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3177:195-0:157:1839":{"id":"a:2:3177:195-0:157:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:250:1759":{"id":"0:250:1759","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[923,8],"end":[925,9]},"visibility":"public","docs":"Gets the mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13292:4018":{"id":"2:13292:4018","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13240:52772":{"id":"2:13240:52772","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15726:2203","prim@char":"1:15720:2198","self::pattern":"2:12809:3602"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49244:3865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12819:3601":{"id":"2:12819:3601","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12821:3604","2:12822:57229","2:12823:57230","2:12824:57231","2:12825:57233","2:12826:57232","2:12827:57234"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6072:53756":{"id":"5:6072:53756","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15726:2203"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13202:4367":{"id":"2:13202:4367","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49376:3193","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131:393":{"id":"0:131:393","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[413,8],"end":[418,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:255:1796":{"id":"0:255:1796","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[1018,8],"end":[1027,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell\nwas empty.\n\nMany threads may call `get_or_init` concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. The\nexact outcome is unspecified. Current implementation deadlocks, but\nthis may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:327:1799":{"id":"0:327:1799","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[88,4],"end":[106,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24357:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24357:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13263:58585":{"id":"2:13263:58585","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10101:2758":{"id":"2:10101:2758","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10102:639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:283:1849":{"id":"0:283:1849","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[1187,8],"end":[1193,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["this",{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22622:3290":{"id":"2:22622:3290","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22612:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4539:3181":{"id":"1:4539:3181","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4540:3119","1:4541:56465","1:4543:56466","1:4544:56468","1:4545:3182","1:4546:56467","1:4547:55128","1:4549:56469","1:4550:2826","1:4551:3364","1:4552:2809","1:4554:1821"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[815,4],"end":[822,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"fmt::Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:231:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3106-0:402:2146":{"id":"b:2:3106-0:402:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:2791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3077:73":{"id":"2:3077:73","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3079:1772"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5683:3235":{"id":"1:5683:3235","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5684:54656","1:5685:54657","1:5686:54658","1:5687:54659"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13218:2797":{"id":"2:13218:2797","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15720:2198","`None`":"2:47164:161","self::pattern":"2:12809:3602"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3218:2320-0:115:1750":{"id":"a:2:3218:2320-0:115:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[293,4],"end":[293,54]},"visibility":{"restricted":{"parent":"0:346:2156","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3177:195-0:402:2146":{"id":"a:2:3177:195-0:402:2146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:305:1516":{"id":"0:305:1516","crate_id":0,"name":"race","span":{"filename":"src/race.rs","begin":[1,0],"end":[303,1]},"visibility":"public","docs":"Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.\n\nIf two threads race to initialize a type from the `race` module, they\ndon't block, execute initialization function together, but only one of\nthem stores the result.\n\nThis module does not require `std` feature.\n\n# Atomic orderings\n\nAll types in this module use `Acquire` and `Release`\n[atomic orderings](Ordering) for all their operations. While this is not\nstrictly necessary for types other than `OnceBox`, it is useful for users as\nit allows them to be certain that after `get` or `get_or_init` returns on\none thread, any side-effects caused by the setter thread prior to them\ncalling `set` or `get_or_init` will be made visible to that thread; without\nit, it's possible for it to appear as if they haven't happened yet from the\ngetter thread's perspective. This is an acceptable tradeoff to make since\n`Acquire` and `Release` have very little performance overhead on most\narchitectures versus `Relaxed`.","links":{"Ordering":"2:47360:163"},"attrs":["#[cfg(feature = \"race\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:402:2146","0:408:2154","0:364:2157"]}},"2:3908:1397":{"id":"2:3908:1397","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45700:3266","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3080:144":{"id":"2:3080:144","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3082:2791"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5643:3233":{"id":"1:5643:3233","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5644:5308","1:5645:6636"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13537:145":{"id":"2:13537:145","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13538:166","2:13539:145","2:13540:744"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9113:1737-0:364:2157":{"id":"a:2:9113:1737-0:364:2157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:323:1796":{"id":"0:323:1796","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[70,4],"end":[79,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24357:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24357:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:299:525":{"id":"0:299:525","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1226,8],"end":[1229,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13921:136":{"id":"2:13921:136","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13922:261","2:13923:500","2:13924:264","2:13925:1057"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9112:1738":{"id":"2:9112:1738","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6771:3155":{"id":"1:6771:3155","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6772:56951"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12834:3605":{"id":"2:12834:3605","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12836:2792","2:12837:58365","2:12838:58366"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12828:3604","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3110-0:408:2154":{"id":"b:2:3110-0:408:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4596:2753":{"id":"1:4596:2753","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4597:2161","1:4598:52528","1:4600:52529","1:4601:4289","1:4602:52530","1:4603:52531","1:4604:2715","1:4613:2826"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13225:31514":{"id":"2:13225:31514","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15720:2198","self::pattern":"2:12809:3602"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12601:3858","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6071:3214":{"id":"5:6071:3214","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:193:59":{"id":"0:193:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[761,8],"end":[763,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2829:168":{"id":"2:2829:168","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2831:584","2:2832:884"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3633:208":{"id":"2:3633:208","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:166","2:3635:2480","2:3636:665","2:3637:352"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3638:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3633:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:156:1823":{"id":"0:156:1823","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[650,8],"end":[654,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value.\n\nReturns `None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3284:2460":{"id":"2:3284:2460","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3286:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3121-0:222:1750":{"id":"b:2:3121-0:222:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3245:2452":{"id":"2:3245:2452","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:166","2:3248:249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2780-0:222:1750":{"id":"b:2:2780-0:222:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2782:2268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6051:1822":{"id":"5:6051:1822","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2834:119":{"id":"2:2834:119","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13198:3631":{"id":"2:13198:3631","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15720:2198"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49098:3887","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3396:111":{"id":"2:3396:111","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:205","2:3398:523"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[759,4],"end":[764,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:110","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:110","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:193:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3106-0:264:1839":{"id":"b:2:3106-0:264:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:3109:2791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:413:639":{"id":"0:413:639","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[110,18],"end":[110,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1075:3253":{"id":"1:1075:3253","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:2859","1:1077:4018","1:1078:53756","1:1079:53757","1:1080:52658","1:1081:52659","1:1082:52660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[854,4],"end":[1121,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:246:897","0:247:1757","0:248:1753","0:249:1898","0:250:1759","0:251:1885","0:252:1778","0:253:1779","0:255:1796","0:259:1799","0:262:1821","0:263:1823"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8660:3671":{"id":"2:8660:3671","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7707:3672","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3288:2459":{"id":"2:3288:2459","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3290:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[31,18],"end":[31,23]},"visibility":{"restricted":{"parent":"0:305:1516","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10092:105","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:407:639"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6057:59232":{"id":"5:6057:59232","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6073:53757":{"id":"5:6073:53757","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15726:2203"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3120:1384":{"id":"2:3120:1384","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3086:212":{"id":"2:3086:212","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3088:122","2:3089:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13272:58590":{"id":"2:13272:58590","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12809:3602","prim@char":"1:15720:2198"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:639":{"id":"0:127:639","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[397,8],"end":[402,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:779:2860":{"id":"5:779:2860","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1957":{"id":"0:0:1957","crate_id":0,"name":"once_cell","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1269,1]},"visibility":"public","docs":"# Overview\n\n`once_cell` provides two new cell-like types, [`unsync::OnceCell`] and [`sync::OnceCell`]. A `OnceCell`\nmight store arbitrary non-`Copy` types, can be assigned to at most once and provides direct access\nto the stored contents. The core API looks *roughly* like this (and there's much more inside, read on!):\n\n```rust,ignore\nimpl<T> OnceCell<T> {\n    const fn new() -> OnceCell<T> { ... }\n    fn set(&self, value: T) -> Result<(), T> { ... }\n    fn get(&self) -> Option<&T> { ... }\n}\n```\n\nNote that, like with [`RefCell`] and [`Mutex`], the `set` method requires only a shared reference.\nBecause of the single assignment restriction `get` can return a `&T` instead of `Ref<T>`\nor `MutexGuard<T>`.\n\nThe `sync` flavor is thread-safe (that is, implements the [`Sync`] trait), while the `unsync` one is not.\n\n[`unsync::OnceCell`]: unsync/struct.OnceCell.html\n[`sync::OnceCell`]: sync/struct.OnceCell.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n[`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n# Recipes\n\n`OnceCell` might be useful for a variety of patterns.\n\n## Safe Initialization of Global Data\n\n```rust\nuse std::{env, io};\n\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct Logger {\n    // ...\n}\nstatic INSTANCE: OnceCell<Logger> = OnceCell::new();\n\nimpl Logger {\n    pub fn global() -> &'static Logger {\n        INSTANCE.get().expect(\"logger is not initialized\")\n    }\n\n    fn from_cli(args: env::Args) -> Result<Logger, std::io::Error> {\n       // ...\n#      Ok(Logger {})\n    }\n}\n\nfn main() {\n    let logger = Logger::from_cli(env::args()).unwrap();\n    INSTANCE.set(logger).unwrap();\n    // use `Logger::global()` from now on\n}\n```\n\n## Lazy Initialized Global Data\n\nThis is essentially the `lazy_static!` macro, but without a macro.\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\n\nuse once_cell::sync::OnceCell;\n\nfn global_data() -> &'static Mutex<HashMap<i32, String>> {\n    static INSTANCE: OnceCell<Mutex<HashMap<i32, String>>> = OnceCell::new();\n    INSTANCE.get_or_init(|| {\n        let mut m = HashMap::new();\n        m.insert(13, \"Spica\".to_string());\n        m.insert(74, \"Hoyten\".to_string());\n        Mutex::new(m)\n    })\n}\n```\n\nThere are also the [`sync::Lazy`] and [`unsync::Lazy`] convenience types to streamline this pattern:\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\nuse once_cell::sync::Lazy;\n\nstatic GLOBAL_DATA: Lazy<Mutex<HashMap<i32, String>>> = Lazy::new(|| {\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    Mutex::new(m)\n});\n\nfn main() {\n    println!(\"{:?}\", GLOBAL_DATA.lock().unwrap());\n}\n```\n\nNote that the variable that holds `Lazy` is declared as `static`, *not*\n`const`. This is important: using `const` instead compiles, but works wrong.\n\n[`sync::Lazy`]: sync/struct.Lazy.html\n[`unsync::Lazy`]: unsync/struct.Lazy.html\n\n## General purpose lazy evaluation\n\nUnlike `lazy_static!`, `Lazy` works with local variables.\n\n```rust\nuse once_cell::unsync::Lazy;\n\nfn main() {\n    let ctx = vec![1, 2, 3];\n    let thunk = Lazy::new(|| {\n        ctx.iter().sum::<i32>()\n    });\n    assert_eq!(*thunk, 6);\n}\n```\n\nIf you need a lazy field in a struct, you probably should use `OnceCell`\ndirectly, because that will allow you to access `self` during initialization.\n\n```rust\nuse std::{fs, path::PathBuf};\n\nuse once_cell::unsync::OnceCell;\n\nstruct Ctx {\n    config_path: PathBuf,\n    config: OnceCell<String>,\n}\n\nimpl Ctx {\n    pub fn get_config(&self) -> Result<&str, std::io::Error> {\n        let cfg = self.config.get_or_try_init(|| {\n            fs::read_to_string(&self.config_path)\n        })?;\n        Ok(cfg.as_str())\n    }\n}\n```\n\n## Lazily Compiled Regex\n\nThis is a `regex!` macro which takes a string literal and returns an\n*expression* that evaluates to a `&'static Regex`:\n\n```\nmacro_rules! regex {\n    ($re:literal $(,)?) => {{\n        static RE: once_cell::sync::OnceCell<regex::Regex> = once_cell::sync::OnceCell::new();\n        RE.get_or_init(|| regex::Regex::new($re).unwrap())\n    }};\n}\n```\n\nThis macro can be useful to avoid the \"compile regex on every loop iteration\" problem.\n\n## Runtime `include_bytes!`\n\nThe `include_bytes` macro is useful to include test resources, but it slows\ndown test compilation a lot. An alternative is to load the resources at\nruntime:\n\n```\nuse std::path::Path;\n\nuse once_cell::sync::OnceCell;\n\npub struct TestResource {\n    path: &'static str,\n    cell: OnceCell<Vec<u8>>,\n}\n\nimpl TestResource {\n    pub const fn new(path: &'static str) -> TestResource {\n        TestResource { path, cell: OnceCell::new() }\n    }\n    pub fn bytes(&self) -> &[u8] {\n        self.cell.get_or_init(|| {\n            let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n            let path = Path::new(dir.as_str()).join(self.path);\n            std::fs::read(&path).unwrap_or_else(|_err| {\n                panic!(\"failed to load test resource: {}\", path.display())\n            })\n        }).as_slice()\n    }\n}\n\nstatic TEST_IMAGE: TestResource = TestResource::new(\"test_data/lena.png\");\n\n#[test]\nfn test_sobel_filter() {\n    let rgb: &[u8] = TEST_IMAGE.bytes();\n    // ...\n# drop(rgb);\n}\n```\n\n## `lateinit`\n\n`LateInit` type for delayed initialization. It is reminiscent of Kotlin's\n`lateinit` keyword and allows construction of cyclic data structures:\n\n\n```\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct LateInit<T> { cell: OnceCell<T> }\n\nimpl<T> LateInit<T> {\n    pub fn init(&self, value: T) {\n        assert!(self.cell.set(value).is_ok())\n    }\n}\n\nimpl<T> Default for LateInit<T> {\n    fn default() -> Self { LateInit { cell: OnceCell::default() } }\n}\n\nimpl<T> std::ops::Deref for LateInit<T> {\n    type Target = T;\n    fn deref(&self) -> &T {\n        self.cell.get().unwrap()\n    }\n}\n\n#[derive(Default, Debug)]\nstruct A<'a> {\n    b: LateInit<&'a B<'a>>,\n}\n\n#[derive(Default, Debug)]\nstruct B<'a> {\n    a: LateInit<&'a A<'a>>\n}\n\nfn build_cycle() {\n    let a = A::default();\n    let b = B::default();\n    a.b.init(&b);\n    b.a.init(&a);\n    println!(\"{:?}\", a.b.a.b.a);\n}\n```\n\n# Comparison with std\n\n|`!Sync` types         | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`Cell<T>`             | `T`                    | requires `T: Copy` for `get`                  |\n|`RefCell<T>`          | `RefMut<T>` / `Ref<T>` | may panic at runtime                          |\n|`unsync::OnceCell<T>` | `&T`                   | assignable only once                          |\n\n|`Sync` types          | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`AtomicT`             | `T`                    | works only with certain `Copy` types          |\n|`Mutex<T>`            | `MutexGuard<T>`        | may deadlock at runtime, may block the thread |\n|`sync::OnceCell<T>`   | `&T`                   | assignable only once, may block the thread    |\n\nTechnically, calling `get_or_init` will also cause a panic or a deadlock if it recursively calls\nitself. However, because the assignment can happen only once, such cases should be more rare than\nequivalents with `RefCell` and `Mutex`.\n\n# Minimum Supported `rustc` Version\n\nThis crate's minimum supported `rustc` version is `1.36.0`.\n\nIf only the `std` feature is enabled, MSRV will be updated conservatively.\nWhen using other features, like `parking_lot`, MSRV might be updated more frequently, up to the latest stable.\nIn both cases, increasing MSRV is *not* considered a semver-breaking change.\n\n# Implementation details\n\nThe implementation is based on the [`lazy_static`](https://github.com/rust-lang-nursery/lazy-static.rs/)\nand [`lazy_cell`](https://github.com/indiv0/lazycell/) crates and [`std::sync::Once`]. In some sense,\n`once_cell` just streamlines and unifies those APIs.\n\nTo implement a sync flavor of `OnceCell`, this crates uses either a custom\nre-implementation of `std::sync::Once` or `parking_lot::Mutex`. This is\ncontrolled by the `parking_lot` feature (disabled by default). Performance\nis the same for both cases, but the `parking_lot` based `OnceCell<T>` is\nsmaller by up to 16 bytes.\n\nThis crate uses `unsafe`.\n\n[`std::sync::Once`]: https://doc.rust-lang.org/std/sync/struct.Once.html\n\n# F.A.Q.\n\n**Should I use lazy_static or once_cell?**\n\nTo the first approximation, `once_cell` is both more flexible and more convenient than `lazy_static`\nand should be preferred.\n\nUnlike `once_cell`, `lazy_static` supports spinlock-based implementation of blocking which works with\n`#![no_std]`.\n\n`lazy_static` has received significantly more real world testing, but `once_cell` is also a widely\nused crate.\n\n**Should I use the sync or unsync flavor?**\n\nBecause Rust compiler checks thread safety for you, it's impossible to accidentally use `unsync` where\n`sync` is required. So, use `unsync` in single-threaded code and `sync` in multi-threaded. It's easy\nto switch between the two if code becomes multi-threaded later.\n\nAt the moment, `unsync` has an additional benefit that reentrant initialization causes a panic, which\nmight be easier to debug than a deadlock.\n\n**Does this crate support async?**\n\nNo, but you can use [`async_once_cell`](https://crates.io/crates/async_once_cell) instead.\n\n# Related crates\n\n* [double-checked-cell](https://github.com/niklasf/double-checked-cell)\n* [lazy-init](https://crates.io/crates/lazy-init)\n* [lazycell](https://crates.io/crates/lazycell)\n* [mitochondria](https://crates.io/crates/mitochondria)\n* [lazy_static](https://crates.io/crates/lazy_static)\n* [async_once_cell](https://crates.io/crates/async_once_cell)\n\nMost of this crate's functionality is available in `std` in nightly Rust.\nSee the [tracking issue](https://github.com/rust-lang/rust/issues/74465).","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:83:1730","0:194:1330","0:305:1516"]}},"b:2:2780-0:264:1839":{"id":"b:2:2780-0:264:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:2782:2268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:249:1898":{"id":"0:249:1898","crate_id":0,"name":"wait","span":{"filename":"src/lib.rs","begin":[898,8],"end":[906,9]},"visibility":"public","docs":"Gets the reference to the underlying value, blocking the current\nthread until it is set.\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell = std::sync::Arc::new(OnceCell::new());\nlet t = std::thread::spawn({\n    let cell = std::sync::Arc::clone(&cell);\n    move || cell.set(92).unwrap()\n});\n\n// Returns immediately, but might return None.\nlet _value_or_none = cell.get();\n\n// Will return 92, but might block until the other thread does `.set`.\nlet value: &u32 = cell.wait();\nassert_eq!(*value, 92);\nt.join().unwrap();;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:259:1799":{"id":"0:259:1799","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[1055,8],"end":[1068,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and\nthe cell remains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`.\nThe exact outcome is unspecified. Current implementation\ndeadlocks, but this may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:236":{"id":"0:236","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[840,4],"end":[844,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:238:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12839:3606":{"id":"2:12839:3606","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3110-0:364:2157":{"id":"b:2:3110-0:364:2157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3112:660"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2780-0:364:2157":{"id":"b:2:2780-0:364:2157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2782:2268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3106-0:364:2157":{"id":"b:2:3106-0:364:2157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3109:2791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13287:58593":{"id":"2:13287:58593","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15720:2198","self::pattern":"2:12809:3602"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13268:58588":{"id":"2:13268:58588","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6698:3160":{"id":"1:6698:3160","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6699:6630"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2865:162":{"id":"2:2865:162","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:397","2:2867:2788","2:2868:2789","2:2869:2790"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2875:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[110,9],"end":[110,16]},"visibility":{"restricted":{"parent":"0:305:1516","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:110","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:411:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:22816:3735":{"id":"2:22816:3735","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23465:3648","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22807:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:144:1753":{"id":"0:144:1753","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[449,8],"end":[452,9]},"visibility":"public","docs":"Gets a reference to the underlying value.\n\nReturns `None` if the cell is empty.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:247:1757":{"id":"0:247:1757","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[861,8],"end":[863,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13185:1753":{"id":"2:13185:1753","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47164:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:897":{"id":"0:320:897","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[39,4],"end":[41,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3106-0:408:2154":{"id":"b:2:3106-0:408:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3083:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3109:2791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[852,4],"end":[852,37]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2834:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:232":{"id":"0:232","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[824,4],"end":[838,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:234:391","0:235:393"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:370:639":{"id":"0:370:639","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[191,8],"end":[193,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"core::fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"core::fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3255:2454":{"id":"2:3255:2454","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3257:166","2:3258:869"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:248:1753":{"id":"0:248:1753","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[869,8],"end":[876,9]},"visibility":"public","docs":"Gets the reference to the underlying value.\n\nReturns `None` if the cell is empty, or being initialized. This\nmethod never blocks.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3116-0:408:2154":{"id":"b:2:3116-0:408:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13174:2798":{"id":"2:13174:2798","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3420:2083":{"id":"2:3420:2083","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:558"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3218:2320-0:364:2157":{"id":"a:2:3218:2320-0:364:2157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:7685:3411":{"id":"1:7685:3411","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7686:56912"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:331:897":{"id":"0:331:897","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[118,4],"end":[120,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3644:2480":{"id":"2:3644:2480","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3646:55933"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:334:1796":{"id":"0:334:1796","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[143,4],"end":[148,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"primitive","inner":"bool"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:402:2146":{"id":"0:402:2146","crate_id":0,"name":"OnceNonZeroUsize","span":{"filename":"src/race.rs","begin":[32,0],"end":[34,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:319","a:2:9113:1737-0:402:2146","a:2:3177:195-0:402:2146","a:2:3218:2320-0:402:2146","a:2:9112:1738-0:402:2146","a:2:3189:204-0:402:2146","b:2:2780-0:402:2146","b:2:3106-0:402:2146","b:2:3121-0:402:2146","b:2:2783-0:402:2146","b:2:3906-0:402:2146","b:2:3110-0:402:2146","b:2:3116-0:402:2146","0:404","0:406"]}},"a:2:3189:204-0:408:2154":{"id":"a:2:3189:204-0:408:2154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:404":{"id":"0:404","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[31,9],"end":[31,16]},"visibility":{"restricted":{"parent":"0:305:1516","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:110","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:405:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2777:3650":{"id":"2:2777:3650","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2779:52502"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:333:1778":{"id":"0:333:1778","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[133,4],"end":[135,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3116-0:222:1750":{"id":"b:2:3116-0:222:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:139:660":{"id":"0:139:660","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[430,8],"end":[432,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3552:2477":{"id":"2:3552:2477","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3554:57496","2:3555:57497","2:3556:52774"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:3121-0:264:1839":{"id":"b:2:3121-0:264:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3080:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:3124:122","2:3125:1383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[386,4],"end":[386,72]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13222:52765":{"id":"2:13222:52765","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15726:2203","prim@char":"1:15720:2198","`DoubleEndedIterator`":"2:8227:115","str::rsplit":"1:15726:2203","self::pattern":"2:12809:3602"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49122:3192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13243:58579":{"id":"2:13243:58579","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3109:2791":{"id":"2:3109:2791","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3083:130"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3177:195-0:264:1839":{"id":"a:2:3177:195-0:264:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:9113:1737-0:222:1750":{"id":"a:2:9113:1737-0:222:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9113:1737","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:143:1757":{"id":"0:143:1757","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[442,8],"end":[444,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3319:2467":{"id":"2:3319:2467","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3321:166","2:3322:1203"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3218:2320-0:157:1839":{"id":"a:2:3218:2320-0:157:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3218:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[196,4],"end":[200,5]},"visibility":{"restricted":{"parent":"0:346:2156","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:110","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:373:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13267:58587":{"id":"2:13267:58587","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13284:58592":{"id":"2:13284:58592","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15720:2198","self::pattern":"2:12809:3602"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:322:1778":{"id":"0:322:1778","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[55,4],"end":[62,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24357:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:411:59":{"id":"0:411:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[110,9],"end":[110,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:780:2861":{"id":"5:780:2861","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8192:2549":{"id":"2:8192:2549","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8194:2799","2:8196:2800","2:8197:2801"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3276:2458":{"id":"2:3276:2458","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3278:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5649:3234":{"id":"1:5649:3234","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:7376","1:5651:52510","1:5652:5308","1:5653:56788","1:5654:3503","1:5655:3504","1:5656:56789","1:5657:1274","1:5658:56790","1:5659:56791","1:5660:56792","1:5661:56793","1:5662:56794","1:5663:56795","1:5664:56796","1:5665:56797"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:172:897":{"id":"0:172:897","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[706,8],"end":[708,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing function.\n\n# Example\n```\n# fn main() {\nuse once_cell::unsync::Lazy;\n\nlet hello = \"Hello, World!\".to_string();\n\nlet lazy = Lazy::new(|| hello.to_uppercase());\n\nassert_eq!(&*lazy, \"HELLO, WORLD!\");\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["init",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6069:59233":{"id":"5:6069:59233","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8302:200"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8302:200","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[115,0],"end":[172,1]},"visibility":{"restricted":{"parent":"0:305:1516","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:331:897","0:332:1753","0:333:1778","0:334:1796","0:337:1799"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23465:3648":{"id":"2:23465:3648","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23466:3734"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23461:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3187:102","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9112:1738-0:402:2146":{"id":"a:2:9112:1738-0:402:2146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13993:2538":{"id":"2:13993:2538","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13994:55147","2:13995:55148","2:13996:55149","2:13997:55150","2:13998:55151","2:13999:55152","2:14000:2826"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1218,4],"end":[1223,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["0:294:205","0:295:523"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3250:2457":{"id":"2:3250:2457","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3252:166","2:3253:1325"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6367:3163":{"id":"1:6367:3163","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6368:2163","1:6369:7796","1:6370:55246","1:6371:55247","1:6372:55248","1:6373:2165"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10427:3165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:148:1796":{"id":"0:148:1796","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[549,8],"end":[558,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f`\nif the cell was empty.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[722,4],"end":[743,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["0:179:1859"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9112:1738-0:264:1839":{"id":"a:2:9112:1738-0:264:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:264:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:405:59":{"id":"0:405:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[31,9],"end":[31,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:231:639":{"id":"0:231:639","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[816,8],"end":[821,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130:391":{"id":"0:130:391","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[406,8],"end":[411,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13258:58583":{"id":"2:13258:58583","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8227:115","prim@char":"1:15720:2198","str::match_indices":"1:15726:2203","self::pattern":"2:12809:3602"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49290:3896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12834:3605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3716:2485":{"id":"2:3716:2485","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13187:1759":{"id":"2:13187:1759","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47164:161"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6465:3246":{"id":"1:6465:3246","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6466:56458","1:6467:56459"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2783-0:402:2146":{"id":"b:2:2783-0:402:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:3650","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:402:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:52502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4614:3185":{"id":"1:4614:3185","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4615:57095","1:4616:39218","1:4617:57097","1:4618:57096"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5627:3232":{"id":"1:5627:3232","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5628:54401","1:5629:54403","1:5630:54402","1:5631:54404"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2780-0:408:2154":{"id":"b:2:2780-0:408:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2774:93","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2782:2268"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[745,4],"end":[750,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3396:111","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["0:184:205","0:185:523"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:776-0:115:1750":{"id":"b:5:776-0:115:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2799:100","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:772:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["5:778:2859","5:779:2860","5:780:2861"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13293:52658":{"id":"2:13293:52658","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13175:58571":{"id":"2:13175:58571","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13191:52736":{"id":"2:13191:52736","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10710:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8653:2532":{"id":"2:8653:2532","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:235:393":{"id":"0:235:393","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[832,8],"end":[837,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3182:2316":{"id":"2:3182:2316","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4899:3270":{"id":"1:4899:3270","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4900:2937","1:4901:56666"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2783-0:222:1750":{"id":"b:2:2783-0:222:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:3650","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:2785:52502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2799:100":{"id":"2:2799:100","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2800:391","2:2801:393"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13197:3922":{"id":"2:13197:3922","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15720:2198"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49092:3886","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8227:115":{"id":"2:8227:115","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8228:2792","2:8229:2793","2:8230:2794","2:8231:2795","2:8235:2796","2:8238:2797"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8378:152","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5801:4036":{"id":"5:5801:4036","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5803:166","5:5804:414"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3090:211":{"id":"2:3090:211","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3092:122","2:3093:1383"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13208:52775":{"id":"2:13208:52775","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15720:2198","self::pattern":"2:12809:3602"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3906-0:157:1839":{"id":"b:2:3906-0:157:1839","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13290:3831":{"id":"2:13290:3831","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12748:2508","FromStr::Err":"2:12748:2508"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12748:2508","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12748:2508","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3189:204-0:115:1750":{"id":"a:2:3189:204-0:115:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13173:770":{"id":"2:13173:770","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15720:2198"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3189:204-0:222:1750":{"id":"a:2:3189:204-0:222:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3189:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3116-0:115:1750":{"id":"b:2:3116-0:115:1750","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3086:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3119:122","2:3120:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:272:639":{"id":"0:272:639","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1162,8],"end":[1164,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10052:129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10041:190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:252:1778":{"id":"0:252:1778","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[961,8],"end":[966,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<i32> = OnceCell::new();\n\nfn main() {\n    assert!(CELL.get().is_none());\n\n    std::thread::spawn(|| {\n        assert_eq!(CELL.set(92), Ok(()));\n    }).join().unwrap();\n\n    assert_eq!(CELL.set(62), Err(62));\n    assert_eq!(CELL.get(), Some(&92));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13199:3364":{"id":"2:13199:3364","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49108:3190","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3679:2313":{"id":"2:3679:2313","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5705:3239":{"id":"1:5705:3239","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:5308"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:380:1753":{"id":"0:380:1753","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[218,8],"end":[224,9]},"visibility":"public","docs":"Gets a reference to the underlying value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47164:161","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1750":{"id":"0:115:1750","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[376,4],"end":[379,5]},"visibility":"public","docs":"A cell which can be written to only once. It is not thread safe.\n\nUnlike [`std::cell::RefCell`], a `OnceCell` provides simple `&`\nreferences to the contents.\n\n[`std::cell::RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nlet value: &String = cell.get_or_init(|| {\n    \"Hello, World!\".to_string()\n});\nassert_eq!(value, \"Hello, World!\");\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:140","a:2:3177:195-0:115:1750","a:2:3218:2320-0:115:1750","a:2:3189:204-0:115:1750","b:2:2780-0:115:1750","b:2:3106-0:115:1750","b:2:3121-0:115:1750","b:2:2783-0:115:1750","b:2:3906-0:115:1750","b:2:3110-0:115:1750","b:2:3113-0:115:1750","b:2:3116-0:115:1750","b:5:776-0:115:1750","0:118","0:120","0:122","0:125","0:128","0:132","0:135","0:137"]}},"b:2:2783-0:408:2154":{"id":"b:2:2783-0:408:2154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2777:3650","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2785:52502"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:173:1849":{"id":"0:173:1849","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[713,8],"end":[719,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["this",{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3125:1383":{"id":"2:3125:1383","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47291:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3090:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13184:52737":{"id":"2:13184:52737","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15737:2212"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:185:523":{"id":"0:185:523","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[747,8],"end":[749,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:382:1796":{"id":"0:382:1796","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[251,8],"end":[260,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3429:127","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2159","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3177:195-0:115:1750":{"id":"a:2:3177:195-0:115:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3177:195","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:115:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3260:2453":{"id":"2:3260:2453","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3262:166","2:3263:538"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3906-0:364:2157":{"id":"b:2:3906-0:364:2157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3904:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:364:2157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["2:3908:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13255:58582":{"id":"2:13255:58582","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15720:2198","`DoubleEndedIterator`":"2:8227:115","self::pattern":"2:12809:3602","str::rmatch_indices":"1:15726:2203"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49272:3895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12819:3601","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[809,4],"end":[813,5]},"visibility":{"restricted":{"parent":"0:194:1330","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3155:110","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:222:1750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:228:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3325:2468":{"id":"2:3325:2468","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3327:166","2:3328:1206"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13194:58575":{"id":"2:13194:58575","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15726:2203","`str`":"1:15726:2203","crate::ops::IndexMut":"2:3485:2475"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5635:3231":{"id":"1:5635:3231","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5636:5308","1:5637:55129","1:5638:55130"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[691,4],"end":[720,5]},"visibility":{"restricted":{"parent":"0:83:1730","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:157:1839","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}},"param_names":[]}},"items":["0:172:897","0:173:1849"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9112:1738-0:408:2154":{"id":"a:2:9112:1738-0:408:2154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9112:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:408:2154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:124:59":{"id":"0:124:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[391,8],"end":[393,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2875:169":{"id":"2:2875:169","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2877:975","2:2878:803","2:2879:769","2:2880:692","2:2881:675"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3182:2316","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2829:168","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"6:537:6980":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:49554:3613":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:52852:3774":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:14000:5970":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"12:866:3301":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:739:5089":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:45453:2486":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:48505:6440":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:4347:7395":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11159:5295":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12494:5531":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:5359:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:9162:4787":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4431:7432":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:3255:2454":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:49858:3911":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6718:4711":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6691:4502":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12568:5542":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:2723:3262":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:6465:3246":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:14325:7939":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:46319:3569":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:569:7003":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:52098:3738":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"12:1855:140":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:22375:58386":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:1455:1785":{"crate_id":2,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:10942:3186":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:6176:7801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7216:4513":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:5269:7549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:9112:1738":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:2159:2803":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:10500:10642":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:50014:6448":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12385:5512":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:2889:4694":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10814:4745":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:15731:2206":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:3186:201":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:885:4872":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12073:3295":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:46012:4009":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:4494:7457":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:5522:4469":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:5790:4479":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:23809:6390":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"14:56:5325":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:5868:3527":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:13532:5833":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:3011:3165":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:24323:2513":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:8013:2412":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:11822:5406":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:983:4081":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:4341:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:22764:3165":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:45721:3689":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10950:5283":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10128:4849":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:51381:3737":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:15742:2217":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:1493:3304":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4387:7414":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"12:1253:3314":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4459:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:3307:2937":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:47283:173":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:49344:3899":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:11316:3369":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:51481:6459":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:3990:7268":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13978:5964":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:49697:3618":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:8074:4999":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:13834:3926":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:3940:4968":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:774:5082":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"9:0:2170":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10061:5213":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:1700:7157":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:48179:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:5384:4461":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:12256:4025":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:531:6978":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"9:27:4234":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:4120:7330":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:31847:2502":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:51255:3760":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"9:234:4210":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:24221:2514":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:2004:2080":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:7408:4968":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:7013:2326":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:3348:2473":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:12019:2356":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:5406:3676":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:14956:3362":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6780:4503":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"12:377:4323":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:13648:6381":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:1451:1734":{"crate_id":2,"path":["core","hint"],"kind":"module"},"1:783:5016":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:2774:93":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:3918:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4517:7467":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:0:2177":{"crate_id":17,"path":["object"],"kind":"module"},"2:38540:2321":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:5697:3237":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:8183:146":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6413:4335":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4395:7418":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:6899:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:46259:3188":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:11716:3881":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11588:5352":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:15735:2210":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6768:4715":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:5855:4980":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:11214:3867":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:8653:2532":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:6230:3570":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"15:269:4343":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9580:3474":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"16:6166:4487":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9210:46046":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:22675:3734":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4183:7345":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:32028:3038":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:4417:5999":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:15691:10646":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:6367:3163":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:9296:5100":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:9602:313":{"crate_id":2,"path":["core","sync","atomic"],"kind":"module"},"1:8362:3341":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:15214:4347":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6252:4491":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:53040:3742":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:610:1361":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:5635:3231":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:14320:7937":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:6303:3584":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:9476:5104":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"12:784:3304":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:14550:3409":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:4350:5997":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:10938:3192":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10926:5281":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:3266:2456":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"12:774:2803":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:4185:3301":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"12:1180:4317":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3529:3199":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:11212:3493":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:1824:4968":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:3338:4665":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13377:5791":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:22622:3290":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:1622:7099":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:8665:6547":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:52789:3754":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:10981:3190":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4127:7332":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:10531:3316":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:10599:5234":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:2397:6538":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:49000:3875":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:8877:2331":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:1443:3313":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:5643:3233":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:4835:2299":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:6219:4490":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:52599:3750":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:15136:3488":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4101:7321":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:46281:3585":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:1446:3299":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:10702:113":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:3314:3424":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13465:5814":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7146:4507":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:3718:155":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:1149:6530":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5978:7709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:4613:4973":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:3195:4681":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:2834:119":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:3025:6729":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4358:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12142:5459":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:12053:3294":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:23366:3289":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:13562:3413":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:6638:2352":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:12408:5521":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10827:4746":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13540:5836":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:1497:3305":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:49065:3966":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:48914:3868":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:8227:115":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:3331:2469":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:8184:3322":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11001:5287":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:610:4875":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10584:4758":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:23925:2512":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:10042:2753":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5210:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10558:5229":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1729:3494":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:3420:2083":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11026:5289":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:3485:2475":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:820:4867":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:3638:132":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:11995:3347":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:51183:3772":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:5580:4656":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:49041:3879":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:10670:3245":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:3012:3679":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11015:5288":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:152:52334":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10279:4809":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:13590:5847":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:3633:208":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:7185:4510":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:48161:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:7573:3404":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:3183:2312":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:10921:3218":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:50945:3759":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:10914:3216":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6238:4422":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6152:4419":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:8302:200":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13497:5822":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:48474:3727":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6605:4434":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:10718:3200":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13963:5963":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10160:5216":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:11683:3880":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:14356:124":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:13386:5792":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:7908:2412":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:49862:3912":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10477:4836":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:48246:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:1438:2803":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:578:7009":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:2690:559":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:11194:3272":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:1625:3300":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:47274:2627":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:53068:6510":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:11231:4788":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:6107:3499":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:4506:6002":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:4839:2300":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10468:4837":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6085:7745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:11249:7719":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:7575:4066":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:3374:3426":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:3340:3425":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:1634:3303":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:51333:3752":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:1554:7055":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:4823:6011":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:7870:4426":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"8:0:2169":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:10071:4852":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:49439:3905":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:10701:3165":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:6014:4485":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:13180:5741":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:3272:2455":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7406:4423":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:8929:46040":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:0:470":{"crate_id":2,"path":["core"],"kind":"module"},"1:1190:6706":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:7024:4722":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4478:7452":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:694:4880":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:45529:181":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:9595:3475":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"18:704:5082":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:8179:131":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:51302:3748":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:3904:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:49013:3876":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:15199:54600":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:3621:2478":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6620:4706":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12431:5522":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:2314:4802":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:136:52333":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"12:812:3305":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:2113:3034":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:10796:3419":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10236:4777":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:5197:7517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:3716:2485":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:1617:7097":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:1736:7170":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13488:5819":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10028:5210":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:12839:3606":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6136:4458":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:10653:3257":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:7477:4441":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:1236:5112":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:7559:3403":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:47942:2761":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:46408:3576":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:2456:6540":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:8170:2412":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:13924:5954":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:22612:3165":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"12:1159:4316":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:11245:3258":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9440:5103":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:3908:3422":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5522:7653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:22347:3667":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:12748:2508":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:3249:3445":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:14687:5025":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:4413:2937":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:49525:3607":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:9616:75":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:3090:211":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:37320:3667":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:10103:2759":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"12:0:2173":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:1518:3308":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3617:3201":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:15738:2213":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:2108:558":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"4:0:2168":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11738:5378":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:13921:136":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:47335:2937":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:8214:97":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:670:39508":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:4157:4759":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:10106:4847":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:4651:98":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:5295:44464":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:5815:4480":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11147:5294":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:46250:3581":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:6051:7738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:5281:3480":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:6603:7730":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:8912:6547":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:12566:3897":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2875:169":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:4282:2803":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:9621:82":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:15739:2214":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11054:3279":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:15225:4347":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"12:761:2938":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"12:2039:3425":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:46471:3580":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6391:4494":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4215:7348":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1658:7128":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:6021:4673":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:6893:7846":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:4961:2308":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:2243:4141":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:5736:4476":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6949:4719":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:1018:2412":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5255:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:50913:6451":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:5167:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11458:5324":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12982:5639":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:13718:57334":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:11027:3274":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"6:1522:7042":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:14022:3207":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:10289:5017":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1665:7132":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11665:5363":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:47921:2759":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:32034:57292":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"16:3018:4678":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"14:0:2174":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:23938:2524":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:48951:3872":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12946:5608":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12712:5569":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:1563:7060":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:9113:1737":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:4300:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13258:5763":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:3506:4686":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7250:4516":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4193:7346":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12480:5529":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"12:1100:3311":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:866:4871":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:15723:2200":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:3280:2462":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:45959:6414":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:10107:2761":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:8146:3682":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:49190:3892":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:46451:3189":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:4569:4971":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"5:8123:179":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:3650:2482":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:1708:7158":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:3951:7247":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:2177:3424":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:13198:3495":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:11271:3151":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:11916:3340":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:52456:3782":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:23740:6860":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:50759:3766":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:624:7033":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"14:47:6273":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"5:3029:6730":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:47231:2335":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:13172:5740":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:47343:2938":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:23903:7859":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13163:5739":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:729:59905":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"12:1200:4318":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:11146:3482":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:7511:3400":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:0:261":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:7264:4435":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7042:4723":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:3679:2313":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7971:122":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:5801:4036":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:2855:164":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:2991:4688":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10266:4775":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:46290:3566":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:48224:122":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8369:3342":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:9458:5012":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:607:5110":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11924:2803":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:10109:174":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:4410:7422":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:7628:3406":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:6730:2080":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:12527:3893":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"9:1020:4252":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:15741:2216":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:2565:122":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"14:216:44393":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:849:4869":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:3348:3423":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:681:5111":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:21:651":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:7514:4439":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:49172:3891":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:8378:152":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:10117:4848":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13296:5769":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:52249:3762":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10317:4799":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13772:5913":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6518:4497":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:23630:3941":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4501:7460":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:10658:3437":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6214:7820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:6812:7836":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:6200:7811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"0:264:1839":{"crate_id":0,"path":["once_cell","sync","Lazy"],"kind":"struct"},"2:3284:2460":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:6636:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:8355:187":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6636:4436":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11750:5379":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"9:809:3379":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5386:7613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:3064:4736":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4227:7349":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:1184:59799":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"0:402:2146":{"crate_id":0,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"1:4480:3217":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:22816:3735":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:2799:100":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:1547:7052":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:3319:2467":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"18:837:3604":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11847:5410":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11628:5357":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:1501:3306":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:10930:3184":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"12:2303:6955":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:14937:3355":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:0:2178":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:2829:168":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:3945:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:46060:3256":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12028:5438":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4419:7428":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:754:59904":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:8656:2939":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"3:300:190":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"12:429:4321":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:11337:4834":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:6424:4495":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:11093:3861":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:7205:4512":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:53079:6511":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:5627:3232":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"0:83:1730":{"crate_id":0,"path":["once_cell","unsync"],"kind":"module"},"2:46172:3964":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:12526:123":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:3864:4158":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"12:853:3300":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:22415:58440":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"12:1651:4329":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11696:5373":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:53216:6520":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"12:396:4322":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:27742:2510":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:49226:3864":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:9083:3398":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"2:47265:2336":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:13912:5952":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:909:92":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:3218:2320":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:6744:4713":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:9142:3399":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"6:1596:7083":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:3235:3441":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:10988:5286":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:3881:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:161:39179":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:3264:4684":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11653:5362":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5241:7537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:14:2161":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:294:5106":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6091:7747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6208:4489":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:49731:6443":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"14:189:6273":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:3978:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:2794:4407":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:14761:3408":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"13:120:44359":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"0:115:1750":{"crate_id":0,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"2:3423:125":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:4598:219":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:46122:3803":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12598:5548":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:50736:3778":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13272:5767":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:11206:3528":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:23910:2523":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6858:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7182:6545":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:10806:3203":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7549:4428":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:15727:2204":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:13819:5924":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:49834:3913":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"12:556:138":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:1204:4138":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:13537:145":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:11226:3502":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:48298:72":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:15702:54452":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11809:5402":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:525:6975":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:5595:4471":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:31987:3036":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4371:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:9264:5191":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10200:5218":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"3:0:412":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:5707:4474":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:45981:3799":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:48513:6441":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:8756:1839":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"2:46360:3586":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:2866:4675":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:616:7028":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:2188:3134":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"7:38:44011":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"12:949:3308":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:69:2540":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:6357:4493":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:1472:3301":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:8629:157":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9592:123":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:4173:3219":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:13685:5897":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:11963:3345":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:5414:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:23701:6383":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:49290:3896":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:8101:59748":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:8252:2548":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:7843:4520":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:15743:2218":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:12535:5021":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:3325:2468":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:53099:6513":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:8291:4157":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"16:5407:4462":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:9574:4790":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:51152:3768":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4255:3501":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:3429:127":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:9234:3601":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:11434:5310":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:53125:6515":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12442:5524":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:9722:639":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"1:15740:2215":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"9:776:4232":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:6377:207":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:1524:3309":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:14373:113":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:11460:2937":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:8397:4062":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:5314:5191":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11604:5353":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6731:4712":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:13699:3404":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:4477:6001":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46272:3582":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:1075:3253":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:10981:3858":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13318:5773":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10571:5232":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:8902:46039":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:511:6967":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:5385:10647":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5469:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:5472:4466":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10502:5224":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:7707:3672":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:3261:3451":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:48212:103":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:3083:130":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:1472:3314":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:32086:57291":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:11993:5434":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:8142:3680":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:9628:5014":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"6:5969:7703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6221:7823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"12:469:59877":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13746:5904":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"13:232:6836":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:4970:2309":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:3970:3717":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:12373:5510":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:13344:6539":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:7786:4430":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13370:5789":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:49122:3192":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:599:7020":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"12:2018:3302":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:12247:5474":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:632:7038":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:6591:4500":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:45481:2484":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:6569:4708":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:3019:2859":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:5693:3236":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:4:957":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:5717:4475":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:7228:171":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:3314:2465":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5945:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13306:5770":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:1152:6532":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:23781:2511":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:13034:6379":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:10515:10644":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:6618:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:4385:3208":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6644:4501":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"9:900:6961":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:49502:3603":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:542:4395":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"18:857:4870":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:23756:6385":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:5996:4484":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:12685:5565":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:10914:2938":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11378:4749":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10081:4809":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:10844:4811":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13477:5815":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:15470:5026":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:52032:3753":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:7342:4452":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:11186:5296":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:9933:5204":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:46687:6375":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:7158:4508":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:1533:7047":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:0:1301":{"crate_id":1,"path":["std"],"kind":"module"},"17:10253:4772":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:11466:3384":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:11020:3859":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"12:2331:3322":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:5383:2080":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:10684:124":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:12040:5440":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:5561:4470":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:7886:3216":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:7959:2350":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2188:3426":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10962:5284":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:6767:3153":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:3145:4689":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:46461:3579":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13609:5852":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:744:59903":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"9:1075:4253":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:47511:84":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10149:5203":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11875:6865":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:11816:4995":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:15718:2196":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"0:0:1957":{"crate_id":0,"path":["once_cell"],"kind":"module"},"1:10964:3188":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:4669:4973":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:3409:1736":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2162:3301":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:1578:2937":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:299:5107":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:5504:2352":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4145:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12699:5568":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:1920:3302":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:11981:5432":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:8801:2362":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:10052:129":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"18:720:5084":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:790:4864":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11477:3385":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:46667:3217":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:49571:3614":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:4605:56662":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4073:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10041:5211":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:10726:3202":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:6491:4496":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:157:39178":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:3921:3302":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:48941:3871":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:5855:4481":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:2005:2937":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:24459:2519":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:47469:77":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:667:4879":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"9:963:4250":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:88:39112":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:1041:2414":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:4995:6016":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:4639:3692":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:7804:4429":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:1616:3299":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:48961:3873":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:55844:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7682:3410":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:7804:4987":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6126:4486":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:7823:4431":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:6155:7787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:46342:3571":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:3320:4738":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:5960:4663":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:1157:10645":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12327:5486":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:13282:5768":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:10105:2760":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:49540:3610":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:5927:4482":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:15736:2211":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:49031:3878":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:9331:55284":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13554:5838":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6887:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:4627:3691":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:3714:5991":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"14:244:6278":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:10472:2055":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13429:5800":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4164:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:3365:4666":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:1530:3310":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:49619:3615":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12632:5561":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:5860:3526":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:45728:3690":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:51823:3776":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2183:3425":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:14906:3353":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:3743:4742":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4083:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:7337:2803":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13842:5937":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:7176:3301":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13574:5844":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:3189:204":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"18:801:4865":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:49888:3298":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:10052:5212":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7174:4509":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5406:3488":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7073:4506":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12671:5564":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:4212:4968":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4267:3465":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:3086:212":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:519:6972":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:53140:6516":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:1458:3312":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:3080:144":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:2758:4142":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:6935:7854":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:2458:6541":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:46649:2358":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12262:5477":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"9:157:4202":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:9034:46042":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:13883:5022":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:51404:3740":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"12:2045:3426":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6072:4389":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11082:4755":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:11950:3344":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:3852:3202":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:10316:141":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:8278:4113":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:7467:4421":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:7545:3402":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:49430:3256":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9551:4785":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:8718:1750":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"16:5505:4468":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:23461:3165":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:5231:6018":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:49080:3711":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:1723:7167":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:4614:3185":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:2968:4677":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:49108:3190":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:5312:7578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:10801:3420":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5379:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:46371:3573":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:9689:59899":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:5330:5192":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:48705:4015":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:11220:3482":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:47197:2802":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:4671:6006":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:3287:4685":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:605:7023":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:7735:218":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7884:4427":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"12:2323:6958":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:14774:3295":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:3309:2464":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:2512:4798":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:7378:4424":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12221:5470":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:2211:3133":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:5213:4001":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:14537:3252":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:4762:6009":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:48483:141":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:5889:3530":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"12:840:3299":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:14793:7941":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:11304:46049":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:2311:4140":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:14950:3361":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:45660:2476":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:2202:3673":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:10101:2758":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4401:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:48923:3869":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:3155:110":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:51356:3755":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:49414:3903":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:4922:6014":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11794:5396":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:9600:59898":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:3091:4737":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:3563:3194":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:22392:58437":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"12:160:4320":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13192:5746":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:24931:2509":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:55779:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1762:4966":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:46220:4989":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:46035:3905":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:4539:3181":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:4013:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:52915:3739":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:660:4878":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:13810:3405":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:52962:3757":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:49830:3910":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:48495:3379":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:4990:1733":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:15190:6642":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:14016:3209":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:6068:7740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11835:5407":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:23559:3940":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11367:3379":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"12:2013:3301":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13942:5960":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:11000:3272":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:12196:6540":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:10099:114":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"0:364:2157":{"crate_id":0,"path":["once_cell","race","OnceBox"],"kind":"struct"},"5:2199:4091":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4383:3207":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"9:469:6837":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"10:0:2171":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4306:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:5841:4977":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"12:354:6702":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:49140:3861":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:47385:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:1302:138":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:6644:7835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:1633:3312":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"0:408:2154":{"crate_id":0,"path":["once_cell","race","OnceBool"],"kind":"struct"},"1:10987:3192":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:50999:3751":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:10239:6643":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:6672:3587":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:7337:170":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:15730:2205":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"7:85:44018":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"14:231:4034":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:11157:3484":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:53178:6518":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12456:5526":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:1651:3314":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:53255:6521":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10788:5271":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:46420:3577":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:49866:116":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:49272:3895":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:4305:3209":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:55818:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:24255:2515":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:510:5108":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:51906:3761":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5191:7516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:3972:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:10439:54598":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:912:4080":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:46380:3588":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:50022:175":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:51206:3775":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:23723:3837":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:4844:2301":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:3662:3685":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:9207:3287":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:610:7025":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:23857:38418":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:15721:2199":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:6999:4505":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2773:4700":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4325:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:11857:54453":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"0:222:1750":{"crate_id":0,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"2:12809:3602":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:6424:57270":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:12756:5576":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:3297:2466":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13898:5945":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:2484:46131":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5130:7474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:14843:6638":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:24357:2145":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:9769:59897":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:12093:3296":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:811:4866":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:4899:3270":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:5159:7498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"12:2309:6956":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:6464:4432":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:49386:3900":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:47935:2760":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:3205:2319":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:49244:3865":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:10403:4807":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:46043:4004":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:11908:2937":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:14343:6637":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:11519:5340":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2843:4674":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47763:88":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:3429:4408":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:46440:3583":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:11499:5330":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4060:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4066:7302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:3466:3302":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:375:2542":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:2582:6542":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"16:3392:4691":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:15737:2212":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:12343:5491":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:11796:3405":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:46399:3575":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:47721:81":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12010:5437":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:14380:3184":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:13520:5830":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:7333:4438":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:2534:4143":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"12:1118:3312":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:2318:2314":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10975:5285":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:22413:58438":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:2945:4699":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:13737:3406":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:51985:3749":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"9:749:4187":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:9649:5199":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"12:937:3307":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13119:5734":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:3552:2477":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10673:46231":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:5436:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:9245:4747":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:50690:6449":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12287:5479":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:7813:6709":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:48194:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:57114:6529":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:8325:4032":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:4449:7443":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:46089:4006":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13205:5751":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:11132:6607":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"11:46:6960":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:1428:2938":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6554:4498":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:6769:3154":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:5063:639":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:2138:1028":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:4596:2753":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:8093:4083":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4425:7429":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:14019:3211":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:11089:6864":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"19:117:6907":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:10314:5019":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:5563:7679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6366:4336":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12552:5541":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"11:54:4306":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:14305:3260":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:49421:3904":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:3118:4690":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:11853:7936":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:12783:5579":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:46658:6429":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6864:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:49098:3887":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"9:722:4186":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:12234:5472":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:49683:3617":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:3955:122":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13760:5910":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:2027:140":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:53114:6514":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:50058:3924":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:11830:3408":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:5282:7555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"12:976:3310":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:3278:91":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10435:5222":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:1507:3307":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7303:4517":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:1540:7050":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:9759:5201":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:5371:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:46082:3904":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:4523:7470":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:3339:2471":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:3905:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13799:5921":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"18:712:3667":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:5428:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:3110:3438":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:46310:3568":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:772:206":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:11109:54454":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:3276:2458":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:5753:4477":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4203:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:10041:190":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"1:3251:3446":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:7453:4420":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"12:747:2937":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:12834:3605":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:6269:4492":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12659:5563":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:5805:4038":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:10994:3193":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:8137:2803":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:1224:4139":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12155:5462":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:3644:2480":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:6607:7734":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:1886:1735":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:46230:6425":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"18:169:52335":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:14813:3294":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:5013:2310":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:11802:166":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:11616:5356":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:10974:3189":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:15719:2197":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:4386:5998":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:23835:38426":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:13039:38706":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"17:10211:5219":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12917:5588":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:5705:3239":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:6227:3500":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2777:3650":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12182:5466":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:11815:3407":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7571:4416":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:5433:4464":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:11970:5429":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11947:5422":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:8804:2363":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:2171:3423":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:896:4873":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:13522:133":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"9:686:4183":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:10179:5217":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10938:5282":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12095:5451":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:53193:6519":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:6593:3234":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:53001:3777":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:22616:3288":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3245:2452":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:45968:3798":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5672:4473":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12168:5244":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:51585:6462":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"0:194:1330":{"crate_id":0,"path":["once_cell","sync"],"kind":"module"},"16:7226:4514":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"12:2025:3423":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:50081:153":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:2166:3302":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:1527:7044":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:7151:6545":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10353:4803":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:1132:3267":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:1000:2937":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:50894:3771":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:584:7012":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:2181:4970":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:3343:2472":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:13824:2534":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:50099:3265":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4364:7406":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:8849:4784":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:10538:11651":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:4770:1732":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:49326:3898":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:11060:3367":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"16:3488:4687":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:15744:2219":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:10427:3165":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:2765:3263":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:6695:3259":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:5221:7526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"14:250:6280":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10377:4801":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:3997:7272":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:46300:3567":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:6807:4504":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:5456:4465":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5228:7528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11714:5374":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:3463:2483":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:4535:6003":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:49842:3914":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:8076:4082":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:9729:59894":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:4614:6004":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13240:5755":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:5360:4460":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:47637:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:12819:3601":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:10663:3244":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:49854:3917":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13394:5794":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:1760:7179":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:48932:3870":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:4346:3212":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:5185:7513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9943:59892":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12795:5586":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10864:5274":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:620:1862":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:15077:3480":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10458:5153":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:7685:3411":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:50067:3925":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:5273:4668":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:23465:3648":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10140:4811":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:49838:3915":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:46096:4007":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:5838:3524":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:6614:7832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11767:5387":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"15:0:2175":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:1584:7075":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:11030:122":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:4641:6005":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:781:104":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:1908:40480":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:3939:5994":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13446:5807":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:8131:2803":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"9:41:4235":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:14330:3244":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:13348:5784":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:11058:3860":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:7535:3590":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:3396:111":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:55831:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11932:5418":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:4276:2938":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12307:5485":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:10710:3458":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12467:5527":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:11406:5306":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:8520:2353":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:53059:6509":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:46066:4005":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:24425:2518":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:47351:2803":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:12550:3894":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"12:463:59880":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:32022:3037":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:4281:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:1644:3304":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:5274:7550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:46328:6426":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:5346:4418":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11482:5325":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:9005:46041":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:7856:4521":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:24289:2417":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:55857:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:8296:7857":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"18:766:5094":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13810:5922":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:3113:3119":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"12:968:3309":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:2395:6537":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:4485:4125":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:12490:3890":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1676:7140":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:1599:2803":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:45545:179":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"7:0:1448":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:46389:3574":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5953:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:45735:2307":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:12533:3437":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:11407:3381":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:11057:3280":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:9659:59890":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10448:4779":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:4890:6013":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:4033:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:51038:3736":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7279:4724":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:10801:5273":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:4008:5115":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:49396:3901":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:15724:2201":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:6124:7761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12771:5302":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11640:5360":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:4511:7465":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:4574:2080":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:14681:5024":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:6185:7804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:2865:162":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:3742:2938":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12051:5441":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:10113:2763":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:45693:2479":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:8085:3301":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:12044:2365":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13062:5700":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:3233:3105":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:3041:4679":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7360:179":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:5649:3234":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:37296:163":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"18:636:5082":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12537:5537":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11254:4786":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:55792:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9723:5016":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:7195:4511":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:9961:5205":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:8380:3302":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:1415:2937":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:12039:2359":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:14097:2055":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:5987:7710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:15732:2207":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:11200:3866":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10623:5236":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:50871:3767":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:3195:2054":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:7928:3689":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:9501:6711":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:7637:3563":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11678:5364":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7738:4518":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3074:74":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:22394:58435":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:10428:2426":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:15686:6866":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"12:892:4308":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:9528:3190":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:3288:2459":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:3549:5990":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:3862:7185":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13506:5823":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4293:7370":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13582:5845":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:15734:2209":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"18:829:4868":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5292:7562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:3440:3198":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12073:5450":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:10890:2937":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11118:46048":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:3481:2474":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"12:1667:4330":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:45780:3817":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4377:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:8954:4756":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:50976:3747":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"12:1235:4319":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:46642:6374":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:3182:2316":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:11298:2327":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:6918:4029":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"14:11:6273":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:10559:4146":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:9886:5203":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:6028:7737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10656:5239":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:46676:6431":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:4906:2306":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:46022:4010":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:3953:190":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:14665:5023":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:11726:5377":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:49718:3620":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"9:996:4251":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:0:2176":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:13572:57379":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:47427:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:49376:3193":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:6005:7719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:50711:6450":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:8247:3963":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:13613:172":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8571:2355":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:48458:3325":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:50111:2537":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:47214:2938":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12521:5535":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13356:5787":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:1546:90":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:11979:3346":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:46142:3962":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"12:1688:4331":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13627:5855":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:51105:3780":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:1588:2938":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:49405:3902":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"12:930:3306":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13780:5916":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:52063:3756":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:13054:5698":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:6870:7840":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:5756:4968":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4052:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11277:5299":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13547:5837":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:3892:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:51792:3773":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:4682:2531":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:5975:4483":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13331:5779":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:51057:6453":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"12:2315:59882":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:4273:3467":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:3957:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:12048:2366":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:6106:7751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:10111:2762":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:1717:7164":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:10306:137":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:49850:3916":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13788:5917":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:6101:4415":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:5683:3235":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:23817:6391":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:53163:6517":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4241:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:11868:55127":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:11045:46047":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4317:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9849:59895":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:3177:195":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:3809:4968":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:3077:73":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:7856:4999":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:51429:3741":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:8269:3379":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:11328:5302":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:49646:3616":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:14851:3414":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:7075:4982":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:13435:3397":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:47291:190":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:9114:2337":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:2733:4391":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:820:5016":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:24391:2521":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:900:2425":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:5347:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:7525:3401":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:8527:2354":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7119:4411":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:1744:7174":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13637:5860":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:5548:7668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6910:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"0:305:1516":{"crate_id":0,"path":["once_cell","race"],"kind":"module"},"1:7403:114":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:3800:5993":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:46155:3963":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:46137:96":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:1488:3303":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:51745:3769":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:47595:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4133:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:3353:4089":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:3539:4997":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:2433:6539":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:48282:2757":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:9280:5192":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:6223:4066":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13598:5848":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:1666:179":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:3868:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13041:5691":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:3604:5121":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:1427:3311":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5632:4472":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:650:4874":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:48987:3874":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:15720:2198":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:6100:7750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13733:5898":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:3218:4682":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:11779:5390":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12645:5562":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10331:4811":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:11962:5427":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:11131:3862":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:543:6983":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:3522:5117":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:47553:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:22818:3734":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4262:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:3260:2453":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:22360:58386":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:11450:3382":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:48863:3863":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:6110:4457":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:51018:6452":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13564:5841":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"9:1056:4245":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13098:5729":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:644:4877":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:45997:3801":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:47222:2803":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:3108:123":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:13993:2538":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:9774:3844":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"14:194:44387":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:10449:2405":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:10304:4800":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4331:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13154:5735":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10564:3188":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:10223:6377":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:3966:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4112:7326":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4023:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:3729:2937":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:11024:3273":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:12828:3604":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:48709:4016":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:38477:3264":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:3185:202":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:13986:5967":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:7236:4515":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:6839:3152":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:3241:4683":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7761:4519":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:3116:3182":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:6605:7732":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"9:692:4185":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:24187:2516":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:4439:7437":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:5029:6017":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:9088:46044":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:13363:6712":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:45570:180":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:6654:4107":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:45637:184":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:12280:3984":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:11172:3864":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:9633:5015":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:12034:2357":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:9799:5202":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6176:4488":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12582:5544":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:45953:3256":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:1311:4853":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:8751:3510":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:8261:2412":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"19:0:972":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11539:5341":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:10454:2410":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:1642:3313":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:9496:5013":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:11555:5345":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10001:46093":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:14533:6556":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:2852:165":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:9332:4833":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:51666:3781":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10407:4797":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:45591:183":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:11152:3483":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4470:7450":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6087:4417":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:5488:4467":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:6881:7844":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:9839:4811":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:23873:38427":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:6861:3148":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:4704:6007":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10635:5237":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:8660:3671":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:4734:6008":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:12507:5532":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11572:5347":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:1602:7085":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:4916:2307":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:3292:2461":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5421:4463":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:11390:3380":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:5555:3251":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:51529:6460":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:8115:2803":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:15745:2220":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:2291:4164":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4272:7358":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:2754:4667":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:4095:7318":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:5528:7654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:32186:57290":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:11100:4791":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:15726:2203":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:14390:54691":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:6964:2335":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:9719:5200":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:2362:580":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:1080:4968":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:50840:3779":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:1690:7151":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:6577:4499":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:55699:3644":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:49901:3975":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:13221:5754":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9809:59893":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:1572:7066":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:9779:3845":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11199:5298":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:3250:2457":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:2912:4676":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10095:4846":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:10529:5225":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:10912:5277":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:4955:6015":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:1619:3311":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:4304:5996":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11915:5412":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:7943:57394":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:50784:3758":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:7597:4067":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:15115:3481":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:1482:3302":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:12601:3858":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6682:4433":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:10710:198":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:2543:4835":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:4790:6010":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:2429:2533":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:5990:3490":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:12118:5457":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:10516:4839":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:51561:6461":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:9404:5102":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:5400:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:2816:4693":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4005:7274":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:0:2172":{"crate_id":11,"path":["adler"],"kind":"module"},"6:5998:7715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:11186:3865":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:7221:4968":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:677:137":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:5876:3529":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"0:157:1839":{"crate_id":0,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"2:46430:3578":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:5407:7626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4512:2080":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:3319:4088":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:15733:2208":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:8197:3323":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:10356:3726":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:1655:3305":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5420:7630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:894:2424":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:5766:3521":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:9368:5101":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:3304:2463":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:24527:2517":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9971:59896":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:6852:7837":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:3426:126":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:47928:2758":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:45700:3266":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"18:782:5082":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:8313:4031":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:4557:3183":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:7420:4440":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:47679:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:55805:220":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:877:3302":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:3172:4680":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:15725:2202":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:696:2427":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:421:2159":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:5561:3249":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:5766:4478":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:49092:3886":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:49846:3918":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"13:0:2167":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:7894:4455":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12610:5550":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:1675:4136":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11930:3343":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6032:4410":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:5285:185":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"9:603:6852":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:6441:3301":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:10228:5111":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13933:5958":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:12885:3609":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:547:4658":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:7808:2411":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:4621:3167":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:14748:3407":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:49022:3877":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:47164:161":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"12:2032:3424":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:48466:6435":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:10420:4796":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10611:5235":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:4448:6000":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:6771:3155":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10224:5220":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:11845:3409":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:23794:3833":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4270:3466":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4046:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:3335:2470":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:591:7015":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:49708:3619":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:15055:3282":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:50004:186":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6239:7826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:4230:5995":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"15:248:4339":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:7779:4982":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12725:5570":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:47360:163":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:22771:15699":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"9:927:44115":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:24561:2522":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:8232:4111":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:13884:5943":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:48185:128":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:13715:6713":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9065:46043":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:6345:3160":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7392:4425":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:13885:186":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:53088:6512":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"12:1144:3313":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13402:5796":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:13453:5808":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10489:4838":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:10095:105":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:9133:46045":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:5284:3481":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:11201:3525":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:12208:5469":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:9186:4754":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:4344:3211":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:4307:3210":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:5432:756":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:6698:3160":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:9489:6710":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:14922:3354":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:5941:174":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:3020:59871":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:3772:5992":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13865:5938":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"12:2009:2803":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:3021:6728":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:11358:4750":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"12:181:4324":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"12:112:59881":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:8061:2539":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:50807:3746":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13620:5853":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:8264:4112":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:46103:4008":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:6923:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:7295:4437":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:47206:2937":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:1630:7104":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"12:925:3303":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:3187:102":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:10543:5226":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:45614:182":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:9896:59891":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:46351:3572":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:8192:2549":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:563:7000":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:0:775":{"crate_id":6,"path":["libc"],"kind":"module"},"5:8070:2803":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"15:230:4338":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:52710:3770":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5459:7640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4040:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:24493:2520":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:4852:6012":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:7449:2810":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:10092:105":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:2155:2937":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10887:5275":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:11030:3278":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:12275:5478":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12195:5467":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:57093:6528":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:10555:6556":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:10521:3315":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:12741:5572":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:8734:2358":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:22807:3165":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:10351:3324":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1459:3300":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"}},"external_crates":{"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}