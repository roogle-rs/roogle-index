{"root":"0:0:2260","crate_version":"1.19.0","includes_private":false,"index":{"2:13039:29566":{"id":"2:13039:29566","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1275,4],"end":[1292,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:234:1048","0:235:2141"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:349:2043":{"id":"0:349:2043","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[334,8],"end":[340,9]},"visibility":"public","docs":"Gets a reference to the underlying value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32833:237-0:368:2472":{"id":"a:2:32833:237-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13036:27844":{"id":"2:13036:27844","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44481:6398","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32890:2815-0:333:2498":{"id":"a:2:32890:2815-0:333:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32833:237-0:374:2481":{"id":"a:2:32833:237-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:119:2091":{"id":"0:119:2091","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[622,8],"end":[636,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5592":{"id":"5:5592","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5593:34838","5:5594:3326","5:5597:34839","5:5600:34840","5:5608:34841","5:5609:34842","5:5610:9135","5:5611:29353","5:5612:29352"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13083:2616":{"id":"2:13083:2616","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12697:14380","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::rmatches":"2:13086:34128"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44431:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3612:1644":{"id":"2:3612:1644","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40131:6293","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:313:1048":{"id":"0:313:1048","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[201,4],"end":[203,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1373,4],"end":[1378,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3209:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:250:248","0:251:602"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13028:29553":{"id":"2:13028:29553","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13029:29554"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612:29352":{"id":"5:5612:29352","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13130:29350"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302":{"id":"0:302","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[187,0],"end":[191,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:305:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42468:2029-0:294:2483":{"id":"a:2:42468:2029-0:294:2483","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2789-0:368:2472":{"id":"b:2:2789-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:310":{"id":"0:310","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[199,0],"end":[288,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:313:1048","0:314:2043","0:315:2070","0:316:2088","0:320:2091"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13077:29564":{"id":"2:13077:29564","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:2071":{"id":"0:114:2071","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[551,8],"end":[563,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:113:2070"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}},{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},{"generic":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187:460":{"id":"0:187:460","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[926,8],"end":[931,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:174:2041":{"id":"b:2:3610-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:224:724":{"id":"0:224:724","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1261,8],"end":[1263,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13101:34134":{"id":"2:13101:34134","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32833:237-0:174:2041":{"id":"a:2:32833:237-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1260,4],"end":[1264,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:224:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:146:2150":{"id":"0:146:2150","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[773,8],"end":[778,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and returns a reference to\nthe result.\n\nThis is equivalent to the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13042:29567":{"id":"2:13042:29567","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[429,4],"end":[436,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:94:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[454,4],"end":[458,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:101:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:151:2050":{"id":"0:151:2050","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[835,8],"end":[837,9]},"visibility":"public","docs":"Gets the mutable reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get_mut(&mut lazy), None);\nassert_eq!(*lazy, 92);\nassert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:2091":{"id":"0:278:2091","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[91,4],"end":[109,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonZeroUsize","id":"2:23480:2471","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonZeroUsize","id":"2:23480:2471","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:2114":{"id":"0:122:2114","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[667,8],"end":[669,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:29526":{"id":"2:13022:29526","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:305:724":{"id":"0:305:724","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[188,4],"end":[190,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13059:29556":{"id":"2:13059:29556","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12513:6224","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2792:138":{"id":"2:2792:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32761:7427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:5:725-0:82:2041":{"id":"b:5:725-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:727:3220","5:728:3221","5:729:3222"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:602":{"id":"0:156:602","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[842,8],"end":[844,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:248":{"id":"0:155:248","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[841,8],"end":[841,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:135:724":{"id":"0:135:724","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[722,8],"end":[724,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:2483":{"id":"0:294:2483","crate_id":0,"name":"OnceRef","span":{"filename":"src/race.rs","begin":[179,0],"end":[182,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:310","a:2:42468:2029-0:294:2483","a:2:42469:2028-0:294:2483","a:2:32833:237-0:294:2483","a:2:32890:2815-0:294:2483","b:2:3610-0:294:2483","b:2:2471-0:294:2483","b:2:2789-0:294:2483","b:2:2784-0:294:2483","b:2:2778-0:294:2483","b:2:2774-0:294:2483","b:2:2474-0:294:2483","0:302","0:299","0:306"]}}},"2:13012:28646":{"id":"2:13012:28646","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12243:14381"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:333:2498":{"id":"b:2:2789-0:333:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[847,4],"end":[851,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3222:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:160:604"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13032:6410":{"id":"2:13032:6410","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12073:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44203:6390","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:216:2131":{"id":"b:2:2471-0:216:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2473:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13092:34130":{"id":"2:13092:34130","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12697:14380","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::match_indices":"2:13089:34129"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44395:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32833:237-0:124:2131":{"id":"a:2:32833:237-0:124:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13089:34129":{"id":"2:13089:34129","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12697:14380","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::rmatch_indices":"2:13092:34130"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44377:6394","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[909,4],"end":[916,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:183:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:205:2071":{"id":"0:205:2071","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[1080,8],"end":[1087,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:204:2070"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}},{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},{"generic":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42468:2029-0:368:2472":{"id":"a:2:42468:2029-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2774-0:294:2483":{"id":"b:2:2774-0:294:2483","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2777:3149"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13068:34127":{"id":"2:13068:34127","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12697:14380","str::split":"2:13056:27843","prim@char":"1:12073:454","str::split_terminator":"2:13065:34126"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44295:6393","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241:2150":{"id":"0:241:2150","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[1308,8],"end":[1313,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and\nreturns a reference to the result. This is equivalent\nto the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:377:60":{"id":"0:377:60","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[113,9],"end":[113,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13086:34128":{"id":"2:13086:34128","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12697:14380","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::matches":"2:13083:2616"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44449:6397","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:2088":{"id":"0:115:2088","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[586,8],"end":[595,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f`\nif the cell was empty.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[853,4],"end":[858,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:163:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:270":{"id":"0:270","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[39,0],"end":[110,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:271:1048","0:272:2043","0:273:2070","0:274:2088","0:278:2091"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2789-0:374:2481":{"id":"b:2:2789-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:320:2091":{"id":"0:320:2091","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[249,4],"end":[270,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324-0:333:2498":{"id":"0:324-0:333:2498","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[291,0],"end":[291,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"import":{"source":"self::once_box::OnceBox","name":"OnceBox","id":"0:333:2498","glob":false}}},"2:13071:29560":{"id":"2:13071:29560","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380","str::rsplitn":"2:13074:29562"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44331:6229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13097:34132":{"id":"2:13097:34132","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:140:2141":{"id":"0:140:2141","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[749,8],"end":[755,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:34839":{"id":"5:5597:34839","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284:2070":{"id":"0:284:2070","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[136,4],"end":[138,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:174:2041":{"id":"b:2:2789-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2471-0:333:2498":{"id":"b:2:2471-0:333:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2473:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13056:27843":{"id":"2:13056:27843","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12697:14380","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::split_whitespace":"2:13034:31766","str::rsplit":"2:13062:29558"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44227:6222","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32833:237-0:82:2041":{"id":"a:2:32833:237-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211:2091":{"id":"0:211:2091","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[1152,8],"end":[1166,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and\nthe cell remains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`.\nThe exact outcome is unspecified. Current implementation\ndeadlocks, but this may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:2041":{"id":"0:82:2041","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[411,4],"end":[414,5]},"visibility":"public","docs":"A cell which can be written to only once. It is not thread safe.\n\nUnlike [`std::cell::RefCell`], a `OnceCell` provides simple `&`\nreferences to the contents.\n\n[`std::cell::RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nlet value: &String = cell.get_or_init(|| {\n    \"Hello, World!\".to_string()\n});\nassert_eq!(value, \"Hello, World!\");\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:107","a:2:2997:246-0:82:2041","a:2:32833:237-0:82:2041","a:2:32890:2815-0:82:2041","b:2:3610-0:82:2041","b:2:2471-0:82:2041","b:2:2789-0:82:2041","b:2:2784-0:82:2041","b:2:2778-0:82:2041","b:2:2781-0:82:2041","b:2:2774-0:82:2041","b:2:2474-0:82:2041","b:5:725-0:82:2041","0:92","0:104","0:85","0:89","0:95","0:99","0:102","0:87"]}}},"2:13136:9010":{"id":"2:13136:9010","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4795:9010"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44535:6168","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5594:3326":{"id":"5:5594:3326","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5608:34841":{"id":"5:5608:34841","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13131:30743":{"id":"2:13131:30743","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:919:36032"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2474-0:294:2483":{"id":"b:2:2474-0:294:2483","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2476:26096"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32833:237-0:216:2131":{"id":"a:2:32833:237-0:216:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[312,4],"end":[316,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:342:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13103:34136":{"id":"2:13103:34136","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12722:14377","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[934,4],"end":[938,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:190:751"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[34,18],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:373:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32890:2815-0:294:2483":{"id":"a:2:32890:2815-0:294:2483","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42468:2029-0:374:2481":{"id":"a:2:42468:2029-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32833:237-0:333:2498":{"id":"a:2:32833:237-0:333:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2777:3149":{"id":"2:2777:3149","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2751:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:1048":{"id":"0:139:1048","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[742,8],"end":[744,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing function.\n\n# Example\n```\n# fn main() {\nuse once_cell::unsync::Lazy;\n\nlet hello = \"Hello, World!\".to_string();\n\nlet lazy = Lazy::new(|| hello.to_uppercase());\n\nassert_eq!(&*lazy, \"HELLO, WORLD!\");\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["init",{"generic":"F"}]],"output":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:2070":{"id":"0:204:2070","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[1058,8],"end":[1063,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<i32> = OnceCell::new();\n\nfn main() {\n    assert!(CELL.get().is_none());\n\n    std::thread::spawn(|| {\n        assert_eq!(CELL.set(92), Ok(()));\n    }).join().unwrap();\n\n    assert_eq!(CELL.set(62), Err(62));\n    assert_eq!(CELL.get(), Some(&92));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13031:6245":{"id":"2:13031:6245","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12073:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44197:6237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:124:2131":{"id":"b:2:3610-0:124:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13127:30740":{"id":"2:13127:30740","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40317:3092","Self::is_ascii":"2:13126:29354"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40317:3092","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2774-0:368:2472":{"id":"b:2:2774-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:3149"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:342:60":{"id":"0:342:60","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[313,8],"end":[315,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:60":{"id":"0:371:60","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[34,9],"end":[34,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:374:2481":{"id":"b:2:2784-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13018:2050":{"id":"2:13018:2050","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42346:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13095:34131":{"id":"2:13095:34131","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2997:246-0:174:2041":{"id":"a:2:2997:246-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[34,9],"end":[34,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:316:2088":{"id":"0:316:2088","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[231,4],"end":[240,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13038:31783":{"id":"2:13038:31783","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44519:6244","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:2043":{"id":"0:200:2043","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[963,8],"end":[970,9]},"visibility":"public","docs":"Gets the reference to the underlying value.\n\nReturns `None` if the cell is empty, or being initialized. This\nmethod never blocks.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2474-0:124:2131":{"id":"b:2:2474-0:124:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2476:26096"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:299":{"id":"0:299","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[185,0],"end":[185,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:203:2189":{"id":"0:203:2189","crate_id":0,"name":"get_unchecked","span":{"filename":"src/lib.rs","begin":[1031,8],"end":[1033,9]},"visibility":"public","docs":"Get the reference to the underlying value, without checking if the\ncell is initialized.\n\n# Safety\n\nCaller must ensure that the cell is in initialized state, and that\nthe contents are acquired by (synchronized to) this thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:2091":{"id":"0:355:2091","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[385,8],"end":[406,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Box","id":"5:294:2500","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13062:29558":{"id":"2:13062:29558","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12697:14380","`DoubleEndedIterator`":"2:8078:131","prim@char":"1:12073:454","str::split":"2:13056:27843"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44245:6227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2774-0:174:2041":{"id":"b:2:2774-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2777:3149"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:174:2041":{"id":"b:5:725-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:727:3220","5:728:3221","5:729:3222"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13003":{"id":"2:13003","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13004:882","2:13005:3156","2:13006:34119","2:13007:34120","2:13009:34121","2:13012:28646","2:13013:34122","2:13014:334","2:13015:29527","2:13016:2043","2:13018:2050","2:13020:2189","2:13022:29526","2:13024:34123","2:13025:34124","2:13026:29549","2:13027:29550","2:13028:29553","2:13029:29554","2:13031:6245","2:13032:6410","2:13033:6031","2:13034:31766","2:13035:31787","2:13036:27844","2:13037:34125","2:13038:31783","2:13039:29566","2:13042:29567","2:13045:29568","2:13048:3196","2:13052:3155","2:13056:27843","2:13059:29556","2:13062:29558","2:13065:34126","2:13068:34127","2:13071:29560","2:13074:29562","2:13077:29564","2:13080:29565","2:13083:2616","2:13086:34128","2:13089:34129","2:13092:34130","2:13095:34131","2:13097:34132","2:13099:34133","2:13101:34134","2:13102:34135","2:13103:34136","2:13106:34137","2:13109:26326","2:13112:29569","2:13115:34138","2:13118:34139","2:13121:34140","2:13124:34141","2:13126:29354","2:13127:30740","2:13128:29355","2:13129:29351","2:13130:29350","2:13131:30743","2:13132:30744","2:13133:30745","2:13134:34142","2:13136:9010","2:13137:34143"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:160:604":{"id":"0:160:604","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[848,8],"end":[850,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42468:2029-0:174:2041":{"id":"a:2:42468:2029-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13124:34141":{"id":"2:13124:34141","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12658:137","`FromStr`":"2:12657:2834"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12657:2834","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12657:2834","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13015:29527":{"id":"2:13015:29527","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12090:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:374:2481":{"id":"b:2:3610-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32833:237-0:294:2483":{"id":"a:2:32833:237-0:294:2483","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32890:2815-0:124:2131":{"id":"a:2:32890:2815-0:124:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13035:31787":{"id":"2:13035:31787","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13034:31766"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44510:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[462,4],"end":[466,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:106:751"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13025:34124":{"id":"2:13025:34124","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12079:1549","crate::ops::IndexMut":"2:3272:2795","str::slice_unchecked":"2:13024:34123"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13112:29569":{"id":"2:13112:29569","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:2088":{"id":"0:207:2088","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[1115,8],"end":[1124,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell\nwas empty.\n\nMany threads may call `get_or_init` concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. The\nexact outcome is unspecified. Current implementation deadlocks, but\nthis may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13137:34143":{"id":"2:13137:34143","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4792:34143"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44544:6302","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13004:882":{"id":"2:13004:882","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12073:454"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:2115":{"id":"0:215:2115","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1217,8],"end":[1219,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value. Returns\n`None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[940,4],"end":[944,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:193:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:234:1048":{"id":"0:234:1048","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[1278,8],"end":[1280,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing\nfunction.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:216:2131":{"id":"b:2:2784-0:216:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174:2041":{"id":"0:174:2041","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[901,4],"end":[901,35]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.\n\n`OnceCell` provides `&` references to the contents without RAII guards.\n\nReading a non-`None` value out of `OnceCell` establishes a\nhappens-before relationship with a corresponding write. For example, if\nthread A initializes the cell with `get_or_init(f)`, and thread B\nsubsequently reads the result of this call, B also observes all the side\neffects of `f`.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<String> = OnceCell::new();\nassert!(CELL.get().is_none());\n\nstd::thread::spawn(|| {\n    let value: &String = CELL.get_or_init(|| {\n        \"Hello, World!\".to_string()\n    });\n    assert_eq!(value, \"Hello, World!\");\n}).join().unwrap();\n\nlet value: Option<&String> = CELL.get();\nassert!(value.is_some());\nassert_eq!(value.unwrap().as_str(), \"Hello, World!\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:196","a:2:42468:2029-0:174:2041","a:2:2997:246-0:174:2041","a:2:42469:2028-0:174:2041","a:2:32833:237-0:174:2041","a:2:32890:2815-0:174:2041","b:2:3610-0:174:2041","b:2:2471-0:174:2041","b:2:2789-0:174:2041","b:2:2784-0:174:2041","b:2:2778-0:174:2041","b:2:2781-0:174:2041","b:2:2774-0:174:2041","b:2:2474-0:174:2041","b:5:725-0:174:2041","0:181","0:194","0:184","0:191","0:178","0:188"]}}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1273,4],"end":[1273,94]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32890:2815-0:374:2481":{"id":"a:2:32890:2815-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2474-0:374:2481":{"id":"b:2:2474-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2476:26096"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13115:34138":{"id":"2:13115:34138","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13133:30745":{"id":"2:13133:30745","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:919:36032"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2473:2606":{"id":"2:2473:2606","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13006:34119":{"id":"2:13006:34119","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2997:246-0:374:2481":{"id":"a:2:2997:246-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2997:246-0:368:2472":{"id":"a:2:2997:246-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:314:2043":{"id":"0:314:2043","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[206,4],"end":[209,5]},"visibility":"public","docs":"Gets a reference to the underlying value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:2043":{"id":"2:13016:2043","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42346:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5609:34842":{"id":"5:5609:34842","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2500","`String`":"5:7629:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2500","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:374:2481":{"id":"b:2:2471-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2473:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42469:2028-0:368:2472":{"id":"a:2:42469:2028-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2778-0:294:2483":{"id":"b:2:2778-0:294:2483","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42468:2029-0:124:2131":{"id":"a:2:42468:2029-0:124:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13027:29550":{"id":"2:13027:29550","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13026:29549","str::split_at_mut_checked":"2:13029:29554"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13033:6031":{"id":"2:13033:6031","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44213:4117","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2774-0:124:2131":{"id":"b:2:2774-0:124:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2777:3149"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[946,4],"end":[946,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[460,4],"end":[460,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258:60":{"id":"0:258:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1388,8],"end":[1390,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:2050":{"id":"0:112:2050","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[508,8],"end":[511,9]},"visibility":"public","docs":"Gets a mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\n*cell.get_mut().unwrap() = 93;\nassert_eq!(cell.get(), Some(&93));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2780:751":{"id":"2:2780:751","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13009:34121":{"id":"2:13009:34121","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13007:34120"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:34123":{"id":"2:13024:34123","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12079:1549","str::slice_mut_unchecked":"2:13025:34124","crate::ops::Index":"2:39963:2794"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13045:29568":{"id":"2:13045:29568","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:34840":{"id":"5:5600:34840","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:2050":{"id":"0:202:2050","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[1019,8],"end":[1021,9]},"visibility":"public","docs":"Gets the mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245:2043":{"id":"0:245:2043","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[1351,8],"end":[1353,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get(&lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get(&lazy), Some(&92));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42468:2029-0:333:2498":{"id":"a:2:42468:2029-0:333:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:91:60":{"id":"0:91:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[424,8],"end":[426,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42469:2028-0:174:2041":{"id":"a:2:42469:2028-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:196":{"id":"0:196","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[948,4],"end":[1220,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:198:1048","0:199:2048","0:200:2043","0:201:2202","0:202:2050","0:203:2189","0:204:2070","0:205:2071","0:207:2088","0:211:2091","0:214:2114","0:215:2115"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13052:3155":{"id":"2:13052:3155","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42346:191","prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[721,4],"end":[725,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:135:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2997:246-0:124:2131":{"id":"a:2:2997:246-0:124:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"function_pointer":{"decl":{"inputs":[],"output":{"generic":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:152":{"id":"0:152","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[840,4],"end":[845,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3209:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:155:248","0:156:602"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:193:667":{"id":"0:193:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[941,8],"end":[943,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:602":{"id":"0:251:602","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1375,8],"end":[1377,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:2481":{"id":"0:374:2481","crate_id":0,"name":"OnceBool","span":{"filename":"src/race.rs","begin":[114,0],"end":[116,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:281","a:2:42468:2029-0:374:2481","a:2:2997:246-0:374:2481","a:2:42469:2028-0:374:2481","a:2:32833:237-0:374:2481","a:2:32890:2815-0:374:2481","b:2:3610-0:374:2481","b:2:2471-0:374:2481","b:2:2789-0:374:2481","b:2:2784-0:374:2481","b:2:2778-0:374:2481","b:2:2774-0:374:2481","b:2:2474-0:374:2481","0:376","0:378"]}}},"2:13080:29565":{"id":"2:13080:29565","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:82:2041":{"id":"b:2:2789-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2778-0:174:2041":{"id":"b:2:2778-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:285:2088":{"id":"0:285:2088","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[146,4],"end":[151,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:2043":{"id":"0:272:2043","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[48,4],"end":[51,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonZeroUsize","id":"2:23480:2471","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2778-0:374:2481":{"id":"b:2:2778-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:216:2131":{"id":"0:216:2131","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[1255,4],"end":[1258,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\nThis type is thread-safe and can be used in statics.\n\n# Example\n\n```\nuse std::collections::HashMap;\n\nuse once_cell::sync::Lazy;\n\nstatic HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {\n    println!(\"initializing\");\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    m\n});\n\nfn main() {\n    println!(\"ready\");\n    std::thread::spawn(|| {\n        println!(\"{:?}\", HASHMAP.get(&13));\n    }).join().unwrap();\n    println!(\"{:?}\", HASHMAP.get(&74));\n\n    // Prints:\n    //   ready\n    //   initializing\n    //   Some(\"Spica\")\n    //   Some(\"Hoyten\")\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"function_pointer":{"decl":{"inputs":[],"output":{"generic":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:231","0:238","a:2:42468:2029-0:216:2131","a:2:32833:237-0:216:2131","a:2:32890:2815-0:216:2131","b:2:3610-0:216:2131","b:2:2471-0:216:2131","b:2:2789-0:216:2131","b:2:2784-0:216:2131","b:2:2778-0:216:2131","b:2:2774-0:216:2131","b:2:2474-0:216:2131","0:228","0:252","0:256","0:221","0:225","0:247"]}}},"0:250:248":{"id":"0:250:248","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1374,8],"end":[1374,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[918,4],"end":[932,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:186:458","0:187:460"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13007:34120":{"id":"2:13007:34120","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373:724":{"id":"0:373:724","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[34,18],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309:60":{"id":"0:309:60","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[194,4],"end":[196,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2778-0:368:2472":{"id":"b:2:2778-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3610-0:216:2131":{"id":"b:2:3610-0:216:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2781-0:82:2041":{"id":"b:2:2781-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2783:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[420,4],"end":[420,72]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:728:3221":{"id":"5:728:3221","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2474-0:174:2041":{"id":"b:2:2474-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2476:26096"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:110:2048":{"id":"0:110:2048","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[475,8],"end":[477,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:82:2041":{"id":"b:2:2471-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2473:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2778-0:124:2131":{"id":"b:2:2778-0:124:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2781-0:174:2041":{"id":"b:2:2781-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2783:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32890:2815-0:174:2041":{"id":"a:2:32890:2815-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2774-0:216:2131":{"id":"b:2:2774-0:216:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2777:3149"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:1048":{"id":"0:109:1048","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[470,8],"end":[472,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:339:724":{"id":"0:339:724","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[307,8],"end":[309,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"core::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"core::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238":{"id":"0:238","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1294,4],"end":[1371,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:241:2150","0:243:2156","0:245:2043","0:246:2050"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2778-0:82:2041":{"id":"b:2:2778-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[719,4],"end":[719,94]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2784-0:174:2041":{"id":"b:2:2784-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:274:2088":{"id":"0:274:2088","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[73,4],"end":[82,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"NonZeroUsize","id":"2:23480:2471","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"NonZeroUsize","id":"2:23480:2471","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2260":{"id":"0:0:2260","crate_id":0,"name":"once_cell","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1412,13]},"visibility":"public","docs":"# Overview\n\n`once_cell` provides two new cell-like types, [`unsync::OnceCell`] and\n[`sync::OnceCell`]. A `OnceCell` might store arbitrary non-`Copy` types, can\nbe assigned to at most once and provides direct access to the stored\ncontents. The core API looks *roughly* like this (and there's much more\ninside, read on!):\n\n```rust,ignore\nimpl<T> OnceCell<T> {\n    const fn new() -> OnceCell<T> { ... }\n    fn set(&self, value: T) -> Result<(), T> { ... }\n    fn get(&self) -> Option<&T> { ... }\n}\n```\n\nNote that, like with [`RefCell`] and [`Mutex`], the `set` method requires\nonly a shared reference. Because of the single assignment restriction `get`\ncan return a `&T` instead of `Ref<T>` or `MutexGuard<T>`.\n\nThe `sync` flavor is thread-safe (that is, implements the [`Sync`] trait),\nwhile the `unsync` one is not.\n\n[`unsync::OnceCell`]: unsync/struct.OnceCell.html\n[`sync::OnceCell`]: sync/struct.OnceCell.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n[`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n# Recipes\n\n`OnceCell` might be useful for a variety of patterns.\n\n## Safe Initialization of Global Data\n\n```rust\nuse std::{env, io};\n\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct Logger {\n    // ...\n}\nstatic INSTANCE: OnceCell<Logger> = OnceCell::new();\n\nimpl Logger {\n    pub fn global() -> &'static Logger {\n        INSTANCE.get().expect(\"logger is not initialized\")\n    }\n\n    fn from_cli(args: env::Args) -> Result<Logger, std::io::Error> {\n       // ...\n#      Ok(Logger {})\n    }\n}\n\nfn main() {\n    let logger = Logger::from_cli(env::args()).unwrap();\n    INSTANCE.set(logger).unwrap();\n    // use `Logger::global()` from now on\n}\n```\n\n## Lazy Initialized Global Data\n\nThis is essentially the `lazy_static!` macro, but without a macro.\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\n\nuse once_cell::sync::OnceCell;\n\nfn global_data() -> &'static Mutex<HashMap<i32, String>> {\n    static INSTANCE: OnceCell<Mutex<HashMap<i32, String>>> = OnceCell::new();\n    INSTANCE.get_or_init(|| {\n        let mut m = HashMap::new();\n        m.insert(13, \"Spica\".to_string());\n        m.insert(74, \"Hoyten\".to_string());\n        Mutex::new(m)\n    })\n}\n```\n\nThere are also the [`sync::Lazy`] and [`unsync::Lazy`] convenience types to\nstreamline this pattern:\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\nuse once_cell::sync::Lazy;\n\nstatic GLOBAL_DATA: Lazy<Mutex<HashMap<i32, String>>> = Lazy::new(|| {\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    Mutex::new(m)\n});\n\nfn main() {\n    println!(\"{:?}\", GLOBAL_DATA.lock().unwrap());\n}\n```\n\nNote that the variable that holds `Lazy` is declared as `static`, *not*\n`const`. This is important: using `const` instead compiles, but works wrong.\n\n[`sync::Lazy`]: sync/struct.Lazy.html\n[`unsync::Lazy`]: unsync/struct.Lazy.html\n\n## General purpose lazy evaluation\n\nUnlike `lazy_static!`, `Lazy` works with local variables.\n\n```rust\nuse once_cell::unsync::Lazy;\n\nfn main() {\n    let ctx = vec![1, 2, 3];\n    let thunk = Lazy::new(|| {\n        ctx.iter().sum::<i32>()\n    });\n    assert_eq!(*thunk, 6);\n}\n```\n\nIf you need a lazy field in a struct, you probably should use `OnceCell`\ndirectly, because that will allow you to access `self` during\ninitialization.\n\n```rust\nuse std::{fs, path::PathBuf};\n\nuse once_cell::unsync::OnceCell;\n\nstruct Ctx {\n    config_path: PathBuf,\n    config: OnceCell<String>,\n}\n\nimpl Ctx {\n    pub fn get_config(&self) -> Result<&str, std::io::Error> {\n        let cfg = self.config.get_or_try_init(|| {\n            fs::read_to_string(&self.config_path)\n        })?;\n        Ok(cfg.as_str())\n    }\n}\n```\n\n## Lazily Compiled Regex\n\nThis is a `regex!` macro which takes a string literal and returns an\n*expression* that evaluates to a `&'static Regex`:\n\n```\nmacro_rules! regex {\n    ($re:literal $(,)?) => {{\n        static RE: once_cell::sync::OnceCell<regex::Regex> = once_cell::sync::OnceCell::new();\n        RE.get_or_init(|| regex::Regex::new($re).unwrap())\n    }};\n}\n```\n\nThis macro can be useful to avoid the \"compile regex on every loop\niteration\" problem.\n\n## Runtime `include_bytes!`\n\nThe `include_bytes` macro is useful to include test resources, but it slows\ndown test compilation a lot. An alternative is to load the resources at\nruntime:\n\n```\nuse std::path::Path;\n\nuse once_cell::sync::OnceCell;\n\npub struct TestResource {\n    path: &'static str,\n    cell: OnceCell<Vec<u8>>,\n}\n\nimpl TestResource {\n    pub const fn new(path: &'static str) -> TestResource {\n        TestResource { path, cell: OnceCell::new() }\n    }\n    pub fn bytes(&self) -> &[u8] {\n        self.cell.get_or_init(|| {\n            let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n            let path = Path::new(dir.as_str()).join(self.path);\n            std::fs::read(&path).unwrap_or_else(|_err| {\n                panic!(\"failed to load test resource: {}\", path.display())\n            })\n        }).as_slice()\n    }\n}\n\nstatic TEST_IMAGE: TestResource = TestResource::new(\"test_data/lena.png\");\n\n#[test]\nfn test_sobel_filter() {\n    let rgb: &[u8] = TEST_IMAGE.bytes();\n    // ...\n# drop(rgb);\n}\n```\n\n## `lateinit`\n\n`LateInit` type for delayed initialization. It is reminiscent of Kotlin's\n`lateinit` keyword and allows construction of cyclic data structures:\n\n\n```\nuse once_cell::sync::OnceCell;\n\npub struct LateInit<T> { cell: OnceCell<T> }\n\nimpl<T> LateInit<T> {\n    pub fn init(&self, value: T) {\n        assert!(self.cell.set(value).is_ok())\n    }\n}\n\nimpl<T> Default for LateInit<T> {\n    fn default() -> Self { LateInit { cell: OnceCell::default() } }\n}\n\nimpl<T> std::ops::Deref for LateInit<T> {\n    type Target = T;\n    fn deref(&self) -> &T {\n        self.cell.get().unwrap()\n    }\n}\n\n#[derive(Default)]\nstruct A<'a> {\n    b: LateInit<&'a B<'a>>,\n}\n\n#[derive(Default)]\nstruct B<'a> {\n    a: LateInit<&'a A<'a>>\n}\n\n\nfn build_cycle() {\n    let a = A::default();\n    let b = B::default();\n    a.b.init(&b);\n    b.a.init(&a);\n\n    let _a = &a.b.a.b.a;\n}\n```\n\n# Comparison with std\n\n|`!Sync` types         | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`Cell<T>`             | `T`                    | requires `T: Copy` for `get`                  |\n|`RefCell<T>`          | `RefMut<T>` / `Ref<T>` | may panic at runtime                          |\n|`unsync::OnceCell<T>` | `&T`                   | assignable only once                          |\n\n|`Sync` types          | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`AtomicT`             | `T`                    | works only with certain `Copy` types          |\n|`Mutex<T>`            | `MutexGuard<T>`        | may deadlock at runtime, may block the thread |\n|`sync::OnceCell<T>`   | `&T`                   | assignable only once, may block the thread    |\n\nTechnically, calling `get_or_init` will also cause a panic or a deadlock if\nit recursively calls itself. However, because the assignment can happen only\nonce, such cases should be more rare than equivalents with `RefCell` and\n`Mutex`.\n\n# Minimum Supported `rustc` Version\n\nIf only the `std`, `alloc`, or `race` features are enabled, MSRV will be\nupdated conservatively, supporting at least latest 8 versions of the compiler.\nWhen using other features, like `parking_lot`, MSRV might be updated more\nfrequently, up to the latest stable. In both cases, increasing MSRV is *not*\nconsidered a semver-breaking change and requires only a minor version bump.\n\n# Implementation details\n\nThe implementation is based on the\n[`lazy_static`](https://github.com/rust-lang-nursery/lazy-static.rs/) and\n[`lazy_cell`](https://github.com/indiv0/lazycell/) crates and\n[`std::sync::Once`]. In some sense, `once_cell` just streamlines and unifies\nthose APIs.\n\nTo implement a sync flavor of `OnceCell`, this crates uses either a custom\nre-implementation of `std::sync::Once` or `parking_lot::Mutex`. This is\ncontrolled by the `parking_lot` feature (disabled by default). Performance\nis the same for both cases, but the `parking_lot` based `OnceCell<T>` is\nsmaller by up to 16 bytes.\n\nThis crate uses `unsafe`.\n\n[`std::sync::Once`]: https://doc.rust-lang.org/std/sync/struct.Once.html\n\n# F.A.Q.\n\n**Should I use the sync or unsync flavor?**\n\nBecause Rust compiler checks thread safety for you, it's impossible to\naccidentally use `unsync` where `sync` is required. So, use `unsync` in\nsingle-threaded code and `sync` in multi-threaded. It's easy to switch\nbetween the two if code becomes multi-threaded later.\n\nAt the moment, `unsync` has an additional benefit that reentrant\ninitialization causes a panic, which might be easier to debug than a\ndeadlock.\n\n**Does this crate support async?**\n\nNo, but you can use\n[`async_once_cell`](https://crates.io/crates/async_once_cell) instead.\n\n**Does this crate support `no_std`?**\n\nYes, but with caveats. `OnceCell` is a synchronization primitive which\n_semantically_ relies on blocking. `OnceCell` guarantees that at most one\n`f` will be called to compute the value. If two threads of execution call\n`get_or_init` concurrently, one of them has to wait.\n\nWaiting fundamentally requires OS support. Execution environment needs to\nunderstand who waits on whom to prevent deadlocks due to priority inversion.\nYou _could_ make code to compile by blindly using pure spinlocks, but the\nruntime behavior would be subtly wrong.\n\nGiven these constraints, `once_cell` provides the following options:\n\n- The `race` module provides similar, but distinct synchronization primitive\n  which is compatible with `no_std`. With `race`, the `f` function can be\n  called multiple times by different threads, but only one thread will win\n  to install the value.\n- `critical-section` feature (with a `-`, not `_`) uses `critical_section`\n  to implement blocking.\n\n**Can I bring my own mutex?**\n\nThere is [generic_once_cell](https://crates.io/crates/generic_once_cell) to\nallow just that.\n\n**Should I use `std::cell::OnceCell`, `once_cell`, or `lazy_static`?**\n\nIf you can use `std` version (your MSRV is at least 1.70, and you don't need\nextra features `once_cell` provides), use `std`. Otherwise, use `once_cell`.\nDon't use `lazy_static`.\n\n# Related crates\n\n* Most of this crate's functionality is available in `std` starting with\n  Rust 1.70. See `std::cell::OnceCell` and `std::sync::OnceLock`.\n* [double-checked-cell](https://github.com/niklasf/double-checked-cell)\n* [lazy-init](https://crates.io/crates/lazy-init)\n* [lazycell](https://crates.io/crates/lazycell)\n* [mitochondria](https://crates.io/crates/mitochondria)\n* [lazy_static](https://crates.io/crates/lazy_static)\n* [async_once_cell](https://crates.io/crates/async_once_cell)\n* [generic_once_cell](https://crates.io/crates/generic_once_cell) (bring\n  your own mutex)","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:69:2021","0:164:1571","0:260:1775"],"is_stripped":false}}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[327,4],"end":[407,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:348:1048","0:349:2043","0:350:2070","0:351:2088","0:355:2091"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:282:1048":{"id":"0:282:1048","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[121,4],"end":[123,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:751":{"id":"0:106:751","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[463,8],"end":[465,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[438,4],"end":[452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:97:458","0:98:460"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148:2156":{"id":"0:148:2156","crate_id":0,"name":"force_mut","span":{"filename":"src/lib.rs","begin":[794,8],"end":[803,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and returns a mutable reference to\nthe result.\n\nThis is equivalent to the `DerefMut` impl, but is explicit.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force_mut(&mut lazy), &92);\nassert_eq!(*lazy, 92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:368:2472":{"id":"b:2:2784-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3610-0:333:2498":{"id":"b:2:3610-0:333:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13065:34126":{"id":"2:13065:34126","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12697:14380","str::split":"2:13056:27843","prim@char":"1:12073:454","`DoubleEndedIterator`":"2:8078:131","str::rsplit_terminator":"2:13068:34127"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44277:6392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13118:34139":{"id":"2:13118:34139","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5593:34838":{"id":"5:5593:34838","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2500","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2500","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:34122":{"id":"2:13013:34122","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:82:2041":{"id":"b:2:3610-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[727,4],"end":[756,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:139:1048","0:140:2141"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2784-0:333:2498":{"id":"b:2:2784-0:333:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3610-0:368:2472":{"id":"b:2:3610-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2774-0:374:2481":{"id":"b:2:2774-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2777:3149"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2997:246-0:82:2041":{"id":"a:2:2997:246-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:315:2070":{"id":"0:315:2070","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[215,4],"end":[223,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:2115":{"id":"0:123:2115","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[687,8],"end":[691,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value.\n\nReturns `None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:724":{"id":"0:94:724","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[430,8],"end":[435,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:2091":{"id":"0:288:2091","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[160,4],"end":[165,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"generic":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}},{"type":{"generic":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:294:2483":{"id":"b:2:2784-0:294:2483","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13037:34125":{"id":"2:13037:34125","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44491:6399","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13014:334":{"id":"2:13014:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13015:29527","`u8`":"1:12090:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:124:2131":{"id":"b:2:2471-0:124:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2473:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13074:29562":{"id":"2:13074:29562","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12073:454","str::splitn":"2:13071:29560","self::pattern":"2:12697:14380"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44349:6230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1380,4],"end":[1384,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3222:2027","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:255:604"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13121:34140":{"id":"2:13121:34140","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12717:14378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2474-0:333:2498":{"id":"b:2:2474-0:333:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2476:26096"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[758,4],"end":[838,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["0:146:2150","0:148:2156","0:150:2043","0:151:2050"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13106:34137":{"id":"2:13106:34137","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13129:29351":{"id":"2:13129:29351","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2476:26096":{"id":"2:2476:26096","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2774-0:333:2498":{"id":"b:2:2774-0:333:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2777:3149"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42469:2028-0:333:2498":{"id":"a:2:42469:2028-0:333:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42469:2028-0:374:2481":{"id":"a:2:42469:2028-0:374:2481","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:214:2114":{"id":"0:214:2114","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[1197,8],"end":[1199,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42468:2029-0:216:2131":{"id":"a:2:42468:2029-0:216:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69:2021":{"id":"0:69:2021","crate_id":0,"name":"unsync","span":{"filename":"src/lib.rs","begin":[383,0],"end":[383,14]},"visibility":"public","docs":"Single-threaded version of `OnceCell`.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:82:2041","0:124:2131"],"is_stripped":false}}},"a:2:32890:2815-0:216:2131":{"id":"a:2:32890:2815-0:216:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:235:2141":{"id":"0:235:2141","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[1285,8],"end":[1291,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:640":{"id":"0:345:640","crate_id":0,"name":"drop","span":{"filename":"src/race.rs","begin":[319,8],"end":[324,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:163:60":{"id":"0:163:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[855,8],"end":[857,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:60":{"id":"0:180:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[904,8],"end":[906,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:2070":{"id":"0:273:2070","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[58,4],"end":[65,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"resolved_path":{"name":"NonZeroUsize","id":"2:23480:2471","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42469:2028-0:294:2483":{"id":"a:2:42469:2028-0:294:2483","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42469:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13005:3156":{"id":"2:13005:3156","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178":{"id":"0:178","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[903,4],"end":[907,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:180:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[318,4],"end":[325,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3233:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:345:640"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13034:31766":{"id":"2:13034:31766","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13035:31787"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44501:6400","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:667":{"id":"0:101:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[455,8],"end":[457,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13109:26326":{"id":"2:13109:26326","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13048:3196":{"id":"2:13048:3196","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42346:191","prim@char":"1:12073:454","self::pattern":"2:12697:14380"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12702:6215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:190:751":{"id":"0:190:751","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[935,8],"end":[937,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32890:2815-0:368:2472":{"id":"a:2:32890:2815-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13128:29355":{"id":"2:13128:29355","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13132:30744":{"id":"2:13132:30744","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:919:36032"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13130:29350":{"id":"2:13130:29350","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:458":{"id":"0:186:458","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[919,8],"end":[924,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2048":{"id":"0:199:2048","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[955,8],"end":[957,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[423,4],"end":[427,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:91:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:98:460":{"id":"0:98:460","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[446,8],"end":[451,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:243:2156":{"id":"0:243:2156","crate_id":0,"name":"force_mut","span":{"filename":"src/lib.rs","begin":[1327,8],"end":[1336,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and\nreturns a mutable reference to the result. This is equivalent\nto the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force_mut(&mut lazy), &mut 92);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32890:2815-0:82:2041":{"id":"a:2:32890:2815-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32890:2815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[113,18],"end":[113,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:379:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2474-0:82:2041":{"id":"b:2:2474-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2476:26096"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[409,4],"end":[409,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2784-0:82:2041":{"id":"b:2:2784-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13102:34135":{"id":"2:13102:34135","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:29353":{"id":"5:5611:29353","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13129:29351"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:2043":{"id":"0:150:2043","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[818,8],"end":[820,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get(&lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get(&lazy), Some(&92));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:724":{"id":"0:183:724","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[910,8],"end":[915,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:216:2131":{"id":"b:2:2789-0:216:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2474-0:216:2131":{"id":"b:2:2474-0:216:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2476:26096"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:111:2043":{"id":"0:111:2043","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[483,8],"end":[489,9]},"visibility":"public","docs":"Gets a reference to the underlying value.\n\nReturns `None` if the cell is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:348:1048":{"id":"0:348:1048","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[329,8],"end":[331,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13126:29354":{"id":"2:13126:29354","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:294:2483":{"id":"b:2:2471-0:294:2483","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2473:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1386,4],"end":[1391,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:258:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13020:2189":{"id":"2:13020:2189","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2131":{"id":"0:124:2131","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[714,4],"end":[717,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy: Lazy<i32> = Lazy::new(|| {\n    println!(\"initializing\");\n    92\n});\nprintln!(\"ready\");\nprintln!(\"{}\", *lazy);\nprintln!(\"{}\", *lazy);\n\n// Prints:\n//   ready\n//   initializing\n//   92\n//   92\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"function_pointer":{"decl":{"inputs":[],"output":{"generic":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:136","0:143","a:2:42468:2029-0:124:2131","a:2:2997:246-0:124:2131","a:2:32833:237-0:124:2131","a:2:32890:2815-0:124:2131","b:2:3610-0:124:2131","b:2:2471-0:124:2131","b:2:2789-0:124:2131","b:2:2784-0:124:2131","b:2:2778-0:124:2131","b:2:2774-0:124:2131","b:2:2474-0:124:2131","0:157","0:152","0:129","0:132","0:161"]}}},"5:727:3220":{"id":"5:727:3220","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:376":{"id":"0:376","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[113,9],"end":[113,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:377:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2778-0:333:2498":{"id":"b:2:2778-0:333:2498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:368:2472":{"id":"0:368:2472","crate_id":0,"name":"OnceNonZeroUsize","span":{"filename":"src/race.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:270","a:2:42468:2029-0:368:2472","a:2:2997:246-0:368:2472","a:2:42469:2028-0:368:2472","a:2:32833:237-0:368:2472","a:2:32890:2815-0:368:2472","b:2:3610-0:368:2472","b:2:2471-0:368:2472","b:2:2789-0:368:2472","b:2:2784-0:368:2472","b:2:2778-0:368:2472","b:2:2774-0:368:2472","b:2:2474-0:368:2472","0:370","0:372"]}}},"0:164:1571":{"id":"0:164:1571","crate_id":0,"name":"sync","span":{"filename":"src/lib.rs","begin":[863,0],"end":[863,12]},"visibility":"public","docs":"Thread-safe, blocking version of `OnceCell`.","links":{},"attrs":["#[cfg(any(feature = \"std\", feature = \"critical-section\"))]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:174:2041","0:216:2131"],"is_stripped":false}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[421,4],"end":[421,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42468:2029","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13026:29549":{"id":"2:13026:29549","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13028:29553","str::split_at_mut":"2:13027:29550"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2783:751":{"id":"2:2783:751","crate_id":2,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:1048":{"id":"0:271:1048","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[42,4],"end":[44,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:368:2472":{"id":"b:2:2471-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2473:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13134:34142":{"id":"2:13134:34142","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4794:34142"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44526:6303","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2787:138":{"id":"2:2787:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[468,4],"end":[692,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:109:1048","0:110:2048","0:111:2043","0:112:2050","0:113:2070","0:114:2071","0:115:2088","0:119:2091","0:122:2114","0:123:2115"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:333:2498":{"id":"0:333:2498","crate_id":0,"name":"OnceBox","span":{"filename":"src/race.rs","begin":[301,4],"end":[304,5]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:346","a:2:42468:2029-0:333:2498","a:2:42469:2028-0:333:2498","a:2:32833:237-0:333:2498","a:2:32890:2815-0:333:2498","b:2:3610-0:333:2498","b:2:2471-0:333:2498","b:2:2789-0:333:2498","b:2:2784-0:333:2498","b:2:2778-0:333:2498","b:2:2774-0:333:2498","b:2:2474-0:333:2498","0:337","0:358","0:343","0:340"]}}},"0:255:604":{"id":"0:255:604","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1381,8],"end":[1383,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379:724":{"id":"0:379:724","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[113,18],"end":[113,23]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13029:29554":{"id":"2:13029:29554","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13028:29553"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:1048":{"id":"0:198:1048","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[950,8],"end":[952,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2788:1631":{"id":"2:2788:1631","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:350:2070":{"id":"0:350:2070","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[346,8],"end":[359,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"resolved_path":{"name":"Box","id":"5:294:2500","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Box","id":"5:294:2500","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3610-0:294:2483":{"id":"b:2:3610-0:294:2483","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2789-0:124:2131":{"id":"b:2:2789-0:124:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:260:1775":{"id":"0:260:1775","crate_id":0,"name":"race","span":{"filename":"src/race.rs","begin":[1,0],"end":[419,1]},"visibility":"public","docs":"Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.\n\nIf two threads race to initialize a type from the `race` module, they\ndon't block, execute initialization function together, but only one of\nthem stores the result.\n\nThis module does not require `std` feature.\n\n# Atomic orderings\n\nAll types in this module use `Acquire` and `Release`\n[atomic orderings](Ordering) for all their operations. While this is not\nstrictly necessary for types other than `OnceBox`, it is useful for users as\nit allows them to be certain that after `get` or `get_or_init` returns on\none thread, any side-effects caused by the setter thread prior to them\ncalling `set` or `get_or_init` will be made visible to that thread; without\nit, it's possible for it to appear as if they haven't happened yet from the\ngetter thread's perspective. This is an acceptable tradeoff to make since\n`Acquire` and `Release` have very little performance overhead on most\narchitectures versus `Relaxed`.","links":{"Ordering":"2:42552:196"},"attrs":["#[cfg(feature = \"race\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:368:2472","0:374:2481","0:294:2483","0:324-0:333:2498"],"is_stripped":false}}},"0:351:2088":{"id":"0:351:2088","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[367,8],"end":[376,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3243:143","args":{"parenthesized":{"inputs":[],"output":{"resolved_path":{"name":"Box","id":"5:294:2500","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:2202":{"id":"0:201:2202","crate_id":0,"name":"wait","span":{"filename":"src/lib.rs","begin":[993,8],"end":[1001,9]},"visibility":"public","docs":"Gets the reference to the underlying value, blocking the current\nthread until it is set.\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell = std::sync::Arc::new(OnceCell::new());\nlet t = std::thread::spawn({\n    let cell = std::sync::Arc::clone(&cell);\n    move || cell.set(92).unwrap()\n});\n\n// Returns immediately, but might return None.\nlet _value_or_none = cell.get();\n\n// Will return 92, but might block until the other thread does `.set`.\nlet value: &u32 = cell.wait();\nassert_eq!(*value, 92);\nt.join().unwrap();\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2471-0:174:2041":{"id":"b:2:2471-0:174:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2473:2606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2793:1629":{"id":"2:2793:1629","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2784-0:124:2131":{"id":"b:2:2784-0:124:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:124:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2787:138","2:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:306":{"id":"0:306","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[193,0],"end":[197,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:309:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:281":{"id":"0:281","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[118,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OnceBool","id":"0:374:2481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:282:1048","0:283:2043","0:284:2070","0:285:2088","0:288:2091"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:113:2070":{"id":"0:113:2070","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[530,8],"end":[535,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.set(92), Ok(()));\nassert_eq!(cell.set(62), Err(62));\n\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Result","id":"2:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2789-0:294:2483":{"id":"b:2:2789-0:294:2483","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceRef","id":"0:294:2483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2792:138","2:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5610:9135":{"id":"5:5610:9135","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2050":{"id":"0:246:2050","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[1368,8],"end":[1370,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get_mut(&mut lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["this",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2778-0:216:2131":{"id":"b:2:2778-0:216:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":["2:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[306,4],"end":[310,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceBox","id":"0:333:2498","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:339:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:283:2043":{"id":"0:283:2043","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[127,4],"end":[129,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2774-0:82:2041":{"id":"b:2:2774-0:82:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2777:3149"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2474-0:368:2472":{"id":"b:2:2474-0:368:2472","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32834:2418","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OnceNonZeroUsize","id":"0:368:2472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2476:26096"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97:458":{"id":"0:97:458","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[439,8],"end":[444,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OnceCell","id":"0:82:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225":{"id":"0:225","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1270,4],"end":[1270,74]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"resolved_path":{"name":"OnceCell","id":"0:174:2041","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Lazy","id":"0:216:2131","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13099:34133":{"id":"2:13099:34133","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:729:3222":{"id":"5:729:3222","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:42968:2684":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:40930:9071":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:5502:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:4583:2650":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:5064:7811":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6606:5558":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:31069:31652":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:9095:6728":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:10567:3953":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:872:4120":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:21511:32807":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14177:4732":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10018:21877":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11674:4350":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:3614:5378":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:6381:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:3752:9146":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:23036:2849":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:8282:8462":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4942:7751":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"9:447:20814":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:9107:6730":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:11648:28099":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:8006:8441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:9056:6723":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:925:5906":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:2554:35101":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:40094:2797":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:559:7493":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:40054:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:7539:5365":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:15383:5059":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:8136:5799":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:44349:6230":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:15814:5187":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:11605:4343":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:45211:6433":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:22185:32809":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12543:4465":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:10694:8577":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:3468:32590":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:44295:6393":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:41014:6318":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:44076:6379":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:11134:6227":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:31043:3332":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:46171:6438":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:4050:9149":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:11227:6230":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:4614:5392":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"8:0:2507":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:46402:6447":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:6514:2690":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:41027:6319":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:7111:5646":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:10759:4269":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:16050:4549":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"18:581:4070":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7727:5369":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:4356:2658":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:3283:33540":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:5037:5405":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:31580:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:8306:8466":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:2195:2728":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:44137:6383":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:42535:3235":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:44227:6222":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:44395:6395":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:7775:2737":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"14:165:20899":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:1593:5923":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:839:3234":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:12659:4469":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:14545:4793":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:6278:6611":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:1153:33533":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:38670:2788":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"11:2542:7424":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:7533:31788":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13064:4501":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:7606:6032":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:2854:5349":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:3592:9123":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"11:1917:5925":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:2035:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:7389:8346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:1169:7007":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:44203:6390":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6066:5460":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13674:4620":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:3196:5318":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:437:4125":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:22905:31646":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:80:26072":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:47196:6489":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:9671:21876":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:1978:711":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"5:7360:2866":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13753:4654":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:12043:4411":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:10087:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"14:160:5893":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8389:9176":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:6532:8130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:513:4126":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:7585:14591":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:14111:4707":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:2788:5346":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:3039:2814":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:45028:14666":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:4246:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:15390:5060":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:16165:5278":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:11400:6620":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11269:21927":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:7429:8348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:33682:2773":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:43568:6358":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:42458:2670":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:6510:2689":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:4821:4148":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:3597:4142":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"15:0:2513":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:46816:6466":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:7524:6025":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:11061:6225":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:9858:21892":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6160:20936":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:7537:8409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:364:3873":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7006:5625":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:2728:5343":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:4976:5403":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:10136:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:3871:3918":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:42106:6207":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:8175:5803":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13774:4658":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:10317:4115":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:10887:35136":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:7096:3934":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:1555:5903":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:44045:6376":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:12227:6235":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:11493:4324":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"7:78:20807":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:1699:7640":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:8116:9134":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:13312:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9067:2731":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:811:3918":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:14341:4758":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:1160:5919":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:5817:5422":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:22383:9315":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"16:4641:5393":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:7642:4127":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:4145:3235":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:5831:2398":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:2534:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"0:216:2131":{"crate_id":0,"path":["once_cell","sync","Lazy"],"kind":"struct"},"16:7769:5742":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:11496:3998":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:48244:6532":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:7957:6633":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:43345:5771":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:11214:4299":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8411:6696":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:542:5304":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:3573:29338":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:42402:3234":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:12722:14377":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:12056:26374":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:844:9028":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:4497:3908":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13553:4604":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:4387:2041":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:7535:9027":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:307:1599":{"crate_id":1,"path":["std","thread"],"kind":"module"},"16:7397:35125":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:6410:9321":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:46602:6459":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10877:4271":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:15473:5082":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:12211:14623":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:7366:8328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10116:6738":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:2037:4131":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:46891:6468":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"11:2304:5649":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:5557:7991":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:1671:7627":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:5466:7959":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:6624:2693":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12225:4427":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:9781:21891":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:10915:6720":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:11740:6233":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:5863:21825":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:6729:8222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:40795:6301":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4811:7672":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:5385:4253":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5031:7794":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:4531:5389":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:44544:6302":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:4979:7767":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6650:8199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11071:6718":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:15023:4970":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4864:7715":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:22148:9235":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:954:5912":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5014:7786":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:11559:6584":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:14271:4749":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"18:608:4078":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:1827:6562":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:8454:6590":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:9175:2671":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:14025:4695":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:6763:8233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:15138:4991":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:11392:4317":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:942:5909":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10898:26372":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6317:5520":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:14284:4751":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:8040:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:6900:8277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:6471:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5277:7870":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10828:35130":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:42084:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:48603:6548":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:4882:5400":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:6738:8224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:15356:5052":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:12513:6224":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:7755:5360":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5528:7974":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:5320:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:8202:5372":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:8216:5808":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:7984:8440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11242:4301":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:43823:8562":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"14:187:20906":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:43623:6370":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11497:4325":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11799:4366":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:473:7442":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:15678:5160":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:11103:7315":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:11367:4289":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:47386:6492":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:9325:3612":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:4073:3901":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6976:5622":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:217:2869":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:15748:5175":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:2696:6572":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:560:2734":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:22654:9310":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:10930:3234":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:8496:2859":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:15521:5119":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11898:4378":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:563:4069":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7910:21837":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:7399:3893":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:15992:5241":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:11537:4328":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:867:4119":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:5181:7820":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:10106:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:4235:2398":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:5483:7965":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:14311:4753":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:9204:6614":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"11:1903:5923":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:5723:6605":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:7986:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:45190:6428":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:11022:6224":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6940:5620":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:12092:1651":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13581:4614":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:1724:3881":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:2748:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:2660:3968":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:8351:8477":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4837:7692":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:1517:7524":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:1942:6566":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:3020:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6519:8124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:2591:6571":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:5400:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:14051:4699":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:44510:6401":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13187:4521":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:7446:8353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:491:2167":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7497:5719":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:5479:6601":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:2838:5348":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:41572:6336":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:44197:6237":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:7121:3937":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:5107:5407":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:5769:5421":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:13399:4569":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:1657:2025":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:31607:4070":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:44607:14392":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12175:4420":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:43361:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:14529:4791":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:8188:5806":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:2997:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:828:3884":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:7461:8358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:4222:6169":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10399:4117":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:8575:6710":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:11336:3996":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:10470:6576":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:13999:4692":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:43066:3128":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7379:35119":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14212:4743":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11313:4309":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"7:31:20800":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:40855:14437":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:39304:2790":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:5212:7839":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12485:22023":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6079:5306":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13252:4539":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:2569:6025":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:14912:4952":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:7863:6631":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6802:5599":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:38560:2786":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:5927:5437":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:5655:9220":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:2427:9087":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:912:5920":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12724:21899":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:1731:2398":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"16:7528:5729":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:7711:3918":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:8259:8456":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:9608:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40772:6299":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:1575:6004":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:21528:32811":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:15078:4982":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:14091:4704":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:4932:7745":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:15197:5010":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11467:4323":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:12078:1517":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:1189:33530":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6417:8075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:22605:9102":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:1043:5649":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:3243:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"14:7:5893":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:12711:4097":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:22787:6259":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:1566:20893":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4876:7718":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:16269:4571":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:3806:6006":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:4787:9177":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5344:7891":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:6788:8242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:2101:6006":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:4575:9178":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13986:4691":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:2203:4135":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:40892:6311":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:10256:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:1534:5920":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:6771:3881":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:15249:5019":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:8341:9144":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:256:4119":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:2745:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8311:4117":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:4504:2641":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:1825:3328":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:16198:5285":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:43408:3138":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:870:5904":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:6726:8486":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:14386:4765":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:507:4060":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:41149:6329":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12557:4289":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:11166:4296":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:32817:2650":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:4940:5402":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13568:4610":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6300:5513":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:7363:3168":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:4743:5395":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:13386:6252":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:12080:1634":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:279:3881":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:10787:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:4315:6587":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11583:4338":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13437:4573":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15206:5011":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13946:4683":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:5934:3901":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:12074:1669":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:15376:5058":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:12087:803":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:7546:8412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:2465:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2019:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:9916:21894":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"13:0:2505":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:2469:3918":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:2674:3954":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:7800:2372":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"18:598:35144":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:11359:6763":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:40822:6303":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4824:9163":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:852:3235":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"14:202:14394":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:13424:4572":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13308:4554":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:7999:14597":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:4468:5387":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:3582:9100":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:3475:2398":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:10142:3129":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"0:69:2021":{"crate_id":0,"path":["once_cell","unsync"],"kind":"module"},"17:15569:5120":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:16235:5294":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"11:2403:3235":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:523:7473":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:862:3160":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:1510:7521":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:15655:5147":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:7485:8369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:5212:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11715:4353":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:45259:6435":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:22919:6266":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:46992:6471":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:15222:5015":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:13583:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:10355:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:5756:5416":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:7306:8295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:4723:8343":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:2756:8481":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:359:2749":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:32761:7427":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:41106:6182":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:1950:3563":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:48550:6545":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:7652:6034":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:10138:3127":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:42393:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:9181:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:9990:6346":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:21542:32804":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"5:6961:3929":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"5:3244:5924":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2837:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:12530:4464":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:6895:9227":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:5864:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:3028:7032":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:44821:6420":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:3070:2791":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"5:3660:3235":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:2438:5330":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:2660:5340":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:1610:5926":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:1087:35091":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:0:2516":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:8304:6335":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:2684:5341":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"11:2548:7425":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:34034:2777":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:46718:6462":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:11186:8582":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:5046:7800":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:42479:2742":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:44749:6247":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:11519:6583":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:726:2837":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:10954:21908":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:3525:6581":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"10:36:7430":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5624:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:44519:6244":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:3814:6583":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10997:4279":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:12494:4457":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:42138:9145":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:10347:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:12584:4270":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:11865:4375":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:9176:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:6435:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:46127:6436":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:7757:2751":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"9:178:7298":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:10155:4253":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:521:26085":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:44157:6385":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:44027:6373":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:4870:7716":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:948:5911":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:883:5912":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"11:875:5911":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13015:4450":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:2562:7428":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:6505:8123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:4684:2653":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:21513:32812":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6231:5491":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:924:3889":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:13510:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:640:6555":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6433:5538":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:14356:4762":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:15281:5029":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:13797:4663":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:42693:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:532:7479":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"18:754:4110":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:40978:6314":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:31231:31623":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:6731:3947":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:6982:3983":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:5442:14368":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:4430:2023":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:6071:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:8336:6689":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:10218:4112":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6634:5359":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:6574:5371":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:5831:5425":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:2287:34941":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7433:3160":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8106:6640":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:46479:6451":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:6991:35126":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:10273:7016":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:12408:4447":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"11:102:7031":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:33496:2770":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:5584:6604":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:10251:4113":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:96:26073":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:6466:5542":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:10439:4255":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:41566:6200":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:3032:2812":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:2374:5327":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:4952:7754":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4787:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:0:2506":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:4709:9152":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:40887:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:4919:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:765:26084":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:5995:5447":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:6608:3881":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:3669:4158":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:7952:6632":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:12096:1708":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:44786:6415":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:11655:6623":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:40746:6296":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:2742:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:1971:9067":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:15266:5027":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:6689:3160":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12647:4468":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:7314:8300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:15760:5177":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:5830:2685":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12707:4473":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:16223:5291":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:13497:4586":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8002:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:47852:6528":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:7473:5464":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:2751:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:9102:6729":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:44535:6168":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13344:4561":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12328:4434":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:10738:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:47226:6490":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:643:6557":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"11:800:3901":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:8941:3234":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:8341:8475":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:5736:2398":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:4014:9148":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8432:8328":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:10982:21909":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:11788:4365":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:515:4058":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:2536:7423":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:5352:7892":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:3243:29153":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:9115:6732":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:5121:862":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:0:1541":{"crate_id":1,"path":["std"],"kind":"module"},"2:3132:2783":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:43605:6365":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8428:6698":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:44943:8564":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:13528:3964":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:517:7470":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10757:6582":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:10140:3128":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:48642:6549":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:16105:5262":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"16:2508:5333":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:9061:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:2992:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:2705:9102":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:13334:32797":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:14599:4807":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:9486:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:5307:5408":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:5135:6596":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:4464:2398":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:8288:8463":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5653:8032":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:15324:5041":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:16093:5260":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6460:8093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:6768:8234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:6706:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:44722:6414":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:2748:5344":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:41198:6193":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:44055:6377":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:6928:3916":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:538:4067":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:11172:6228":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:4213:26479":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8963:6606":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:15463:5077":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:1577:3234":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11825:4371":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:484:3966":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:44852:6248":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:3475:5377":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:22467:9317":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:22927:6267":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:6664:8201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:7727:3922":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:40034:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:3473:4141":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:2139:2861":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:41557:2689":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:4637:2652":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:578:7503":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:46323:6444":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:45236:6434":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:41581:3949":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:43080:3129":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:13272:4549":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:22855:7309":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11661:4349":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:10599:3959":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:10095:6564":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:4134:9157":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:8226:21838":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:8197:8453":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5643:8031":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:46969:6470":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:40918:6312":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:40144:6294":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:5477:7964":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:1207:4130":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:7559:5733":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:5499:6602":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:837:5906":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13235:4536":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"11:2443:3901":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:6398:5351":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:10395:6219":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:46217:6440":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:48104:6530":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12353:4443":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:12071:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:6627:2694":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:41136:6189":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:1582:5921":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:46442:6449":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:46770:6464":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12318:4143":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13844:4669":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:42527:3234":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:10044:21897":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:39883:2805":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:46938:6469":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13723:4645":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:2369:5929":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:15734:5168":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12030:4410":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:4971:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:43808:6371":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:3507:6690":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:10534:35135":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:4424:5386":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:2708:5342":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:3058:2772":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:22:738":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:4573:2649":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:15456:5075":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:12095:856":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:10088:3126":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:12657:2834":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:9186:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:11353:6615":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6648:5562":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:12076:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:5336:7890":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:10675:6748":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"11:1066:20892":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:1692:7637":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12887:4485":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:3014:20966":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2487:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:42284:6586":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:1855:1200":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"6:6721:8221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:3851:3160":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7823:21836":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:7579:31647":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:2234:4138":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:44173:6386":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13606:4618":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:7756:9102":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:8294:8464":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:8487:2665":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"11:2383:3234":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:5006:5404":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:12089:800":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:3925:5383":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:1812:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:12508:4460":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:41184:4082":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:3025:3220":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13363:4562":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:48306:6533":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:2548:5335":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:4078:9152":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:4986:4150":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:8250:6679":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:921:5903":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"0:294:2483":{"crate_id":0,"path":["once_cell","race","OnceRef"],"kind":"struct"},"17:15289:5030":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:1494:3160":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:11255:6232":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:670:4091":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:5083:7812":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:12697:14380":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:38725:2789":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13046:4498":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:8294:6318":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:7330:8312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:6353:5311":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:10467:6574":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:5039:7798":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"14:214:5898":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:8552:6365":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:4830:5398":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:10972:3994":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4891:7725":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:11084:6719":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:45139:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:6560:5354":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:2572:5336":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:941:3234":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:6504:5546":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:5367:21823":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:12475:6243":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:8118:5797":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:5398:3881":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4826:9165":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:12093:1652":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"11:434:35092":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:648:9012":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:22620:9311":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:2768:5345":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:42654:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:2736:6573":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:624:6554":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"11:1025:5913":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13526:4595":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4885:7723":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:3449:2800":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:4718:5394":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:22428:9316":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:41036:6320":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:3304:5926":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:22560:9319":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:11042:4282":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13832:4667":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:12086:802":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:40131:6293":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:3791:6005":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:5324:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:8646:6715":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:1066:5915":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:46372:6446":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7321:2669":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:44331:6229":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:12088:804":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:4072:9151":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:21484:32799":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:8590:9215":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:4828:9166":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:7974:6635":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11743:4356":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:9755:21873":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:22491:9102":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:31058:3137":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:6728:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:6689:8209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:11425:8586":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:40829:14436":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:1927:3564":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:6120:21827":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10573:35131":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:1325:5915":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13922:4682":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:43073:3127":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12851:4483":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"14:220:5900":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:32920:2816":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:5781:5356":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:47994:6529":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:15701:5161":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:42272:6349":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:43087:3130":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:1628:7601":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:3520:2657":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:4653:9195":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:3919:6585":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:883:5905":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"11:673:3234":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:44963:8569":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:44036:6374":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:34635:2782":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12792:4219":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11764:4360":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:8384:8572":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:0:2510":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:10390:9107":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:12084:700":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:11419:4269":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:10137:21874":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:3717:3901":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:41074:6178":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:1888:3612":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:7857:5752":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"11:2352:5915":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:5636:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:14038:4697":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:597:4127":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:7369:3160":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:868:3887":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:6278:5498":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12399:4446":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:42849:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:7755:4106":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11510:4326":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:2539:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:8013:6637":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:5002:7780":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:5802:21824":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:9790:32684":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3233:2401":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:4553:9177":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13375:4565":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:6246:3978":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:8038:6005":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"9:502:5985":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:31037:3331":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:47462:6494":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:7168:6732":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:8253:8455":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:1478:3235":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:41599:6203":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:46572:6458":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:43576:6360":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5329:7889":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:10954:3235":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:5219:7840":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:1559:7552":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12443:4452":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:12094:1649":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:1621:7597":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:46424:6448":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"9:0:2508":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:2087:6005":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"11:2151:5915":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7686:5739":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:41083:6324":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:2381:3545":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:6441:8091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:22506:9318":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:12399:6238":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:7339:8318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11524:4327":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:8274:9101":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:5382:7907":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:40729:6168":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:479:7445":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"3:0:481":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:3359:6579":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:48466:6539":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:5677:8044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:4235:9172":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:48527:6544":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12454:4453":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:7139:3984":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"15:394:20928":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:41045:6321":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:931:9028":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:15596:5132":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:46840:6467":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"0:124:2131":{"crate_id":0,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"17:14372:4763":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:14463:4784":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:22518:2419":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:40848:6306":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:14503:4789":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:10150:3132":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:42732:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5250:7853":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5075:5406":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:42469:2028":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:32824:6287":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:33975:2779":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:46341:6445":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:635:4084":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:1829:6563":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:5020:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:12079:1549":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:15126:4988":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:10146:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:8049:2871":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:9074:26337":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:6694:2699":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:14246:4746":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:1581:3160":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:21856:9102":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11812:4369":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:12085:805":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:6670:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:5722:5357":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6026:5300":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"18:573:4060":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:14079:4703":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:10704:6633":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:41055:6323":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:7549:5732":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:3209:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"11:2124:5649":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:12459:6242":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:6915:8288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:8403:6687":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:3026:33885":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:2279:9084":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"11:2231:4335":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"11:1142:5918":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:2038:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:3048:2774":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12433:4450":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:8301:5815":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1639:7609":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:15273:5028":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8504:6707":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:12213:4426":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:32835:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:6022:6181":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6480:5353":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:6665:21830":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:4913:5401":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:3810:5380":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:7693:3986":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:11128:4244":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:22978:31643":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6782:21831":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:856:5909":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6813:5600":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:22520:3545":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"2:42470:2948":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:1463:3234":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:3647:3234":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11443:4322":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"10:44:5931":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:10114:6739":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"6:4965:7759":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:36684:2785":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:3002:2469":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"9:392:20815":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6543:5549":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:15116:4987":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:7566:6026":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:34152:2778":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:22297:9231":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:5960:5444":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:3483:2656":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11662:6623":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:2303:20937":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:14066:4702":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:6018:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5581:7998":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10612:4266":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:2878:6038":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:6550:2697":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:14298:4752":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:48390:6535":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:2112:6007":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"5:7377:6022":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:40124:2799":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:3564:3126":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:15151:4997":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8022:6638":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:15616:5138":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12621:4467":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:10365:6717":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:7642:6033":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:718:4101":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:46748:6463":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:41115:6328":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:14855:4915":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:45220:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7014:21832":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:12097:1259":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:1593:7573":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:2570:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:1723:7649":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:860:5313":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:6447:8092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:21684:9102":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:1503:7519":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:42771:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:5058:2398":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:12928:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:5160:7818":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:22649:9312":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:45198:6430":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11293:21928":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:12388:4445":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:43827:6220":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:1007:5649":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:40841:6305":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:7419:33537":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:3032:7033":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6542:8137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4992:7773":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:3455:2802":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:2453:9097":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"11:1603:5922":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5052:7802":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:12073:454":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13211:4535":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:5392:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:1565:7554":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5020:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:40985:6315":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:45017:6425":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5665:8039":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10915:35134":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:328:7421":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:7947:4199":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:8505:14595":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:5283:7873":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:13548:6255":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:46239:6441":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:44213:4117":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:40806:6302":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:7428:21834":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:9128:26360":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4916:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12768:21878":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:8300:8465":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:4784:9204":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:44939:8563":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:42487:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:2458:5331":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:38615:2787":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:44115:6381":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:3278:5923":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:3036:7034":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:30781:2833":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12464:22022":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:22173:6256":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:832:5920":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:3396:3918":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:14587:4800":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:46624:6460":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12969:4490":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:7469:3160":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:7052:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"13:109:35103":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:545:7485":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:506:2728":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:8187:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:15822:5190":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"15:288:20918":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5390:7912":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"11:2140:5913":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:48352:6534":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:11231:6762":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:10777:9102":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7098:5643":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6962:5362":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:6441:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:46672:6461":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:14994:4964":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:44186:6389":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11567:4332":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5536:7979":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:5041:33041":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:40317:3092":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:15190:5008":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:11634:4347":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:4112:9153":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:1075:5919":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5290:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:22143:9102":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:3237:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:48501:6542":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:15426:5069":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11702:4352":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:15313:5037":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:21686:9233":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5415:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:2528:5334":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:21496:32799":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:6597:8174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12289:4432":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:3276:6574":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:7570:5366":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:2612:5338":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11841:4373":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10068:21880":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:0:2514":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:12040:7318":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:41208:6332":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:538:7482":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13173:4520":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:570:7498":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:7359:8324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4824:7682":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:586:7507":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:4719:8339":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:9261:26477":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:3778:5379":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13814:4666":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:44377:6394":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:15944:4535":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:7653:6767":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:294:2500":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:6811:8248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"13:226:7282":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:3278:6575":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:11095:26364":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:10182:8820":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:403:4122":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:21530:32802":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:4265:2398":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:710:5902":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:15058:4974":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6821:8251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:4771:5396":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:22295:9102":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:15799:5186":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10170:4254":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:44800:14393":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:1107:5917":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:10978:3995":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:5266:7862":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"11:1923:5926":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:669:5999":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:39994:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:40735:6295":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:42543:3160":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:6429:9322":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:1686:7636":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13146:4512":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:11595:4342":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:26457:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:1547:7544":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:2271:6569":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:15400:5063":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:16079:5256":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:7799:5358":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:40948:3941":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:6175:2398":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:4905:9162":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11853:4374":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5236:7847":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1485:7511":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:5530:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6749:5586":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5296:7878":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12076:4414":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:1584:3901":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:4999:9203":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11089:4290":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:6532:5548":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:9795:7313":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5423:7928":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:12929:4488":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:7249:27836":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:1680:7633":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:11773:6234":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:42615:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5191:7827":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14489:4786":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:42324:6212":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:3608:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:15646:5145":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:8896:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:2371:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:4234:6170":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:44674:6412":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9007:9223":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:22574:3545":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:2274:3551":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"9:238:6365":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:15176:5005":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:7780:2739":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12900:4487":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:5742:5412":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:5652:8249":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:5048:2661":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:5260:7859":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:1354:5919":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:9022:9225":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10717:6754":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"18:113:26074":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:14516:4790":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:8992:9224":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:5908:6179":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10905:4272":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:1865:6564":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:2478:5332":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:34093:2776":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:5716:3979":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13877:4677":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:12572:4269":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:12371:4488":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:41550:6199":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:15608:5135":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:7848:9057":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11405:4318":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"9:357:20829":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12264:4430":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:16249:5295":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:4861:14430":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:15102:4986":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:46147:6437":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3272:2795":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:14147:4713":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:10979:6222":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:8317:8470":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10092:21898":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:8029:8452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8317:6222":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:6047:5453":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13089:4502":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6621:8186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:47646:6496":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:6678:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:6680:2698":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"9:330:7431":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:4288:14421":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:6562:8153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:8499:3236":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:4500:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"11:774:5904":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3402:9131":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:4126:9155":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:3445:6336":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:44955:8567":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:46526:6452":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:6756:8232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:4395:6588":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6620:5560":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:481:4059":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"15:327:7279":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:7467:8359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11341:4314":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:3075:2792":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:5588:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:10720:35137":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:7477:3160":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:41159:6330":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:21758:6257":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:589:4071":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:15957:5211":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:44975:7315":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:46461:6450":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4882:3972":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12056:4413":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:15301:5036":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7509:5720":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:1896:3918":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:3018:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:6333:3979":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:4628:2651":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:6055:3979":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:47150:6488":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8377:6586":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:7348:8319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:9222:6734":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:698:4095":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:31126:31649":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:1941:8484":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:7412:8347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2592:5337":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6456:21829":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:3240:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"11:2498:20888":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"5:7409:6023":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:15635:5144":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:44065:6378":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"18:643:4060":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:16259:4566":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:8328:8471":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:2525:7008":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:12107:4269":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:536:2732":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:417:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:5166:6596":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6263:5496":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:21745:9232":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:5709:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:7468:14598":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:9935:3145":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:2902:20964":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:6951:3928":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:3240:29149":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:45149:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:5376:7904":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:12300:22021":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:465:7437":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:2990:2655":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:47072:6472":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10671:35138":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:11099:6226":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:44959:8568":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:24057:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10661:4267":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:32922:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:31005:3330":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6927:5618":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:4924:7743":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:14752:4829":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:15342:5045":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12150:4418":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:0:2515":{"crate_id":17,"path":["object"],"kind":"module"},"1:3237:28314":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:40:2867":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:45247:2864":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:43387:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"11:123:3871":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:2499:2523":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:6588:5550":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:7695:5740":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13899:4678":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:6098:21826":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:9043:2688":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:10144:3130":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:4657:2024":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12949:4143":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12478:4455":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:12702:6215":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:15720:5166":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:44643:6408":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8933:6720":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:23025:2836":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5489:7967":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:6154:3974":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:430:35100":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:12083:698":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:6478:8103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:10148:3131":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:12436:6241":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:44993:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5436:7938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14986:4963":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7741:5370":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:40016:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:531:4064":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6409:8073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:7888:5756":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:2826:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:10501:3951":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:1580:7566":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13485:4585":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12993:21901":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:16151:5275":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:11016:4281":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:150:3869":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:485:7448":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:3029:4153":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11688:4351":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:32810:6286":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:1605:5925":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:16187:5284":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:6342:35120":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:14131:4708":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:8259:5699":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13325:4556":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:4305:3234":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:12422:4448":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:2985:3971":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11121:6614":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"16:7355:5679":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"0:368:2472":{"crate_id":0,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"16:8155:5802":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:11414:6622":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11138:8581":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:9603:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:13024:21902":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:45157:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:2394:5328":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:12695:4472":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:41065:6175":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:9807:21881":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:11026:21910":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:40757:31634":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:15624:5139":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:1340:5913":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"14:40:4536":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:4856:5399":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:5146:7817":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:6629:8187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:9148:7317":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:1707:7644":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5546:7985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10769:35132":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:44481:6398":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:42250:31616":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"11:742:5903":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:39919:2804":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:9286:6215":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13959:4686":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:7580:5734":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:9596:374":{"crate_id":2,"path":["core","sync","atomic"],"kind":"module"},"6:5407:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:14560:4797":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11142:4269":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:2998:5373":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10350:4116":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:10524:4265":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:43370:3137":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11915:21997":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:11574:4335":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:4990:9202":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:4103:3881":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:14876:4923":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12238:4428":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12808:4481":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6636:8188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:735:26083":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:7602:8434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13594:4615":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:2425:3537":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:5897:5431":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:11156:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:11730:4355":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:4352:5385":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:40874:6310":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:3318:6576":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"11:2423:3160":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5370:7902":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:1309:5649":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8890:6717":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:3270:5925":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13473:4582":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:2355:5321":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:2338:5319":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:8008:6570":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:2754:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:1490:7513":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:15168:5002":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:44501:6400":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:46794:6465":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:5208:2683":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:48512:6543":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12201:4425":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:9239:6735":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:10408:3991":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:13292:4550":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:6230:3964":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:5686:5352":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:1525:5905":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:14012:4694":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8907:6718":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:33916:2775":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:43306:8554":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:23005:8487":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:15410:5066":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:6524:8125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:16212:5289":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:32799:6285":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:15931:4521":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:4959:7757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10728:6634":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:6880:8263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12671:4470":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"16:5347:5409":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:15092:4985":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:8078:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:48446:6537":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:725:9102":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:15:2485":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:42344:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:7132:5648":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:44947:8565":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:8980:6722":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:12098:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:44834:6424":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:6491:8112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"0:82:2041":{"crate_id":0,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"1:3357:6578":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:906:3918":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:14475:4785":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:41591:6201":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:23012:2848":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:8241:4106":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6849:5612":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:1588:3918":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:11063:4287":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:12768:14386":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:7712:3988":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:8012:8443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:47496:6495":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5102:7813":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:4269:2858":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:48182:6531":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:0:537":{"crate_id":2,"path":["core"],"kind":"module"},"16:2323:20963":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"5:3249:33536":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:14402:4769":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:42468:2029":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:3438:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"11:687:3235":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13116:4508":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:9984:21896":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"5:2205:6008":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:44245:6227":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:3428:2798":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:6720:6190":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:2758:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14977:4962":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11547:4198":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:7052:5636":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:11354:4315":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:3320:6577":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:44657:6411":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:8271:8458":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2808:5347":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:5445:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10818:4270":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:11291:5982":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:12717:14378":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:12077:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:396:3875":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:10513:2372":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:365:2750":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:5837:2686":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12342:4439":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13412:4571":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:48565:6546":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11153:4270":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"11:1891:3901":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:7516:8395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:34289:2780":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"9:53:7283":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:32834:2418":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:39967:2796":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:15445:5074":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:42122:6209":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:497:7453":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:15769:5181":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"11:1676:3877":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:41127:6188":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:15434:5070":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:9769:724":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"2:4509:2642":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:8093:5794":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:2441:9091":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:46193:6439":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12127:4417":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:10473:6578":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:5446:14369":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:7144:21833":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:44431:6396":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:22871:6261":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"14:0:2512":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12251:4429":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:10883:6604":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:5565:7993":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:2234:7307":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:3237:3234":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13455:4581":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:10875:6631":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:43976:6372":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:4560:5390":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:7469:14599":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:2636:5339":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:1544:5902":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:8073:5793":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:43333:32596":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:4802:5397":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:42576:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7085:5640":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6775:8235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:13387:4566":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:1516:5904":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:917:5902":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:11241:6231":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:3264:4139":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:33310:2771":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:41543:6198":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:4243:9173":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:4062:5384":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"0:0:2260":{"crate_id":0,"path":["once_cell"],"kind":"module"},"16:3842:5381":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:14788:4860":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:651:4060":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4985:7770":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:7604:5368":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:3191:2803":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:8630:6591":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:7493:26430":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:1890:6565":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:12189:4424":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:7633:35124":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11636:6764":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"11:700:3160":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14723:4809":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:896:3901":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11256:4303":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:6657:8200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:3817:6584":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:6714:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:9737:21875":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"12:0:2511":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:32803:5699":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:10766:26361":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:5846:5427":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:10131:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:8111:6641":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:7441:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:40785:6300":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:21739:9229":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:42410:3235":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:2175:21955":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:16032:4539":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:11189:4297":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:23480:2471":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"type_alias"},"6:5122:7815":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:1098:4128":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:4419:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:11227:4300":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:16069:5255":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:8920:6719":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:11859:4002":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:6874:8262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5515:7973":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:47432:6493":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:39963:2794":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:14436:4782":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:15214:5013":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:7096:26327":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11773:4361":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11647:4348":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:7389:3901":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11075:4289":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8957:3160":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:564:7495":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:7964:6634":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:46301:6443":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"11:787:5905":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11051:4284":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7061:5639":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"0:164:1571":{"crate_id":0,"path":["once_cell","sync"],"kind":"module"},"17:16176:5283":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:1057:5913":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:34808:2784":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5598:8005":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:1051:5915":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:2326:5913":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:5361:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:4587:5391":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:9498:3990":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:44971:8571":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:44951:8566":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:7550:2740":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"0:260:1775":{"crate_id":0,"path":["once_cell","race"],"kind":"module"},"16:2418:5329":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9886:21893":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:7618:5735":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6412:21828":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:6698:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:10961:3993":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:48475:6540":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:5400:4254":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:48428:6536":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:2383:3546":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:4251:9174":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:11580:6585":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:7584:8431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7306:35123":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:2468:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:689:4094":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:7815:2640":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13538:4598":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:44967:8570":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:8262:6582":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:15418:5067":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:42418:3160":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:12243:14381":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:1449:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:5465:6597":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11102:4291":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:553:7490":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:5314:7885":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:680:4092":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:13638:2865":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:5864:2687":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:15039:4973":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:6531:6183":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:14449:4783":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5630:8025":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:6379:8048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:44102:6315":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4909:7737":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:42427:2669":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:34462:2781":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"10:0:2509":{"crate_id":10,"path":["adler"],"kind":"module"},"1:2443:9092":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:12091:1650":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:1062:3881":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10284:4114":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2936:20965":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5617:8019":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:726:4104":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11877:4376":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4800:7664":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:14868:4922":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:659:4085":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12278:4431":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:48580:6547":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:14968:4958":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:12045:9017":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:41357:6196":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5134:7816":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:13361:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:7618:3914":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:7449:6024":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:42166:7316":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:5909:2696":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:21737:9102":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:3365:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:4721:8341":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:16121:5267":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:11324:4311":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:44449:6397":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:40958:6313":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:44628:6403":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10419:4121":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1653:7620":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"9:482:20813":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:4122:9154":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:44811:6416":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:5671:8041":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:11817:3561":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:4145:2398":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:10584:3954":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:47308:6491":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:1599:5924":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6895:5614":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:41097:6327":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:40074:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:41005:6317":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8395:6694":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:5225:7843":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:9938:21895":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:22963:31640":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:1818:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:4434:3908":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13972:4383":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:5079:6173":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:7629:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:44526:6303":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:8131:2870":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4264:9175":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:40814:6168":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:7575:8428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:11115:4293":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:40903:31647":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:48486:6541":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7590:5367":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:8003:14596":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:726:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6442:5539":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:5700:5355":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:45136:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:3740:3881":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"11:1910:5924":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:613:35145":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:14260:4748":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:3329:5376":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:6609:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5244:7851":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5306:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:15333:5044":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"14:31:5893":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:8330:6687":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:5472:7962":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:6050:2683":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:10699:8579":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:4502:5388":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:5515:6603":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13855:4670":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12089:4415":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:7561:8419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:22840:6260":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:6562:3901":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:1535:7535":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"11:351:35098":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:9171:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11621:4345":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:43316:3137":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"11:299:7004":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:4020:9147":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:42890:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:14235:4744":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12516:4462":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:10185:4111":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:13509:4587":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:21865:9230":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:42929:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:261:4120":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:3043:2769":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:8543:32683":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:42810:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:706:4097":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"0:174:2041":{"crate_id":0,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"16:6494:5545":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:5415:5410":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:41343:6195":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:21474:4070":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:3080:2793":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:10747:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:6385:5533":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:16138:5269":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:41333:6335":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:22734:6258":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8324:6398":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:3899:5382":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:12072:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6427:5537":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:591:9009":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:1828:3918":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:43593:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:7594:6029":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:12090:1653":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:14414:4771":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"15:306:20919":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:7656:21835":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6758:5587":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:1887:3160":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:8949:6721":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:44277:6392":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"0:374:2481":{"crate_id":0,"path":["once_cell","race","OnceBool"],"kind":"struct"},"17:14189:4734":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6746:8225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:11557:4330":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:6872:5613":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:3443:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:7842:9016":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:5112:7814":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8657:6716":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:6071:7011":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:46271:6442":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:15836:5193":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"9:424:20816":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13738:4649":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:1585:7568":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:5174:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:1496:7516":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:11213:6229":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:32891:2817":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:41168:6191":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10622:35133":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12597:4466":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:32890:2815":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:5457:7953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:15010:4965":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:15582:5126":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7648:5738":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:44128:6382":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:22894:2835":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:39979:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:491:7450":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:22943:31612":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:32833:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:2307:7308":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6948:5361":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:12362:4444":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:48455:6538":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:14575:4450":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5200:7832":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:623:35147":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:7828:9015":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1663:7626":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:4064:9150":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:4467:6589":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:43584:6361":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:21867:6257":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:2706:14446":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:1526:7529":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2576:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10775:26373":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13785:4661":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4897:7728":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:15778:5183":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:5914:5436":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:8265:8457":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:7452:8355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:11386:6619":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13766:4656":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:42552:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:8247:8454":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11431:8587":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:14847:4912":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:8030:6639":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12863:4484":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:42306:6210":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:7813:5744":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:9493:6632":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:5707:3916":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:8036:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:3222:2027":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10710:4268":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:14325:4756":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"11:1883:3234":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12683:4471":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:11755:4359":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:14933:4957":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:15368:5055":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6335:5530":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:43615:6369":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:8640:3234":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:12824:21900":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:44491:6399":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:44147:6384":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:12024:6770":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:2878:5350":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}