{"root":"0:0:2036","crate_version":"1.17.1","includes_private":false,"index":{"0:300:2251":{"id":"0:300:2251","crate_id":0,"name":"OnceRef","span":{"filename":"src/race.rs","begin":[179,0],"end":[182,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:316","a:2:2735:2426-0:300:2251","a:2:2671:217-0:300:2251","a:2:8137:1801-0:300:2251","a:2:8138:1800-0:300:2251","b:2:2234-0:300:2251","b:2:2530-0:300:2251","b:2:3326-0:300:2251","b:2:2237-0:300:2251","b:2:2541-0:300:2251","b:2:2526-0:300:2251","b:2:2536-0:300:2251","0:305","0:308","0:312"]}},"0:207:1823":{"id":"0:207:1823","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[987,8],"end":[989,9]},"visibility":"public","docs":"Gets the mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:236":{"id":"0:236","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1243,4],"end":[1260,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:239:924","0:240:1915"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11818:33307":{"id":"2:11818:33307","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2541-0:383:2249":{"id":"b:2:2541-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5301:33984":{"id":"5:5301:33984","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:278:1816":{"id":"0:278:1816","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[48,4],"end":[51,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:22226:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1238,4],"end":[1238,74]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:204:1821":{"id":"0:204:1821","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[923,8],"end":[925,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112:1821":{"id":"0:112:1821","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[448,8],"end":[450,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:179:1814":{"id":"b:2:2234-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2236:2375"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2536-0:179:1814":{"id":"b:2:2536-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3326-0:221:1905":{"id":"b:2:3326-0:221:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11843:30806":{"id":"2:11843:30806","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11842:30828"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:51002:5742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11817:33306":{"id":"2:11817:33306","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2685:225-0:383:2249":{"id":"a:2:2685:225-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11891:2385":{"id":"2:11891:2385","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"2:11891:2385","prim@char":"1:11838:409","self::pattern":"2:11516:13252","`DoubleEndedIterator`":"2:7123:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50923:5737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11885:33315":{"id":"2:11885:33315","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:686:2996":{"id":"5:686:2996","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:33332":{"id":"2:11941:33332","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4496:33332"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:51036:5644","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:687:2997":{"id":"5:687:2997","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:210:1844":{"id":"0:210:1844","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[1048,8],"end":[1055,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:209:1843"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3326-0:339:2266":{"id":"b:2:3326-0:339:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2237-0:179:1814":{"id":"b:2:2237-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2239:23863"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11876:33314":{"id":"2:11876:33314","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11516:13252","prim@char":"1:11838:409","str::split_terminator":"2:11873:33313","str::split":"2:11864:25581"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50787:5734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11536:13250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:199":{"id":"0:199","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[914,4],"end":[914,37]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2305:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2305:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:152:1816":{"id":"0:152:1816","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[785,8],"end":[787,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get(&lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get(&lazy), Some(&92));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:377:2240":{"id":"0:377:2240","crate_id":0,"name":"OnceNonZeroUsize","span":{"filename":"src/race.rs","begin":[35,0],"end":[37,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:276","a:2:2735:2426-0:377:2240","a:2:2671:217-0:377:2240","a:2:2685:225-0:377:2240","a:2:8137:1801-0:377:2240","a:2:8138:1800-0:377:2240","b:2:2234-0:377:2240","b:2:2530-0:377:2240","b:2:3326-0:377:2240","b:2:2237-0:377:2240","b:2:2541-0:377:2240","b:2:2526-0:377:2240","b:2:2536-0:377:2240","0:381","0:379"]}},"0:212:1860":{"id":"0:212:1860","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[1083,8],"end":[1092,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell\nwas empty.\n\nMany threads may call `get_or_init` concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. The\nexact outcome is unspecified. Current implementation deadlocks, but\nthis may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11907:33322":{"id":"2:11907:33322","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11842:30828":{"id":"2:11842:30828","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11843:30806"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50993:5741","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11850:25592":{"id":"2:11850:25592","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11516:13252","prim@char":"1:11838:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[34,9],"end":[34,16]},"visibility":{"restricted":{"parent":"0:266:1575","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2577:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:380:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2671:217-0:221:1905":{"id":"a:2:2671:217-0:221:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2685:225-0:126:1905":{"id":"a:2:2685:225-0:126:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"a:2:8137:1801-0:383:2249":{"id":"a:2:8137:1801-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11844:29683":{"id":"2:11844:29683","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50973:5739","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2530-0:377:2240":{"id":"b:2:2530-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11867:25583":{"id":"2:11867:25583","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11838:409","self::pattern":"2:11516:13252"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11341:5565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3328:1452":{"id":"2:3328:1452","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:47068:5634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179:1814":{"id":"0:179:1814","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[869,4],"end":[869,35]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.\n\n`OnceCell` provides `&` references to the contents without RAII guards.\n\nReading a non-`None` value out of `OnceCell` establishes a\nhappens-before relationship with a corresponding write. For example, if\nthread A initializes the cell with `get_or_init(f)`, and thread B\nsubsequently reads the result of this call, B also observes all the side\neffects of `f`.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<String> = OnceCell::new();\nassert!(CELL.get().is_none());\n\nstd::thread::spawn(|| {\n    let value: &String = CELL.get_or_init(|| {\n        \"Hello, World!\".to_string()\n    });\n    assert_eq!(value, \"Hello, World!\");\n}).join().unwrap();\n\nlet value: Option<&String> = CELL.get();\nassert!(value.is_some());\nassert_eq!(value.unwrap().as_str(), \"Hello, World!\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:201","a:2:2735:2426-0:179:1814","a:2:2671:217-0:179:1814","a:2:2685:225-0:179:1814","a:2:8137:1801-0:179:1814","a:2:8138:1800-0:179:1814","b:2:2234-0:179:1814","b:2:2533-0:179:1814","b:2:2530-0:179:1814","b:2:3326-0:179:1814","b:2:2237-0:179:1814","b:2:2541-0:179:1814","b:2:2526-0:179:1814","b:2:2536-0:179:1814","b:5:683-0:179:1814","0:193","0:196","0:183","0:199","0:189","0:186"]}},"5:5304:24169":{"id":"5:5304:24169","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11936:24172"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11839:5585":{"id":"2:11839:5585","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11838:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50689:5577","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:116:1844":{"id":"0:116:1844","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[524,8],"end":[536,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:115:1843"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:192:415":{"id":"0:192:415","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[894,8],"end":[899,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2735:2426-0:300:2251":{"id":"a:2:2735:2426-0:300:2251","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11824:33309":{"id":"2:11824:33309","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2530-0:221:1905":{"id":"b:2:2530-0:221:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[814,4],"end":[819,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2920:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:162:543"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:108:680":{"id":"0:108:680","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[436,8],"end":[438,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:364":{"id":"0:364","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[409,4],"end":[409,54]},"visibility":{"restricted":{"parent":"0:331:2265","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2237-0:339:2266":{"id":"b:2:2237-0:339:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2239:23863"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:685:2995":{"id":"5:685:2995","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:2526-0:84:1814":{"id":"b:2:2526-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2529:2925"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5302:33985":{"id":"5:5302:33985","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:2268","`String`":"5:7156:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11820:33308":{"id":"2:11820:33308","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11818:33307"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:33328":{"id":"2:11926:33328","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11838:409","self::pattern":"2:11516:13252"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:219:1887":{"id":"0:219:1887","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[1165,8],"end":[1167,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11838:25574":{"id":"2:11838:25574","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11837:25573"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[877,4],"end":[884,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:188:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[185,0],"end":[185,51]},"visibility":{"restricted":{"parent":"0:266:1575","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11833:25549":{"id":"2:11833:25549","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9698:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9698:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:377:2240":{"id":"b:2:2234-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:2375"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:248:1931":{"id":"0:248:1931","crate_id":0,"name":"force_mut","span":{"filename":"src/lib.rs","begin":[1295,8],"end":[1298,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and\nreturns a mutable reference to the result. This is equivalent\nto the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force_mut(&mut lazy), &mut 92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2536-0:221:1905":{"id":"b:2:2536-0:221:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2234-0:339:2266":{"id":"b:2:2234-0:339:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2236:2375"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:382:656":{"id":"0:382:656","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[34,18],"end":[34,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8964:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8953:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:24172":{"id":"2:11936:24172","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:330-0:339:2266":{"id":"0:330-0:339:2266","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[291,0],"end":[291,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::once_box::OnceBox","name":"OnceBox","id":"0:339:2266","glob":false}},"b:2:2237-0:377:2240":{"id":"b:2:2237-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:23863"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:262":{"id":"0:262","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1349,4],"end":[1354,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:2577:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2577:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:264:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2671:217-0:383:2249":{"id":"a:2:2671:217-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:100:415":{"id":"0:100:415","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[419,8],"end":[424,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:198:601":{"id":"0:198:601","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[909,8],"end":[911,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:220:1889":{"id":"0:220:1889","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1185,8],"end":[1187,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value. Returns\n`None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2685:225-0:377:2240":{"id":"a:2:2685:225-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11905:33321":{"id":"2:11905:33321","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:239:924":{"id":"0:239:924","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[1246,8],"end":[1248,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:150:1931":{"id":"0:150:1931","crate_id":0,"name":"force_mut","span":{"filename":"src/lib.rs","begin":[767,8],"end":[770,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and returns a mutable reference to\nthe result.\n\nThis is equivalent to the `DerefMut` impl, but is explicit.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force_mut(&mut lazy), &92);\nassert_eq!(*lazy, 92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2530-0:383:2249":{"id":"b:2:2530-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[193,0],"end":[197,1]},"visibility":{"restricted":{"parent":"0:266:1575","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2577:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:315:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[113,9],"end":[113,16]},"visibility":{"restricted":{"parent":"0:266:1575","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2577:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:386:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8137:1801-0:221:1905":{"id":"a:2:8137:1801-0:221:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2671:217-0:339:2266":{"id":"a:2:2671:217-0:339:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:388:656":{"id":"0:388:656","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[113,18],"end":[113,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8964:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8953:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:345:656":{"id":"0:345:656","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[307,8],"end":[309,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"core::fmt::Formatter","id":"2:8964:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"core::fmt::Result","id":"2:8953:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11938:33331":{"id":"2:11938:33331","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4498:33331"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:51018:5652","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11879:25587":{"id":"2:11879:25587","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11882:25589","self::pattern":"2:11516:13252","prim@char":"1:11838:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50823:5570","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[318,4],"end":[325,5]},"visibility":{"restricted":{"parent":"0:331:2265","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2931:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:351:577"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2541-0:84:1814":{"id":"b:2:2541-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2735:2426-0:179:1814":{"id":"a:2:2735:2426-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:126:1905":{"id":"0:126:1905","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[687,4],"end":[690,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy: Lazy<i32> = Lazy::new(|| {\n    println!(\"initializing\");\n    92\n});\nprintln!(\"ready\");\nprintln!(\"{}\", *lazy);\nprintln!(\"{}\", *lazy);\n\n// Prints:\n//   ready\n//   initializing\n//   92\n//   92\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:138","0:145","a:2:2735:2426-0:126:1905","a:2:2671:217-0:126:1905","a:2:2685:225-0:126:1905","a:2:8137:1801-0:126:1905","b:2:2234-0:126:1905","b:2:2530-0:126:1905","b:2:3326-0:126:1905","b:2:2237-0:126:1905","b:2:2541-0:126:1905","b:2:2526-0:126:1905","b:2:2536-0:126:1905","0:154","0:159","0:134","0:131","0:164"]}},"b:2:2536-0:383:2249":{"id":"b:2:2536-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:321:1843":{"id":"0:321:1843","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[215,4],"end":[223,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[871,4],"end":[875,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2577:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:185:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:351:577":{"id":"0:351:577","crate_id":0,"name":"drop","span":{"filename":"src/race.rs","begin":[319,8],"end":[324,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:377:2240":{"id":"b:2:2526-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:2925"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2671:217-0:179:1814":{"id":"a:2:2671:217-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2234-0:221:1905":{"id":"b:2:2234-0:221:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2236:2375"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2536-0:339:2266":{"id":"b:2:2536-0:339:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11847:25591":{"id":"2:11847:25591","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11838:409","self::pattern":"2:11516:13252"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:300:2251":{"id":"b:2:2234-0:300:2251","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2236:2375"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11911:33325":{"id":"2:11911:33325","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11516:13252","prim@char":"1:11838:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11541:13249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2671:217-0:300:2251":{"id":"a:2:2671:217-0:300:2251","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:189":{"id":"0:189","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[886,4],"end":[900,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:191:413","0:192:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8137:1801-0:377:2240":{"id":"a:2:8137:1801-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:137:656":{"id":"0:137:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[695,8],"end":[697,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8964:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8953:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11840:5751":{"id":"2:11840:5751","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11838:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50695:5731","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:339:2266":{"id":"0:339:2266","crate_id":0,"name":"OnceBox","span":{"filename":"src/race.rs","begin":[301,4],"end":[304,5]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:352","a:2:2735:2426-0:339:2266","a:2:2671:217-0:339:2266","a:2:8137:1801-0:339:2266","a:2:8138:1800-0:339:2266","b:2:2234-0:339:2266","b:2:2530-0:339:2266","b:2:3326-0:339:2266","b:2:2237-0:339:2266","b:2:2541-0:339:2266","b:2:2526-0:339:2266","b:2:2536-0:339:2266","0:343","0:364","0:346","0:349"]}},"0:216:1864":{"id":"0:216:1864","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[1120,8],"end":[1134,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and\nthe cell remains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`.\nThe exact outcome is unspecified. Current implementation\ndeadlocks, but this may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277:924":{"id":"0:277:924","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[42,4],"end":[44,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:33320":{"id":"2:11903:33320","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11827:1816":{"id":"2:11827:1816","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48731:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9698:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9698:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11815:797":{"id":"2:11815:797","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11838:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:279:1843":{"id":"0:279:1843","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[58,4],"end":[65,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:22226:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2536-0:126:1905":{"id":"b:2:2536-0:126:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:311:656":{"id":"0:311:656","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[188,4],"end":[190,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"core::fmt::Formatter","id":"2:8964:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"core::fmt::Result","id":"2:8953:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:84:1814":{"id":"b:2:2237-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2239:23863"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11816:2932":{"id":"2:11816:2932","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[113,18],"end":[113,23]},"visibility":{"restricted":{"parent":"0:266:1575","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:388:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2535:680":{"id":"2:2535:680","crate_id":2,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"primitive","inner":"never"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:221:1905":{"id":"0:221:1905","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[1223,4],"end":[1226,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\nThis type is thread-safe and can be used in statics.\n\n# Example\n\n```\nuse std::collections::HashMap;\n\nuse once_cell::sync::Lazy;\n\nstatic HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {\n    println!(\"initializing\");\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    m\n});\n\nfn main() {\n    println!(\"ready\");\n    std::thread::spawn(|| {\n        println!(\"{:?}\", HASHMAP.get(&13));\n    }).join().unwrap();\n    println!(\"{:?}\", HASHMAP.get(&74));\n\n    // Prints:\n    //   ready\n    //   initializing\n    //   Some(\"Spica\")\n    //   Some(\"Hoyten\")\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:236","0:243","a:2:2735:2426-0:221:1905","a:2:2671:217-0:221:1905","a:2:8137:1801-0:221:1905","b:2:2234-0:221:1905","b:2:2530-0:221:1905","b:2:3326-0:221:1905","b:2:2237-0:221:1905","b:2:2541-0:221:1905","b:2:2526-0:221:1905","b:2:2536-0:221:1905","0:230","0:257","0:262","0:252","0:226","0:233"]}},"2:2539:127":{"id":"2:2539:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[731,4],"end":[805,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:148:1925","0:150:1931","0:152:1816","0:153:1823"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:113:1816":{"id":"0:113:1816","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[456,8],"end":[462,9]},"visibility":"public","docs":"Gets a reference to the underlying value.\n\nReturns `None` if the cell is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:383:2249":{"id":"b:2:2526-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2529:2925"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3326-0:300:2251":{"id":"b:2:3326-0:300:2251","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2530-0:84:1814":{"id":"b:2:2530-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11860:2931":{"id":"2:11860:2931","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:11838:409","self::pattern":"2:11516:13252","`None`":"2:48731:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11536:13250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5305:24170":{"id":"5:5305:24170","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11937:24173"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11914:33326":{"id":"2:11914:33326","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11516:13252","prim@char":"1:11838:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11829:1823":{"id":"2:11829:1823","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48731:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9698:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9698:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8138:1800-0:339:2266":{"id":"a:2:8138:1800-0:339:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11882:25589":{"id":"2:11882:25589","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11838:409","str::splitn":"2:11879:25587","self::pattern":"2:11516:13252"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50841:5571","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11536:13250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2735:2426-0:126:1905":{"id":"a:2:2735:2426-0:126:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2530-0:300:2251":{"id":"b:2:2530-0:300:2251","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8138:1800-0:179:1814":{"id":"a:2:8138:1800-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2236:2375":{"id":"2:2236:2375","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:308":{"id":"0:308","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[187,0],"end":[191,1]},"visibility":{"restricted":{"parent":"0:266:1575","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:311:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:142:1915":{"id":"0:142:1915","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[722,8],"end":[728,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[692,4],"end":[692,94]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2545:1438":{"id":"2:2545:1438","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11873:33313":{"id":"2:11873:33313","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"2:11864:25581","prim@char":"1:11838:409","self::pattern":"2:11516:13252","`DoubleEndedIterator`":"2:7123:120","str::rsplit_terminator":"2:11876:33314"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50769:5733","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3326-0:179:1814":{"id":"b:2:3326-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:166:59":{"id":"0:166:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[823,8],"end":[825,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:601":{"id":"0:103:601","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[428,8],"end":[430,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2541-0:339:2266":{"id":"b:2:2541-0:339:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2671:217-0:84:1814":{"id":"a:2:2671:217-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:196":{"id":"0:196","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[908,4],"end":[912,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2300:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2300:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:198:601"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:348:59":{"id":"0:348:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[313,8],"end":[315,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:7938":{"id":"2:11940:7938","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4499:7938"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:51027:5515","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:109":{"id":"0:109","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[441,4],"end":[665,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:111:924","0:112:1821","0:113:1816","0:114:1823","0:115:1843","0:116:1844","0:117:1860","0:121:1864","0:124:1887","0:125:1889"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3326-0:84:1814":{"id":"b:2:3326-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:380:59":{"id":"0:380:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[34,9],"end":[34,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:33324":{"id":"2:11910:33324","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:1816":{"id":"0:320:1816","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[206,4],"end":[209,5]},"visibility":"public","docs":"Gets a reference to the underlying value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2735:2426-0:339:2266":{"id":"a:2:2735:2426-0:339:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[427,4],"end":[431,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2300:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2300:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:103:601"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11888:33316":{"id":"2:11888:33316","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11536:13250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:276":{"id":"0:276","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[39,0],"end":[110,1]},"visibility":{"restricted":{"parent":"0:266:1575","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:277:924","0:278:1816","0:279:1843","0:280:1860","0:284:1864"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2234-0:383:2249":{"id":"b:2:2234-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:2375"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5286:33981":{"id":"5:5286:33981","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:24269":{"id":"2:11917:24269","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11838:409","self::pattern":"2:11516:13252"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:33330":{"id":"2:11932:33330","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11478:126","`FromStr`":"2:11477:2623"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11477:2623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11477:2623","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:114:1823":{"id":"0:114:1823","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[481,8],"end":[484,9]},"visibility":"public","docs":"Gets a mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\n*cell.get_mut().unwrap() = 93;\nassert_eq!(cell.get(), Some(&93));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,4],"end":[439,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:108:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:229:656":{"id":"0:229:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1229,8],"end":[1231,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8964:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8953:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:33329":{"id":"2:11929:33329","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11838:409","self::pattern":"2:11516:13252"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11536:13250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5287:1888":{"id":"5:5287:1888","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11825:310":{"id":"2:11825:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:11855:1460","str::as_mut_ptr":"2:11826:25550"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:221:1905":{"id":"b:2:2237-0:221:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2239:23863"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11856:2972":{"id":"2:11856:2972","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48731:176","self::pattern":"2:11516:13252","prim@char":"1:11838:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:355:1816":{"id":"0:355:1816","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[334,8],"end":[340,9]},"visibility":"public","docs":"Gets a reference to the underlying value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96:656":{"id":"0:96:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[403,8],"end":[408,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8964:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8953:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:158:541":{"id":"0:158:541","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[809,8],"end":[811,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:25594":{"id":"2:11920:25594","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11516:13252","prim@char":"1:11838:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11536:13250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1262,4],"end":[1333,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:246:1925","0:248:1931","0:250:1816","0:251:1823"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:288:924":{"id":"0:288:924","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[121,4],"end":[123,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[433,4],"end":[433,37]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2305:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2305:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2735:2426-0:383:2249":{"id":"a:2:2735:2426-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2239:23863":{"id":"2:2239:23863","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5285":{"id":"5:5285","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5196:1364","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5286:33981","5:5287:1888","5:5290:33982","5:5293:33983","5:5301:33984","5:5302:33985","5:5303:8054","5:5304:24169","5:5305:24170"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:322:1860":{"id":"0:322:1860","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[231,4],"end":[240,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:193":{"id":"0:193","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[902,4],"end":[906,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:195:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2544:127":{"id":"2:2544:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39828:6458","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:280:1860":{"id":"0:280:1860","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[73,4],"end":[82,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:22226:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:22226:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:383:2249":{"id":"b:2:2237-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:23863"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2526-0:300:2251":{"id":"b:2:2526-0:300:2251","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2529:2925"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:255:227":{"id":"0:255:227","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1336,8],"end":[1336,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:383:2249":{"id":"0:383:2249","crate_id":0,"name":"OnceBool","span":{"filename":"src/race.rs","begin":[114,0],"end":[116,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:287","a:2:2735:2426-0:383:2249","a:2:2671:217-0:383:2249","a:2:2685:225-0:383:2249","a:2:8137:1801-0:383:2249","a:2:8138:1800-0:383:2249","b:2:2234-0:383:2249","b:2:2530-0:383:2249","b:2:3326-0:383:2249","b:2:2237-0:383:2249","b:2:2541-0:383:2249","b:2:2526-0:383:2249","b:2:2536-0:383:2249","0:387","0:385"]}},"0:284:1864":{"id":"0:284:1864","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[91,4],"end":[109,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:22226:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:22226:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:352":{"id":"0:352","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[327,4],"end":[407,5]},"visibility":{"restricted":{"parent":"0:331:2265","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:354:924","0:355:1816","0:356:1843","0:357:1860","0:361:1864"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5303:8054":{"id":"5:5303:8054","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:84:1814":{"id":"b:2:2234-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2236:2375"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:84:1814":{"id":"0:84:1814","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[384,4],"end":[387,5]},"visibility":"public","docs":"A cell which can be written to only once. It is not thread safe.\n\nUnlike [`std::cell::RefCell`], a `OnceCell` provides simple `&`\nreferences to the contents.\n\n[`std::cell::RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nlet value: &String = cell.get_or_init(|| {\n    \"Hello, World!\".to_string()\n});\nassert_eq!(value, \"Hello, World!\");\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:109","a:2:2735:2426-0:84:1814","a:2:2671:217-0:84:1814","a:2:2685:225-0:84:1814","b:2:2234-0:84:1814","b:2:2533-0:84:1814","b:2:2530-0:84:1814","b:2:3326-0:84:1814","b:2:2237-0:84:1814","b:2:2541-0:84:1814","b:2:2526-0:84:1814","b:2:2536-0:84:1814","b:5:683-0:84:1814","0:101","0:87","0:104","0:89","0:97","0:106","0:94","0:91"]}},"b:2:2541-0:221:1905":{"id":"b:2:2541-0:221:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:356:1843":{"id":"0:356:1843","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[346,8],"end":[359,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2533-0:179:1814":{"id":"b:2:2533-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2535:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[306,4],"end":[310,5]},"visibility":{"restricted":{"parent":"0:331:2265","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:345:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11837:25573":{"id":"2:11837:25573","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11838:25574"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[394,4],"end":[394,53]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:354:924":{"id":"0:354:924","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[329,8],"end":[331,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:24171":{"id":"2:11935:24171","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:316":{"id":"0:316","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[199,0],"end":[288,1]},"visibility":{"restricted":{"parent":"0:266:1575","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:319:924","0:320:1816","0:321:1843","0:322:1860","0:326:1864"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:290:1843":{"id":"0:290:1843","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[136,4],"end":[138,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:357:1860":{"id":"0:357:1860","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[367,8],"end":[376,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:294:1864":{"id":"0:294:1864","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[160,4],"end":[165,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:208:1963":{"id":"0:208:1963","crate_id":0,"name":"get_unchecked","span":{"filename":"src/lib.rs","begin":[999,8],"end":[1001,9]},"visibility":"public","docs":"Get the reference to the underlying value, without checking if the\ncell is initialized.\n\n# Safety\n\nCaller must ensure that the cell is in initialized state, and that\nthe contents are acquired by (synchronized to) this thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5293:33983":{"id":"5:5293:33983","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:205:1816":{"id":"0:205:1816","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[931,8],"end":[938,9]},"visibility":"public","docs":"Gets the reference to the underlying value.\n\nReturns `None` if the cell is empty, or being initialized. This\nmethod never blocks.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11836:33311":{"id":"2:11836:33311","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11844:1364","crate::ops::IndexMut":"2:2994:2588","str::slice_unchecked":"2:11835:33310"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:209:1843":{"id":"0:209:1843","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[1026,8],"end":[1031,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<i32> = OnceCell::new();\n\nfn main() {\n    assert!(CELL.get().is_none());\n\n    std::thread::spawn(|| {\n        assert_eq!(CELL.set(92), Ok(()));\n    }).join().unwrap();\n\n    assert_eq!(CELL.set(62), Err(62));\n    assert_eq!(CELL.get(), Some(&92));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:266:1575":{"id":"0:266:1575","crate_id":0,"name":"race","span":{"filename":"src/race.rs","begin":[1,0],"end":[419,1]},"visibility":"public","docs":"Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.\n\nIf two threads race to initialize a type from the `race` module, they\ndon't block, execute initialization function together, but only one of\nthem stores the result.\n\nThis module does not require `std` feature.\n\n# Atomic orderings\n\nAll types in this module use `Acquire` and `Release`\n[atomic orderings](Ordering) for all their operations. While this is not\nstrictly necessary for types other than `OnceBox`, it is useful for users as\nit allows them to be certain that after `get` or `get_or_init` returns on\none thread, any side-effects caused by the setter thread prior to them\ncalling `set` or `get_or_init` will be made visible to that thread; without\nit, it's possible for it to appear as if they haven't happened yet from the\ngetter thread's perspective. This is an acceptable tradeoff to make since\n`Acquire` and `Release` have very little performance overhead on most\narchitectures versus `Relaxed`.","links":{"Ordering":"2:48941:180"},"attrs":["#[cfg(feature = \"race\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:377:2240","0:383:2249","0:300:2251","0:330-0:339:2266"],"is_stripped":false}},"0:361:1864":{"id":"0:361:1864","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[385,8],"end":[406,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2268","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[694,4],"end":[698,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:137:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:191:413":{"id":"0:191:413","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[887,8],"end":[892,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2541-0:377:2240":{"id":"b:2:2541-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3326-0:377:2240":{"id":"b:2:3326-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2685:225-0:179:1814":{"id":"a:2:2685:225-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[402,4],"end":[409,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:96:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2536-0:84:1814":{"id":"b:2:2536-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11845:33312":{"id":"2:11845:33312","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50983:5740","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:319:924":{"id":"0:319:924","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[201,4],"end":[203,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:124:1887":{"id":"0:124:1887","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[640,8],"end":[642,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[700,4],"end":[729,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:141:924","0:142:1915"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:256:541":{"id":"0:256:541","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1337,8],"end":[1339,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11826:25550":{"id":"2:11826:25550","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11855:1460"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:2036":{"id":"0:0:2036","crate_id":0,"name":"once_cell","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1387,1]},"visibility":"public","docs":"# Overview\n\n`once_cell` provides two new cell-like types, [`unsync::OnceCell`] and [`sync::OnceCell`]. A `OnceCell`\nmight store arbitrary non-`Copy` types, can be assigned to at most once and provides direct access\nto the stored contents. The core API looks *roughly* like this (and there's much more inside, read on!):\n\n```rust,ignore\nimpl<T> OnceCell<T> {\n    const fn new() -> OnceCell<T> { ... }\n    fn set(&self, value: T) -> Result<(), T> { ... }\n    fn get(&self) -> Option<&T> { ... }\n}\n```\n\nNote that, like with [`RefCell`] and [`Mutex`], the `set` method requires only a shared reference.\nBecause of the single assignment restriction `get` can return a `&T` instead of `Ref<T>`\nor `MutexGuard<T>`.\n\nThe `sync` flavor is thread-safe (that is, implements the [`Sync`] trait), while the `unsync` one is not.\n\n[`unsync::OnceCell`]: unsync/struct.OnceCell.html\n[`sync::OnceCell`]: sync/struct.OnceCell.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n[`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n# Recipes\n\n`OnceCell` might be useful for a variety of patterns.\n\n## Safe Initialization of Global Data\n\n```rust\nuse std::{env, io};\n\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct Logger {\n    // ...\n}\nstatic INSTANCE: OnceCell<Logger> = OnceCell::new();\n\nimpl Logger {\n    pub fn global() -> &'static Logger {\n        INSTANCE.get().expect(\"logger is not initialized\")\n    }\n\n    fn from_cli(args: env::Args) -> Result<Logger, std::io::Error> {\n       // ...\n#      Ok(Logger {})\n    }\n}\n\nfn main() {\n    let logger = Logger::from_cli(env::args()).unwrap();\n    INSTANCE.set(logger).unwrap();\n    // use `Logger::global()` from now on\n}\n```\n\n## Lazy Initialized Global Data\n\nThis is essentially the `lazy_static!` macro, but without a macro.\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\n\nuse once_cell::sync::OnceCell;\n\nfn global_data() -> &'static Mutex<HashMap<i32, String>> {\n    static INSTANCE: OnceCell<Mutex<HashMap<i32, String>>> = OnceCell::new();\n    INSTANCE.get_or_init(|| {\n        let mut m = HashMap::new();\n        m.insert(13, \"Spica\".to_string());\n        m.insert(74, \"Hoyten\".to_string());\n        Mutex::new(m)\n    })\n}\n```\n\nThere are also the [`sync::Lazy`] and [`unsync::Lazy`] convenience types to streamline this pattern:\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\nuse once_cell::sync::Lazy;\n\nstatic GLOBAL_DATA: Lazy<Mutex<HashMap<i32, String>>> = Lazy::new(|| {\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    Mutex::new(m)\n});\n\nfn main() {\n    println!(\"{:?}\", GLOBAL_DATA.lock().unwrap());\n}\n```\n\nNote that the variable that holds `Lazy` is declared as `static`, *not*\n`const`. This is important: using `const` instead compiles, but works wrong.\n\n[`sync::Lazy`]: sync/struct.Lazy.html\n[`unsync::Lazy`]: unsync/struct.Lazy.html\n\n## General purpose lazy evaluation\n\nUnlike `lazy_static!`, `Lazy` works with local variables.\n\n```rust\nuse once_cell::unsync::Lazy;\n\nfn main() {\n    let ctx = vec![1, 2, 3];\n    let thunk = Lazy::new(|| {\n        ctx.iter().sum::<i32>()\n    });\n    assert_eq!(*thunk, 6);\n}\n```\n\nIf you need a lazy field in a struct, you probably should use `OnceCell`\ndirectly, because that will allow you to access `self` during initialization.\n\n```rust\nuse std::{fs, path::PathBuf};\n\nuse once_cell::unsync::OnceCell;\n\nstruct Ctx {\n    config_path: PathBuf,\n    config: OnceCell<String>,\n}\n\nimpl Ctx {\n    pub fn get_config(&self) -> Result<&str, std::io::Error> {\n        let cfg = self.config.get_or_try_init(|| {\n            fs::read_to_string(&self.config_path)\n        })?;\n        Ok(cfg.as_str())\n    }\n}\n```\n\n## Lazily Compiled Regex\n\nThis is a `regex!` macro which takes a string literal and returns an\n*expression* that evaluates to a `&'static Regex`:\n\n```\nmacro_rules! regex {\n    ($re:literal $(,)?) => {{\n        static RE: once_cell::sync::OnceCell<regex::Regex> = once_cell::sync::OnceCell::new();\n        RE.get_or_init(|| regex::Regex::new($re).unwrap())\n    }};\n}\n```\n\nThis macro can be useful to avoid the \"compile regex on every loop iteration\" problem.\n\n## Runtime `include_bytes!`\n\nThe `include_bytes` macro is useful to include test resources, but it slows\ndown test compilation a lot. An alternative is to load the resources at\nruntime:\n\n```\nuse std::path::Path;\n\nuse once_cell::sync::OnceCell;\n\npub struct TestResource {\n    path: &'static str,\n    cell: OnceCell<Vec<u8>>,\n}\n\nimpl TestResource {\n    pub const fn new(path: &'static str) -> TestResource {\n        TestResource { path, cell: OnceCell::new() }\n    }\n    pub fn bytes(&self) -> &[u8] {\n        self.cell.get_or_init(|| {\n            let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n            let path = Path::new(dir.as_str()).join(self.path);\n            std::fs::read(&path).unwrap_or_else(|_err| {\n                panic!(\"failed to load test resource: {}\", path.display())\n            })\n        }).as_slice()\n    }\n}\n\nstatic TEST_IMAGE: TestResource = TestResource::new(\"test_data/lena.png\");\n\n#[test]\nfn test_sobel_filter() {\n    let rgb: &[u8] = TEST_IMAGE.bytes();\n    // ...\n# drop(rgb);\n}\n```\n\n## `lateinit`\n\n`LateInit` type for delayed initialization. It is reminiscent of Kotlin's\n`lateinit` keyword and allows construction of cyclic data structures:\n\n\n```\nuse once_cell::sync::OnceCell;\n\npub struct LateInit<T> { cell: OnceCell<T> }\n\nimpl<T> LateInit<T> {\n    pub fn init(&self, value: T) {\n        assert!(self.cell.set(value).is_ok())\n    }\n}\n\nimpl<T> Default for LateInit<T> {\n    fn default() -> Self { LateInit { cell: OnceCell::default() } }\n}\n\nimpl<T> std::ops::Deref for LateInit<T> {\n    type Target = T;\n    fn deref(&self) -> &T {\n        self.cell.get().unwrap()\n    }\n}\n\n#[derive(Default)]\nstruct A<'a> {\n    b: LateInit<&'a B<'a>>,\n}\n\n#[derive(Default)]\nstruct B<'a> {\n    a: LateInit<&'a A<'a>>\n}\n\n\nfn build_cycle() {\n    let a = A::default();\n    let b = B::default();\n    a.b.init(&b);\n    b.a.init(&a);\n     \n    let _a = &a.b.a.b.a;\n}\n```\n\n# Comparison with std\n\n|`!Sync` types         | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`Cell<T>`             | `T`                    | requires `T: Copy` for `get`                  |\n|`RefCell<T>`          | `RefMut<T>` / `Ref<T>` | may panic at runtime                          |\n|`unsync::OnceCell<T>` | `&T`                   | assignable only once                          |\n\n|`Sync` types          | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`AtomicT`             | `T`                    | works only with certain `Copy` types          |\n|`Mutex<T>`            | `MutexGuard<T>`        | may deadlock at runtime, may block the thread |\n|`sync::OnceCell<T>`   | `&T`                   | assignable only once, may block the thread    |\n\nTechnically, calling `get_or_init` will also cause a panic or a deadlock if it recursively calls\nitself. However, because the assignment can happen only once, such cases should be more rare than\nequivalents with `RefCell` and `Mutex`.\n\n# Minimum Supported `rustc` Version\n\nThis crate's minimum supported `rustc` version is `1.56.0`.\n\nIf only the `std` feature is enabled, MSRV will be updated conservatively, supporting at least latest 8 versions of the compiler.\nWhen using other features, like `parking_lot`, MSRV might be updated more frequently, up to the latest stable.\nIn both cases, increasing MSRV is *not* considered a semver-breaking change.\n\n# Implementation details\n\nThe implementation is based on the [`lazy_static`](https://github.com/rust-lang-nursery/lazy-static.rs/)\nand [`lazy_cell`](https://github.com/indiv0/lazycell/) crates and [`std::sync::Once`]. In some sense,\n`once_cell` just streamlines and unifies those APIs.\n\nTo implement a sync flavor of `OnceCell`, this crates uses either a custom\nre-implementation of `std::sync::Once` or `parking_lot::Mutex`. This is\ncontrolled by the `parking_lot` feature (disabled by default). Performance\nis the same for both cases, but the `parking_lot` based `OnceCell<T>` is\nsmaller by up to 16 bytes.\n\nThis crate uses `unsafe`.\n\n[`std::sync::Once`]: https://doc.rust-lang.org/std/sync/struct.Once.html\n\n# F.A.Q.\n\n**Should I use lazy_static or once_cell?**\n\nTo the first approximation, `once_cell` is both more flexible and more convenient than `lazy_static`\nand should be preferred.\n\nUnlike `once_cell`, `lazy_static` supports spinlock-based implementation of blocking which works with\n`#![no_std]`.\n\n`lazy_static` has received significantly more real world testing, but `once_cell` is also a widely\nused crate.\n\n**Should I use the sync or unsync flavor?**\n\nBecause Rust compiler checks thread safety for you, it's impossible to accidentally use `unsync` where\n`sync` is required. So, use `unsync` in single-threaded code and `sync` in multi-threaded. It's easy\nto switch between the two if code becomes multi-threaded later.\n\nAt the moment, `unsync` has an additional benefit that reentrant initialization causes a panic, which\nmight be easier to debug than a deadlock.\n\n**Does this crate support async?**\n\nNo, but you can use [`async_once_cell`](https://crates.io/crates/async_once_cell) instead.\n\n**Can I bring my own mutex?**\n\nThere is [generic_once_cell](https://crates.io/crates/generic_once_cell) to allow just that.\n\n# Related crates\n\n* [double-checked-cell](https://github.com/niklasf/double-checked-cell)\n* [lazy-init](https://crates.io/crates/lazy-init)\n* [lazycell](https://crates.io/crates/lazycell)\n* [mitochondria](https://crates.io/crates/mitochondria)\n* [lazy_static](https://crates.io/crates/lazy_static)\n* [async_once_cell](https://crates.io/crates/async_once_cell)\n* [generic_once_cell](https://crates.io/crates/generic_once_cell) (bring your own mutex)\n\nMost of this crate's functionality is available in `std` in nightly Rust.\nSee the [tracking issue](https://github.com/rust-lang/rust/issues/74465).","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:70:1794","0:167:1384","0:266:1575"],"is_stripped":false}},"0:206:1976":{"id":"0:206:1976","crate_id":0,"name":"wait","span":{"filename":"src/lib.rs","begin":[961,8],"end":[969,9]},"visibility":"public","docs":"Gets the reference to the underlying value, blocking the current\nthread until it is set.\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell = std::sync::Arc::new(OnceCell::new());\nlet t = std::thread::spawn({\n    let cell = std::sync::Arc::clone(&cell);\n    move || cell.set(92).unwrap()\n});\n\n// Returns immediately, but might return None.\nlet _value_or_none = cell.get();\n\n// Will return 92, but might block until the other thread does `.set`.\nlet value: &u32 = cell.wait();\nassert_eq!(*value, 92);\nt.join().unwrap();\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:24173":{"id":"2:11937:24173","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:240:1915":{"id":"0:240:1915","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[1253,8],"end":[1259,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:126:1905":{"id":"b:2:2237-0:126:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2239:23863"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2735:2426-0:221:1905":{"id":"a:2:2735:2426-0:221:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:251:1823":{"id":"0:251:1823","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[1330,8],"end":[1332,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get_mut(&mut lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:386:59":{"id":"0:386:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[113,9],"end":[113,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[411,4],"end":[425,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:99:413","0:100:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1342,4],"end":[1347,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2920:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:260:543"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11814":{"id":"2:11814","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11080:1364","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11815:797","2:11816:2932","2:11817:33306","2:11818:33307","2:11820:33308","2:11823:25507","2:11824:33309","2:11825:310","2:11826:25550","2:11827:1816","2:11829:1823","2:11831:1963","2:11833:25549","2:11835:33310","2:11836:33311","2:11837:25573","2:11838:25574","2:11839:5585","2:11840:5751","2:11841:5508","2:11842:30828","2:11843:30806","2:11844:29683","2:11845:33312","2:11846:30826","2:11847:25591","2:11850:25592","2:11853:25593","2:11856:2972","2:11860:2931","2:11864:25581","2:11867:25583","2:11870:25585","2:11873:33313","2:11876:33314","2:11879:25587","2:11882:25589","2:11885:33315","2:11888:33316","2:11891:2385","2:11894:33317","2:11897:33318","2:11900:33319","2:11903:33320","2:11905:33321","2:11907:33322","2:11909:33323","2:11910:33324","2:11911:33325","2:11914:33326","2:11917:24269","2:11920:25594","2:11923:33327","2:11926:33328","2:11929:33329","2:11932:33330","2:11934:24168","2:11935:24171","2:11936:24172","2:11937:24173","2:11938:33331","2:11940:7938","2:11941:33332"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2234-0:126:1905":{"id":"b:2:2234-0:126:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2236:2375"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:148:1925":{"id":"0:148:1925","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[746,8],"end":[751,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and returns a reference to\nthe result.\n\nThis is equivalent to the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:179:1814":{"id":"b:5:683-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:685:2995","5:686:2996","5:687:2997"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:115:1843":{"id":"0:115:1843","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[503,8],"end":[508,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.set(92), Ok(()));\nassert_eq!(cell.set(62), Err(62));\n\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11900:33319":{"id":"2:11900:33319","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:11838:409","`DoubleEndedIterator`":"2:7123:120","str::match_indices":"2:11897:33318","self::pattern":"2:11516:13252"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50887:5736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11536:13250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11831:1963":{"id":"2:11831:1963","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9698:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9698:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:287":{"id":"0:287","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[118,0],"end":[176,1]},"visibility":{"restricted":{"parent":"0:266:1575","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:288:924","0:289:1816","0:290:1843","0:291:1860","0:294:1864"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:326:1864":{"id":"0:326:1864","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[249,4],"end":[270,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2529:2925":{"id":"2:2529:2925","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2503:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:185:59":{"id":"0:185:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[872,8],"end":[874,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2532:680":{"id":"2:2532:680","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:91":{"id":"0:91","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[396,4],"end":[400,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2577:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:93:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1335,4],"end":[1340,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2907:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:255:227","0:256:541"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:264:59":{"id":"0:264:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1351,8],"end":[1353,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:221:1905":{"id":"b:2:2526-0:221:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2529:2925"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3326-0:126:1905":{"id":"b:2:3326-0:126:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:162:543":{"id":"0:162:543","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[815,8],"end":[818,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:260:543":{"id":"0:260:543","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1343,8],"end":[1346,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:339:2266":{"id":"b:2:2526-0:339:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2529:2925"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11870:25585":{"id":"2:11870:25585","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11516:13252","str::split":"2:11864:25581","`DoubleEndedIterator`":"2:7123:120","prim@char":"1:11838:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50737:5568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11536:13250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2530-0:339:2266":{"id":"b:2:2530-0:339:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:93:59":{"id":"0:93:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[397,8],"end":[399,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:24168":{"id":"2:11934:24168","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1241,4],"end":[1241,94]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:315:59":{"id":"0:315:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[194,4],"end":[196,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:203:924":{"id":"0:203:924","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[918,8],"end":[920,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:250:1816":{"id":"0:250:1816","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[1313,8],"end":[1315,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get(&lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get(&lazy), Some(&92));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:227":{"id":"0:157:227","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[808,8],"end":[808,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"a:2:8137:1801-0:179:1814":{"id":"a:2:8137:1801-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11846:30826":{"id":"2:11846:30826","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:51011:5584","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:300:2251":{"id":"b:2:2237-0:300:2251","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2239:23863"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8138:1800-0:300:2251":{"id":"a:2:8138:1800-0:300:2251","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"a:2:8138:1800-0:377:2240":{"id":"a:2:8138:1800-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1228,4],"end":[1232,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:229:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[821,4],"end":[826,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:2577:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2577:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:166:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2735:2426-0:84:1814":{"id":"a:2:2735:2426-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:8138:1800-0:383:2249":{"id":"a:2:8138:1800-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3326-0:383:2249":{"id":"b:2:3326-0:383:2249","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2678:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3324:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:383:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3328:1452"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8137:1801-0:300:2251":{"id":"a:2:8137:1801-0:300:2251","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11894:33317":{"id":"2:11894:33317","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"2:11891:2385","self::pattern":"2:11516:13252","prim@char":"1:11838:409","`DoubleEndedIterator`":"2:7123:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50941:5738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11536:13250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:141:924":{"id":"0:141:924","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[715,8],"end":[717,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing function.\n\n# Example\n```\n# fn main() {\nuse once_cell::unsync::Lazy;\n\nlet hello = \"Hello, World!\".to_string();\n\nlet lazy = Lazy::new(|| hello.to_uppercase());\n\nassert_eq!(&*lazy, \"HELLO, WORLD!\");\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["init",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:125:1889":{"id":"0:125:1889","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[660,8],"end":[664,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value.\n\nReturns `None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2533-0:84:1814":{"id":"b:2:2533-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2535:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[916,4],"end":[1188,5]},"visibility":{"restricted":{"parent":"0:167:1384","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:203:924","0:204:1821","0:205:1816","0:206:1976","0:207:1823","0:208:1963","0:209:1843","0:210:1844","0:212:1860","0:216:1864","0:219:1887","0:220:1889"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:8137:1801-0:126:1905":{"id":"a:2:8137:1801-0:126:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2735:2426-0:377:2240":{"id":"a:2:2735:2426-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2735:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2540:1439":{"id":"2:2540:1439","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167:1384":{"id":"0:167:1384","crate_id":0,"name":"sync","span":{"filename":"src/lib.rs","begin":[831,0],"end":[831,12]},"visibility":"public","docs":"Thread-safe, blocking version of `OnceCell`.","links":{},"attrs":["#[cfg(any(feature = \"std\", feature = \"critical-section\"))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:179:1814","0:221:1905"],"is_stripped":false}},"0:99:413":{"id":"0:99:413","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[412,8],"end":[417,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:289:1816":{"id":"0:289:1816","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[127,4],"end":[129,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:33327":{"id":"2:11923:33327","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11838:409","self::pattern":"2:11516:13252"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11536:13250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2671:217-0:126:1905":{"id":"a:2:2671:217-0:126:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11864:25581":{"id":"2:11864:25581","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"2:11842:30828","self::pattern":"2:11516:13252","prim@char":"1:11838:409","`DoubleEndedIterator`":"2:7123:120","str::rsplit":"2:11870:25585"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50719:5563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[312,4],"end":[316,5]},"visibility":{"restricted":{"parent":"0:331:2265","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2577:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:348:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2541-0:179:1814":{"id":"b:2:2541-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:111:924":{"id":"0:111:924","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[443,8],"end":[445,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11841:5508":{"id":"2:11841:5508","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50705:3769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:188:656":{"id":"0:188:656","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[878,8],"end":[883,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8964:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8953:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2530-0:179:1814":{"id":"b:2:2530-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2541-0:126:1905":{"id":"b:2:2541-0:126:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2536-0:377:2240":{"id":"b:2:2536-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11897:33318":{"id":"2:11897:33318","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7123:120","self::pattern":"2:11516:13252","str::rmatch_indices":"2:11900:33319","prim@char":"1:11838:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50869:5735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70:1794":{"id":"0:70:1794","crate_id":0,"name":"unsync","span":{"filename":"src/lib.rs","begin":[354,0],"end":[354,14]},"visibility":"public","docs":"Single-threaded version of `OnceCell`.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:84:1814","0:126:1905"],"is_stripped":false}},"b:2:2526-0:126:1905":{"id":"b:2:2526-0:126:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2529:2925"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2536-0:300:2251":{"id":"b:2:2536-0:300:2251","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2506:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2539:127","2:2540:1439"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:195:680":{"id":"0:195:680","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[903,8],"end":[905,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[807,4],"end":[812,5]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2907:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:157:227","0:158:541"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[34,18],"end":[34,23]},"visibility":{"restricted":{"parent":"0:266:1575","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9004:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:382:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11835:33310":{"id":"2:11835:33310","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2990:2587","str::slice_mut_unchecked":"2:11836:33311","`str`":"1:11844:1364"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2685:225-0:84:1814":{"id":"a:2:2685:225-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2685:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:2:2541-0:300:2251":{"id":"b:2:2541-0:300:2251","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2510:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceRef","id":"0:300:2251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2544:127","2:2545:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5290:33982":{"id":"5:5290:33982","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[393,4],"end":[393,72]},"visibility":{"restricted":{"parent":"0:70:1794","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2530-0:126:1905":{"id":"b:2:2530-0:126:1905","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2532:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:246:1925":{"id":"0:246:1925","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[1276,8],"end":[1281,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and\nreturns a reference to the result. This is equivalent\nto the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:117:1860":{"id":"0:117:1860","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[559,8],"end":[568,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f`\nif the cell was empty.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:291:1860":{"id":"0:291:1860","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[146,4],"end":[151,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:153:1823":{"id":"0:153:1823","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[802,8],"end":[804,9]},"visibility":"public","docs":"Gets the mutable reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get_mut(&mut lazy), None);\nassert_eq!(*lazy, 92);\nassert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1905","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48729:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8137:1801-0:339:2266":{"id":"a:2:8137:1801-0:339:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:8138:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8137:1801","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:339:2266","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11823:25507":{"id":"2:11823:25507","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11085:13253"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2526-0:179:1814":{"id":"b:2:2526-0:179:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2503:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2500:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2529:2925"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2671:217-0:377:2240":{"id":"a:2:2671:217-0:377:2240","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2671:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:377:2240","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11909:33323":{"id":"2:11909:33323","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11853:25593":{"id":"2:11853:25593","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11516:13252","prim@char":"1:11838:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11521:5559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11536:13250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:121:1864":{"id":"0:121:1864","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[595,8],"end":[609,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2941:1862","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48873:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:84:1814":{"id":"b:5:683-0:84:1814","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1814","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:685:2995","5:686:2996","5:687:2997"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}}},"paths":{"5:3153:5399":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:51676:5768":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:4216:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"18:80:23812":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:10681:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:9791:3962":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13340:4706":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:8490:3008":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"12:2080:5388":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:8418:20072":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"12:646:3009":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11235:4158":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:11839:1476":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:5614:4916":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:52325:5775":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:2809:2573":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"12:1628:3524":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:8596:3765":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12836:4562":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:7647:7939":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:9065:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:50448:5713":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:7789:3839":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"12:1534:5394":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:9401:3922":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"12:2053:5126":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:1660:6643":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:506:6486":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:20863:8084":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10528:4064":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:52349:5776":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:7289:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:8526:3763":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:6458:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2506:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:20870:8159":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:7950:8053":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:1915:2640":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:20713:8155":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13007:4599":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:8836:6068":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:54653:5878":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:3623:5486":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:2411:4812":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11804:6368":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:10138:5571":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:5579:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:10805:5462":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:48578:5553":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:48729:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:1611:3547":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:2503:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:21734:30552":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6877:20010":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:57561:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2385:8012":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:6353:5957":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:8165:5739":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:14:2253":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:12797:4553":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:2789:2567":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:48053:5545":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:7469:4850":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:4877:8124":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:3160:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:2880:6221":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:10159:4019":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:49286:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:7870:5485":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3352:5683":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4290:6795":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:51438:7492":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:10403:4078":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:49326:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11492:5970":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:4351:2416":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:8438:8135":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:2907:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:10506:4059":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:50527:5718":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:6534:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:3996:8073":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:2613:5916":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:21779:7417":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:52602:5786":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:4144:4866":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:10321:4034":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:4262:4868":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:3999:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:4459:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:20631:8162":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:7470:2639":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:48924:3009":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5759:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:1707:6670":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:2797:2574":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2251:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11661:4254":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:6939:3537":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4525:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11606:4245":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:49728:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:881:3008":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:12033:4325":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:967:3780":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:10691:5929":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:1606:6602":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:5812:2165":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10583:20075":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12265:4365":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:0:2274":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:3611:5485":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:2367:4810":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:6241:5026":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:30068:30526":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:47328:5642":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:11267:5581":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:8272:20067":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:8923:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:47091:2414":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:51714:5773":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:54664:5879":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7890:5275":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:8735:6363":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:3705:5931":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:11820:24265":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:11859:1456":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:10434:4050":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:5219:3885":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:54781:5886":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4778:6981":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:50983:5740":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:2852:2582":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:4220:2407":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11528:4232":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:1432:5376":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:49206:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:49865:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:5415:5524":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:9250:3905":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:7082:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13203:4654":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:48814:2442":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:3177:2596":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:599:34772":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:2399:8016":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:2681:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:2401:8017":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8171:6033":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:46790:2599":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"12:387:34733":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:5492:5526":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:1212:5126":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13327:4700":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11841:1028":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:22160:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"12:632:3008":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11974:4319":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:4064:2165":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"12:985:5126":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:766:23824":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:8297:5937":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:3237:5923":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:5359:5948":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:242:3771":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:47358:13321":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:11680:3641":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:6252:5027":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:1612:3526":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:52639:5788":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:1517:6550":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:2579:4819":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:5472:4837":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:219:2648":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"9:622:18949":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:9031:34764":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4471:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13404:4725":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:2065:5487":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13192:4650":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:6582:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:8741:6063":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9071:34757":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4645:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11845:1442":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:29749:2617":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:48028:5543":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12237:4361":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:10607:6090":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:10625:4071":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:54172:5867":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:6871:25365":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:5739:6198":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12896:4571":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:6122:3620":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:10062:4012":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:11857:1458":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:10927:3632":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:53674:5833":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:5138:13238":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11087:4132":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:52395:5778":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:47286:5638":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:1586:6588":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:49126:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:13176:4647":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:50737:5568":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:3159:24762":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"12:0:2279":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:49752:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:22094:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:12022:4324":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:51470:6365":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:53610:5831":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4437:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:2842:2580":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:7942:5282":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:3382:2165":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:6001:8192":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7319:5210":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:7593:2518":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13478:4746":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:5593:3612":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:3699:3526":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:8056:5291":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:48847:2443":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:48043:3585":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:2679:2419":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:2457:8084":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:10400:5924":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:20463:33173":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:5142:13239":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:3319:8050":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:6496:20008":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:9366:5979":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:8976:6075":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:12322:4373":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8093:5927":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:2930:19146":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:8918:6069":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:2894:19145":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:8881:8148":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:48715:5556":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:2516:5915":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4820:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"13:220:6325":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:582:3722":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:2856:2583":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:1243:5387":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11734:3985":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4018:8077":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:10651:5574":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:10684:5575":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:8747:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:4621:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:3716:4864":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:50517:5717":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:54624:5875":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:2320:4808":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:49509:2893":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:54484:5871":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:8102:5929":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:4635:4879":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4608:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"12:1518:19083":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9631:3942":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:11521:5559":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:11742:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"12:834:5383":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9553:3897":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:564:3721":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:6434:7290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:1826:5906":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:4297:2414":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:48595:8064":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:38655:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11368:4194":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:3702:5930":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:1620:5396":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:777:3523":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:49813:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:4760:3609":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:47773:5536":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"0:126:1905":{"crate_id":0,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"1:11033:5961":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:48966:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:12308:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:21696:5604":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:51027:5515":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:8295:20068":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:49006:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11800:4273":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:3235:5922":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:4531:8116":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5592:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:47621:5668":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:2336:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:6070:5010":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:49849:2889":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:4010:8075":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"15:175:19100":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:51633:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:3091:5918":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:9263:3906":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:12781:4550":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13214:4655":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13047:4610":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:8162:20064":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:3093:5397":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6059:34752":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8773:6065":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"12:1555:5395":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:9497:3591":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:5743:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:6599:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:50941:5738":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:13100:4625":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:11844:1364":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:7473:3010":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:5394:5950":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:21122:8158":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:9873:3975":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:5597:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7093:5156":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4569:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:3119:5398":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:2228:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:47711:5533":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:4279:5935":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:10994:6065":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:47314:5641":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:50072:5710":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10670:4073":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:0:1356":{"crate_id":1,"path":["std"],"kind":"module"},"2:2305:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4377:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:7471:6105":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:21385:8084":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:1443:5377":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:47338:5643":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:8441:20073":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:6330:5038":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13354:4712":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:8014:5176":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"18:521:23825":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10207:4022":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:4675:6937":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4222:6763":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:4125:6699":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:4726:33011":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:2873:2995":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:2510:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:7799:5980":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:9885:3976":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:5614:3547":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5433:4893":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:8811:2937":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12134:4339":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:1257:5392":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:50695:5731":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4310:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"12:1138:5392":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:7514:31629":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:8951:34765":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13580:4770":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:8941:24281":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:20444:33171":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:49502:2892":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:900:3009":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:1604:3008":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:47498:7996":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:47561:5662":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:53116:5807":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10420:4049":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:11708:4259":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:7872:5273":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5851:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:7705:5627":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:1713:6671":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:4079:2423":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"15:0:2281":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:1744:6683":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:11341:5565":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5605:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:1413:5379":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:484:3635":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:54820:5887":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"0:300:2251":{"crate_id":0,"path":["once_cell","race","OnceRef"],"kind":"struct"},"2:51150:5752":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:7816:5982":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11259:4162":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:53328:5826":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:50869:5735":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:5664:4924":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:1071:6194":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6963:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:6619:5091":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:8774:3773":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"11:36:6461":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11851:728":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:5981:4974":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:864:3534":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:2458:13329":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:9017:2893":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4277:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:22391:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:52417:5779":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:11006:24466":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"18:681:3744":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:5522:7180":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:9764:3960":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:58901:5895":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:21786:2629":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:10075:4013":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:944:3547":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:6161:20006":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:62:13776":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:9089:5961":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:2589:3591":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:1889:5910":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"0:383:2249":{"crate_id":0,"path":["once_cell","race","OnceBool"],"kind":"struct"},"17:13091:4624":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7497:4841":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:47084:5635":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:48703:5554":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:1376:3009":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:6154:5956":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:22127:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11288:4171":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4408:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:2920:1799":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5682:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13557:4766":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:22292:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:3427:5928":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"12:1836:2937":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:13148:4640":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11951:4310":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6279:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:9722:3955":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13536:4763":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:46891:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:5716:2465":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:6052:5007":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:3132:34725":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:8330:2435":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:6472:2945":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:8219:5933":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11639:4253":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:4704:8086":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:5462:5952":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:5544:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:52750:5796":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:8177:6035":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4267:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:10910:3630":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:2389:4811":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:49086:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:5815:20004":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11315:4180":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12060:4328":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12695:4533":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:3962:8072":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"18:590:3723":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:1608:2937":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6704:5099":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5931:3611":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:6376:20007":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:6564:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:5184:19117":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:9359:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:6559:2477":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:4485:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:9317:3915":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:12118:4338":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:20657:8163":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:7299:7406":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:3475:24468":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"9:956:18932":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5709:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:3956:8071":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4585:6896":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:4826:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:910:2937":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:6961:2937":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:54743:5884":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:6642:5957":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:595:6541":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:54422:5870":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:9539:3935":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4296:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13126:4635":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6171:5020":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:52780:5797":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:50508:5715":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:9350:3879":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:3375:13289":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:10121:4017":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:8253:6042":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:52371:5777":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:961:3526":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:628:7936":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:10233:4027":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:1642:6631":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9501:3914":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:6668:3575":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5670:7137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:1614:6607":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:54360:5869":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4234:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:6593:5090":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:51099:13257":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:47734:5677":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:6803:3758":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:11140:5962":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:10188:5951":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:4022:2638":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:47541:5661":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:11850:731":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:11547:4237":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:8212:20065":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:4136:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:1091:34342":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4241:6776":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:21713:30553":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11854:726":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12087:4332":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:51327:5764":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11485:4221":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7288:5208":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12980:4595":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:46829:2598":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"18:699:3747":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:488:6478":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:8730:31628":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:50499:5714":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:21279:5894":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:9671:3945":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4639:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:2282:4800":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:5659:31697":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:11856:1457":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:4459:8101":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12211:4359":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:12103:4334":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:49246:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:13374:4718":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:50719:5563":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:51002:5742":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10721:4077":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:5596:4912":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"9:586:6462":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:7980:20015":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:5094:3526":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"14:221:5374":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6472:5065":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:2162:7411":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6548:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:4287:2413":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:47050:2593":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:49746:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:53374:5827":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10394:5920":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:11594:4243":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:7862:5985":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:7854:5984":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11199:4149":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:609:3730":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:10152:5572":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:9698:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:8929:2525":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:1568:6578":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6668:5097":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:11071:5576":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:53486:5829":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:10166:5573":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:9859:5693":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:5751:7170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4726:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6359:5040":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:5564:7075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:8849:8146":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:50041:5702":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:22358:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:51623:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:54530:5872":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10466:4055":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:11748:4267":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:7637:5232":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:57613:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6463:5064":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:4327:4870":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:54568:5873":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:3274:5924":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:3150:2592":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:931:5379":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:3204:2420":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:47437:5658":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:39877:2427":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:50062:5706":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:9512:3596":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:4665:8100":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7298:5209":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:47581:5664":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12164:4345":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5737:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11247:4161":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:2487:4815":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:6385:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:47098:5636":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"14:215:5372":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"12:822:7954":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:10118:7688":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:9049:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:4234:3553":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7426:5215":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:4574:4877":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10997:4112":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"0:266:1575":{"crate_id":0,"path":["once_cell","race"],"kind":"module"},"17:8055:20052":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:2535:4817":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:48019:2468":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:21621:6359":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"0:221:1905":{"crate_id":0,"path":["once_cell","sync","Lazy"],"kind":"struct"},"2:50619:5725":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:5047:5943":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:6209:3611":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:50663:5727":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:7233:3520":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:8393:20071":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:47404:5653":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"9:800:6464":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:96:23813":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3241:2421":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11828:4278":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13436:4740":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:1959:5485":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:51215:5754":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:9241:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13506:4755":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:4662:8125":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:4752:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:21688:5603":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:7701:5978":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:6210:5024":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:491:1941":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"18:113:23814":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:47350:5644":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:9909:3978":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:5411:4838":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6790:5116":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13572:4767":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:9890:5563":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6200:5023":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:2909:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:47456:5659":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13279:4699":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:2631:4821":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:50033:5701":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:10245:4028":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"9:709:5706":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:5390:3559":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:5742:2466":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10949:4097":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11617:4246":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:46876:2589":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:11194:5967":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11356:4191":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:1692:6661":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:7267:5205":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5453:7012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:2497:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:719:6201":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"12:1065:34738":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:22061:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:11477:2623":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:52994:5804":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2907:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:7483:4851":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"0:84:1814":{"crate_id":0,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"5:7096:5503":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:12485:4385":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:6555:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:0:2284":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4700:983":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:9070:5960":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:2094:7408":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:2150:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:5723:2462":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:3501:3009":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:47682:5527":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:2876:6220":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:6916:2937":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:1649:6635":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6719:34750":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10520:4062":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6690:4843":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:29996:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6816:5117":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:9157:5560":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:8158:5563":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:996:5385":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:47650:5523":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:4441:4874":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:5374:4833":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:48012:5542":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:11300:4174":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:4264:2165":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:29968:3098":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:53824:5834":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:6907:2645":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:123:13831":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:51279:5755":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:1114:5388":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:9371:3628":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:7224:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:3263:4858":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:10124:5570":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:7945:5987":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:6829:5120":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12008:4322":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10270:4030":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:9227:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:4225:2408":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"12:2069:5387":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:4888:4887":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:534:4789":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11853:730":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:1674:6654":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:21291:32925":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4499:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:6419:7285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5878:19118":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:2509:4816":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:5949:4969":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:20844:8154":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"14:7:5367":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:51446:7494":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:12319:3601":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:6503:2472":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"12:762:3520":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:2871:3608":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:8271:6044":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:8114:8026":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"18:736:23823":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:9627:3941":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8275:7259":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:11436:4196":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11515:4230":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:51293:13262":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:7567:20013":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:48932:2937":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10661:5981":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:7167:5510":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:719:3753":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:7086:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:7008:7387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:3127:5396":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:50609:5724":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:9433:3925":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:9930:3980":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:48873:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8348:6053":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:8759:6064":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"18:624:34773":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:474:6470":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4663:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:3943:3009":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:7477:13467":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:7619:2138":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:4817:2165":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:12756:4540":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12948:4588":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:49761:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:48941:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:48789:3008":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:6482:3559":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:6201:3526":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12361:4383":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:3086:3008":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:990:5383":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:7123:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9681:3838":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:2805:2571":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9831:3968":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:50537:5719":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12850:4565":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:11343:4190":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:4868:8123":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:21637:5598":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:49779:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:47631:5670":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:7388:5214":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:12860:4566":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:21661:2626":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:541:6512":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7166:20011":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:46973:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10631:7507":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:11123:3633":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:8904:2467":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:6735:5102":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:2865:2585":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:5525:8144":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:48865:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:50080:5711":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:47603:5666":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:1632:5398":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:10332:20182":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13031:4608":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:8981:3895":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"12:659:2937":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:47590:5665":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:678:5898":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:11051:7509":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8795:3008":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12972:4593":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5482:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:53069:5806":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:13141:4639":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"12:2184:6456":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:5205:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:20465:33175":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13393:4724":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"14:160:5367":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13518:4757":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:4304:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:20719:8157":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"12:300:6453":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:9023:2895":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:7509:3624":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5520:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:11325:5930":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:54705:5882":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:54728:5883":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:9897:3977":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:10814:5952":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11853:4280":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:2884:6222":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:4413:4873":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:5793:4791":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:30010:30548":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:4217:4867":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:12159:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:5586:3611":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:8941:3894":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:494:6481":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:52519:5783":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:10982:6064":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:5093:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:4706:8087":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:8752:3769":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5508:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10894:4090":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:1531:6555":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:6654:13463":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:11849:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:2342:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:4662:4880":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:29934:3097":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"12:725:5378":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:8480:5938":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:52501:5782":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:7126:5506":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"12:2190:34737":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:9281:5561":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:247:3772":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:288:2268":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12934:4585":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10296:4032":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:20839:8084":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:6284:4852":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:574:2526":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:10649:6096":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"2:48644:30559":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:6274:2937":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:49791:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:52972:5803":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:3197:5920":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:5494:20002":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:10455:4054":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:47468:30544":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:50548:5720":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:2683:4823":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:1548:2165":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:5702:7150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10108:4016":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:5851:3613":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"16:5510:4903":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:2671:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:47808:5538":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:5761:4933":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:52580:5785":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:47659:5671":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"12:1840:3547":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6781:5113":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:3488:3008":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12609:4488":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"12:1859:5397":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4591:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:652:14185":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:9422:3924":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:22424:2628":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:11861:1513":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:10822:20077":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:2783:2568":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:12376:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:6087:3563":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:48561:5551":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:359:2538":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:50629:5726":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:52620:5787":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:1931:3786":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:1228:5388":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:20670:8084":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:9362:3897":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:1626:5397":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4755:6973":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:1506:6545":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:3249:3793":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11174:4147":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:5780:4940":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:8110:20050":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:4195:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:4689:4881":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"7:0:1503":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:13459:4741":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:4561:13315":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:9183:3900":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:3638:2937":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:50887:5736":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:8971:6074":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:39868:5628":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:5447:4897":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:7117:34753":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:13024:4607":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4506:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:7176:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:8817:5953":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:57548:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:1668:1066":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:51314:5760":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:3199:5921":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:9328:3916":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:7598:2524":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:39828:6458":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:48034:5683":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12073:4329":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:11243:3635":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:53564:5830":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"9:19:6326":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:11862:1102":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10796:4080":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11774:4270":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:3504:3547":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:12337:4052":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:3599:4861":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:1720:6674":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11863:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4693:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"7:79:18923":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:5782:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11838:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:7021:28861":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:11014:6365":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:48667:5696":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:6155:3547":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:5880:5528":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12148:4341":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:10636:5980":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:836:3532":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"9:505:6351":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:6778:8151":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"0:0:2036":{"crate_id":0,"path":["once_cell"],"kind":"module"},"2:21584:5595":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:10708:4075":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:9644:3943":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:57626:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2735:2426":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:21750:30557":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:52305:5774":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:8881:34762":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4615:6912":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:7079:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3165:29656":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:47673:5674":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1894:15162":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12638:4499":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:11014:4115":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:8561:3764":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:47691:5675":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11034:4125":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:3805:5932":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11761:4268":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:2383:3304":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11106:4137":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"18:574:3712":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:4345:6825":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:7583:24757":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"12:320:3516":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:9480:3590":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:5694:7149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:51489:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:1105:5387":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7372:34751":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4807:7000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:5551:7066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"9:188:6333":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:6743:20009":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:12132:31606":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:7528:3626":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:22823:2624":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:969:5377":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:8556:337":{"crate_id":2,"path":["core","sync","atomic"],"kind":"module"},"2:2772:2566":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:8138:1800":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:47381:13322":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:4561:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:652:3712":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:6922:5500":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10221:4026":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:4437:8100":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:918:5378":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:57574:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11149:4142":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:51167:5753":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:7095:2656":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9805:3963":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:2749:4826":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:11909:4289":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:4006:8074":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:3680:3520":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:50923:5737":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:3566:4860":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:29974:3099":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4771:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:9398:3587":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13594:4773":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:2657:4822":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:0:802":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9577:3939":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"14:187:19095":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:2727:4825":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11460:7513":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:7139:5509":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:57191:8190":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:4371:1797":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7237:5196":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:1828:5907":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:51121:5744":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:7940:5986":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6123:4832":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:7557:5220":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:11085:13253":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4162:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:3641:8065":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:6607:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5886:7219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:11587:13259":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:21812:2630":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:4103:3008":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"19:0:1010":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:51434:7491":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:2860:2584":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:9458:3928":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:3491:8045":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:39864:5627":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:20872:5591":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:9658:3944":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11161:4145":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10139:3897":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:2055:2521":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:49495:2890":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3409:6036":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:6506:2473":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:46951:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:2257:8009":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5871:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:12184:5590":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4189:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"12:1872:5399":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:20682:8153":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:2748:2429":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:8139:2444":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6842:5123":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:6573:2478":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:7004:2937":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:2682:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:3902:3526":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12514:4405":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:1887:5909":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:0:2282":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:7970:5284":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:4716:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"12:274:6191":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:6339:7259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:54758:5885":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:9446:3926":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:1962:3789":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:9155:3899":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11137:4141":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:13071:4617":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2411:8022":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:4544:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"12:1866:5398":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:5947:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:4357:4871":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:20425:32922":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"18:538:3719":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:524:3602":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:9841:3008":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"12:119:3514":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:51510:5765":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"9:0:2276":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:52550:5784":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12926:4582":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:5785:2475":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:579:6531":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"12:1845:3520":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:6977:5501":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:2801:2572":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:5839:20005":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"9:896:18930":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"12:1003:5387":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9283:3909":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:6561:13471":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10182:4020":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:6186:4834":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:3689:4863":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:7259:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:9223:20083":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:9601:3940":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:5235:4891":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:1747:7415":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:4599:7272":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:7668:5905":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:13184:4649":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:4342:2415":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:5635:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:51641:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:0:2283":{"crate_id":17,"path":["object"],"kind":"module"},"17:10445:4052":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:755:3762":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"12:1029:5388":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:8241:20066":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11873:4283":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:51136:5749":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:10010:5567":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13366:4715":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:22259:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9108:3898":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:1632:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:51347:5588":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:20397:3722":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:11221:7510":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12739:4538":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2705:4824":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11330:4186":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11054:4126":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:598:2528":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:2916:3790":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8145:5682":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13059:4616":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:573:6528":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7110:30544":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:7678:5975":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:36:2646":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:8421:6056":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13158:4643":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:47702:5532":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13114:4632":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:5525:4906":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:9947:20157":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"8:0:2275":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7329:4848":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:4148:1796":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:7396:20012":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10921:4091":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4631:6918":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13221:4657":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:54679:5880":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11442:6104":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"12:60:34732":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:11055:13503":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:11146:6103":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:6489:7327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:690:3746":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:53147:5808":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:4683:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:3402:4859":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:3632:4862":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10752:4078":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:6567:5089":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:727:3756":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:52896:5800":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:1938:5911":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:12431:2644":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:47411:5654":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:50841:5571":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:1055:34344":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:2591:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:9108:6079":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:1463:5484":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:10671:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11125:4138":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:50823:5570":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:9963:5908":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:8137:20063":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:386:3774":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:7230:7391":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:53404:5828":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:8135:5665":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:11559:4239":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:8953:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:1538:6558":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4550:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11997:4320":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:50025:5699":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:9844:3971":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:1728:6678":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:5709:2464":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:25633:2625":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6517:5076":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:9061:3897":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:1123:5392":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10497:20184":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:8510:3885":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13134:4638":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:10293:6063":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:5730:7164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:7659:20014":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:11837:921":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:2762:2564":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:6287:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12768:4545":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"12:2178:6455":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12730:4534":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:5163:4890":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:1701:6667":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:20760:5591":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:50050:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:6991:7378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:13082:4621":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:9276:13334":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"12:853:5385":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:50993:5741":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"9:676:18937":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:5533:7056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:9274:3907":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:11852:729":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:53170:5809":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:4106:1814":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:10374:4041":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4112:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:636:3736":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6109:5013":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9982:6203":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:13168:4646":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:51450:7495":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:7511:5218":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:4597:7270":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"16:2261:19119":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:5723:7162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:12349:4376":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:6643:3563":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:954:3520":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:4284:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:1470:1798":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:48805:2937":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12884:4568":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"12:861:5386":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:8964:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13039:4609":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11684:4258":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:10854:20078":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:6931:3547":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:8631:3766":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:4216:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:11227:7511":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:10310:4033":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:1973:5486":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:21605:5597":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6676:4842":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:6913:3622":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12874:4567":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:20410:32922":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:21478:5593":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:11536:13250":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:48005:5541":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:10083:5569":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:3276:5925":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6034:4997":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:54633:5876":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5514:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:12111:13332":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9778:3961":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:5548:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:54644:5877":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:784:3529":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:1903:20115":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4537:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"12:353:3518":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:7685:7973":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:48856:2731":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4654:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:7045:13469":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:7253:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10875:4087":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:11271:4163":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"12:1044:19082":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:9475:3931":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6528:5077":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:1756:3334":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4669:6934":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"15:214:6322":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:562:6523":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7929:5279":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13492:4748":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4427:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:3975:5516":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:2494:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:7262:29014":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:2972:2597":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:4249:6778":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:3125:3792":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:2604:7412":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4447:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:4148:8096":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:48916:3008":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:9857:3973":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:11070:5960":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4327:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2935:2586":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:487:3778":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:10205:6204":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:6903:6077":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:7063:7953":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:47418:13323":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"18:660:3737":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:9171:5909":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:9019:6367":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:3245:3520":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:6362:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:6510:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"13:0:2273":{"crate_id":13,"path":["std_detect"],"kind":"module"},"13:108:34739":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:50600:5723":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"12:1852:5396":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:47612:5667":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:2938:2178":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:11530:3749":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:532:6506":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:6608:30999":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:54606:5874":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:7156:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:21673:30533":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:21127:8181":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:6312:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13231:4662":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:8475:20051":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:2722:2425":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:8865:8147":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:4587:8072":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:52479:5781":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:9004:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:51522:13546":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:10032:6081":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:6390:2468":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:38672:3722":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:53018:5805":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:6030:3613":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:46907:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:57587:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:920:18931":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11217:4157":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:2826:2576":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:8871:3893":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:6303:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:9060:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"12:1120:5391":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"9:592:18948":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:7249:5197":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:7247:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:1511:6547":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:2814:2578":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:1547:6563":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:7571:8084":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6402:7280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:7276:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6519:7344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:5273:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:4317:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6425:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12225:4360":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:3010:19147":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:3930:2165":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:51726:2643":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4814:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:8822:34761":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:50705:3769":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:9021:2894":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10385:4045":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:9688:8084":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10973:4111":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:5122:4889":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9021:3896":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10682:4074":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:50280:7490":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:10439:2138":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:8496:6061":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6345:4840":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:4702:8083":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:2300:4802":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:54690:5881":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:12350:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"5:1404:5378":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:661:5897":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:3098:34724":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:1615:3520":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:3484:8025":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:8245:6033":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:47271:5515":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:54030:5866":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1601:6600":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11186:4148":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:11809:7943":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:2683:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:7178:5511":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:6257:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:1864:5908":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4364:6834":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:11836:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:1366:3008":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7909:5278":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11576:4242":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:49046:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:2577:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:51684:5770":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:1637:5399":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:4397:2417":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:2250:5914":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:8339:20069":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:3171:2594":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:51011:5584":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:6985:7376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11787:4271":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:7460:3779":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:1524:6553":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:9013:2891":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:4519:4875":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:6947:34657":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10546:20074":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:2557:4818":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:8368:20070":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:8666:3767":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13527:4761":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4516:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:6317:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10608:3859":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"9:827:19021":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8998:24261":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:1580:6586":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:50973:5739":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:887:3008":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:47641:5520":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:1387:2937":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:11855:1460":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:21387:8156":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10642:20076":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10257:4029":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"9:863:18929":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6146:5016":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:2678:2187":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6440:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:46995:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12674:4528":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:3904:8067":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"12:1085:5390":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:6863:2406":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4356:6830":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:10801:5978":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"14:202:13269":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:49166:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:47077:5176":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"18:707:3749":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:47743:5534":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"14:0:2280":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:3948:8070":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7825:5269":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:12176:4347":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:119:13830":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"9:33:6328":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:12278:4366":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10283:4031":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12748:4539":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:531:3716":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:49488:2891":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:681:5900":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:4:994":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:2579:3605":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:7847:5270":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:6430:2476":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:8086:3758":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:1733:3335":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:47724:5676":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:2653:5917":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4351:5936":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:547:6515":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:6998:2937":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:11386:5932":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6298:5028":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:2300:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12291:4367":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:153:3512":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"14:165:19088":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4149:6717":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:1821:2422":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:6969:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12046:4327":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:7662:7941":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4106:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"12:815:5380":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:9691:3947":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:10476:20183":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:7049:13468":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:7846:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:8911:34763":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:8701:3768":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:7250:3566":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"0:377:2240":{"crate_id":0,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"2:51036:5644":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:7956:4853":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:2690:2137":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:4786:4884":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13413:4727":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"18:644:3712":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5558:20003":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:48624:6366":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:5379:5949":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:2142:34649":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7357:5211":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:5628:4917":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"12:2198:6459":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12307:4369":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:7051:5502":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10774:3794":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"9:649:18950":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:2848:2581":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:2793:4828":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:8991:34766":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:11230:5578":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:20594:8161":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:420:3777":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:47277:5637":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"12:810:5393":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11721:4262":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4389:6847":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"0:70:1794":{"crate_id":0,"path":["once_cell","unsync"],"kind":"module"},"2:1639:3094":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"15:193:19101":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:7309:4847":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:5703:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:9011:2890":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:3324:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:8137:1801":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:7829:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:3162:29655":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:965:5376":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:8964:6073":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:7146:2655":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:47794:5682":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:10826:24270":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:6394:2469":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7135:34754":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2825:4829":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:5541:4908":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:973:5380":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:671:3743":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:20442:33176":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:9700:3950":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:526:6503":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:4297:3553":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:8954:2885":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:30174:30532":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:22193:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:11541:13249":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:46931:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"9:111:6329":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:2771:4827":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:3872:3547":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7343:4849":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:4817:4885":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4210:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"0:179:1814":{"crate_id":0,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:1967:7994":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:632:5479":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"12:669:5376":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:11516:13252":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:4849:4886":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:9165:34759":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:5615:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:0:2278":{"crate_id":11,"path":["adler"],"kind":"module"},"16:7044:34755":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:8494:3884":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:7059:2442":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:52802:5798":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:10844:6066":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:22226:2239":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:5345:5944":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:5203:3884":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12630:4498":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:9382:3921":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:3466:2885":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:48061:5547":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:3987:5517":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:2842:4830":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:8787:6066":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:11290:5582":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4788:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:11860:775":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:4705:7944":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:10490:4057":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"10:0:2277":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12198:4358":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:2831:2577":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11070:4130":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:9526:3934":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:2767:2569":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:49366:2463":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:4339:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:9193:34760":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:7794:5979":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:3087:2591":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4257:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:11306:5583":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"14:40:4112":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:11365:5931":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:4606:4878":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:47759:3734":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:50677:5730":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:8237:6040":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7543:4839":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:2605:4820":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4371:6836":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:12098:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"18:507:3712":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:47531:3579":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:1021:3781":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:4545:4876":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12617:4491":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:52657:5789":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:3026:3800":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:10336:3629":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:6017:4990":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"7:32:18916":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:2941:1862":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:8796:3886":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:50284:5562":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:3568:3526":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:545:2521":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:11858:1459":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:50587:5722":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:11485:5970":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:4938:2462":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:52850:5799":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8226:7503":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:12816:4554":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10360:4036":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:58922:5896":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:6270:4835":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:2341:4809":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5703:4927":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:8709:656":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"6:6332:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8053:6025":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:9933:5565":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:5845:7193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:4921:4888":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:3387:5514":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:2500:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:9118:34758":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:7218:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:50689:5577":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:305:1412":{"crate_id":1,"path":["std","thread"],"kind":"module"},"5:2375:6195":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13382:4719":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:9371:3898":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5388:4836":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:6106:3601":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:9339:3918":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:51466:7499":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5996:4976":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:11179:5966":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:22325:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:9009:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:2793:2570":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9820:3967":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10394:4046":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1708:3520":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:5408:5951":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10350:3794":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:7211:4944":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:47017:2590":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:21531:5594":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:1002:5386":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:2685:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:10921:3631":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:20711:8084":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:51462:7498":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:2253:3320":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:2994:2588":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"12:2205:5502":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:9972:5566":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:51242:5587":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:554:6518":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:47783:5679":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:353:2537":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2433:4813":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:5737:4785":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"18:515:3710":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:9738:3957":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:500:6483":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6865:5125":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:9303:3914":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:7603:5228":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:47822:5539":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:7806:5981":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:2821:2575":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6137:5015":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:50787:5734":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8398:5706":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:12909:4577":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11500:4225":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"12:697:5377":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:47298:30529":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11843:1334":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:12955:4590":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:5792:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:4385:4872":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:4119:8093":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:11939:4308":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:9712:3954":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:7435:5216":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:50769:5733":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:6501:3571":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4708:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:9019:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:2836:2579":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12251:4362":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:6511:3572":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:3189:31975":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:10701:24464":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"9:382:6336":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:4135:8095":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10845:4052":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:6654:5095":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6316:5036":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11813:4275":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:8567:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:4297:4869":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:7572:2539":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:2231:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:1556:6569":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:52926:5801":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:4721:4882":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:11209:5969":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"9:977:5465":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:47068:5634":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:10626:7505":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:51018:5652":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:8984:6077":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:57600:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21800:2627":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:562:3779":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:47451:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:51458:7497":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:9015:2892":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:48680:5933":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4575:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:9865:3009":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12964:4591":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"12:738:5379":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"12:751:3547":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:52704:5790":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:48780:2936":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7278:4846":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12550:4436":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:51454:7496":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:48538:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:51442:7493":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:3898:8068":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:8562:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:2874:33270":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:48797:3009":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"0:167:1384":{"crate_id":0,"path":["once_cell","sync"],"kind":"module"},"17:11893:4284":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:481:3711":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:54282:5868":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:4926:2434":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:47484:5660":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:7200:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:1091:5126":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:2868:4831":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9488:3932":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:2465:4814":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:3457:3804":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:2931:2168":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"12:1832:3008":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:482:6475":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:51304:5756":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:44:5401":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:4201:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"12:98:6219":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:4601:7274":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:53640:5832":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:4602:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:1771:3782":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:4097:28858":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5578:7086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:8182:8062":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"12:393:34734":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:52449:5780":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:50265:5712":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:4747:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:960:5393":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:3854:4865":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:4127:8094":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10088:4015":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:10397:5922":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:11842:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2990:2587":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:5490:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:2777:2565":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:4736:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:53250:5810":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:52948:5802":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:614:34770":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:1422:5393":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:9293:3912":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11841:4279":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11536:4234":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:7265:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:979:7954":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:7236:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:47397:5652":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4783:8082":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:273:3526":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:5460:4902":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"14:31:5367":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:8231:8097":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:8507:6062":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:3188:4857":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:587:6536":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:6349:3526":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:4749:4883":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:4199:5934":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:51697:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:50574:5662":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:4034:2165":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8803:6067":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:5016:5943":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:568:6526":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:47375:5515":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6321:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:11848:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:10045:5568":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:8243:5559":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:686:7942":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:3934:8069":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:8152:3769":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:2993:4854":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9751:3959":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:1684:6660":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:11302:3637":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"}},"external_crates":{"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}