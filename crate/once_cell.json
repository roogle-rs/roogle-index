{"root":"0:0:2012","crate_version":"1.16.0","includes_private":false,"index":{"2:11425:56567":{"id":"2:11425:56567","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11021:3927","prim@char":"1:12349:2268"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:305:2226":{"id":"b:2:2224-0:305:2226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2226:53407"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2224-0:179:1790":{"id":"b:2:2224-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2226:53407"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:212:1836":{"id":"0:212:1836","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[1074,8],"end":[1083,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell\nwas empty.\n\nMany threads may call `get_or_init` concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. The\nexact outcome is unspecified. Current implementation deadlocks, but\nthis may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:117:1836":{"id":"0:117:1836","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[550,8],"end":[559,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f`\nif the cell was empty.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:54669":{"id":"2:11442:54669","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2645:214-0:343:2214":{"id":"a:2:2645:214-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[388,4],"end":[388,53]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2709:2388-0:179:1790":{"id":"a:2:2709:2388-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11408:60207":{"id":"2:11408:60207","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11416:60212":{"id":"2:11416:60212","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11021:3927","prim@char":"1:12349:2268"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11046:3926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:671-0:84:1790":{"id":"b:5:671-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:673:2934","5:674:2935","5:675:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:219:1863":{"id":"0:219:1863","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[1156,8],"end":[1158,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2645:214-0:84:1790":{"id":"a:2:2645:214-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:150:1907":{"id":"0:150:1907","crate_id":0,"name":"force_mut","span":{"filename":"src/lib.rs","begin":[758,8],"end":[761,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and returns a mutable reference to\nthe result.\n\nThis is equivalent to the `DerefMut` impl, but is explicit.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force_mut(&mut lazy), &92);\nassert_eq!(*lazy, 92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[110,9],"end":[110,16]},"visibility":{"restricted":{"parent":"0:266:1554","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:352:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:251:1799":{"id":"0:251:1799","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[1321,8],"end":[1323,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get_mut(&mut lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:220:1865":{"id":"0:220:1865","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1176,8],"end":[1178,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value. Returns\n`None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:126:1881":{"id":"b:2:2511-0:126:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2514:127","2:2515:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:264:59":{"id":"0:264:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1342,8],"end":[1344,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2221-0:305:2226":{"id":"b:2:2221-0:305:2226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2223:2338"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:125:1865":{"id":"0:125:1865","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[651,8],"end":[655,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value.\n\nReturns `None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:60215":{"id":"2:11431:60215","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11021:3927","prim@char":"1:12349:2268"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167:1363":{"id":"0:167:1363","crate_id":0,"name":"sync","span":{"filename":"src/lib.rs","begin":[822,0],"end":[822,12]},"visibility":"public","docs":"Thread-safe, blocking version of `OnceCell`.","links":{},"attrs":["#[cfg(any(feature = \"std\", feature = \"critical-section\"))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:179:1790","0:221:1881"],"is_stripped":false}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[387,4],"end":[387,72]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:321:1792":{"id":"0:321:1792","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[219,8],"end":[225,9]},"visibility":"public","docs":"Gets a reference to the underlying value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:205:1792":{"id":"0:205:1792","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[922,8],"end":[929,9]},"visibility":"public","docs":"Gets the reference to the underlying value.\n\nReturns `None` if the cell is empty, or being initialized. This\nmethod never blocks.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11320:781":{"id":"2:11320:781","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12349:2268"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:179:1790":{"id":"a:2:2659:222-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11319":{"id":"2:11319","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10584:1343","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11320:781","2:11321:2871","2:11322:60193","2:11323:60194","2:11325:60195","2:11328:53418","2:11329:60196","2:11330:306","2:11331:56526","2:11332:1792","2:11334:1799","2:11336:1939","2:11338:56525","2:11340:60197","2:11341:60198","2:11342:56547","2:11343:56548","2:11344:4149","2:11345:3958","2:11346:4345","2:11347:59221","2:11348:59222","2:11349:4622","2:11350:60199","2:11351:59230","2:11352:56564","2:11355:56565","2:11358:56566","2:11361:2911","2:11365:2870","2:11369:54066","2:11372:56556","2:11375:56558","2:11378:60200","2:11381:60201","2:11384:56560","2:11387:56562","2:11390:60202","2:11393:60203","2:11396:2348","2:11399:60204","2:11402:60205","2:11405:60206","2:11408:60207","2:11410:60208","2:11412:60209","2:11414:60210","2:11415:60211","2:11416:60212","2:11419:60213","2:11422:53480","2:11425:56567","2:11428:60214","2:11431:60215","2:11434:60216","2:11437:4067","2:11439:4266","2:11440:54667","2:11441:54668","2:11442:54669","2:11443:60217","2:11445:3705","2:11446:60218"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:121:1840":{"id":"0:121:1840","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[586,8],"end":[600,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:322:1819":{"id":"0:322:1819","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[231,8],"end":[244,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11330:306":{"id":"2:11330:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11331:56526","`u8`":"1:12366:2282"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:152:1792":{"id":"0:152:1792","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[776,8],"end":[778,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get(&lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get(&lazy), Some(&92));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2645:214-0:126:1881":{"id":"a:2:2645:214-0:126:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2224-0:221:1881":{"id":"b:2:2224-0:221:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2226:53407"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:115:1819":{"id":"0:115:1819","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[494,8],"end":[499,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.set(92), Ok(()));\nassert_eq!(cell.set(62), Err(62));\n\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:153:1799":{"id":"0:153:1799","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[793,8],"end":[795,9]},"visibility":"public","docs":"Gets the mutable reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get_mut(&mut lazy), None);\nassert_eq!(*lazy, 92);\nassert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[110,18],"end":[110,23]},"visibility":{"restricted":{"parent":"0:266:1554","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:354:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2645:214-0:221:1881":{"id":"a:2:2645:214-0:221:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11348:59222":{"id":"2:11348:59222","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11347:59221"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50268:4128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:162:538":{"id":"0:162:538","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[806,8],"end":[809,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:275:1819":{"id":"0:275:1819","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[55,4],"end":[62,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:21789:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2500-0:179:1790":{"id":"b:2:2500-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:246:1901":{"id":"0:246:1901","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[1267,8],"end":[1272,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and\nreturns a reference to the result. This is equivalent\nto the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2515:1417":{"id":"2:2515:1417","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[31,18],"end":[31,23]},"visibility":{"restricted":{"parent":"0:266:1554","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:348:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:109":{"id":"0:109","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,4],"end":[656,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:111:907","0:112:1797","0:113:1792","0:114:1799","0:115:1819","0:116:1820","0:117:1836","0:121:1840","0:124:1863","0:125:1865"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2221-0:221:1881":{"id":"b:2:2221-0:221:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2223:2338"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[862,4],"end":[866,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:185:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:354:650":{"id":"0:354:650","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[110,18],"end":[110,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8536:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8525:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:296":{"id":"0:296","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[176,0],"end":[176,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::once_box::OnceBox","name":"OnceBox","id":"0:305:2226","glob":false}},"2:11434:60216":{"id":"2:11434:60216","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11021:3927","prim@char":"1:12349:2268"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[427,4],"end":[427,37]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2273:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2273:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11322:60193":{"id":"2:11322:60193","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:60208":{"id":"2:11410:60208","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:280:1840":{"id":"0:280:1840","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[88,4],"end":[106,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:21789:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:21789:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:60199":{"id":"2:11350:60199","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50249:4126","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2223:2338":{"id":"2:2223:2338","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11369:54066":{"id":"2:11369:54066","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:7061:120","str::rsplit":"2:11375:56558","self::pattern":"2:11021:3927","prim@char":"1:12349:2268","str::split_whitespace":"2:11347:59221"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49985:3406","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:1776-0:305:2226":{"id":"a:2:7718:1776-0:305:2226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3304-0:343:2214":{"id":"b:2:3304-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:93:59":{"id":"0:93:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[391,8],"end":[393,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:179:1790":{"id":"b:2:3304-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3306:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2709:2388-0:305:2226":{"id":"a:2:2709:2388-0:305:2226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2659:222-0:84:1790":{"id":"a:2:2659:222-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:2510:1418":{"id":"2:2510:1418","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:126:1881":{"id":"b:2:2224-0:126:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2226:53407"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2645:214-0:305:2226":{"id":"a:2:2645:214-0:305:2226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:675:2936":{"id":"5:675:2936","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11412:60209":{"id":"2:11412:60209","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5089:60854":{"id":"5:5089:60854","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6957:218","`Box<str>`":"5:276:2228"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2228","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6702:2604","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:305:2226":{"id":"b:2:2506-0:305:2226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2509:127","2:2510:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5074:1864":{"id":"5:5074:1864","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6957:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207:1799":{"id":"0:207:1799","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[978,8],"end":[980,9]},"visibility":"public","docs":"Gets the mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:343:2214":{"id":"b:2:2506-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:127","2:2510:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:137:650":{"id":"0:137:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[686,8],"end":[688,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8536:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8525:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:91":{"id":"0:91","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[390,4],"end":[394,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:93:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[798,4],"end":[803,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2887:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:157:224","0:158:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3306:1431":{"id":"2:3306:1431","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46490:3437","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2499:2864":{"id":"2:2499:2864","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2473:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:273:907":{"id":"0:273:907","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[39,4],"end":[41,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11361:2911":{"id":"2:11361:2911","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48019:174","prim@char":"1:12349:2268","self::pattern":"2:11021:3927"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11372:56556":{"id":"2:11372:56556","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11021:3927","prim@char":"1:12349:2268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10845:3420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113:1792":{"id":"0:113:1792","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[450,8],"end":[453,9]},"visibility":"public","docs":"Gets a reference to the underlying value.\n\nReturns `None` if the cell is empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:204:1797":{"id":"0:204:1797","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[914,8],"end":[916,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:346:59":{"id":"0:346:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[31,9],"end":[31,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:262":{"id":"0:262","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1340,4],"end":[1345,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:264:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:198:595":{"id":"0:198:595","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[900,8],"end":[902,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:229:650":{"id":"0:229:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1220,8],"end":[1222,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8536:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8525:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:54668":{"id":"2:11441:54668","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:188:650":{"id":"0:188:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[869,8],"end":[874,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8536:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8525:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99:409":{"id":"0:99:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[406,8],"end":[411,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:673:2934":{"id":"5:673:2934","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:84:1790":{"id":"0:84:1790","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[378,4],"end":[381,5]},"visibility":"public","docs":"A cell which can be written to only once. It is not thread safe.\n\nUnlike [`std::cell::RefCell`], a `OnceCell` provides simple `&`\nreferences to the contents.\n\n[`std::cell::RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nlet value: &String = cell.get_or_init(|| {\n    \"Hello, World!\".to_string()\n});\nassert_eq!(value, \"Hello, World!\");\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:109","a:2:2645:214-0:84:1790","a:2:2659:222-0:84:1790","a:2:2709:2388-0:84:1790","b:2:3304-0:84:1790","b:2:2503-0:84:1790","b:2:2500-0:84:1790","b:2:2506-0:84:1790","b:2:2224-0:84:1790","b:2:2511-0:84:1790","b:2:2221-0:84:1790","b:2:2496-0:84:1790","b:5:671-0:84:1790","0:87","0:89","0:91","0:94","0:97","0:101","0:104","0:106"]}},"0:191:409":{"id":"0:191:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[878,8],"end":[883,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2505:668":{"id":"2:2505:668","crate_id":2,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"primitive","inner":"never"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:195:668":{"id":"0:195:668","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[894,8],"end":[896,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1232,4],"end":[1232,94]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2500-0:84:1790":{"id":"b:2:2500-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11341:60198":{"id":"2:11341:60198","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2974:2546","str::slice_unchecked":"2:11340:60197","`str`":"1:12355:2273"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:349:2223":{"id":"b:2:2506-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:127","2:2510:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2659:222-0:343:2214":{"id":"a:2:2659:222-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2709:2388-0:349:2223":{"id":"a:2:2709:2388-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11331:56526":{"id":"2:11331:56526","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12366:2282"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[683,4],"end":[683,94]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[685,4],"end":[689,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:137:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11415:60211":{"id":"2:11415:60211","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:185:59":{"id":"0:185:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[863,8],"end":[865,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:1776-0:343:2214":{"id":"a:2:7718:1776-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:112:1797":{"id":"0:112:1797","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[442,8],"end":[444,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1253,4],"end":[1324,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:246:1901","0:248:1907","0:250:1792","0:251:1799"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2659:222-0:126:1881":{"id":"a:2:2659:222-0:126:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[421,4],"end":[425,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2268:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2268:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:103:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2502:668":{"id":"2:2502:668","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2503-0:179:1790":{"id":"b:2:2503-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2505:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:100:411":{"id":"0:100:411","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[413,8],"end":[418,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:126:1881":{"id":"b:2:2496-0:126:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2499:2864"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2506-0:126:1881":{"id":"b:2:2506-0:126:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2509:127","2:2510:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11343:56548":{"id":"2:11343:56548","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11342:56547"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:1776-0:179:1790":{"id":"a:2:7718:1776-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11419:60213":{"id":"2:11419:60213","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11021:3927","prim@char":"1:12349:2268"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11328:53418":{"id":"2:11328:53418","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10589:4224"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5090:3539":{"id":"5:5090:3539","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6957:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2221-0:126:1881":{"id":"b:2:2221-0:126:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2223:2338"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:250:1792":{"id":"0:250:1792","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[1304,8],"end":[1306,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get(&lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get(&lazy), Some(&92));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:352:59":{"id":"0:352:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[110,9],"end":[110,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:124:1863":{"id":"0:124:1863","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[631,8],"end":[633,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2509:127":{"id":"2:2509:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:5:671-0:179:1790":{"id":"b:5:671-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:673:2934","5:674:2935","5:675:2936"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11393:60203":{"id":"2:11393:60203","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:208:1939":{"id":"0:208:1939","crate_id":0,"name":"get_unchecked","span":{"filename":"src/lib.rs","begin":[990,8],"end":[992,9]},"visibility":"public","docs":"Get the reference to the underlying value, without checking if the\ncell is initialized.\n\n# Safety\n\nCaller must ensure that the cell is in initialized state, and that\nthe contents are acquired by (synchronized to) this thread.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11390:60202":{"id":"2:11390:60202","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:179:1790":{"id":"b:2:2496-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2499:2864"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:283":{"id":"0:283","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[115,0],"end":[173,1]},"visibility":{"restricted":{"parent":"0:266:1554","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:284:907","0:285:1792","0:286:1819","0:287:1836","0:290:1840"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2500-0:349:2223":{"id":"b:2:2500-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3304-0:84:1790":{"id":"b:2:3304-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3306:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11351:59230":{"id":"2:11351:59230","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50277:4129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11321:2871":{"id":"2:11321:2871","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:84:1790":{"id":"b:2:2224-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2226:53407"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2709:2388-0:343:2214":{"id":"a:2:2709:2388-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:141:907":{"id":"0:141:907","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[706,8],"end":[708,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing function.\n\n# Example\n```\n# fn main() {\nuse once_cell::unsync::Lazy;\n\nlet hello = \"Hello, World!\".to_string();\n\nlet lazy = Lazy::new(|| hello.to_uppercase());\n\nassert_eq!(&*lazy, \"HELLO, WORLD!\");\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["init",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:255:224":{"id":"0:255:224","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1327,8],"end":[1327,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:11381:60201":{"id":"2:11381:60201","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"2:11369:54066","prim@char":"1:12349:2268","self::pattern":"2:11021:3927","str::split_terminator":"2:11378:60200"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50053:4118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[294,4],"end":[294,54]},"visibility":{"restricted":{"parent":"0:297:2225","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11344:4149":{"id":"2:11344:4149","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12349:2268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49955:4112","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5072":{"id":"5:5072","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:4983:1343","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5073:60850","5:5074:1864","5:5077:60851","5:5080:60852","5:5088:60853","5:5089:60854","5:5090:3539","5:5091:54665","5:5092:54666"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11352:56564":{"id":"2:11352:56564","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11021:3927","prim@char":"1:12349:2268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:111:907":{"id":"0:111:907","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[437,8],"end":[439,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7717:1777-0:349:2223":{"id":"a:2:7717:1777-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2514:127":{"id":"2:2514:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39262:3384","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:206:1952":{"id":"0:206:1952","crate_id":0,"name":"wait","span":{"filename":"src/lib.rs","begin":[952,8],"end":[960,9]},"visibility":"public","docs":"Gets the reference to the underlying value, blocking the current\nthread until it is set.\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell = std::sync::Arc::new(OnceCell::new());\nlet t = std::thread::spawn({\n    let cell = std::sync::Arc::clone(&cell);\n    move || cell.set(92).unwrap()\n});\n\n// Returns immediately, but might return None.\nlet _value_or_none = cell.get();\n\n// Will return 92, but might block until the other thread does `.set`.\nlet value: &u32 = cell.wait();\nassert_eq!(*value, 92);\nt.join().unwrap();\n```","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2500-0:305:2226":{"id":"b:2:2500-0:305:2226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11439:4266":{"id":"2:11439:4266","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:189":{"id":"0:189","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[877,4],"end":[891,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:191:409","0:192:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11402:60205":{"id":"2:11402:60205","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7061:120","prim@char":"1:12349:2268","str::rmatch_indices":"2:11405:60206","self::pattern":"2:11021:3927"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50135:4121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:114:1799":{"id":"0:114:1799","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[472,8],"end":[475,9]},"visibility":"public","docs":"Gets a mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\n*cell.get_mut().unwrap() = 93;\nassert_eq!(cell.get(), Some(&93));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2226:53407":{"id":"2:2226:53407","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7717:1777-0:343:2214":{"id":"a:2:7717:1777-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2500-0:126:1881":{"id":"b:2:2500-0:126:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:210:1820":{"id":"0:210:1820","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[1039,8],"end":[1046,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:209:1819"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5088:60853":{"id":"5:5088:60853","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6957:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[31,9],"end":[31,16]},"visibility":{"restricted":{"parent":"0:266:1554","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:346:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11332:1792":{"id":"2:11332:1792","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48019:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11378:60200":{"id":"2:11378:60200","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:12349:2268","str::split":"2:11369:54066","str::rsplit_terminator":"2:11381:60201","`DoubleEndedIterator`":"2:7061:120","self::pattern":"2:11021:3927"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50035:4117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[691,4],"end":[720,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:141:907","0:142:1891"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:266:1554":{"id":"0:266:1554","crate_id":0,"name":"race","span":{"filename":"src/race.rs","begin":[1,0],"end":[304,1]},"visibility":"public","docs":"Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.\n\nIf two threads race to initialize a type from the `race` module, they\ndon't block, execute initialization function together, but only one of\nthem stores the result.\n\nThis module does not require `std` feature.\n\n# Atomic orderings\n\nAll types in this module use `Acquire` and `Release`\n[atomic orderings](Ordering) for all their operations. While this is not\nstrictly necessary for types other than `OnceBox`, it is useful for users as\nit allows them to be certain that after `get` or `get_or_init` returns on\none thread, any side-effects caused by the setter thread prior to them\ncalling `set` or `get_or_init` will be made visible to that thread; without\nit, it's possible for it to appear as if they haven't happened yet from the\ngetter thread's perspective. This is an acceptable tradeoff to make since\n`Acquire` and `Release` have very little performance overhead on most\narchitectures versus `Relaxed`.","links":{"Ordering":"2:48229:178"},"attrs":["#[cfg(feature = \"race\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:343:2214","0:349:2223","0:296"],"is_stripped":false}},"0:142:1891":{"id":"0:142:1891","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[713,8],"end":[719,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:305:2226":{"id":"b:2:2511-0:305:2226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2514:127","2:2515:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:2012":{"id":"0:0:2012","crate_id":0,"name":"once_cell","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1378,1]},"visibility":"public","docs":"# Overview\n\n`once_cell` provides two new cell-like types, [`unsync::OnceCell`] and [`sync::OnceCell`]. A `OnceCell`\nmight store arbitrary non-`Copy` types, can be assigned to at most once and provides direct access\nto the stored contents. The core API looks *roughly* like this (and there's much more inside, read on!):\n\n```rust,ignore\nimpl<T> OnceCell<T> {\n    const fn new() -> OnceCell<T> { ... }\n    fn set(&self, value: T) -> Result<(), T> { ... }\n    fn get(&self) -> Option<&T> { ... }\n}\n```\n\nNote that, like with [`RefCell`] and [`Mutex`], the `set` method requires only a shared reference.\nBecause of the single assignment restriction `get` can return a `&T` instead of `Ref<T>`\nor `MutexGuard<T>`.\n\nThe `sync` flavor is thread-safe (that is, implements the [`Sync`] trait), while the `unsync` one is not.\n\n[`unsync::OnceCell`]: unsync/struct.OnceCell.html\n[`sync::OnceCell`]: sync/struct.OnceCell.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n[`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n# Recipes\n\n`OnceCell` might be useful for a variety of patterns.\n\n## Safe Initialization of Global Data\n\n```rust\nuse std::{env, io};\n\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct Logger {\n    // ...\n}\nstatic INSTANCE: OnceCell<Logger> = OnceCell::new();\n\nimpl Logger {\n    pub fn global() -> &'static Logger {\n        INSTANCE.get().expect(\"logger is not initialized\")\n    }\n\n    fn from_cli(args: env::Args) -> Result<Logger, std::io::Error> {\n       // ...\n#      Ok(Logger {})\n    }\n}\n\nfn main() {\n    let logger = Logger::from_cli(env::args()).unwrap();\n    INSTANCE.set(logger).unwrap();\n    // use `Logger::global()` from now on\n}\n```\n\n## Lazy Initialized Global Data\n\nThis is essentially the `lazy_static!` macro, but without a macro.\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\n\nuse once_cell::sync::OnceCell;\n\nfn global_data() -> &'static Mutex<HashMap<i32, String>> {\n    static INSTANCE: OnceCell<Mutex<HashMap<i32, String>>> = OnceCell::new();\n    INSTANCE.get_or_init(|| {\n        let mut m = HashMap::new();\n        m.insert(13, \"Spica\".to_string());\n        m.insert(74, \"Hoyten\".to_string());\n        Mutex::new(m)\n    })\n}\n```\n\nThere are also the [`sync::Lazy`] and [`unsync::Lazy`] convenience types to streamline this pattern:\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\nuse once_cell::sync::Lazy;\n\nstatic GLOBAL_DATA: Lazy<Mutex<HashMap<i32, String>>> = Lazy::new(|| {\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    Mutex::new(m)\n});\n\nfn main() {\n    println!(\"{:?}\", GLOBAL_DATA.lock().unwrap());\n}\n```\n\nNote that the variable that holds `Lazy` is declared as `static`, *not*\n`const`. This is important: using `const` instead compiles, but works wrong.\n\n[`sync::Lazy`]: sync/struct.Lazy.html\n[`unsync::Lazy`]: unsync/struct.Lazy.html\n\n## General purpose lazy evaluation\n\nUnlike `lazy_static!`, `Lazy` works with local variables.\n\n```rust\nuse once_cell::unsync::Lazy;\n\nfn main() {\n    let ctx = vec![1, 2, 3];\n    let thunk = Lazy::new(|| {\n        ctx.iter().sum::<i32>()\n    });\n    assert_eq!(*thunk, 6);\n}\n```\n\nIf you need a lazy field in a struct, you probably should use `OnceCell`\ndirectly, because that will allow you to access `self` during initialization.\n\n```rust\nuse std::{fs, path::PathBuf};\n\nuse once_cell::unsync::OnceCell;\n\nstruct Ctx {\n    config_path: PathBuf,\n    config: OnceCell<String>,\n}\n\nimpl Ctx {\n    pub fn get_config(&self) -> Result<&str, std::io::Error> {\n        let cfg = self.config.get_or_try_init(|| {\n            fs::read_to_string(&self.config_path)\n        })?;\n        Ok(cfg.as_str())\n    }\n}\n```\n\n## Lazily Compiled Regex\n\nThis is a `regex!` macro which takes a string literal and returns an\n*expression* that evaluates to a `&'static Regex`:\n\n```\nmacro_rules! regex {\n    ($re:literal $(,)?) => {{\n        static RE: once_cell::sync::OnceCell<regex::Regex> = once_cell::sync::OnceCell::new();\n        RE.get_or_init(|| regex::Regex::new($re).unwrap())\n    }};\n}\n```\n\nThis macro can be useful to avoid the \"compile regex on every loop iteration\" problem.\n\n## Runtime `include_bytes!`\n\nThe `include_bytes` macro is useful to include test resources, but it slows\ndown test compilation a lot. An alternative is to load the resources at\nruntime:\n\n```\nuse std::path::Path;\n\nuse once_cell::sync::OnceCell;\n\npub struct TestResource {\n    path: &'static str,\n    cell: OnceCell<Vec<u8>>,\n}\n\nimpl TestResource {\n    pub const fn new(path: &'static str) -> TestResource {\n        TestResource { path, cell: OnceCell::new() }\n    }\n    pub fn bytes(&self) -> &[u8] {\n        self.cell.get_or_init(|| {\n            let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n            let path = Path::new(dir.as_str()).join(self.path);\n            std::fs::read(&path).unwrap_or_else(|_err| {\n                panic!(\"failed to load test resource: {}\", path.display())\n            })\n        }).as_slice()\n    }\n}\n\nstatic TEST_IMAGE: TestResource = TestResource::new(\"test_data/lena.png\");\n\n#[test]\nfn test_sobel_filter() {\n    let rgb: &[u8] = TEST_IMAGE.bytes();\n    // ...\n# drop(rgb);\n}\n```\n\n## `lateinit`\n\n`LateInit` type for delayed initialization. It is reminiscent of Kotlin's\n`lateinit` keyword and allows construction of cyclic data structures:\n\n\n```\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct LateInit<T> { cell: OnceCell<T> }\n\nimpl<T> LateInit<T> {\n    pub fn init(&self, value: T) {\n        assert!(self.cell.set(value).is_ok())\n    }\n}\n\nimpl<T> Default for LateInit<T> {\n    fn default() -> Self { LateInit { cell: OnceCell::default() } }\n}\n\nimpl<T> std::ops::Deref for LateInit<T> {\n    type Target = T;\n    fn deref(&self) -> &T {\n        self.cell.get().unwrap()\n    }\n}\n\n#[derive(Default, Debug)]\nstruct A<'a> {\n    b: LateInit<&'a B<'a>>,\n}\n\n#[derive(Default, Debug)]\nstruct B<'a> {\n    a: LateInit<&'a A<'a>>\n}\n\nfn build_cycle() {\n    let a = A::default();\n    let b = B::default();\n    a.b.init(&b);\n    b.a.init(&a);\n    println!(\"{:?}\", a.b.a.b.a);\n}\n```\n\n# Comparison with std\n\n|`!Sync` types         | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`Cell<T>`             | `T`                    | requires `T: Copy` for `get`                  |\n|`RefCell<T>`          | `RefMut<T>` / `Ref<T>` | may panic at runtime                          |\n|`unsync::OnceCell<T>` | `&T`                   | assignable only once                          |\n\n|`Sync` types          | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`AtomicT`             | `T`                    | works only with certain `Copy` types          |\n|`Mutex<T>`            | `MutexGuard<T>`        | may deadlock at runtime, may block the thread |\n|`sync::OnceCell<T>`   | `&T`                   | assignable only once, may block the thread    |\n\nTechnically, calling `get_or_init` will also cause a panic or a deadlock if it recursively calls\nitself. However, because the assignment can happen only once, such cases should be more rare than\nequivalents with `RefCell` and `Mutex`.\n\n# Minimum Supported `rustc` Version\n\nThis crate's minimum supported `rustc` version is `1.56.0`.\n\nIf only the `std` feature is enabled, MSRV will be updated conservatively, supporting at least latest 8 versions of the compiler.\nWhen using other features, like `parking_lot`, MSRV might be updated more frequently, up to the latest stable.\nIn both cases, increasing MSRV is *not* considered a semver-breaking change.\n\n# Implementation details\n\nThe implementation is based on the [`lazy_static`](https://github.com/rust-lang-nursery/lazy-static.rs/)\nand [`lazy_cell`](https://github.com/indiv0/lazycell/) crates and [`std::sync::Once`]. In some sense,\n`once_cell` just streamlines and unifies those APIs.\n\nTo implement a sync flavor of `OnceCell`, this crates uses either a custom\nre-implementation of `std::sync::Once` or `parking_lot::Mutex`. This is\ncontrolled by the `parking_lot` feature (disabled by default). Performance\nis the same for both cases, but the `parking_lot` based `OnceCell<T>` is\nsmaller by up to 16 bytes.\n\nThis crate uses `unsafe`.\n\n[`std::sync::Once`]: https://doc.rust-lang.org/std/sync/struct.Once.html\n\n# F.A.Q.\n\n**Should I use lazy_static or once_cell?**\n\nTo the first approximation, `once_cell` is both more flexible and more convenient than `lazy_static`\nand should be preferred.\n\nUnlike `once_cell`, `lazy_static` supports spinlock-based implementation of blocking which works with\n`#![no_std]`.\n\n`lazy_static` has received significantly more real world testing, but `once_cell` is also a widely\nused crate.\n\n**Should I use the sync or unsync flavor?**\n\nBecause Rust compiler checks thread safety for you, it's impossible to accidentally use `unsync` where\n`sync` is required. So, use `unsync` in single-threaded code and `sync` in multi-threaded. It's easy\nto switch between the two if code becomes multi-threaded later.\n\nAt the moment, `unsync` has an additional benefit that reentrant initialization causes a panic, which\nmight be easier to debug than a deadlock.\n\n**Does this crate support async?**\n\nNo, but you can use [`async_once_cell`](https://crates.io/crates/async_once_cell) instead.\n\n# Related crates\n\n* [double-checked-cell](https://github.com/niklasf/double-checked-cell)\n* [lazy-init](https://crates.io/crates/lazy-init)\n* [lazycell](https://crates.io/crates/lazycell)\n* [mitochondria](https://crates.io/crates/mitochondria)\n* [lazy_static](https://crates.io/crates/lazy_static)\n* [async_once_cell](https://crates.io/crates/async_once_cell)\n\nMost of this crate's functionality is available in `std` in nightly Rust.\nSee the [tracking issue](https://github.com/rust-lang/rust/issues/74465).","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:70:1770","0:167:1363","0:266:1554"],"is_stripped":false}},"0:323:1836":{"id":"0:323:1836","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[252,8],"end":[261,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11375:56558":{"id":"2:11375:56558","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"2:11369:54066","prim@char":"1:12349:2268","self::pattern":"2:11021:3927","`DoubleEndedIterator`":"2:7061:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50003:3414","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:2388-0:84:1790":{"id":"a:2:2709:2388-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:256:536":{"id":"0:256:536","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1328,8],"end":[1330,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:349:2223":{"id":"0:349:2223","crate_id":0,"name":"OnceBool","span":{"filename":"src/race.rs","begin":[111,0],"end":[113,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:283","a:2:2645:214-0:349:2223","a:2:2659:222-0:349:2223","a:2:7718:1776-0:349:2223","a:2:2709:2388-0:349:2223","a:2:7717:1777-0:349:2223","b:2:3304-0:349:2223","b:2:2500-0:349:2223","b:2:2506-0:349:2223","b:2:2224-0:349:2223","b:2:2511-0:349:2223","b:2:2221-0:349:2223","b:2:2496-0:349:2223","0:351","0:353"]}},"2:11342:56547":{"id":"2:11342:56547","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11343:56548"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:193":{"id":"0:193","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[893,4],"end":[897,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:195:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2506-0:221:1881":{"id":"b:2:2506-0:221:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2509:127","2:2510:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2496-0:221:1881":{"id":"b:2:2496-0:221:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2499:2864"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:286:1819":{"id":"0:286:1819","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[133,4],"end":[135,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11405:60206":{"id":"2:11405:60206","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11021:3927","str::match_indices":"2:11402:60205","prim@char":"1:12349:2268","`DoubleEndedIterator`":"2:7061:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50153:4122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:240:1891":{"id":"0:240:1891","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[1244,8],"end":[1250,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:305:2226":{"id":"b:2:3304-0:305:2226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3306:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2511-0:349:2223":{"id":"b:2:2511-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:127","2:2515:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:179:1790":{"id":"0:179:1790","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[860,4],"end":[860,35]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.\n\n`OnceCell` provides `&` references to the contents without RAII guards.\n\nReading a non-`None` value out of `OnceCell` establishes a\nhappens-before relationship with a corresponding write. For example, if\nthread A initializes the cell with `get_or_init(f)`, and thread B\nsubsequently reads the result of this call, B also observes all the side\neffects of `f`.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<String> = OnceCell::new();\nassert!(CELL.get().is_none());\n\nstd::thread::spawn(|| {\n    let value: &String = CELL.get_or_init(|| {\n        \"Hello, World!\".to_string()\n    });\n    assert_eq!(value, \"Hello, World!\");\n}).join().unwrap();\n\nlet value: Option<&String> = CELL.get();\nassert!(value.is_some());\nassert_eq!(value.unwrap().as_str(), \"Hello, World!\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:201","a:2:2645:214-0:179:1790","a:2:2659:222-0:179:1790","a:2:7718:1776-0:179:1790","a:2:2709:2388-0:179:1790","a:2:7717:1777-0:179:1790","b:2:3304-0:179:1790","b:2:2503-0:179:1790","b:2:2500-0:179:1790","b:2:2506-0:179:1790","b:2:2224-0:179:1790","b:2:2511-0:179:1790","b:2:2221-0:179:1790","b:2:2496-0:179:1790","b:5:671-0:179:1790","0:183","0:186","0:189","0:193","0:196","0:199"]}},"0:290:1840":{"id":"0:290:1840","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[157,4],"end":[162,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:158:536":{"id":"0:158:536","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[800,8],"end":[802,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[907,4],"end":[1179,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:203:907","0:204:1797","0:205:1792","0:206:1952","0:207:1799","0:208:1939","0:209:1819","0:210:1820","0:212:1836","0:216:1840","0:219:1863","0:220:1865"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:216:1840":{"id":"0:216:1840","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[1111,8],"end":[1125,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and\nthe cell remains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`.\nThe exact outcome is unspecified. Current implementation\ndeadlocks, but this may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:84:1790":{"id":"b:2:2496-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2499:2864"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:348:650":{"id":"0:348:650","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[31,18],"end":[31,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:8536:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:8525:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11323:60194":{"id":"2:11323:60194","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:84:1790":{"id":"b:2:2506-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2509:127","2:2510:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:96:650":{"id":"0:96:650","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[397,8],"end":[402,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8536:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8525:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:179:1790":{"id":"b:2:2506-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2509:127","2:2510:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:186":{"id":"0:186","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[868,4],"end":[875,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:188:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:166:59":{"id":"0:166:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[814,8],"end":[816,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:907":{"id":"0:320:907","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[214,8],"end":[216,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2221-0:84:1790":{"id":"b:2:2221-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2223:2338"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:285:1792":{"id":"0:285:1792","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[124,4],"end":[126,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5080:60852":{"id":"5:5080:60852","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6957:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:203:907":{"id":"0:203:907","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[909,8],"end":[911,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:2870":{"id":"2:11365:2870","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11021:3927","prim@char":"1:12349:2268","`None`":"2:48019:174"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:315":{"id":"0:315","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[203,4],"end":[210,5]},"visibility":{"restricted":{"parent":"0:297:2225","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:2911:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:317:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:252":{"id":"0:252","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1326,4],"end":[1331,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:2887:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:255:224","0:256:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11399:60204":{"id":"2:11399:60204","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:12349:2268","`DoubleEndedIterator`":"2:7061:120","str::matches":"2:11396:2348","self::pattern":"2:11021:3927"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50207:4125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:2388-0:126:1881":{"id":"a:2:2709:2388-0:126:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2224-0:349:2223":{"id":"b:2:2224-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:53407"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:70:1770":{"id":"0:70:1770","crate_id":0,"name":"unsync","span":{"filename":"src/lib.rs","begin":[348,0],"end":[348,14]},"visibility":"public","docs":"Single-threaded version of `OnceCell`.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:84:1790","0:126:1881"],"is_stripped":false}},"5:5092:54666":{"id":"5:5092:54666","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11442:54669"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428:60214":{"id":"2:11428:60214","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12349:2268","self::pattern":"2:11021:3927"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:668":{"id":"0:108:668","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[430,8],"end":[432,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:284:907":{"id":"0:284:907","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[118,4],"end":[120,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:327:1840":{"id":"0:327:1840","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[270,8],"end":[291,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:2388-0:221:1881":{"id":"a:2:2709:2388-0:221:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11446:60218":{"id":"2:11446:60218","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4451:60218"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50302:4131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2221-0:343:2214":{"id":"b:2:2221-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2338"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7717:1777-0:126:1881":{"id":"a:2:7717:1777-0:126:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:145":{"id":"0:145","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[722,4],"end":[796,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:148:1901","0:150:1907","0:152:1792","0:153:1799"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:126:1881":{"id":"0:126:1881","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[678,4],"end":[681,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy: Lazy<i32> = Lazy::new(|| {\n    println!(\"initializing\");\n    92\n});\nprintln!(\"ready\");\nprintln!(\"{}\", *lazy);\nprintln!(\"{}\", *lazy);\n\n// Prints:\n//   ready\n//   initializing\n//   92\n//   92\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:138","0:145","a:2:2645:214-0:126:1881","a:2:2659:222-0:126:1881","a:2:2709:2388-0:126:1881","a:2:7717:1777-0:126:1881","b:2:3304-0:126:1881","b:2:2500-0:126:1881","b:2:2506-0:126:1881","b:2:2224-0:126:1881","b:2:2511-0:126:1881","b:2:2221-0:126:1881","b:2:2496-0:126:1881","0:131","0:134","0:154","0:159","0:164"]}},"2:11422:53480":{"id":"2:11422:53480","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12349:2268","self::pattern":"2:11021:3927"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:239:907":{"id":"0:239:907","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[1237,8],"end":[1239,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11358:56566":{"id":"2:11358:56566","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11021:3927","prim@char":"1:12349:2268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:595":{"id":"0:103:595","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[422,8],"end":[424,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2221-0:349:2223":{"id":"b:2:2221-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2338"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:116:1820":{"id":"0:116:1820","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[515,8],"end":[527,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:115:1819"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:54667":{"id":"2:11440:54667","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:209:1819":{"id":"0:209:1819","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[1017,8],"end":[1022,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<i32> = OnceCell::new();\n\nfn main() {\n    assert!(CELL.get().is_none());\n\n    std::thread::spawn(|| {\n        assert_eq!(CELL.set(92), Ok(()));\n    }).join().unwrap();\n\n    assert_eq!(CELL.set(62), Err(62));\n    assert_eq!(CELL.get(), Some(&92));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:311:650":{"id":"0:311:650","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[192,8],"end":[194,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"core::fmt::Formatter","id":"2:8536:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"core::fmt::Result","id":"2:8525:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[429,4],"end":[433,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:108:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[36,0],"end":[107,1]},"visibility":{"restricted":{"parent":"0:266:1554","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:273:907","0:274:1792","0:275:1819","0:276:1836","0:280:1840"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7717:1777-0:221:1881":{"id":"a:2:7717:1777-0:221:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11387:56562":{"id":"2:11387:56562","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:11021:3927","prim@char":"1:12349:2268","str::splitn":"2:11384:56560"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50107:3416","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:3931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:305:2226":{"id":"0:305:2226","crate_id":0,"name":"OnceBox","span":{"filename":"src/race.rs","begin":[186,4],"end":[189,5]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:318","a:2:2645:214-0:305:2226","a:2:7718:1776-0:305:2226","a:2:2709:2388-0:305:2226","a:2:7717:1777-0:305:2226","b:2:3304-0:305:2226","b:2:2500-0:305:2226","b:2:2506-0:305:2226","b:2:2224-0:305:2226","b:2:2511-0:305:2226","b:2:2221-0:305:2226","b:2:2496-0:305:2226","0:309","0:312","0:315","0:330"]}},"0:287:1836":{"id":"0:287:1836","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[143,4],"end":[148,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:343:2214":{"id":"b:2:2511-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:127","2:2515:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2500-0:343:2214":{"id":"b:2:2500-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:314:59":{"id":"0:314:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[198,8],"end":[200,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:59221":{"id":"2:11347:59221","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11348:59222"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50259:4127","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2645:214-0:349:2223":{"id":"a:2:2645:214-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3304-0:221:1881":{"id":"b:2:3304-0:221:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3306:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11338:56525":{"id":"2:11338:56525","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[396,4],"end":[403,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:96:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[812,4],"end":[817,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:166:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:274:1792":{"id":"0:274:1792","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[45,4],"end":[48,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:21789:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:317:571":{"id":"0:317:571","crate_id":0,"name":"drop","span":{"filename":"src/race.rs","begin":[204,8],"end":[209,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:60217":{"id":"2:11443:60217","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4453:60217"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50284:4130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:148:1901":{"id":"0:148:1901","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[737,8],"end":[742,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and returns a reference to\nthe result.\n\nThis is equivalent to the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:4622":{"id":"2:11349:4622","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50239:3516","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:4067":{"id":"2:11437:4067","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:10983:126","`FromStr`":"2:10982:2582"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10982:2582","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10982:2582","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11396:2348":{"id":"2:11396:2348","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12349:2268","self::pattern":"2:11021:3927","`DoubleEndedIterator`":"2:7061:120","str::matches":"2:11396:2348"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50189:4124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1333,4],"end":[1338,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2900:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:260:538"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:674:2935":{"id":"5:674:2935","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:318":{"id":"0:318","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[212,4],"end":[292,5]},"visibility":{"restricted":{"parent":"0:297:2225","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:320:907","0:321:1792","0:322:1819","0:323:1836","0:327:1840"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7717:1777-0:305:2226":{"id":"a:2:7717:1777-0:305:2226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[197,4],"end":[201,5]},"visibility":{"restricted":{"parent":"0:297:2225","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:314:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:157:224":{"id":"0:157:224","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[799,8],"end":[799,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:3304-0:349:2223":{"id":"b:2:3304-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:276:1836":{"id":"0:276:1836","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[70,4],"end":[79,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:21789:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:21789:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5077:60851":{"id":"5:5077:60851","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6957:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11329:60196":{"id":"2:11329:60196","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:343:2214":{"id":"b:2:2496-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:2864"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7717:1777-0:179:1790":{"id":"a:2:7717:1777-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:221:1881":{"id":"0:221:1881","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[1214,4],"end":[1217,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\nThis type is thread-safe and can be used in statics.\n\n# Example\n\n```\nuse std::collections::HashMap;\n\nuse once_cell::sync::Lazy;\n\nstatic HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {\n    println!(\"initializing\");\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    m\n});\n\nfn main() {\n    println!(\"ready\");\n    std::thread::spawn(|| {\n        println!(\"{:?}\", HASHMAP.get(&13));\n    }).join().unwrap();\n    println!(\"{:?}\", HASHMAP.get(&74));\n\n    // Prints:\n    //   ready\n    //   initializing\n    //   Some(\"Spica\")\n    //   Some(\"Hoyten\")\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:236","0:243","a:2:2645:214-0:221:1881","a:2:2709:2388-0:221:1881","a:2:7717:1777-0:221:1881","b:2:3304-0:221:1881","b:2:2500-0:221:1881","b:2:2506-0:221:1881","b:2:2224-0:221:1881","b:2:2511-0:221:1881","b:2:2221-0:221:1881","b:2:2496-0:221:1881","0:226","0:230","0:233","0:252","0:257","0:262"]}},"2:11340:60197":{"id":"2:11340:60197","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2970:2545","str::slice_mut_unchecked":"2:11341:60198","`str`":"1:12355:2273"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:305:2226":{"id":"b:2:2496-0:305:2226","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2499:2864"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2645:214-0:179:1790":{"id":"a:2:2645:214-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5073:60850":{"id":"5:5073:60850","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2228","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6702:2604","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2228","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6702:2604","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:179:1790":{"id":"b:2:2511-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2514:127","2:2515:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2511-0:221:1881":{"id":"b:2:2511-0:221:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2514:127","2:2515:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11445:3705":{"id":"2:11445:3705","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4454:3705"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50293:3706","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2500-0:221:1881":{"id":"b:2:2500-0:221:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:199":{"id":"0:199","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[905,4],"end":[905,37]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2273:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2273:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:309":{"id":"0:309","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[191,4],"end":[195,5]},"visibility":{"restricted":{"parent":"0:297:2225","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:305:2226","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:311:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11336:1939":{"id":"2:11336:1939","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:4345":{"id":"2:11346:4345","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49971:3514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[405,4],"end":[419,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:99:409","0:100:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:192:411":{"id":"0:192:411","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[885,8],"end":[890,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:56565":{"id":"2:11355:56565","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11021:3927","prim@char":"1:12349:2268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:349:2223":{"id":"a:2:2659:222-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:196":{"id":"0:196","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[899,4],"end":[903,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2268:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2268:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:198:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2503-0:84:1790":{"id":"b:2:2503-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2505:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11414:60210":{"id":"2:11414:60210","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11334:1799":{"id":"2:11334:1799","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48019:174"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:343:2214":{"id":"0:343:2214","crate_id":0,"name":"OnceNonZeroUsize","span":{"filename":"src/race.rs","begin":[32,0],"end":[34,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:272","a:2:2645:214-0:343:2214","a:2:2659:222-0:343:2214","a:2:7718:1776-0:343:2214","a:2:2709:2388-0:343:2214","a:2:7717:1777-0:343:2214","b:2:3304-0:343:2214","b:2:2500-0:343:2214","b:2:2506-0:343:2214","b:2:2224-0:343:2214","b:2:2511-0:343:2214","b:2:2221-0:343:2214","b:2:2496-0:343:2214","0:345","0:347"]}},"b:2:2221-0:179:1790":{"id":"b:2:2221-0:179:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2223:2338"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11345:3958":{"id":"2:11345:3958","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12349:2268"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49961:4113","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3304-0:126:1881":{"id":"b:2:3304-0:126:1881","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3306:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:236":{"id":"0:236","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1234,4],"end":[1251,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:239:907","0:240:1891"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:260:538":{"id":"0:260:538","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1334,8],"end":[1337,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:248:1907":{"id":"0:248:1907","crate_id":0,"name":"force_mut","span":{"filename":"src/lib.rs","begin":[1286,8],"end":[1289,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and\nreturns a mutable reference to the result. This is equivalent\nto the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet mut lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force_mut(&mut lazy), &mut 92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1219,4],"end":[1223,5]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:229:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11325:60195":{"id":"2:11325:60195","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11323:60194"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[805,4],"end":[810,5]},"visibility":{"restricted":{"parent":"0:70:1770","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:2921:1838","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:2900:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:126:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:162:538"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5091:54665":{"id":"5:5091:54665","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11441:54668"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6957:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:349:2223":{"id":"b:2:2496-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:2864"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2511-0:84:1790":{"id":"b:2:2511-0:84:1790","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:84:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2514:127","2:2515:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1229,4],"end":[1229,74]},"visibility":{"restricted":{"parent":"0:167:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:179:1790","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:221:1881","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11384:56560":{"id":"2:11384:56560","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11387:56562","prim@char":"1:12349:2268","self::pattern":"2:11021:3927"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50089:3418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:3928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:1776-0:349:2223":{"id":"a:2:7718:1776-0:349:2223","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:349:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2224-0:343:2214":{"id":"b:2:2224-0:343:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2161","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:343:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:53407"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}}},"paths":{"12:1832:2947":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:1933:2478":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:21259:6750":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:10520:5631":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:5339:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:11323:3431":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:4869:5299":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:2476:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:50153:4122":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:4212:3427":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5660:7967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13518:6302":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:48558:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"9:896:4411":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4690:965":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:48292:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9401:5552":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11536:5783":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:9504:6989":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:9691:5105":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:50580:3945":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:47122:3735":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:7350:4997":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:46524:2377":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:8494:5526":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:48077:2947":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13557:6311":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:2547:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:50613:4204":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:1964:3779":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12739:6086":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:513:7315":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:1511:7382":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:135:39283":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:46451:2548":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:9369:3591":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:1021:5160":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:50708:4142":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:5528:4277":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:8779:2397":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:47113:3734":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:6749:3541":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:5606:4738":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:6596:3724":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:1736:3303":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:10924:3532":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:13506:6300":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:3081:3544":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:608:7373":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:46809:4249":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:6881:4770":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:3963:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:7920:4786":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:49814:3395":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:46569:3908":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"12:444:140":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:52689:4039":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6262:4686":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:5831:3740":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:8034:4656":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:49985:3406":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:8525:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:47084:3731":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:54051:6872":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6697:4986":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:3265:3532":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:6571:4764":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:9698:6897":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9738:5108":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:6032:2427":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:4250:3563":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:6975:8204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6276:4702":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:4177:202":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:4834:3438":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:2652:2161":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:50365:3929":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6337:4759":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:9031:61117":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:9805:5162":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:9357:3420":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:2645:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"18:515:5208":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:9317:5155":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:1067:4365":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:8212:5140":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:736:5202":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:9820:5163":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:4320:3569":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12060:5876":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:29472:3036":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:8368:5039":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:11637:58721":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"14:187:45156":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11643:7010":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:4716:7794":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11974:5867":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:48770:2831":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:9885:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:6164:4675":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"12:1120:4574":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:0:2245":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:7803:4783":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:10918:3534":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:539:7335":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11893:5832":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:10845:3420":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:2245:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:11432:5348":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:1580:7420":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:12909:6125":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:8526:5121":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"15:193:4595":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:7166:8216":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:5943:3459":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:2291:4980":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:7907:11085":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:8488:3612":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:12356:2274":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:8688:3838":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11721:5811":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:131:39282":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:7832:2496":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:1550:7401":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8929:3629":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1608:7439":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:305:1391":{"crate_id":1,"path":["std","thread"],"kind":"module"},"1:7853:2475":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:8585:2830":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:50950:4153":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:48102:2404":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12164:5893":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"9:19:4499":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:52211:4030":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:9497:6988":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13071:6163":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:1385:3682":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:50135:4121":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4565:7720":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:276:2228":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10845:5142":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4635:7753":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13192:6196":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"12:762:3460":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:52765:4046":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:52611:4051":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:1823:6894":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:8241:5144":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"7:0:1482":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:7719:2406":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:11499:3660":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:50712:4141":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:6756:2876":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:49014:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:12176:5895":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:575:7355":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"7:32:44418":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:7922:11087":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:678:6889":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:9223:46892":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:6987:3741":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:2726:7095":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:1348:2948":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:1394:3683":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13580:6315":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"18:719:5200":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10332:5182":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:4398:7679":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:29534:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:48330:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:5756:3658":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:8431:151":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"18:609:5415":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:10374:3840":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:6286:4318":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:46385:197":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:2464:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:8141:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:20435:3920":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:4913:3389":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"12:1555:4587":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:3751:5299":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11315:5729":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:6778:2434":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:47093:3732":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:10771:4119":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11161:7006":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:4361:7667":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:50720:4143":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:9350:5158":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:9396:3407":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:10702:3656":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:9526:5054":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:7095:4949":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:2974:2546":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"12:725:3681":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:7061:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"12:2069:3692":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:10296:5617":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"12:697:3685":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:2648:4969":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:20950:3921":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4761:7808":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"12:2190:61102":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:3179:6339":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:8573:3604":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"1:9616:3455":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:0:786":{"crate_id":6,"path":["libc"],"kind":"module"},"6:1738:7514":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4768:7811":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:9274:5547":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:50942:4152":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:3994:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:51756:4028":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:6742:59799":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:4644:7756":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:11026:3928":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:8346:3541":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:5480:7868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:54181:6878":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:52735:4043":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:5210:5527":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"0:349:2223":{"crate_id":0,"path":["once_cell","race","OnceBool"],"kind":"struct"},"2:50239:3516":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"9:676:4497":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:9469:3414":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"9:505:4399":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:6068:2436":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:1668:7486":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:6717:4382":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:2238:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:13158:6189":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:2664:2111":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12148:5889":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:6269:8054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:4432:6356":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:1500:7377":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7907:4785":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:9531:53626":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"12:60:61097":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:2396:3793":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:13478:6291":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:46785:3983":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:1111:3693":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10257:5614":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2783:2531":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:5366:3737":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:20402:3430":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:49301:6795":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:11137:5690":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:4102:7521":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:8881:61112":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4745:7803":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9712:5559":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"9:709:3626":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5554:7905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12874:6115":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:4900:8098":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:12730:6082":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13436:6285":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:5365:4674":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:6979:4342":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:4264:3565":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:2921:1838":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:9507:3415":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:7415:3723":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"12:1085:4573":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:46490:3437":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:11720:6911":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6277:8059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:6905:4196":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8425:3516":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:8339:46846":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:11996:4603":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:2767:2528":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:21690:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:12617:6039":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:6793:2876":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10490:5626":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12372:2288":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:5819:3663":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:9398:3593":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:6670:2429":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11426:5347":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:54089:6874":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:5504:7884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2741:2527":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10546:46847":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:7581:4701":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:5610:58995":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:7113:4950":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2380:4951":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11528:5781":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:8587:2831":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:5113:6371":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:5727:7995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:6209:3588":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:12514:5953":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:48756:2830":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:11183:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:8870:3627":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:50259:4127":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:54040:6871":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:951:3460":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:52287:4022":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9873:5564":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:3548:5299":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11575:3454":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:7788:5342":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:11219:53858":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:11035:3930":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:4912:6370":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:9892:3783":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:941:3459":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13100:6171":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5510:7885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12307:5917":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:47062:3469":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:47248:3751":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:7945:12083":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11800:5821":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:2839:2543":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:8162:5088":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:1824:2384":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:1680:3460":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:5587:7918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:8471:3611":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:3418:3508":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:52333:4007":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:6820:6445":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:9434:3421":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:11664:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:47163:3739":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:49544:3396":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:5450:4731":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5772:8008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:6135:5299":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:2358:4955":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:7245:4775":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6474:4762":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:39311:2389":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:2218:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:11247:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:1049:4364":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:7249:8226":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:8066:3785":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:7850:4691":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5699:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:9108:5538":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:7717:1777":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:11259:5711":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:2657:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:5884:3589":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10476:47107":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11356:5740":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:4705:767":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13148:6186":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:20005:59394":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"12:2184:7291":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4179:7581":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:1518:7385":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:2273:4938":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5523:7886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11148:3574":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:19973:59331":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"12:1044:4571":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"2:2788:2536":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10528:5138":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:6384:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"12:738:3682":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:49348:6801":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:12198:5906":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:12369:2285":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:7237:8224":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:1435:4362":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:12347:2266":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:6968:4341":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7545:4704":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"12:669:3684":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11436:5745":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:8405:3513":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:52355:4010":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2023:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:7938:3695":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:7144:4772":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:7266:4777":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:6549:4096":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8353:3543":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:20426:3430":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:46748:6774":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:5500:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:683:11088":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:3475:3492":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:3182:2383":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:2736:2522":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:46517:6773":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:4206:7591":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4231:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7447:4684":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:7843:53929":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:6998:8215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7189:4666":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:3400:3506":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:21921:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:47032:3393":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:12550:5984":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"0:126:1881":{"crate_id":0,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"6:4257:7618":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6759:4694":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:50992:2602":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4611:7745":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:4298:3561":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:5749:8002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12695:6081":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:6509:8172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4698:7783":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:7279:8232":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:8076:3575":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"9:586:4448":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:50416:3938":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:8608:3671":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:6441:4761":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:1473:142":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:4968:3476":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:5390:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:8797:3616":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:9897:5566":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:6538:8188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:1201:3693":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4274:7624":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:487:7302":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:21349:2588":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:2779:2529":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:47103:3733":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"18:766:5204":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:20842:3584":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6981:8206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:8633:3829":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:9751:5106":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:9562:3416":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:11996:3379":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"2:49840:3393":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5876:8047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:8418:5087":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10721:5640":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12008:5870":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5995:4750":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10445:5142":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:4969:5309":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:11576:5791":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4706:7788":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4212:7594":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:20194:3994":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:9274:3657":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12926:6130":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:12350:2269":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"0:179:1790":{"crate_id":0,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"6:1562:7410":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:5959:4934":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6302:8077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"13:220:7198":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:7961:6918":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:20690:16207":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:11812:3674":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8677:3873":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:3393:6341":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"12:320:4577":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:80:53246":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:5574:4737":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:487:5436":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:6646:4988":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2548:4958":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:46799:4248":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:48763:2829":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4496:7686":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:5402:4728":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:9456:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:11954:2603":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:20220:4055":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:8510:5527":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:47485:6734":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12797:6101":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:54066:6873":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:2864:3651":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:564:5211":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:11842:4154":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11288:5720":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:6402:5337":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:20007:59390":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:54119:6876":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:1525:7387":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:49020:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:10894:5084":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:1605:2876":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:48229:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10159:5604":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:48144:2689":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:6597:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:10547:3608":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:5472:4732":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:11332:53633":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:1230:3694":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7321:4683":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:6554:8194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:47002:5318":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:9635:3456":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"12:1628:5297":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:52257:4018":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:7037:2404":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:2656:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:10810:4123":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:6809:2369":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"12:300:4578":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11997:5868":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:242:5431":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:52847:4031":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:7404:4700":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:6957:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:50053:4118":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:3417:5299":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12980:6142":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:9446:5555":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:7033:2614":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:8561:5101":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:21200:6744":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11651:3666":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:19960:3378":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:8581:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:2607:3517":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:10575:4262":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:47258:3752":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:21954:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:13231:6208":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:884:2947":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"9:863:4409":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:0:2237":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10062:5601":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:5841:8022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13459:6286":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:54014:6869":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9155:5539":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"12:1872:3464":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"12:1138:3694":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:2674:4959":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10108:5082":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:7928:3471":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:11021:3927":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:5424:4729":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2805:2535":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:6308:5330":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:7024:148":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:12354:2272":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:10796:5139":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12337:5142":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12955:6137":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:6951:8237":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:7992:4719":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"14:7:6633":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:46263:2556":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:2659:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11485:5770":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7825:4784":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7335:4696":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:8576:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:5927:4748":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:1678:7492":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:4348:6353":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:49929:4199":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:8135:333":{"crate_id":2,"path":["core","sync","atomic"],"kind":"module"},"14:202:4344":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:2622:4970":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:5605:7930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:5344:6901":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:1608:3459":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:50207:4125":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:0:2241":{"crate_id":11,"path":["adler"],"kind":"module"},"6:4797:7830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13374:6264":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:50724:4144":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11639:5802":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:49081:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:4653:7762":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:8441:5143":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:10682:5146":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:48254:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"12:853:3689":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"9:977:4412":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:3156:3813":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8412:3514":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:4112:1772":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:10245:5613":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"9:0:2239":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12768:6093":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:7535:4678":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:98:4575":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:2026:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12349:5924":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:39298:4372":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:4335:7656":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:8114:3805":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:12366:2282":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:2406:3798":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:6416:2884":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7307:4781":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:1750:8239":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4804:7833":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:5226:6372":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:54005:6868":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:49714:4111":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:1505:7379":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6149:4724":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:53783:4044":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:49059:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:3302:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:50003:3414":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:8799:139":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:3590:6343":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:8941:5535":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:554:7344":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:9592:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8628:3828":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:53891:4027":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:9344:2876":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:4762:3598":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12073:5877":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:48017:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:4417:7680":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:4186:2371":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:9552:7204":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:11873:200":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:38089:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:11046:3926":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:5512:2423":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:4355:2380":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4965:3478":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:9433:5554":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:7731:7015":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:6428:5311":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:976:3687":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:49971:3514":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:13340:6252":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:7879:2112":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:542:2478":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:5653:3653":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:6711:2876":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4527:7705":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:6489:3588":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:9306:3660":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:47075:3730":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:2947:4268":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:7615:4689":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:48368:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:8682:3876":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6768:4768":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12836:6110":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11559:5788":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:614:61119":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:6633:6905":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:51862:4041":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11627:5349":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:2921:4659":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:5007:3482":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:7020:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:12360:2276":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:11617:5795":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:2467:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:4239:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6495:4591":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10270:5615":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:5313:6901":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:4595:2139":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:2859:4937":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:3001:4966":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:21822:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:53929:4047":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:2916:5079":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:20245:3922":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:4450:3878":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:7005:3582":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:8951:61110":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:4536:6358":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:49774:3401":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4816:7838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:8055:5036":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:62:39216":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:46310:2547":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:8939:2947":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:50776:3458":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:50704:4140":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:3254:6340":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"18:582:3378":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"14:31:6633":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9183:5540":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:4071:5301":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13059:6162":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"12:815:3686":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5713:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:11092:3934":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11813:5823":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:11519:4212":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:567:7350":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:1962:5103":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:7207:3821":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:5582:7917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:2696:4960":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13492:6293":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:8887:3628":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:153:4663":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:9414:3594":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:25196:2584":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:48482:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:46325:195":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:8701:5429":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:46922:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:2470:146":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:3094:3460":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:50293:3706":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:46365:194":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:571:2483":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:46429:198":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:6030:4752":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10374:5117":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:7965:4372":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:49540:4264":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:20157:3917":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:9108:3430":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:47131:6786":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:3599:2876":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:53967:4012":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:6772:4272":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:11556:8322":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8130:3527":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:1887:40590":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"3:223:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:11300:5723":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:51732:4036":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:2573:3524":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:5519:4735":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:5488:4733":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:10075:3408":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:4208:6349":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"12:985:3691":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:39262:3384":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"18:599:61122":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:20433:4004":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:4653:3845":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"12:1029:3693":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4224:7603":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:50736:4212":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:9764:5561":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:46769:3981":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:6891:4346":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:5060:3484":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:5701:3656":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10403:5040":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:11070:5679":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:51941:4017":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:53001:4026":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:9644:5050":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13594:6318":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:2915:2544":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"18:574:5408":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:50107:3416":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:907:2876":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:4288:6351":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:1376:3681":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:21888:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:4673:7772":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:11173:3785":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:1643:7467":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:3590:3614":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:56961:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11511:53856":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:957:3683":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:1551:2139":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"0:0:2012":{"crate_id":0,"path":["once_cell"],"kind":"module"},"6:1636:7463":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:9576:3419":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:4597:6360":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"9:920:4408":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:9328:2947":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:2834:2542":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:5541:7896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:11952:7014":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:51840:4037":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:10589:4224":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:4312:2379":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12948:6135":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:11054:5675":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:52018:6810":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:48996:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:48596:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"13:108:61103":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:8122:3525":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10321:5174":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:897:2948":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:10719:7080":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:3002:3464":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:11732:8323":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:21987:2587":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:52531:6819":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:3373:2139":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:13126:6181":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:5789:16401":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:3219:2557":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:7226:8220":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:646:39615":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:48212:2948":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12265:5913":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:2465:4368":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:4009:5301":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:49309:3579":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:12348:2267":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:12361:2277":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:21236:4069":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:46939:4196":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"9:649:4452":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:8666:5428":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:14:2230":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5625:7946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:13404:6270":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:2432:3385":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10233:5612":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5379:4727":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:52971:4023":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:53643:4040":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12485:5933":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"15:175:4594":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:10283:5616":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10182:5605":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:519:7318":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:4206:3429":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:47529:6791":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:3472:4353":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:49117:2828":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:9292:3659":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:5989:5299":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11343:5739":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:11832:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:675:6887":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:6129:5330":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"12:822:3687":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:966:3685":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:29312:2576":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2775:2530":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:524:4930":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:50559:3943":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:2746:2524":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:46483:2551":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"12:1836:2876":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:5687:3655":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:2244:4369":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:11330:5735":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:2141:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:6764:193":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"12:777:4570":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:21184:7199":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:12103:5882":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:9590:3417":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:50700:4137":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:6296:4319":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:2570:5009":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:2268:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:20685:3923":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:842:4381":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:11689:6740":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4629:7752":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:46510:4719":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:10982:2582":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:4510:6357":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:1701:7502":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:8059:3574":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:52379:4011":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:624:61121":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"18:671:5196":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"12:1866:3463":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:4955:5306":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"6:4379:7678":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11594:5792":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6354:4760":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:2751:2523":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:29712:4191":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"14:215:6638":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:1404:3684":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:4917:3387":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:10434:5621":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:600:7368":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:1541:7395":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:50089:3418":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:5567:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10221:5611":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:53533:4020":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:50732:4139":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:4658:11090":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:7413:4716":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:53035:4008":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:448:2494":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4726:7795":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:3353:3436":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:8956:3632":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:50249:4126":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:49793:3403":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:7071:4771":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11774:5818":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5154:4940":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:939:5299":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11853:5828":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:8595:2834":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:48093:2876":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4139:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:4500:199":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"9:33:4500":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:6124:4723":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6308:4758":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:12367:2283":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:47207:3748":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:5600:2139":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:1601:2947":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:9193:61118":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8454:3610":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:12003:4603":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5720:7994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:1654:7475":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:22386:2583":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:7255:8227":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:4501:3835":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:1600:7434":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9118:61116":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:47145:3736":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:48068:2875":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:10108:3409":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:19988:59331":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:6453:5317":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4621:7748":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:21363:2586":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:6674:2430":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:2510:3523":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:5870:201":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:501:7310":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6087:4699":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:3792:2948":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:5999:2425":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:10817:3657":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:5875:5311":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:915:3681":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:51778:4016":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:56552:4159":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10466:5624":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:5498:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:3337:2947":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:6843:4993":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:12320:11089":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:8106:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:48634:2424":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:52111:4038":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:56909:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21094:4169":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:12609:6036":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:4332:1773":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:48406:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:2456:4979":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:11415:5346":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:10963:2112":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:4404:6355":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:47216:3749":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:56987:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1971:4367":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:8418:3406":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:9700:5104":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:2763:2525":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:771:140":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:11705:6909":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:10185:5325":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:50593:4203":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:50963:156":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:47540:6735":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:6322:8083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"12:1065:4572":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:10075:5602":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:2800:2534":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10608:5043":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:2724:2934":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6188:4755":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:970:3686":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:3190:3535":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:8724:8087":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:215:2607":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11970:8326":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13031:6154":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:58262:6885":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:6702:2604":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9947:47035":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:51981:6809":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:11127:3486":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:6524:8179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:5180:4317":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:962:3684":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:581:7358":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13082:6167":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:4716:2423":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:50907:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"0:167:1363":{"crate_id":0,"path":["once_cell","sync"],"kind":"module"},"16:2885:4971":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:49895:3412":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:12237:5909":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:586:7360":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:52508:6818":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:7276:4778":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:7289:8234":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9462:2482":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:21168:4073":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6115:4671":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:6386:4154":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:3249:5091":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:1671:1046":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11149:5691":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:12368:2284":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:4740:6365":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:5165:3602":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:6294:4703":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:7720:5437":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:11138:8318":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:11350:3661":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:49885:3411":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:2380:3788":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12087:5880":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:3707:6346":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:3529:3460":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:8137:46844":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:7822:3928":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:21789:2213":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:6632:4766":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:2942:3462":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:6921:4347":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4559:7718":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11661:5803":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"9:827:4406":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:10752:5040":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:52000:4006":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:21224:2585":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6794:4990":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:3130:2550":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:1120:3694":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:3897:2947":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:620:6714":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12816:6102":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:4399:3872":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12033:5873":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3939:4056":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10394:5119":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:9631:5051":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"12:387:61098":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"12:2205:3467":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8205:3649":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:7934:4687":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:2795:2533":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:12359:2275":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:2984:4967":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3457:2824":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:11319:6918":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:21147:6742":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:50302:4131":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9885:5565":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:49961:4113":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4329:7653":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:10633:3665":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:2378:3274":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:993:3689":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4126:7538":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:7221:3822":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:771:4380":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:51911:4029":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:52925:4019":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:9293:5159":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:3460:3527":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:4286:7629":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:4581:3844":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:5817:4746":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:7408:2598":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:6702:2437":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:3482:3512":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7475:4680":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11161:5694":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11748:5815":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2952:2555":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:4653:6362":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:2310:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:8272:5147":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10822:46848":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"0:84:1790":{"crate_id":0,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"17:10497:47108":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:21041:4168":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11939:5856":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:50728:4138":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:21297:58374":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6721:4767":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12225:5908":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:5536:4736":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:11087:5681":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:48444:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6323:4679":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6375:8106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13382:6265":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:50387:3932":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:47233:3750":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:47197:3747":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12674:6076":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:6983:3742":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12964:6138":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:2740:4962":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:1918:2599":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:2762:4963":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:339:160":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:755:5203":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12353:2271":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:2822:2539":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:4461:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:2596:5010":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"12:2198:7293":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:7948:4688":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"12:659:2876":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:2583:5328":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:4534:7706":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:2039:4366":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"12:0:2242":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:11487:3659":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13039:6155":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:1686:7493":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:49943:3606":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"14:221:6640":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:2019:59797":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:44:4562":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:1707:3839":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6713:4697":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13536:6308":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:4902:8100":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:1532:7390":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:967:5438":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:3680:6345":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:51810:4049":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:13168:6192":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12934:6133":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:8796:5044":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:859:2947":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:47154:3744":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:50788:4214":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:8146:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:1595:7432":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13221:6203":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:9289:2948":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:3951:4057":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:3140:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:9601:5055":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:56935:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:10794:4120":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:2253:3507":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"9:382:4404":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:987:3688":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:6726:3459":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:5692:7980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2709:2388":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13327:6246":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:12315:7205":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:6500:8169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:5639:3652":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:2968:3463":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7287:4779":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:49293:3580":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4605:7742":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12748:6087":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4598:7740":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:481:5206":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:52163:4045":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4659:7764":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:9582:162":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"12:1845:3460":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:6537:201":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:51686:6807":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6448:8129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:51880:6808":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:10497:7079":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:4626:6361":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:1088:3691":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:658:3780":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:46829:4243":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:5672:7972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:5877:3588":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:12373:2289":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:20854:59335":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:4516:4240":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:4376:6354":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:1473:1774":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:1884:6897":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:2526:4957":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:39302:3434":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:2250:3288":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:9553:5065":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:699:5199":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11787:5819":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:20948:3430":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:9280:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:2394:3792":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:8560:3869":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:12374:2290":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"12:1840:3459":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10088:5603":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:47269:3513":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:1102:3692":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9382:3592":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:3891:2139":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:11041:3931":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4280:7626":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2816:4964":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11761:5816":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:9320:3661":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:9303:5063":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:46868:4130":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:3017:5446":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"18:96:53247":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10670:5145":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:8475:5019":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6855:4769":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"9:188:4475":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"18:690:5198":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"14:0:2243":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:4258:2377":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"15:214:4599":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:5174:3766":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"0:221:1881":{"crate_id":0,"path":["once_cell","sync","Lazy"],"kind":"struct"},"17:9263:5546":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11873:5831":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:7831:3430":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5741:8000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7489:4655":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:3350:2948":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"7:79:44425":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:6934:4348":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:4267:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11368:5743":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:6048:4665":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9328:5156":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:29548:4189":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:12363:2279":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:52477:6817":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:1695:7499":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:636:5420":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11199:5698":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:8054:3783":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"18:644:5408":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9778:5107":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:1642:3033":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:49853:3394":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:676:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:6101:4673":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:8746:3481":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"12:646:2948":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11828:5826":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:8593:2833":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:6834:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:3226:3536":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:4808:6367":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:4421:3874":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:8089:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:54025:6870":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:10921:5642":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:11217:5706":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:20323:3920":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:2655:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:1722:7509":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:48135:2405":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:6037:4954":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:9501:5063":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:1216:3692":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:5443:3738":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"12:2080:3693":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:4318:6352":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:11199:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:11708:5808":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:6430:8119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"9:111:4467":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:10949:5646":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4592:7737":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10506:5628":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10121:5083":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:21723:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:1759:3302":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6807:4991":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:7858:2481":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"18:727:5201":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6293:8071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:2826:2540":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:7034:3460":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:11606:5794":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:49318:143":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:51710:4048":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:5782:8010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12896:6119":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:6267:4317":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5974:4749":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8537:3868":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:53985:6866":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:1861:6896":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:53721:4024":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12291:5915":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:247:5432":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7958:4720":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:531:5209":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:46846:3706":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13047:6156":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:12370:2286":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:46757:3980":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:9597:3454":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:495:7307":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:50899:6805":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:4303:2378":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:52065:4050":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:11143:8320":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"13:0:2236":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:11547:5786":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10420:5176":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6953:8203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:1033:60189":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:9671:5027":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:8596:5426":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:9587:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"0:343:2214":{"crate_id":0,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"2:3151:2552":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2810:2537":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:1943:4271":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:4135:6348":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:6479:8155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:652:5408":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:592:7363":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:5673:3654":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12118:5886":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"9:956:4407":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11841:5827":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:7220:8219":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:9474:53481":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:7243:8225":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:50277:4129":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"11:36:7295":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:8591:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11247:5710":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:5771:4744":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:7214:8218":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:4740:3476":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:4253:6350":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:52430:6816":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:1635:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:8295:46845":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:2816:2538":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:545:7338":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:4013:3826":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:562:5437":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"12:632:2947":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:1629:3463":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:46821:4131":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:0:2246":{"crate_id":17,"path":["object"],"kind":"module"},"1:7283:56277":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:8110:46840":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11734:5574":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:9627:5061":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:5223:2396":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:6668:4682":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:9339:5157":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"9:622:4451":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:3448:5450":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:6409:8113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:2784:4965":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6230:4757":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:2718:4961":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:1612:3460":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:5793:4745":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:1714:7505":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:50035:4117":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"12:1859:3462":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:20407:16189":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:48153:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:48520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:20276:3583":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:48777:2832":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"12:353:4576":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:50545:3942":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:8374:3510":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:5438:4730":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:7522:54801":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:8210:3528":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:7411:2949":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:46955:4197":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:2734:7097":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13393:6269":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4489:3847":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:9722:5560":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:10973:5660":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13527:6306":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"12:1003:3692":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13572:6312":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:5503:4734":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:716:7077":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:46407:196":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:8752:3514":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6219:4756":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:49765:3402":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:7366:4698":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:3623:6344":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:47299:3743":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:21855:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:53391:4052":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:11515:5779":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:6654:4681":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:12355:2273":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:54142:6877":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:9350:3590":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:8526:2824":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5835:8021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:2478:4956":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:8393:5024":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:4248:2376":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12022:5872":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11271:5712":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:1903:46930":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13279:6245":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8696:3827":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:12365:2281":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12860:6114":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8847:3626":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:12349:2268":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:6424:8118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:52141:4042":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:2725:60190":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4152:7558":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:9021:5537":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:4575:7726":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11875:3826":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:11896:3833":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:9681:5483":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:3145:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:47501:6789":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:113:53248":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:4777:6366":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:10455:5177":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:9382:5551":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:999:3690":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:46882:4246":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4354:7665":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:9451:6985":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:50716:4145":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:491:1917":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"0:266:1554":{"crate_id":0,"path":["once_cell","race"],"kind":"module"},"2:49866:3410":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:6434:6904":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:8822:61109":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:13366:6261":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:8596:3670":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:3721:3459":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:3466:54396":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:7140:5339":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"12:834:3688":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:9118:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:9857:5090":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:8911:61114":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5443:7842":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:10478:6896":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:50570:3944":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:6797:59314":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:9061:5065":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:47284:3753":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:8981:5536":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:49803:3404":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:2830:2541":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:8579:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:6858:3698":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:47012:6785":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"10:0:2240":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:50755:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:9577:5057":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:10860:5345":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:10875:5085":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:2898:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:1771:5056":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:12362:2278":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:4778:7816":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"12:274:7073":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:3167:3993":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"12:393:61099":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:2647:3526":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:6006:2426":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11500:5774":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:8395:3469":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:49047:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:53845:4009":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11235:5707":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:21342:8241":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:7227:4774":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:50189:4124":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:21251:6749":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:10385:5118":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:2215:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:5856:4747":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:454:2495":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6597:4765":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:2273:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:2332:4973":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:12251:5910":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:8589:2832":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8313:3545":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:13184:6195":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:4312:3567":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:47183:3746":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:10207:5607":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:21624:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:2696:2387":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:625:3703":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:4581:7729":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4247:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:6502:3729":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:12322:5921":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:46341:193":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:11684:5807":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:49133:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:47519:5324":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:4113:3833":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:928:3682":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:9517:4770":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"18:538:5210":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:1634:3464":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:10921:3536":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10774:5038":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:2653:2382":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"12:1681:142":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:49029:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:2722:2391":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:7887:4692":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:6311:8078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8622:3827":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:0:1335":{"crate_id":1,"path":["std"],"kind":"module"},"16:4565:6359":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:4904:8102":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:3949:3672":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:3343:3542":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:1623:3462":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"8:0:2238":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5758:4743":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"12:861:3690":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:47053:3728":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:11741:58719":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:9548:3418":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8362:3509":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:9831:5165":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"15:0:2244":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:52309:4025":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:11738:8324":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:50481:3940":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12850:6113":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:12046:5875":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:4:975":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6248:4676":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:13114:6178":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4437:7682":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:13024:6153":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:8309:4098":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:8871:5534":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:507:5408":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:9930:5569":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:9458:5025":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12361:5931":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"12:2053:3691":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:8631:5427":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7521:4677":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:50980:3772":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4307:7640":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:10734:4116":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6545:4693":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12972:6140":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:51666:6806":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:56974:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4185:7582":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:2970:2545":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:12364:2280":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:21276:58375":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:49955:4112":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:20233:3430":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:11209:3509":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:11174:5696":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:9283:5548":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:8729:6737":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:50889:200":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:47492:2429":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2431:3430":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:56948:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:10559:4260":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8702:3848":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:1415:3685":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:54104:6875":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:50508:3941":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:560:7347":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:1931:5052":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:50402:3935":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:6178:4754":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:3067:2549":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4191:7584":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"14:40:5661":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11034:5674":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:3157:2554":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13354:6258":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4317:7647":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:46927:4195":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"12:751:3459":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:521:5205":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:6846:3467":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:10741:3658":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:3188:3534":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:8813:143":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12134:5887":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:7266:8231":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:5492:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:507:7313":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:7215:4773":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:707:3930":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:3228:3537":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:4308:3566":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:47510:3542":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4367:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:48204:2947":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:13176:6193":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:21313:58360":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:6450:4592":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:29506:3037":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:6139:4753":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:12352:2270":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11106:5686":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4300:7637":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:1886:6898":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:46852:4244":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:48085:2948":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:4890:3565":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:9475:5015":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:9488:5018":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6012:4751":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:2976:3461":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:386:5433":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:48220:2876":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:3150:3811":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:1584:5299":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9362:5065":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:1338:2947":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:0:2247":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9422:5553":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:8991:61115":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:8583:2829":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:8536:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:8283:650":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"5:6799:2876":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:9437:2428":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:9336:3587":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:49783:3405":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:46742:3706":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:3267:3533":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:4010:3825":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:6225:201":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4515:7698":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:11899:138":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:50433:3939":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12781:6098":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:2402:4974":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:8670:3604":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:2935:2947":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:11690:6908":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:6874:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:5861:8036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:46889:4247":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9165:61113":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:47174:3745":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13091:6170":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4096:7520":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:21657:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:2833:4936":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:1185:3691":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:6775:2433":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10708:5141":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:13203:6200":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:20282:3585":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:29606:4190":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:410:5351":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:4506:7693":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:1935:3778":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:5592:4928":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:4449:7683":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:590:5410":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:4429:3875":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"0:70:1770":{"crate_id":0,"path":["once_cell","unsync"],"kind":"module"},"1:3153:3812":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:2757:2526":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:2304:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:29512:3038":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:5715:4741":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:20026:59392":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:20274:3430":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:1825:6895":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:58283:6886":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:7769:5340":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4665:7767":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:4072:1790":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:681:5197":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:5175:45223":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:9265:2947":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:6415:8115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8720:3477":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:2911:2142":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:2424:4952":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:11538:3455":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:3845:6347":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:2561:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:5684:7979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:7297:4780":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:46908:3985":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:13007:6146":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5534:7894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:4437:3877":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:53994:6867":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:5472:7866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:420:4643":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4294:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:9844:5166":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:5733:7998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:4039:2139":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7256:4776":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11835:3825":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"9:800:7296":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:9658:5557":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5739:4742":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:6392:8108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:7461:4685":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:46875:4245":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4115:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4683:7778":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:8774:5037":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:4679:58754":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:5595:7923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10139:5065":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:21756:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:50268:4128":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:20028:59395":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:6869:6905":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"9:592:4450":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:6061:2876":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:49330:3626":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:9539:5053":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"14:160:6633":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12756:6088":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:2771:2532":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:12371:2287":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"12:1852:3461":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:36:2605":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:6682:4695":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:6734:4383":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10625:5045":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:2900:1775":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:2252:4939":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:3326:158":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4737:7801":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:4042:2385":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12278:5914":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:4680:6363":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:9909:5567":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2473:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4427:7681":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2900:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:7084:2613":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:4181:2370":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:3310:3520":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:2480:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:1617:3461":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:4242:3562":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"19:0:990":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7022:4946":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:12331:53628":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11951:5858":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12884:6116":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4200:7589":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:49340:6800":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:8853:3578":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:8049:3597":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:6545:8191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:9894:5344":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:2311:4658":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10854:5102":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:5009:3483":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11014:5664":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:595:2485":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10997:5661":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:11603:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:4879:6369":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:2500:4968":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10360:5175":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:11754:5351":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:4540:7709":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8517:7203":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"6:1574:7418":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:660:5195":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11909:5837":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7868:4690":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:4840:6368":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:7098:55050":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:9250:5545":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4551:7714":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:53185:4032":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:11186:5697":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:3557:6342":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:11125:5687":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:8848:3468":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4346:7661":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:7718:1776":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:6506:4763":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:2247:3784":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:5005:3480":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:12191:5352":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:9509:6990":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:1426:193":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10642:5148":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:12638:6047":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7637:4672":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:7051:4313":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6329:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"12:1518:4585":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:7430:193":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:2730:7096":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9791:5562":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:9314:3406":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:8304:4097":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:5681:4740":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13141:6185":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13214:6201":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:2981:4269":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:4712:6364":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:8047:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:5403:3459":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:13413:6272":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:7138:155":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:1359:2876":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:38106:3378":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13134:6184":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:7208:8217":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:7374:4782":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:3365:3435":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"12:119:4579":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:6572:8197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:6352:8105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:5642:4739":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:9371:5538":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:10350:5038":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:48161:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:521:5326":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:3125:5441":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:12630:6046":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:4258:3564":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4810:7835":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:3986:2597":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:46224:2558":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:5816:3662":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:51963:4021":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12211:5907":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"14:165:45150":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:5194:5526":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"12:810:3683":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:5083:3479":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:49875:3413":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8200:3648":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:5568:7916":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10310:5618":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10583:5042":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"12:1534:4586":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:21375:2589":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:8945:3631":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:56922:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2918:2152":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:11616:33063":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4475:7685":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:50284:4130":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:9071:61111":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"12:2178:7290":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"}},"external_crates":{"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}