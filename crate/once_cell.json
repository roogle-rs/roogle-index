{"root":"0:0:1999","crate_version":"1.13.1","includes_private":false,"index":{"1:5582:3408":{"id":"1:5582:3408","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5583:5553"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7582:3638":{"id":"1:7582:3638","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7583:57529"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6165:1862":{"id":"5:6165:1862","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5520:3403":{"id":"1:5520:3403","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5521:5553","1:5522:6878"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13676":{"id":"2:13676","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12755:1343","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13677:795","2:13678:2859","2:13679:59320","2:13680:59321","2:13682:59322","2:13685:53454","2:13686:59323","2:13687:305","2:13688:55022","2:13689:1791","2:13691:1797","2:13693:1929","2:13695:55021","2:13697:3585","2:13698:59324","2:13699:55041","2:13700:55042","2:13701:4164","2:13702:3920","2:13703:3590","2:13704:31976","2:13705:31966","2:13706:4610","2:13707:59325","2:13708:31961","2:13709:55057","2:13712:55058","2:13715:55059","2:13718:2899","2:13722:2858","2:13726:53177","2:13729:31843","2:13732:55051","2:13735:59326","2:13738:59327","2:13741:55053","2:13744:55055","2:13747:59328","2:13750:59329","2:13753:2334","2:13756:59330","2:13759:59331","2:13762:59332","2:13765:59333","2:13767:59334","2:13769:59335","2:13771:59336","2:13772:59337","2:13773:59338","2:13776:59339","2:13779:14575","2:13782:55060","2:13785:59340","2:13788:59341","2:13791:59342","2:13794:4074","2:13796:4268","2:13797:54912","2:13798:54913","2:13799:54914","2:13800:59343","2:13802:3512","2:13803:59344"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13241:2571":{"id":"2:13241:2571","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13242:126","2:13243:53326"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:190":{"id":"0:190","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[723,4],"end":[761,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:193:1899","0:195:1791"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3347:211-0:279:1879":{"id":"a:2:3347:211-0:279:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6185:3484":{"id":"5:6185:3484","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23405:3962":{"id":"2:23405:3962","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24042:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23396:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3356:217":{"id":"2:3356:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3600:131":{"id":"2:3600:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3602:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3454:2522":{"id":"2:3454:2522","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3456:895"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3659:2537":{"id":"2:3659:2537","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3661:756"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3655:2536","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:141:661":{"id":"0:141:661","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[397,8],"end":[402,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10493:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10482:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12742:4261":{"id":"2:12742:4261","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12743:2863","2:12744:58074"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1193,4],"end":[1193,94]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:195:1791":{"id":"0:195:1791","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[758,8],"end":[760,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get(&lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get(&lazy), Some(&92));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3420:2519":{"id":"2:3420:2519","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3422:181","2:3423:1358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13756:59330":{"id":"2:13756:59330","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15750:2260","prim@char":"1:15744:2255","`DoubleEndedIterator`":"2:8687:120","self::pattern":"2:13302:3891"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49935:4141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23208:3436":{"id":"2:23208:3436","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23198:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3474:2525":{"id":"2:3474:2525","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3476:181","2:3477:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4080-0:418:2203":{"id":"b:2:4080-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4078:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4082:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3195-0:424:2211":{"id":"b:2:3195-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3198:127","2:3199:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8687:120":{"id":"2:8687:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8688:2853","2:8689:2854","2:8690:2855","2:8691:2856","2:8695:2857","2:8698:2858"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13718:2899":{"id":"2:13718:2899","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13302:3891","prim@char":"1:15744:2255","`None`":"2:47750:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4080-0:237:1789":{"id":"b:2:4080-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4078:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:4082:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5570:3405":{"id":"1:5570:3405","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5571:56732"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13707:59325":{"id":"2:13707:59325","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49977:4142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[31,9],"end":[31,16]},"visibility":{"restricted":{"parent":"0:321:1555","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:421:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[429,4],"end":[433,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:153:682"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3180-0:129:1789":{"id":"b:2:3180-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3183:2852"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13678:2859":{"id":"2:13678:2859","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:193:1899":{"id":"0:193:1899","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[738,8],"end":[743,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and returns a reference to\nthe result.\n\nThis is equivalent to the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8167:3789":{"id":"2:8167:3789","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8168:58211","2:8169:58212","2:8170:58209","2:8171:58207","2:8172:58213","2:8173:58210","2:8174:58208"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2946:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:254":{"id":"0:254","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[864,4],"end":[868,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:256:605"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3597:130":{"id":"2:3597:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3599:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3600:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:423:661":{"id":"0:423:661","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[31,18],"end":[31,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10493:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10482:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:246:661":{"id":"0:246:661","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[834,8],"end":[839,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10493:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10482:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:337:1791":{"id":"0:337:1791","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[45,4],"end":[48,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24923:2202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3807:225":{"id":"2:3807:225","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3808:181","2:3809:2542","2:3810:687","2:3811:370"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3812:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3807:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[386,4],"end":[386,72]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4082:1432":{"id":"2:4082:1432","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46278:3880","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[872,4],"end":[1139,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:261:922","0:262:1795","0:263:1791","0:264:1942","0:265:1797","0:266:1929","0:267:1817","0:268:1818","0:270:1835","0:274:1838","0:277:1861","0:278:1863"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2848-0:279:1879":{"id":"b:2:2848-0:279:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2850:2325"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5526:3404":{"id":"1:5526:3404","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5527:7617","1:5528:56732","1:5529:5553","1:5530:56733","1:5531:3734","1:5532:3735","1:5533:56734","1:5534:1307","1:5535:56735","1:5536:56736","1:5537:56737","1:5538:56738","1:5539:56739","1:5540:56740","1:5541:56741","1:5542:56742"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4771:3416":{"id":"1:4771:3416","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4772:2998","1:4773:57120"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:301":{"id":"0:301","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1214,4],"end":[1251,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:304:1899","0:306:1791"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13722:2858":{"id":"2:13722:2858","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47750:176","prim@char":"1:15744:2255","self::pattern":"2:13302:3891"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4486:2814":{"id":"1:4486:2814","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4487:2218","1:4488:57620","1:4490:57621","1:4491:4533","1:4492:57622","1:4493:57623","1:4494:2776","1:4503:2888"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:397:1817":{"id":"0:397:1817","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[230,8],"end":[243,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:402:1838":{"id":"0:402:1838","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[269,8],"end":[290,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5504:3401":{"id":"1:5504:3401","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5505:52969","1:5506:52971","1:5507:52970","1:5508:52972"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3489:2529":{"id":"2:3489:2529","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3491:181","2:3492:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13685:53454":{"id":"2:13685:53454","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12766:4225"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1189,4],"end":[1189,74]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3812:137":{"id":"2:3812:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3814:688"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3807:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3184-0:424:2211":{"id":"b:2:3184-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3186:682"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3194:1420":{"id":"2:3194:1420","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3347:211-0:418:2203":{"id":"a:2:3347:211-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13321:3893":{"id":"2:13321:3893","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13323:3913","2:13324:924","2:13325:58077","2:13326:58078"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13703:3590":{"id":"2:13703:3590","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49699:3460","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10771:142":{"id":"2:10771:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10772:716","2:10774:54858"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:306:1791":{"id":"0:306:1791","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[1248,8],"end":[1250,9]},"visibility":"public","docs":"Gets the reference to the result of this lazy value if\nit was initialized, otherwise returns `None`.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::get(&lazy), None);\nassert_eq!(&*lazy, &92);\nassert_eq!(Lazy::get(&lazy), Some(&92));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:389:59":{"id":"0:389:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[197,8],"end":[199,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5438:3506":{"id":"1:5438:3506","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5439:5025","1:5440:53454"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:4129:3882":{"id":"2:4129:3882","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4130:57157"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:317":{"id":"0:317","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1267,4],"end":[1272,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:319:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2845:3935":{"id":"2:2845:3935","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2847:52965"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:348:1791":{"id":"0:348:1791","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[124,4],"end":[126,5]},"visibility":"public","docs":"Gets the underlying value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9504:1776-0:237:1789":{"id":"a:2:9504:1776-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:23072:4013":{"id":"2:23072:4013","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23073:3939","2:23074:58703","2:23075:1230","2:23076:1231","2:23077:42337","2:23078:58748","2:23079:58749","2:23080:58750","2:23081:58751","2:23082:58752","2:23083:58704","2:23084:58705","2:23085:58706","2:23086:58707","2:23087:58708","2:23088:58709","2:23089:58710"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1343","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:59979","5:6165:1862","5:6168:59980","5:6171:59981","5:6183:59982","5:6184:59983","5:6185:3484","5:6186:54910","5:6187:54911"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3184-0:237:1789":{"id":"b:2:3184-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3186:682"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9503:1777-0:171:1879":{"id":"a:2:9503:1777-0:171:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3199:1419":{"id":"2:3199:1419","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13759:59331":{"id":"2:13759:59331","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13302:3891","prim@char":"1:15744:2255","`DoubleEndedIterator`":"2:8687:120","str::rmatch_indices":"1:15750:2260"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49863:4137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13785:59340":{"id":"2:13785:59340","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13302:3891","prim@char":"1:15744:2255"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3231:115":{"id":"2:3231:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:304:1899":{"id":"0:304:1899","crate_id":0,"name":"force","span":{"filename":"src/lib.rs","begin":[1228,8],"end":[1233,9]},"visibility":"public","docs":"Forces the evaluation of this lazy value and\nreturns a reference to the result. This is equivalent\nto the `Deref` impl, but is explicit.\n\n# Example\n```\nuse once_cell::sync::Lazy;\n\nlet lazy = Lazy::new(|| 92);\n\nassert_eq!(Lazy::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3154:149":{"id":"2:3154:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:2852"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:145:411":{"id":"0:145:411","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[413,8],"end":[418,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13732:55051":{"id":"2:13732:55051","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15750:2260","`DoubleEndedIterator`":"2:8687:120","prim@char":"1:15744:2255","self::pattern":"2:13302:3891"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49731:4104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:148:605":{"id":"0:148:605","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[422,8],"end":[424,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3347:211-0:171:1879":{"id":"a:2:3347:211-0:171:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[190,4],"end":[194,5]},"visibility":{"restricted":{"parent":"0:362:2213","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:386:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:4080-0:380:2214":{"id":"b:2:4080-0:380:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4078:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:4082:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13771:59336":{"id":"2:13771:59336","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2946:184":{"id":"2:2946:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2948:999","2:2949:828","2:2950:794","2:2951:714","2:2952:697"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3388:2378-0:418:2203":{"id":"a:2:3388:2378-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[842,4],"end":[856,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:249:409","0:250:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3501:2531":{"id":"2:3501:2531","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3503:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13699:55041":{"id":"2:13699:55041","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15750:2260"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:250:411":{"id":"0:250:411","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[850,8],"end":[855,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3347:211-0:237:1789":{"id":"a:2:3347:211-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13312:3890":{"id":"2:13312:3890","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13314:3893","2:13315:57751","2:13316:57752","2:13317:57753","2:13318:57755","2:13319:57754","2:13320:57756"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3458:2521":{"id":"2:3458:2521","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:560"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10533:109":{"id":"2:10533:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10534:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3479:2526":{"id":"2:3479:2526","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3481:181","2:3482:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3190-0:237:1789":{"id":"b:2:3190-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3160:229","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3193:127","2:3194:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:199:222":{"id":"0:199:222","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[764,8],"end":[764,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:396:1791":{"id":"0:396:1791","crate_id":0,"name":"get","span":{"filename":"src/race.rs","begin":[218,8],"end":[224,9]},"visibility":"public","docs":"Gets a reference to the underlying value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6577:3382":{"id":"1:6577:3382","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6578:6872"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:162:1835":{"id":"0:162:1835","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[550,8],"end":[559,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f`\nif the cell was empty.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3818:2542":{"id":"2:3818:2542","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3820:54150"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3180-0:171:1879":{"id":"b:2:3180-0:171:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3183:2852"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2848-0:424:2211":{"id":"b:2:2848-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2850:2325"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23145:3941":{"id":"2:23145:3941","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23146:3939","2:23147:1250","2:23148:1275"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23108:4014":{"id":"2:23108:4014","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23109:58703","2:23110:1230","2:23111:1231","2:23112:58704","2:23113:58705","2:23114:58706","2:23115:58707","2:23116:58708","2:23117:58709","2:23118:58710"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6498:224":{"id":"5:6498:224","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1400"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:59979":{"id":"5:6164:59979","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2216","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13782:55060":{"id":"2:13782:55060","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15744:2255","self::pattern":"2:13302:3891"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13762:59332":{"id":"2:13762:59332","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13302:3891","`DoubleEndedIterator`":"2:8687:120","str::match_indices":"1:15750:2260","prim@char":"1:15744:2255"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49881:4138","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:347:922":{"id":"0:347:922","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[118,4],"end":[120,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5910:4273":{"id":"5:5910:4273","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:181","5:5913:2181"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13735:59326":{"id":"2:13735:59326","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:8687:120","self::pattern":"2:13302:3891","str::rsplit_terminator":"1:15750:2260","prim@char":"1:15744:2255","str::split":"1:15750:2260"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49763:4133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3160:229":{"id":"2:3160:229","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3162:127","2:3163:1420"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3359:220-0:418:2203":{"id":"a:2:3359:220-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:261:922":{"id":"0:261:922","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[874,8],"end":[876,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5560:3400":{"id":"1:5560:3400","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5561:53458","1:5562:53459","1:5563:53460","1:5564:53461"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:350:1835":{"id":"0:350:1835","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[143,4],"end":[148,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142":{"id":"0:142","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[405,4],"end":[419,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:144:409","0:145:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:267:1817":{"id":"0:267:1817","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[979,8],"end":[984,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<i32> = OnceCell::new();\n\nfn main() {\n    assert!(CELL.get().is_none());\n\n    std::thread::spawn(|| {\n        assert_eq!(CELL.set(92), Ok(()));\n    }).join().unwrap();\n\n    assert_eq!(CELL.set(62), Err(62));\n    assert_eq!(CELL.get(), Some(&92));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[115,0],"end":[172,1]},"visibility":{"restricted":{"parent":"0:321:1555","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:347:922","0:348:1791","0:349:1817","0:350:1835","0:353:1838"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6246:3379":{"id":"1:6246:3379","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6247:2220","1:6248:8037","1:6249:57099","1:6250:57100","1:6251:57101","1:6252:2222"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1179,4],"end":[1183,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:287:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:5:848-0:129:1789":{"id":"b:5:848-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:850:2922","5:851:2923","5:852:2924"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3446:2520":{"id":"2:3446:2520","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3448:267"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10554:2824":{"id":"2:10554:2824","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10555:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5906:4275":{"id":"5:5906:4275","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:181","5:5909:433"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:2848-0:418:2203":{"id":"b:2:2848-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2850:2325"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[435,4],"end":[656,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:156:922","0:157:1795","0:158:1791","0:159:1797","0:160:1817","0:161:1818","0:162:1835","0:166:1838","0:169:1861","0:170:1863"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6224:3382":{"id":"1:6224:3382","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6225:3734","1:6226:3735","1:6227:6871","1:6228:53339","1:6230:53343","1:6232:53340","1:6233:53341","1:6235:53342"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:208:59":{"id":"0:208:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[779,8],"end":[781,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9131:3788":{"id":"2:9131:3788","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8167:3789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3570:116":{"id":"2:3570:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3571:222","2:3572:544"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:429:661":{"id":"0:429:661","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[110,18],"end":[110,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10493:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10482:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13779:14575":{"id":"2:13779:14575","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13302:3891","prim@char":"1:15744:2255"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13788:59341":{"id":"2:13788:59341","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13302:3891","prim@char":"1:15744:2255"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8712:2602":{"id":"2:8712:2602","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8713:795","2:8714:2859"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13767:59334":{"id":"2:13767:59334","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13332:3895":{"id":"2:13332:3895","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4511:3457":{"id":"1:4511:3457","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4512:53173","1:4513:53174","1:4514:53175","1:4516:3456","1:4517:53176","1:4519:53177","1:4520:4610"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4429:3415","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3189:682":{"id":"2:3189:682","crate_id":2,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"primitive","inner":"never"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:390":{"id":"0:390","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[202,4],"end":[209,5]},"visibility":{"restricted":{"parent":"0:362:2213","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"2:3594:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:392:579"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3388:2378-0:237:1789":{"id":"a:2:3388:2378-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3484:2527":{"id":"2:3484:2527","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3486:181","2:3487:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13753:2334":{"id":"2:13753:2334","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15750:2260","self::pattern":"2:13302:3891","prim@char":"1:15744:2255","`DoubleEndedIterator`":"2:8687:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49917:4140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2853:52965":{"id":"2:2853:52965","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2851-0:279:1879":{"id":"b:2:2851-0:279:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2845:3935","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2853:52965"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6187:54911":{"id":"5:6187:54911","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15750:2260"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[684,4],"end":[684,94]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:851:2923":{"id":"5:851:2923","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:922":{"id":"0:156:922","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[437,8],"end":[439,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:263:1791":{"id":"0:263:1791","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[887,8],"end":[894,9]},"visibility":"public","docs":"Gets the reference to the underlying value.\n\nReturns `None` if the cell is empty, or being initialized. This\nmethod never blocks.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:187:1889":{"id":"0:187:1889","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[714,8],"end":[720,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["this",{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3148:75":{"id":"2:3148:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3150:306"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:424:2211":{"id":"0:424:2211","crate_id":0,"name":"OnceBool","span":{"filename":"src/race.rs","begin":[111,0],"end":[113,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:346","a:2:3388:2378-0:424:2211","a:2:3347:211-0:424:2211","a:2:3359:220-0:424:2211","a:2:9503:1777-0:424:2211","a:2:9504:1776-0:424:2211","b:2:3195-0:424:2211","b:2:3184-0:424:2211","b:2:4080-0:424:2211","b:2:2851-0:424:2211","b:2:3180-0:424:2211","b:2:3190-0:424:2211","b:2:2848-0:424:2211","0:426","0:428"]}},"2:3637:2545":{"id":"2:3637:2545","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3639:238","2:3640:206","2:3641:59095"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3180-0:418:2203":{"id":"b:2:3180-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3183:2852"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:4080-0:424:2211":{"id":"b:2:4080-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4078:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4082:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13741:55053":{"id":"2:13741:55053","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15744:2255","str::rsplitn":"1:15750:2260","self::pattern":"2:13302:3891"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49817:4107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[293,4],"end":[293,54]},"visibility":{"restricted":{"parent":"0:362:2213","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10550:189":{"id":"2:10550:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10551:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3467:2528":{"id":"2:3467:2528","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3468:181","2:3469:954"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:421:59":{"id":"0:421:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[31,9],"end":[31,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13700:55042":{"id":"2:13700:55042","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15750:2260"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3359:220-0:424:2211":{"id":"a:2:3359:220-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10544:2820":{"id":"2:10544:2820","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10545:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:253:682":{"id":"0:253:682","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[859,8],"end":[861,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3193:127":{"id":"2:3193:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:3430:2515":{"id":"2:3430:2515","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3432:181","2:3433:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3388:2378-0:279:1879":{"id":"a:2:3388:2378-0:279:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13715:55059":{"id":"2:13715:55059","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15744:2255","self::pattern":"2:13302:3891"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13796:4268":{"id":"2:13796:4268","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8606:3866":{"id":"2:8606:3866","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8608:2914"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9504:1776-0:380:2214":{"id":"a:2:9504:1776-0:380:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3436:2518":{"id":"2:3436:2518","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3438:181","2:3439:1105"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:186:922":{"id":"0:186:922","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[707,8],"end":[709,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing function.\n\n# Example\n```\n# fn main() {\nuse once_cell::unsync::Lazy;\n\nlet hello = \"Hello, World!\".to_string();\n\nlet lazy = Lazy::new(|| hello.to_uppercase());\n\nassert_eq!(&*lazy, \"HELLO, WORLD!\");\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["init",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3255:127":{"id":"2:3255:127","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3256:1796","2:3258:57155","2:3259:57156","2:3260:57157"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10540:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3195-0:418:2203":{"id":"b:2:3195-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3198:127","2:3199:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2851-0:129:1789":{"id":"b:2:2851-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2845:3935","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2853:52965"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:277:1861":{"id":"0:277:1861","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[1117,8],"end":[1119,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2900:183":{"id":"2:2900:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2902:605","2:2903:909"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13791:59342":{"id":"2:13791:59342","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13302:3891","prim@char":"1:15744:2255"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13697:3585":{"id":"2:13697:3585","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15750:2260","str::slice_mut_unchecked":"1:15750:2260","crate::ops::Index":"2:3655:2536"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13706:4610":{"id":"2:13706:4610","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49967:3463","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13689:1791":{"id":"2:13689:1791","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47750:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13799:54914":{"id":"2:13799:54914","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3518:2535":{"id":"2:3518:2535","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:1240"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10816:3523":{"id":"2:10816:3523","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10817:146","2:10818:33213","2:10819:54944"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[870,4],"end":[870,37]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2905:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2905:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13769:59335":{"id":"2:13769:59335","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13803:59344":{"id":"2:13803:59344","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15744:2255"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50030:4147","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23357:16034":{"id":"2:23357:16034","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23358:7197","2:23359:58525","2:23360:58526"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23350:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:297:922":{"id":"0:297:922","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[1198,8],"end":[1200,9]},"visibility":"public","docs":"Creates a new lazy value with the given initializing\nfunction.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13327:3894":{"id":"2:13327:3894","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13329:2853","2:13330:58936","2:13331:58937"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13321:3893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9503:1777-0:237:1789":{"id":"a:2:9503:1777-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:249:409":{"id":"0:249:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[843,8],"end":[848,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13709:55057":{"id":"2:13709:55057","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15744:2255","self::pattern":"2:13302:3891"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:850:2922":{"id":"5:850:2922","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:0:1999":{"id":"0:0:1999","crate_id":0,"name":"once_cell","span":{"filename":"src/lib.rs","begin":[1,0],"end":[1304,1]},"visibility":"public","docs":"# Overview\n\n`once_cell` provides two new cell-like types, [`unsync::OnceCell`] and [`sync::OnceCell`]. A `OnceCell`\nmight store arbitrary non-`Copy` types, can be assigned to at most once and provides direct access\nto the stored contents. The core API looks *roughly* like this (and there's much more inside, read on!):\n\n```rust,ignore\nimpl<T> OnceCell<T> {\n    const fn new() -> OnceCell<T> { ... }\n    fn set(&self, value: T) -> Result<(), T> { ... }\n    fn get(&self) -> Option<&T> { ... }\n}\n```\n\nNote that, like with [`RefCell`] and [`Mutex`], the `set` method requires only a shared reference.\nBecause of the single assignment restriction `get` can return a `&T` instead of `Ref<T>`\nor `MutexGuard<T>`.\n\nThe `sync` flavor is thread-safe (that is, implements the [`Sync`] trait), while the `unsync` one is not.\n\n[`unsync::OnceCell`]: unsync/struct.OnceCell.html\n[`sync::OnceCell`]: sync/struct.OnceCell.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n[`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n# Recipes\n\n`OnceCell` might be useful for a variety of patterns.\n\n## Safe Initialization of Global Data\n\n```rust\nuse std::{env, io};\n\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct Logger {\n    // ...\n}\nstatic INSTANCE: OnceCell<Logger> = OnceCell::new();\n\nimpl Logger {\n    pub fn global() -> &'static Logger {\n        INSTANCE.get().expect(\"logger is not initialized\")\n    }\n\n    fn from_cli(args: env::Args) -> Result<Logger, std::io::Error> {\n       // ...\n#      Ok(Logger {})\n    }\n}\n\nfn main() {\n    let logger = Logger::from_cli(env::args()).unwrap();\n    INSTANCE.set(logger).unwrap();\n    // use `Logger::global()` from now on\n}\n```\n\n## Lazy Initialized Global Data\n\nThis is essentially the `lazy_static!` macro, but without a macro.\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\n\nuse once_cell::sync::OnceCell;\n\nfn global_data() -> &'static Mutex<HashMap<i32, String>> {\n    static INSTANCE: OnceCell<Mutex<HashMap<i32, String>>> = OnceCell::new();\n    INSTANCE.get_or_init(|| {\n        let mut m = HashMap::new();\n        m.insert(13, \"Spica\".to_string());\n        m.insert(74, \"Hoyten\".to_string());\n        Mutex::new(m)\n    })\n}\n```\n\nThere are also the [`sync::Lazy`] and [`unsync::Lazy`] convenience types to streamline this pattern:\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\nuse once_cell::sync::Lazy;\n\nstatic GLOBAL_DATA: Lazy<Mutex<HashMap<i32, String>>> = Lazy::new(|| {\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    Mutex::new(m)\n});\n\nfn main() {\n    println!(\"{:?}\", GLOBAL_DATA.lock().unwrap());\n}\n```\n\nNote that the variable that holds `Lazy` is declared as `static`, *not*\n`const`. This is important: using `const` instead compiles, but works wrong.\n\n[`sync::Lazy`]: sync/struct.Lazy.html\n[`unsync::Lazy`]: unsync/struct.Lazy.html\n\n## General purpose lazy evaluation\n\nUnlike `lazy_static!`, `Lazy` works with local variables.\n\n```rust\nuse once_cell::unsync::Lazy;\n\nfn main() {\n    let ctx = vec![1, 2, 3];\n    let thunk = Lazy::new(|| {\n        ctx.iter().sum::<i32>()\n    });\n    assert_eq!(*thunk, 6);\n}\n```\n\nIf you need a lazy field in a struct, you probably should use `OnceCell`\ndirectly, because that will allow you to access `self` during initialization.\n\n```rust\nuse std::{fs, path::PathBuf};\n\nuse once_cell::unsync::OnceCell;\n\nstruct Ctx {\n    config_path: PathBuf,\n    config: OnceCell<String>,\n}\n\nimpl Ctx {\n    pub fn get_config(&self) -> Result<&str, std::io::Error> {\n        let cfg = self.config.get_or_try_init(|| {\n            fs::read_to_string(&self.config_path)\n        })?;\n        Ok(cfg.as_str())\n    }\n}\n```\n\n## Lazily Compiled Regex\n\nThis is a `regex!` macro which takes a string literal and returns an\n*expression* that evaluates to a `&'static Regex`:\n\n```\nmacro_rules! regex {\n    ($re:literal $(,)?) => {{\n        static RE: once_cell::sync::OnceCell<regex::Regex> = once_cell::sync::OnceCell::new();\n        RE.get_or_init(|| regex::Regex::new($re).unwrap())\n    }};\n}\n```\n\nThis macro can be useful to avoid the \"compile regex on every loop iteration\" problem.\n\n## Runtime `include_bytes!`\n\nThe `include_bytes` macro is useful to include test resources, but it slows\ndown test compilation a lot. An alternative is to load the resources at\nruntime:\n\n```\nuse std::path::Path;\n\nuse once_cell::sync::OnceCell;\n\npub struct TestResource {\n    path: &'static str,\n    cell: OnceCell<Vec<u8>>,\n}\n\nimpl TestResource {\n    pub const fn new(path: &'static str) -> TestResource {\n        TestResource { path, cell: OnceCell::new() }\n    }\n    pub fn bytes(&self) -> &[u8] {\n        self.cell.get_or_init(|| {\n            let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n            let path = Path::new(dir.as_str()).join(self.path);\n            std::fs::read(&path).unwrap_or_else(|_err| {\n                panic!(\"failed to load test resource: {}\", path.display())\n            })\n        }).as_slice()\n    }\n}\n\nstatic TEST_IMAGE: TestResource = TestResource::new(\"test_data/lena.png\");\n\n#[test]\nfn test_sobel_filter() {\n    let rgb: &[u8] = TEST_IMAGE.bytes();\n    // ...\n# drop(rgb);\n}\n```\n\n## `lateinit`\n\n`LateInit` type for delayed initialization. It is reminiscent of Kotlin's\n`lateinit` keyword and allows construction of cyclic data structures:\n\n\n```\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct LateInit<T> { cell: OnceCell<T> }\n\nimpl<T> LateInit<T> {\n    pub fn init(&self, value: T) {\n        assert!(self.cell.set(value).is_ok())\n    }\n}\n\nimpl<T> Default for LateInit<T> {\n    fn default() -> Self { LateInit { cell: OnceCell::default() } }\n}\n\nimpl<T> std::ops::Deref for LateInit<T> {\n    type Target = T;\n    fn deref(&self) -> &T {\n        self.cell.get().unwrap()\n    }\n}\n\n#[derive(Default, Debug)]\nstruct A<'a> {\n    b: LateInit<&'a B<'a>>,\n}\n\n#[derive(Default, Debug)]\nstruct B<'a> {\n    a: LateInit<&'a A<'a>>\n}\n\nfn build_cycle() {\n    let a = A::default();\n    let b = B::default();\n    a.b.init(&b);\n    b.a.init(&a);\n    println!(\"{:?}\", a.b.a.b.a);\n}\n```\n\n# Comparison with std\n\n|`!Sync` types         | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`Cell<T>`             | `T`                    | requires `T: Copy` for `get`                  |\n|`RefCell<T>`          | `RefMut<T>` / `Ref<T>` | may panic at runtime                          |\n|`unsync::OnceCell<T>` | `&T`                   | assignable only once                          |\n\n|`Sync` types          | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`AtomicT`             | `T`                    | works only with certain `Copy` types          |\n|`Mutex<T>`            | `MutexGuard<T>`        | may deadlock at runtime, may block the thread |\n|`sync::OnceCell<T>`   | `&T`                   | assignable only once, may block the thread    |\n\nTechnically, calling `get_or_init` will also cause a panic or a deadlock if it recursively calls\nitself. However, because the assignment can happen only once, such cases should be more rare than\nequivalents with `RefCell` and `Mutex`.\n\n# Minimum Supported `rustc` Version\n\nThis crate's minimum supported `rustc` version is `1.36.0`.\n\nIf only the `std` feature is enabled, MSRV will be updated conservatively.\nWhen using other features, like `parking_lot`, MSRV might be updated more frequently, up to the latest stable.\nIn both cases, increasing MSRV is *not* considered a semver-breaking change.\n\n# Implementation details\n\nThe implementation is based on the [`lazy_static`](https://github.com/rust-lang-nursery/lazy-static.rs/)\nand [`lazy_cell`](https://github.com/indiv0/lazycell/) crates and [`std::sync::Once`]. In some sense,\n`once_cell` just streamlines and unifies those APIs.\n\nTo implement a sync flavor of `OnceCell`, this crates uses either a custom\nre-implementation of `std::sync::Once` or `parking_lot::Mutex`. This is\ncontrolled by the `parking_lot` feature (disabled by default). Performance\nis the same for both cases, but the `parking_lot` based `OnceCell<T>` is\nsmaller by up to 16 bytes.\n\nThis crate uses `unsafe`.\n\n[`std::sync::Once`]: https://doc.rust-lang.org/std/sync/struct.Once.html\n\n# F.A.Q.\n\n**Should I use lazy_static or once_cell?**\n\nTo the first approximation, `once_cell` is both more flexible and more convenient than `lazy_static`\nand should be preferred.\n\nUnlike `once_cell`, `lazy_static` supports spinlock-based implementation of blocking which works with\n`#![no_std]`.\n\n`lazy_static` has received significantly more real world testing, but `once_cell` is also a widely\nused crate.\n\n**Should I use the sync or unsync flavor?**\n\nBecause Rust compiler checks thread safety for you, it's impossible to accidentally use `unsync` where\n`sync` is required. So, use `unsync` in single-threaded code and `sync` in multi-threaded. It's easy\nto switch between the two if code becomes multi-threaded later.\n\nAt the moment, `unsync` has an additional benefit that reentrant initialization causes a panic, which\nmight be easier to debug than a deadlock.\n\n**Does this crate support async?**\n\nNo, but you can use [`async_once_cell`](https://crates.io/crates/async_once_cell) instead.\n\n# Related crates\n\n* [double-checked-cell](https://github.com/niklasf/double-checked-cell)\n* [lazy-init](https://crates.io/crates/lazy-init)\n* [lazycell](https://crates.io/crates/lazycell)\n* [mitochondria](https://crates.io/crates/mitochondria)\n* [lazy_static](https://crates.io/crates/lazy_static)\n* [async_once_cell](https://crates.io/crates/async_once_cell)\n\nMost of this crate's functionality is available in `std` in nightly Rust.\nSee the [tracking issue](https://github.com/rust-lang/rust/issues/74465).","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:97:1769","0:209:1363","0:321:1555"],"is_stripped":false}},"2:3603:132":{"id":"2:3603:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3605:181","2:3606:379"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3853:2371":{"id":"2:3853:2371","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:1075:3510":{"id":"1:1075:3510","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:2922","1:1077:4268","1:1078:54910","1:1079:54911","1:1080:54912","1:1081:54913","1:1082:54914"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9503:1777":{"id":"2:9503:1777","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3347:211-0:129:1789":{"id":"a:2:3347:211-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9127:3000":{"id":"2:9127:3000","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:170:1863":{"id":"0:170:1863","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[651,8],"end":[655,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value.\n\nReturns `None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3462:2523":{"id":"2:3462:2523","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3464:1106"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3795:2540":{"id":"2:3795:2540","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3726:2539","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:5:848-0:237:1789":{"id":"b:5:848-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["5:850:2922","5:851:2923","5:852:2924"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3195-0:279:1879":{"id":"b:2:3195-0:279:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3198:127","2:3199:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6574:3502":{"id":"1:6574:3502","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6575:8077","1:6576:56672"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3388:2378-0:171:1879":{"id":"a:2:3388:2378-0:171:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3180-0:237:1789":{"id":"b:2:3180-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3183:2852"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[421,4],"end":[425,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:148:605"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3184-0:380:2214":{"id":"b:2:3184-0:380:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3186:682"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13765:59333":{"id":"2:13765:59333","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4504:3454":{"id":"1:4504:3454","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4505:57535","1:4506:39350","1:4507:57537","1:4508:57536"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13701:4164":{"id":"2:13701:4164","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15744:2255"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49683:4128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6186:54910":{"id":"5:6186:54910","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15750:2260"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:1789":{"id":"0:129:1789","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[376,4],"end":[379,5]},"visibility":"public","docs":"A cell which can be written to only once. It is not thread safe.\n\nUnlike [`std::cell::RefCell`], a `OnceCell` provides simple `&`\nreferences to the contents.\n\n[`std::cell::RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nlet value: &String = cell.get_or_init(|| {\n    \"Hello, World!\".to_string()\n});\nassert_eq!(value, \"Hello, World!\");\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:154","a:2:3388:2378-0:129:1789","a:2:3347:211-0:129:1789","a:2:3359:220-0:129:1789","b:2:3195-0:129:1789","b:2:3187-0:129:1789","b:2:3184-0:129:1789","b:2:4080-0:129:1789","b:2:2851-0:129:1789","b:2:3180-0:129:1789","b:2:3190-0:129:1789","b:2:2848-0:129:1789","b:5:848-0:129:1789","0:132","0:134","0:136","0:139","0:142","0:146","0:149","0:151"]}},"2:13776:59339":{"id":"2:13776:59339","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13302:3891","prim@char":"1:15744:2255"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10542:2819":{"id":"2:10542:2819","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10543:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2851-0:171:1879":{"id":"b:2:2851-0:171:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2845:3935","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2853:52965"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:196":{"id":"0:196","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[763,4],"end":[768,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3570:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:199:222","0:200:544"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6472:3404":{"id":"1:6472:3404","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6473:57221","1:6474:7961","1:6475:7962","1:6476:7964","1:6477:7963","1:6478:7965","1:6479:7966","1:6480:7968","1:6481:5595","1:6482:7971","1:6483:7972","1:6484:7973","1:6485:7974","1:6486:7975","1:6487:7976","1:6488:7969","1:6489:7970"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3357:106":{"id":"2:3357:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:274:1838":{"id":"0:274:1838","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[1073,8],"end":[1086,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and\nthe cell remains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`.\nThe exact outcome is unspecified. Current implementation\ndeadlocks, but this may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:409":{"id":"0:144:409","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[406,8],"end":[411,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13802:3512":{"id":"2:13802:3512","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15744:2255"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50021:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2842:97":{"id":"2:2842:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2844:2325"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:251":{"id":"0:251","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[858,4],"end":[862,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:253:682"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:159:1797":{"id":"0:159:1797","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[470,8],"end":[473,9]},"visibility":"public","docs":"Gets a mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\n*cell.get_mut().unwrap() = 93;\nassert_eq!(cell.get(), Some(&93));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3425:2516":{"id":"2:3425:2516","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3427:181","2:3428:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:278:1863":{"id":"0:278:1863","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1136,8],"end":[1138,9]},"visibility":"public","docs":"Consumes the `OnceCell`, returning the wrapped value. Returns\n`None` if the cell was empty.\n\n# Examples\n\n```\nuse once_cell::sync::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14510:2592":{"id":"2:14510:2592","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14511:56990","2:14512:56991","2:14513:56992","2:14514:56993","2:14515:56994","2:14516:56995","2:14517:2888"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6344:3397":{"id":"1:6344:3397","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6345:57214","1:6346:57215"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:182:661":{"id":"0:182:661","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[687,8],"end":[689,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10493:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10482:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13747:59328":{"id":"2:13747:59328","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:386:661":{"id":"0:386:661","crate_id":0,"name":"fmt","span":{"filename":"src/race.rs","begin":[191,8],"end":[193,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"core::fmt::Formatter","id":"2:10493:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"core::fmt::Result","id":"2:10482:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3180-0:424:2211":{"id":"b:2:3180-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3183:2852"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3195-0:380:2214":{"id":"b:2:3195-0:380:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3198:127","2:3199:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13726:53177":{"id":"2:13726:53177","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15750:2260","self::pattern":"2:13302:3891","prim@char":"1:15744:2255","`DoubleEndedIterator`":"2:8687:120","str::rsplit":"1:15750:2260"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49713:3462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3655:2536":{"id":"2:3655:2536","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3657:181","2:3658:755"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10540:119":{"id":"2:10540:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10541:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8643:151":{"id":"2:8643:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8644:2863","2:8645:2864","2:8646:770"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:395:922":{"id":"0:395:922","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[213,8],"end":[215,9]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3186:682":{"id":"2:3186:682","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:270:1835":{"id":"0:270:1835","crate_id":0,"name":"get_or_init","span":{"filename":"src/lib.rs","begin":[1036,8],"end":[1045,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell\nwas empty.\n\nMany threads may call `get_or_init` concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. The\nexact outcome is unspecified. Current implementation deadlocks, but\nthis may be changed to a panic in the future.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:321:1555":{"id":"0:321:1555","crate_id":0,"name":"race","span":{"filename":"src/race.rs","begin":[1,0],"end":[303,1]},"visibility":"public","docs":"Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.\n\nIf two threads race to initialize a type from the `race` module, they\ndon't block, execute initialization function together, but only one of\nthem stores the result.\n\nThis module does not require `std` feature.\n\n# Atomic orderings\n\nAll types in this module use `Acquire` and `Release`\n[atomic orderings](Ordering) for all their operations. While this is not\nstrictly necessary for types other than `OnceBox`, it is useful for users as\nit allows them to be certain that after `get` or `get_or_init` returns on\none thread, any side-effects caused by the setter thread prior to them\ncalling `set` or `get_or_init` will be made visible to that thread; without\nit, it's possible for it to appear as if they haven't happened yet from the\ngetter thread's perspective. This is an acceptable tradeoff to make since\n`Acquire` and `Release` have very little performance overhead on most\narchitectures versus `Relaxed`.","links":{"Ordering":"2:47943:178"},"attrs":["#[cfg(feature = \"race\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:418:2203","0:424:2211","0:359"],"is_stripped":false}},"2:13698:59324":{"id":"2:13698:59324","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15750:2260","str::slice_unchecked":"1:15750:2260","crate::ops::IndexMut":"2:3659:2537"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3183:2852":{"id":"2:3183:2852","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3157:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:349:1817":{"id":"0:349:1817","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[133,4],"end":[135,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:200:544":{"id":"0:200:544","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[765,8],"end":[767,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13794:4074":{"id":"2:13794:4074","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:13241:2571","FromStr::Err":"2:13241:2571"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13241:2571","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13241:2571","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2848-0:380:2214":{"id":"b:2:2848-0:380:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2850:2325"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3180-0:279:1879":{"id":"b:2:3180-0:279:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3183:2852"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3195-0:129:1789":{"id":"b:2:3195-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3198:127","2:3199:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:97:1769":{"id":"0:97:1769","crate_id":0,"name":"unsync","span":{"filename":"src/lib.rs","begin":[346,0],"end":[346,14]},"visibility":"public","docs":"Single-threaded version of `OnceCell`.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:129:1789","0:171:1879"],"is_stripped":false}},"2:13729:31843":{"id":"2:13729:31843","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15744:2255","self::pattern":"2:13302:3891"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13094:4101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:149":{"id":"0:149","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[427,4],"end":[427,37]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2905:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2905:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3352:2149":{"id":"2:3352:2149","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13687:305":{"id":"2:13687:305","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15750:2260","`u8`":"1:15761:2269"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:243:59":{"id":"0:243:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[828,8],"end":[830,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3164:228":{"id":"2:3164:228","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3166:127","2:3167:1419"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3157:135":{"id":"2:3157:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3159:682"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13677:795":{"id":"2:13677:795","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15744:2255"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:418:2203":{"id":"b:2:3184-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3186:682"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:5512:3402":{"id":"1:5512:3402","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5513:5553","1:5514:54743","1:5515:54744"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4080-0:129:1789":{"id":"b:2:4080-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4078:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:4082:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13693:1929":{"id":"2:13693:1929","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3198:127":{"id":"2:3198:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39050:3639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:353:1838":{"id":"0:353:1838","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[157,4],"end":[162,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"bool"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2848-0:129:1789":{"id":"b:2:2848-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2850:2325"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8652:2603":{"id":"2:8652:2603","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8654:2860","2:8656:2861","2:8657:2862"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13702:3920":{"id":"2:13702:3920","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15744:2255"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49689:4129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13772:59337":{"id":"2:13772:59337","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13750:59329":{"id":"2:13750:59329","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4866:2585":{"id":"2:4866:2585","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4867:2863","2:4868:57895","2:4869:2866"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1260,4],"end":[1265,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3583:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:315:546"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:311:544":{"id":"0:311:544","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1255,8],"end":[1257,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13738:59327":{"id":"2:13738:59327","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:15750:2260","self::pattern":"2:13302:3891","prim@char":"1:15744:2255","str::split":"1:15750:2260"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49781:4134","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3359:220-0:237:1789":{"id":"a:2:3359:220-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3190-0:279:1879":{"id":"b:2:3190-0:279:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3160:229","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3193:127","2:3194:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3086:3870":{"id":"2:3086:3870","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3085:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:426":{"id":"0:426","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[110,9],"end":[110,16]},"visibility":{"restricted":{"parent":"0:321:1555","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:427:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[827,4],"end":[831,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:243:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:310:222":{"id":"0:310:222","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1254,8],"end":[1254,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:3509:2533":{"id":"2:3509:2533","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3511:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:266:1929":{"id":"0:266:1929","crate_id":0,"name":"get_unchecked","span":{"filename":"src/lib.rs","begin":[952,8],"end":[954,9]},"visibility":"public","docs":"Get the reference to the underlying value, without checking if the\ncell is initialized.\n\n# Safety\n\nCaller must ensure that the cell is in initialized state, and that\nthe contents are acquired by (synchronized to) this thread.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:204:546":{"id":"0:204:546","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[771,8],"end":[774,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:171:1879":{"id":"b:2:3184-0:171:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3186:682"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:392:579":{"id":"0:392:579","crate_id":0,"name":"drop","span":{"filename":"src/race.rs","begin":[203,8],"end":[208,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3347:211-0:380:2214":{"id":"a:2:3347:211-0:380:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[770,4],"end":[775,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"2:3583:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:204:546"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3359:220-0:129:1789":{"id":"a:2:3359:220-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13686:59323":{"id":"2:13686:59323","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:23738:16053":{"id":"2:23738:16053","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23739:58110","2:23740:58111","2:23741:58112"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23733:3942","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:169:1861":{"id":"0:169:1861","crate_id":0,"name":"take","span":{"filename":"src/lib.rs","begin":[631,8],"end":[633,9]},"visibility":"public","docs":"Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn't been initialized.\n\n# Examples\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6184:59983":{"id":"5:6184:59983","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8455:216","`Box<str>`":"5:444:2216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:2593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10483:2814":{"id":"2:10483:2814","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10484:1536","2:10485:56956","2:10487:2776"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:380:2214":{"id":"0:380:2214","crate_id":0,"name":"OnceBox","span":{"filename":"src/race.rs","begin":[185,4],"end":[188,5]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:393","a:2:3388:2378-0:380:2214","a:2:3347:211-0:380:2214","a:2:9503:1777-0:380:2214","a:2:9504:1776-0:380:2214","b:2:3195-0:380:2214","b:2:3184-0:380:2214","b:2:4080-0:380:2214","b:2:2851-0:380:2214","b:2:3180-0:380:2214","b:2:3190-0:380:2214","b:2:2848-0:380:2214","0:384","0:387","0:390","0:405"]}},"a:2:3388:2378-0:380:2214":{"id":"a:2:3388:2378-0:380:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13773:59338":{"id":"2:13773:59338","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15744:2255","self::pattern":"2:13302:3891"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13332:3895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3184-0:279:1879":{"id":"b:2:3184-0:279:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3186:682"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:153:682":{"id":"0:153:682","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[430,8],"end":[432,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2851-0:424:2211":{"id":"b:2:2851-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2845:3935","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:52965"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:339:1835":{"id":"0:339:1835","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[70,4],"end":[79,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24923:2202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24923:2202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:24042:3940":{"id":"2:24042:3940","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24043:3939"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24038:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13744:55055":{"id":"2:13744:55055","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15744:2255","str::splitn":"1:15750:2260","self::pattern":"2:13302:3891"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49835:4108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[692,4],"end":[721,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:186:922","0:187:1889"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:398:1835":{"id":"0:398:1835","crate_id":0,"name":"get_or_init","span":{"filename":"src/race.rs","begin":[251,8],"end":[260,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if the cell was\nempty.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138:59":{"id":"0:138:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[391,8],"end":[393,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:209:1363":{"id":"0:209:1363","crate_id":0,"name":"sync","span":{"filename":"src/lib.rs","begin":[787,0],"end":[787,12]},"visibility":"public","docs":"Thread-safe, blocking version of `OnceCell`.","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:237:1789","0:279:1879"],"is_stripped":false}},"2:9124:2586":{"id":"2:9124:2586","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6183:59982":{"id":"5:6183:59982","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13797:54912":{"id":"2:13797:54912","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[390,4],"end":[394,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:138:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2848-0:171:1879":{"id":"b:2:2848-0:171:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:2850:2325"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13688:55022":{"id":"2:13688:55022","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15761:2269"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3151:74":{"id":"2:3151:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3153:1811"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:2:3190-0:418:2203":{"id":"b:2:3190-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3160:229","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3193:127","2:3194:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:315:546":{"id":"0:315:546","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1261,8],"end":[1264,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13708:31961":{"id":"2:13708:31961","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50005:4145","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[211,4],"end":[291,5]},"visibility":{"restricted":{"parent":"0:362:2213","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:395:922","0:396:1791","0:397:1817","0:398:1835","0:402:1838"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6650:3388":{"id":"1:6650:3388","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6651:53038"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3180-0:380:2214":{"id":"b:2:3180-0:380:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3183:2852"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3187-0:129:1789":{"id":"b:2:3187-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3189:682"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13695:55021":{"id":"2:13695:55021","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9503:1777-0:424:2211":{"id":"a:2:9503:1777-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[196,4],"end":[200,5]},"visibility":{"restricted":{"parent":"0:362:2213","path":"::race::once_box"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:389:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6746:3384":{"id":"1:6746:3384","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6747:57145"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3450:2524":{"id":"2:3450:2524","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3452:1359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3355:218":{"id":"2:3355:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10548:2822":{"id":"2:10548:2822","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10549:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3190-0:129:1789":{"id":"b:2:3190-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3160:229","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3193:127","2:3194:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6168:59980":{"id":"5:6168:59980","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13704:31976":{"id":"2:13704:31976","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15750:2260"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49987:4143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:171:1879":{"id":"0:171:1879","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[678,4],"end":[681,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\n# Example\n```\nuse once_cell::unsync::Lazy;\n\nlet lazy: Lazy<i32> = Lazy::new(|| {\n    println!(\"initializing\");\n    92\n});\nprintln!(\"ready\");\nprintln!(\"{}\", *lazy);\nprintln!(\"{}\", *lazy);\n\n// Prints:\n//   ready\n//   initializing\n//   92\n//   92\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:183","0:190","a:2:3388:2378-0:171:1879","a:2:3347:211-0:171:1879","a:2:3359:220-0:171:1879","a:2:9503:1777-0:171:1879","b:2:3195-0:171:1879","b:2:3184-0:171:1879","b:2:4080-0:171:1879","b:2:2851-0:171:1879","b:2:3180-0:171:1879","b:2:3190-0:171:1879","b:2:2848-0:171:1879","0:176","0:179","0:196","0:201","0:206"]}},"0:422":{"id":"0:422","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[31,18],"end":[31,23]},"visibility":{"restricted":{"parent":"0:321:1555","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:423:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2850:2325":{"id":"2:2850:2325","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:336:922":{"id":"0:336:922","crate_id":0,"name":"new","span":{"filename":"src/race.rs","begin":[39,4],"end":[41,5]},"visibility":"public","docs":"Creates a new empty cell.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8602:3867":{"id":"2:8602:3867","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8604:2913"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5574:3406":{"id":"1:5574:3406","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5575:56658"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:206":{"id":"0:206","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[777,4],"end":[782,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:208:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:157:1795":{"id":"0:157:1795","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[442,8],"end":[444,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3594:2131":{"id":"2:3594:2131","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3595:579"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10552:2823":{"id":"2:10552:2823","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10553:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:158:1791":{"id":"0:158:1791","crate_id":0,"name":"get","span":{"filename":"src/lib.rs","begin":[449,8],"end":[452,9]},"visibility":"public","docs":"Gets a reference to the underlying value.\n\nReturns `None` if the cell is empty.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:161:1818":{"id":"0:161:1818","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[513,8],"end":[527,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:129:1789"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3388:2378":{"id":"2:3388:2378","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3442:2517":{"id":"2:3442:2517","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3443:181","2:3444:915"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9503:1777-0:279:1879":{"id":"a:2:9503:1777-0:279:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:287:661":{"id":"0:287:661","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1180,8],"end":[1182,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10493:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10482:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14042:150":{"id":"2:14042:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14043:181","2:14044:150","2:14045:769"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:335":{"id":"0:335","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[36,0],"end":[107,1]},"visibility":{"restricted":{"parent":"0:321:1555","path":"::race"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:336:922","0:337:1791","0:338:1817","0:339:1835","0:343:1838"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13691:1797":{"id":"2:13691:1797","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47750:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[388,4],"end":[388,53]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3359:220-0:171:1879":{"id":"a:2:3359:220-0:171:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13705:31966":{"id":"2:13705:31966","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15750:2260"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49996:4144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9504:1776":{"id":"2:9504:1776","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:294":{"id":"0:294","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1195,4],"end":[1212,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:297:922","0:298:1889"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2867:104":{"id":"2:2867:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:409","2:2869:411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2851-0:380:2214":{"id":"b:2:2851-0:380:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2845:3935","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2853:52965"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3190-0:424:2211":{"id":"b:2:3190-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3160:229","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3193:127","2:3194:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8844:157":{"id":"2:8844:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8845:2863","2:8846:924","2:8847:2865","2:8850:2866","2:8851:496","2:8853:2867","2:8856:2868","2:8857:2869","2:8858:2870","2:8859:2871","2:8861:2872","2:8863:2873","2:8864:2874","2:8866:843","2:8869:2875","2:8876:2876","2:8878:2877","2:8881:2878","2:8882:2879","2:8883:2880","2:8885:2881","2:8887:2882","2:8890:1311","2:8891:1861","2:8892:2883","2:8896:2884","2:8899:2885","2:8900:2886","2:8901:2887","2:8903:2888","2:8904:2597","2:8906:2889","2:8909:2890","2:8911:2891","2:8921:2892","2:8936:2893","2:8938:2894","2:8942:2895","2:8951:2896","2:8954:2897","2:8956:2898","2:8959:277","2:8966:295","2:8973:2899","2:8980:2900","2:8989:2901","2:8999:1016","2:9006:2902","2:9013:2849","2:9014:2850","2:9015:2903","2:9027:2904","2:9034:2905","2:9046:2906","2:9053:2907","2:9054:2908","2:9059:2909","2:9062:2910","2:9065:2911","2:9066:2912","2:9068:2913","2:9070:2914","2:9072:416","2:9075:2915","2:9078:999","2:9081:2916","2:9084:605","2:9087:2917","2:9090:909","2:9092:828","2:9094:794","2:9096:714","2:9098:697","2:9100:2918","2:9101:2919","2:9109:2920"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4:1766":{"id":"0:4:1766","crate_id":0,"name":"imp","span":{"filename":"src/imp_std.rs","begin":[6,0],"end":[435,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(not(feature = \"parking_lot\"))]","#[path = \"imp_std.rs\"]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"b:2:4080-0:279:1879":{"id":"b:2:4080-0:279:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4078:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:4082:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13712:55058":{"id":"2:13712:55058","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13302:3891","prim@char":"1:15744:2255"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8639:136":{"id":"2:8639:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8641:685"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:11175:214":{"id":"2:11175:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11177:181","2:11178:1791","2:11179:1797","2:11180:1929","2:11181:55021","2:11182:755","2:11183:756"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11166:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3583:1775":{"id":"2:3583:1775","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3584:546"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3570:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3190-0:380:2214":{"id":"b:2:3190-0:380:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3160:229","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3193:127","2:3194:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:14027:138":{"id":"2:14027:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14028:181","2:14029:1015"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6646:3385":{"id":"1:6646:3385","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6647:54883"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:362:2213":{"id":"0:362:2213","crate_id":0,"name":"once_box","span":{"filename":"src/race.rs","begin":[178,0],"end":[178,12]},"visibility":{"restricted":{"parent":"0:321:1555","path":"::race"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:380:2214"],"is_stripped":true}},"a:2:3347:211-0:424:2211":{"id":"a:2:3347:211-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6171:59981":{"id":"5:6171:59981","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13680:59321":{"id":"2:13680:59321","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:244":{"id":"0:244","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[833,4],"end":[840,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:246:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[686,4],"end":[690,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:182:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2848-0:237:1789":{"id":"b:2:2848-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2850:2325"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2905:124":{"id":"2:2905:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13800:59343":{"id":"2:13800:59343","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15744:2255"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50012:4146","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13798:54913":{"id":"2:13798:54913","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9504:1776-0:424:2211":{"id":"a:2:9504:1776-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10781:146":{"id":"2:10781:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10782:653","2:10783:2218","2:10784:53061","2:10785:53062","2:10786:53063","2:10787:53064","2:10788:53065","2:10789:53066","2:10790:53067","2:10791:53068","2:10792:53069","2:10793:53070","2:10794:53071","2:10795:53072","2:10796:53073","2:10797:1536"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:852:2924":{"id":"5:852:2924","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4429:3415":{"id":"1:4429:3415","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4430:3350","1:4431:56806","1:4433:56807","1:4434:56808","1:4435:3451","1:4436:56809","1:4437:56590","1:4439:56810","1:4440:2888","1:4441:3590","1:4442:2871","1:4444:1861"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:428":{"id":"0:428","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[110,18],"end":[110,23]},"visibility":{"restricted":{"parent":"0:321:1555","path":"::race"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:429:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:166:1838":{"id":"0:166:1838","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/lib.rs","begin":[586,8],"end":[600,9]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\n# Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell\nremains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing\nso results in a panic.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10546:2821":{"id":"2:10546:2821","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10547:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3513:2534":{"id":"2:3513:2534","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3515:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:307":{"id":"0:307","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1253,4],"end":[1258,5]},"visibility":{"restricted":{"parent":"0:209:1363","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"2:3570:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:310:222","0:311:544"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:338:1817":{"id":"0:338:1817","crate_id":0,"name":"set","span":{"filename":"src/race.rs","begin":[55,4],"end":[62,5]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(())` if it was\nfull.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24923:2202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:256:605":{"id":"0:256:605","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[865,8],"end":[867,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9504:1776-0:418:2203":{"id":"a:2:9504:1776-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13679:59320":{"id":"2:13679:59320","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:319:59":{"id":"0:319:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1269,8],"end":[1271,9]},"visibility":"default","docs":"Creates a new lazy value using `Default` as the initializing function.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:298:1889":{"id":"0:298:1889","crate_id":0,"name":"into_value","span":{"filename":"src/lib.rs","begin":[1205,8],"end":[1211,9]},"visibility":"public","docs":"Consumes this `Lazy` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["this",{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:279:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3347:211":{"id":"2:3347:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:427:59":{"id":"0:427:59","crate_id":0,"name":"default","span":{"filename":"src/race.rs","begin":[110,9],"end":[110,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3359:220":{"id":"2:3359:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"src/race.rs","begin":[175,0],"end":[175,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::once_box::OnceBox","name":"OnceBox","id":"0:380:2214","glob":false}},"a:2:9503:1777-0:418:2203":{"id":"a:2:9503:1777-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3415:2514":{"id":"2:3415:2514","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3417:181","2:3418:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:160:1817":{"id":"0:160:1817","crate_id":0,"name":"set","span":{"filename":"src/lib.rs","begin":[492,8],"end":[497,9]},"visibility":"public","docs":"Sets the contents of this cell to `value`.\n\nReturns `Ok(())` if the cell was empty and `Err(value)` if it was\nfull.\n\n# Example\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.set(92), Ok(()));\nassert_eq!(cell.set(62), Err(62));\n\nassert!(cell.get().is_some());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3195-0:237:1789":{"id":"b:2:3195-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3198:127","2:3199:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3187-0:237:1789":{"id":"b:2:3187-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3189:682"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2851-0:237:1789":{"id":"b:2:2851-0:237:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2845:3935","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:2853:52965"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13682:59322":{"id":"2:13682:59322","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15750:2260"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3388:2378-0:424:2211":{"id":"a:2:3388:2378-0:424:2211","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBool","id":"0:424:2211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3190-0:171:1879":{"id":"b:2:3190-0:171:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3160:229","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3193:127","2:3194:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6648:3387":{"id":"1:6648:3387","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6649:57051"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:237:1789":{"id":"0:237:1789","crate_id":0,"name":"OnceCell","span":{"filename":"src/lib.rs","begin":[825,4],"end":[825,35]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.\n\n`OnceCell` provides `&` references to the contents without RAII guards.\n\nReading a non-`None` value out of `OnceCell` establishes a\nhappens-before relationship with a corresponding write. For example, if\nthread A initializes the cell with `get_or_init(f)`, and thread B\nsubsequently reads the result of this call, B also observes all the side\neffects of `f`.\n\n# Example\n```\nuse once_cell::sync::OnceCell;\n\nstatic CELL: OnceCell<String> = OnceCell::new();\nassert!(CELL.get().is_none());\n\nstd::thread::spawn(|| {\n    let value: &String = CELL.get_or_init(|| {\n        \"Hello, World!\".to_string()\n    });\n    assert_eq!(value, \"Hello, World!\");\n}).join().unwrap();\n\nlet value: Option<&String> = CELL.get();\nassert!(value.is_some());\nassert_eq!(value.unwrap().as_str(), \"Hello, World!\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:259","a:2:3388:2378-0:237:1789","a:2:3347:211-0:237:1789","a:2:3359:220-0:237:1789","a:2:9503:1777-0:237:1789","a:2:9504:1776-0:237:1789","b:2:3195-0:237:1789","b:2:3187-0:237:1789","b:2:3184-0:237:1789","b:2:4080-0:237:1789","b:2:2851-0:237:1789","b:2:3180-0:237:1789","b:2:3190-0:237:1789","b:2:2848-0:237:1789","b:5:848-0:237:1789","0:241","0:244","0:247","0:251","0:254","0:257"]}},"0:268:1818":{"id":"0:268:1818","crate_id":0,"name":"try_insert","span":{"filename":"src/lib.rs","begin":[1001,8],"end":[1008,9]},"visibility":"public","docs":"Like [`set`](Self::set), but also returns a reference to the final cell value.\n\n# Example\n\n```\nuse once_cell::unsync::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```","links":{"Self::set":"0:237:1789"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}},{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"generic","inner":"T"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3495:2530":{"id":"2:3495:2530","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3497:181","2:3498:1239"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:418:2203":{"id":"0:418:2203","crate_id":0,"name":"OnceNonZeroUsize","span":{"filename":"src/race.rs","begin":[32,0],"end":[34,1]},"visibility":"public","docs":"A thread-safe cell which can be written to only once.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:335","a:2:3388:2378-0:418:2203","a:2:3347:211-0:418:2203","a:2:3359:220-0:418:2203","a:2:9503:1777-0:418:2203","a:2:9504:1776-0:418:2203","b:2:3195-0:418:2203","b:2:3184-0:418:2203","b:2:4080-0:418:2203","b:2:2851-0:418:2203","b:2:3180-0:418:2203","b:2:3190-0:418:2203","b:2:2848-0:418:2203","0:420","0:422"]}},"2:4078:68":{"id":"2:4078:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4079:1432"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"5:844:223":{"id":"5:844:223","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:2922","5:846:2923","5:847:2924"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23733:3942":{"id":"2:23733:3942","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23734:1273","2:23735:1272","2:23736:1270","2:23737:1269"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23145:3941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:343:1838":{"id":"0:343:1838","crate_id":0,"name":"get_or_try_init","span":{"filename":"src/race.rs","begin":[88,4],"end":[106,5]},"visibility":"public","docs":"Gets the contents of the cell, initializing it with `f` if\nthe cell was empty. If the cell was empty and `f` failed, an\nerror is returned.\n\nIf several threads concurrently run `get_or_init`, more than one `f` can\nbe called. However, all threads will return the same value, produced by\nsome `f`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24923:2202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroUsize","id":"2:24923:2202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:262:1795":{"id":"0:262:1795","crate_id":0,"name":"with_value","span":{"filename":"src/lib.rs","begin":[879,8],"end":[881,9]},"visibility":"public","docs":"Creates a new initialized cell.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:237:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3726:2539":{"id":"2:3726:2539","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3728:58823","2:3729:58824","2:3730:55057"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:9130:3433":{"id":"1:9130:3433","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9131:57503","1:9132:57504","1:9133:57505","1:9134:57506","1:9135:57507","1:9136:38942","1:9137:57502"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:4080-0:171:1879":{"id":"b:2:4080-0:171:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4078:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:4082:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3195-0:171:1879":{"id":"b:2:3195-0:171:1879","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Lazy","id":"0:171:1879","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["2:3198:127","2:3199:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3388:2378-0:129:1789":{"id":"a:2:3388:2378-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3388:2378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:265:1797":{"id":"0:265:1797","crate_id":0,"name":"get_mut","span":{"filename":"src/lib.rs","begin":[941,8],"end":[943,9]},"visibility":"public","docs":"Gets the mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\nThis method is allowed to violate the invariant of writing to a `OnceCell`\nat most once because it requires `&mut` access to `self`. As with all\ninterior mutability, `&mut` access permits arbitrary modification:\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\ncell.set(92).unwrap();\ncell = OnceCell::new();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3505:2532":{"id":"2:3505:2532","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3507:355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5432:3508":{"id":"1:5432:3508","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5433:53476","1:5434:4376"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3184-0:129:1789":{"id":"b:2:3184-0:129:1789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["2:3186:682"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2936:177":{"id":"2:2936:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2937:416","2:2938:2849","2:2939:2850","2:2940:2851"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2905:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2946:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:279:1879":{"id":"0:279:1879","crate_id":0,"name":"Lazy","span":{"filename":"src/lib.rs","begin":[1174,4],"end":[1177,5]},"visibility":"public","docs":"A value which is initialized on the first access.\n\nThis type is thread-safe and can be used in statics.\n\n# Example\n\n```\nuse std::collections::HashMap;\n\nuse once_cell::sync::Lazy;\n\nstatic HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {\n    println!(\"initializing\");\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    m\n});\n\nfn main() {\n    println!(\"ready\");\n    std::thread::spawn(|| {\n        println!(\"{:?}\", HASHMAP.get(&13));\n    }).join().unwrap();\n    println!(\"{:?}\", HASHMAP.get(&74));\n\n    // Prints:\n    //   ready\n    //   initializing\n    //   Some(\"Spica\")\n    //   Some(\"Hoyten\")\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":{"kind":"function_pointer","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generic_params":[],"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:294","0:301","a:2:3388:2378-0:279:1879","a:2:3347:211-0:279:1879","a:2:9503:1777-0:279:1879","b:2:3195-0:279:1879","b:2:3184-0:279:1879","b:2:4080-0:279:1879","b:2:2851-0:279:1879","b:2:3180-0:279:1879","b:2:3190-0:279:1879","b:2:2848-0:279:1879","0:284","0:288","0:291","0:307","0:312","0:317"]}},"2:14426:141":{"id":"2:14426:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14427:278","2:14428:519","2:14429:281","2:14430:1082"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23019:3936":{"id":"2:23019:3936","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23020:3939","2:23021:58703","2:23022:58967","2:23023:58968","2:23024:58969","2:23025:42337","2:23026:58970","2:23027:58971","2:23028:58972","2:23029:58973","2:23030:58974","2:23031:58975","2:23032:58976","2:23033:58977","2:23034:58978","2:23035:58979","2:23036:58752","2:23037:58980","2:23038:58111","2:23039:58110","2:23040:58112","2:23041:58704","2:23042:58705","2:23043:58706","2:23044:58707"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:3391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2851-0:418:2203":{"id":"b:2:2851-0:418:2203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2845:3935","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceNonZeroUsize","id":"0:418:2203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:52965"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:264:1942":{"id":"0:264:1942","crate_id":0,"name":"wait","span":{"filename":"src/lib.rs","begin":[916,8],"end":[924,9]},"visibility":"public","docs":"Gets the reference to the underlying value, blocking the current\nthread until it is set.\n\n```\nuse once_cell::sync::OnceCell;\n\nlet mut cell = std::sync::Arc::new(OnceCell::new());\nlet t = std::thread::spawn({\n    let cell = std::sync::Arc::clone(&cell);\n    move || cell.set(92).unwrap()\n});\n\n// Returns immediately, but might return None.\nlet _value_or_none = cell.get();\n\n// Will return 92, but might block until the other thread does `.set`.\nlet value: &u32 = cell.wait();\nassert_eq!(*value, 92);\nt.join().unwrap();;\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3890:2547":{"id":"2:3890:2547","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[396,4],"end":[403,5]},"visibility":{"restricted":{"parent":"0:97:1769","path":"::unsync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceCell","id":"0:129:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:141:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9503:1777-0:380:2214":{"id":"a:2:9503:1777-0:380:2214","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:9504:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9503:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OnceBox","id":"0:380:2214","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"paths":{"1:5560:3400":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:14325:3413":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:8455:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:57876:6770":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:2405:6780":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11530:5590":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"12:777:2864":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:7073:6786":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:53543:4005":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"12:379:4567":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:6060:4697":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:11177:3758":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:46886:3829":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4127:7567":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:48871:2818":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:3357:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:4823:3784":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:51755:4000":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:3462:2523":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:12417:5769":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:15751:2261":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:3402:4644":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:1764:7420":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:5923:4723":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:6870:58058":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:22870:59168":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:10617:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:5405:7854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:11774:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:4811:3783":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"12:1203:4562":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11945:5674":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:24509:2578":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:6344:3397":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:8200:2593":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:46858:3845":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:7155:4755":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:9786:5447":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:32744:58870":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:11291:3596":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"12:353:6943":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:24042:3940":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:9988:46553":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:8262:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:7294:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10455:5080":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13440:6059":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:14374:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:11890:5657":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:5488:2128":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:12170:5712":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:12634:5808":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:3987:7497":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:22804:3819":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:52145:6704":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:3419:5242":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:9087:46504":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7684:4668":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:720:5329":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:15754:2262":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:8097:3826":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"9:963:4494":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:14766:3634":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:49047:3567":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:14118:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"12:114:60651":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:13016:5936":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12687:5814":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:774:5327":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:5248:2367":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:11433:5569":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:46557:4052":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13281:6015":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:5499:4241":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46634:3513":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:1544:7291":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:1475:3514":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:3743:6237":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"12:856:3550":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:10004:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:9539:5037":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5426:7867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:50452:4159":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:7416:3628":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:5419:7865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11930:3542":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:4709:5217":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:4242:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:4689:6253":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:7238:4677":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:13323:6781":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:5941:4724":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:46928:3833":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:48531:2822":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:4975:6262":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:8240:59222":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:11680:4110":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13452:6060":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:47750:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8850:2423":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:50689:3874":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:7721:4669":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:54:4550":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:5366:7840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6331:4579":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:4771:3416":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:12620:5807":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:1157:10906":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:3105:59315":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:15761:2269":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"10:0:2228":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:10688:6623":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:4197:3480":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"12:472:60648":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:49935:4141":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:8167:3789":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"18:0:2235":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:4078:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:7762:5244":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"17:3743:5007":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:6097:7981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11234:5038":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:46663:4246":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:51993:3969":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:48750:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:3474:2525":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"18:811:5109":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13573:6093":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:9990:331":{"crate_id":2,"path":["core","sync","atomic"],"kind":"module"},"17:12716:5817":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:23072:4013":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:56523:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:47926:2999":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:6472:3404":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6205:8042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12093:5702":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:8419:4374":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"14:11:6518":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7169:4673":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:23261:3939":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"15:0:2232":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:6671:8076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9033:46502":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11168:5541":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:3896:7436":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:10516:5470":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4356:7633":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"12:2412:7199":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:853:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:47934:2864":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:8403:4200":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:49578:3843":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:10966:3419":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:10738:3473":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:11922:5667":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:52225:4009":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10851:5519":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:661:5121":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:2958:3350":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:542:4630":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:49713:3462":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:13327:3894":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:1733:3725":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12383:5766":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:586:7253":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:10493:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4198:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:49781:4134":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:3359:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:10634:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:1132:3665":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:5122:2359":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:15742:2253":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:10895:3458":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:7079:4748":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:5745:4719":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:8643:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13794:6169":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:299:5352":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:2554:3664":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"12:2066:3518":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:14778:3635":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:6908:8089":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:47235:2418":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:6646:3385":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:3793:3651":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:8606:3866":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:10009:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:3160:229":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:23019:3936":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:6173:4730":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:12497:3668":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:13522:6082":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:15748:2258":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:10980:3421":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:47253:3487":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:15710:7107":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:9421:5258":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"14:250:6525":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"7:38:44171":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:50321:4207":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:9646:60663":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:50436:4157":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:5326:4700":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11797:5651":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:9706:5445":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:820:5261":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:3890:2547":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11031:46507":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:53005:4010":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:1190:6947":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:23202:3434":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:11182:3761":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:3154:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:3243:4927":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:51300:6692":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:2845:3935":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:49298:4265":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:11917:3541":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:14027:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:7323:4679":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:10604:3414":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:0:1334":{"crate_id":1,"path":["std"],"kind":"module"},"1:15744:2255":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5260:7778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11102:46508":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"1:10489:6797":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13331:6032":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4321:7615":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10435:4997":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:52122:6703":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:11341:3606":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:2961:3451":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7063:4747":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:23932:3435":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12048:5695":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:3255:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:49671:4016":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:11822:8186":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:5721:4718":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:2619:4394":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:12165:4122":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"12:880:3515":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:48010:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:4271:6241":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:50093:3892":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:48220:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:7449:4666":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:2403:6779":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:12003:5683":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:22851:59170":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"12:750:2998":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:3353:2370":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:52349:4001":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:3114:6971":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:9275:5437":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:8477:4270":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:51725:3996":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:24447:38665":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:3388:2378":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13481:6068":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:5570:3405":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:9561:5042":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:547:4901":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:4903:6260":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4340:7625":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:49835:4108":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:3795:2540":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:22872:59172":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13180:5996":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:11962:3544":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10068:5061":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:2936:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:13595:6098":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:49604:4118":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:8929:46500":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:15768:2276":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:1662:7369":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12157:5711":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:3467:2528":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:3155:4923":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"0:424:2211":{"crate_id":0,"path":["once_cell","race","OnceBool"],"kind":"struct"},"6:3877:7426":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:2484:46591":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"12:2040:3514":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:15747:2257":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:49591:4117":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12282:5730":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:5582:3408":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"12:2032:2998":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10610:5481":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:6080:7979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:49817:4107":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4296:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5566:4711":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:2839:4917":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47918:2998":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:46530:3513":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:47782:2863":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:11355:2998":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2525:3663":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:46195:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:6724:3389":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:10445:5398":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:48887:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:47943:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:23738:16053":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:12442:5772":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3659:2537":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:3461:4930":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:2185:3517":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:3402:3517":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:10435:10903":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:626:7274":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:2754:4910":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10147:5461":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:3085:3391":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2376:2372":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4538:7711":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:14510:2592":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:10217:5262":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:51969:3968":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:618:7269":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:11956:5677":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13463:6064":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:13321:3893":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:50161:3903":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:23198:3391":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12660:5810":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:9183:5015":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13293:6018":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:10540:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:24431:38656":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"12:2253:3559":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:3637:2545":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:24318:7101":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:14381:3453":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:47006:3839":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:4017:3515":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:11786:3634":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5204:7754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12469:5776":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:50287:3907":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"9:692:4429":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:4486:2814":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:4434:7669":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:8639:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7090:4749":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:46305:4025":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:49503:4111":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:50440:4156":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:3905:5212":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11457:5570":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:10781:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:14320:8189":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:4581:4363":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"16:7100:4750":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:10240:4986":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:13536:3641":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:5113:2357":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5982:7932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:7906:2872":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:14790:53170":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:13953:6209":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:5697:4026":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:14315:8187":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:2005:3515":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:23405:3962":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:3948:3472":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:53665:6757":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13873:6190":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:4163:3698":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:51324:4006":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:6967:8102":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"5:3462:3519":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:39126:2379":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:50130:3899":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:4129:3882":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:10489:5469":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:777:6600":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:46536:6659":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:820:5110":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:5285:3719":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:5745:3760":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:50672:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:21:673":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:13549:6089":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:1463:1773":{"crate_id":2,"path":["core","hint"],"kind":"module"},"6:4110:7559":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:1645:3561":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13708:6143":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:754:60670":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:6914:8090":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:6630:4954":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:46727:4200":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4379:7647":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:1626:7340":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:14042:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9648:5261":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:6687:3847":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:6050:4725":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:23357:16034":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:10456:3525":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:7736:4326":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:12009:2425":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:3415:2514":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"18:857:5113":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4038:7524":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:14798:3573":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:8372:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:6016:7951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6643:8073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8626:6788":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:6907:4744":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:13043:4136":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:5605:4712":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:607:5355":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:3347:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:6433:4736":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:8712:2602":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:1072:2998":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:1636:3560":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:13989:3481":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13369:6039":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13247:6012":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:6268:8067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:52649:3966":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:7042:6786":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:53335:3982":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13073:5974":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:24923:2202":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"12:1256:3562":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:3420:2519":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12143:5489":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:47816:2393":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:8346:3486":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:2953:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:1600:7324":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"15:269:4587":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:6746:3384":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:10156:5356":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:11768:3632":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"9:722:4430":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:6342:4734":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:47849:2394":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:3960:7487":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:6610:3832":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:11559:4104":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4055:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:3509:2533":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:51525:3987":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:51555:3975":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10015:5455":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6949:4966":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11142:5540":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:11003:3422":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:10476:5081":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:25055:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13029:5943":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12746:5547":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:4381:6244":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:49512:4112":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46966:3851":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:15152:3719":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:11196:3713":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6490:4738":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"14:194:44847":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:49055:6680":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13404:6045":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:24956:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:46876:3828":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11128:3714":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:7741:4759":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4061:7532":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:13774:6166":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:1729:3552":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10814:5011":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:24410:38664":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:14552:6797":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:782:5327":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6035:4696":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:2813:4936":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:837:3893":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7110:4751":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11188:3724":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12262:5724":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:56536:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:48346:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:10039:5457":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:9716:60658":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11133:3715":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"12:0:2230":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:69:2594":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:383:2596":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:48510:2820":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:15766:2274":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:4281:3514":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:51825:3988":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13612:6105":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"16:7637:4757":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:12742:4261":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:47057:3842":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:50298:3908":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:5685:4716":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:8403:58502":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:11946:3543":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:5238:44924":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:9553:5259":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:9130:3433":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"15:248:4583":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:6106:3731":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:46845:3458":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:4275:3478":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:52091:6702":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:5643:3754":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"18:849:5112":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:7519:3633":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:4157:5020":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:11876:2998":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:7874:235":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:4:981":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:4599:6250":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:15764:2272":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11433:2998":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:5668:4715":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:2748:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:9930:60660":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:6954:8101":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"12:432:4565":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:3960:4382":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:3356:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:11494:5585":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:8449:8107":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:49552:4116":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:7351:5212":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:1710:3550":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10660:46691":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10223:4995":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:3450:2524":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:1684:2864":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:48052:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11439:3611":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:6498:224":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:8712:3741":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:14391:53168":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:2464:6782":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:9676:60664":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10586:5479":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:3836:3790":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12557:5789":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:9579:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:0:2233":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:14942:3580":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"12:815:3553":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13887:6197":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:5194:2365":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:4160:3697":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:5526:3404":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:11379:2999":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:49633:4121":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4474:7685":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:5348:4701":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:13961:6212":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:11837:56595":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:11364:3607":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4160:7584":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4012:7513":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:13215:6000":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4098:7553":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:3409:3469":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:1740:7411":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:7415:4678":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:11884:3537":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:4454:7678":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13602:6100":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"14:244:6523":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:1256:59257":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:13689:6954":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:9206:46506":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:8847:2422":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:7200:4675":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:11826:53172":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:51370:3986":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:5240:7767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6604:4741":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:5753:3762":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6159:4660":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:47273:6621":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:4036:5212":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:8167:2475":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"6:4446:7673":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:6759:2411":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"7:85:44178":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:3029:4922":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"9:603:7093":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7141:4754":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11246:3386":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"9:686:4427":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:6533:4949":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:23407:3939":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:2035:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:152:52794":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:11638:4107":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:13986:3479":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"12:928:3551":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"12:2419:3522":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:53628:6754":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:12117:5704":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:1721:7405":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:12038:3573":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:3106:6969":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:46946:3849":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:7247:4691":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:580:7250":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"18:739:5334":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:1533:3560":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:6034:7960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:50341:4208":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13094:5979":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:866:5114":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:611:5118":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:11447:4101":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:49623:4120":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:4743:6255":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10390:5059":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7208:4756":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:1311:5096":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:3972:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:3112:3683":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:6577:3382":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:2248:3366":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"12:940:3555":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:11486:4102":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:1740:3553":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4116:7562":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:161:39311":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4005:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10962:5530":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:645:5120":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6856:8086":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:5311:7803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5547:7895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:53599:6751":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:14350:3670":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:10304:5051":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4332:7621":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:10918:3462":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:10642:3690":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11800:3635":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:1017:2475":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:46710:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:4694:236":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:50030:4147":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:2041:2128":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:4660:6252":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:601:7261":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:10801:5010":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10364:5053":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:10394:5049":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3231:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"13:0:2224":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:24370:4076":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:3221:4926":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10211:5465":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:9326:5076":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:47047:3841":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:12298:5240":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:46217:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:6574:3502":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2883:4937":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"12:1103:3559":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:15767:2275":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:46820:3843":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:8344:3522":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:4236:3482":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:15726:53058":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10093:5090":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4386:7649":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:3103:4933":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:1551:7293":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:7051:4746":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10198:5464":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:3436:2518":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:53608:6752":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:0:2225":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10899:5522":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:14957:3581":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6153:8002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:14153:6626":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"12:971:3557":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:3355:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:9466:5349":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:1441:2864":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:444:2216":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:8291:2864":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:14338:6879":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:5567:7909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:4370:3487":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"12:2036:2864":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9160:5039":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10975:5531":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10127:5063":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"14:189:6518":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:52799:3990":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:3841:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:47858:2680":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:10291:5052":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:2698:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:15759:2267":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"18:766:5339":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:3853:2371":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:9587:60667":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:5676:10908":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:15765:2273":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:7714:4325":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:4195:3479":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:52303:3997":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"0:321:1555":{"crate_id":0,"path":["once_cell","race"],"kind":"module"},"16:6504:4739":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:10533:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"12:2072:3519":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:12674:5813":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12573:5793":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:11202:3733":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:8525:2427":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:7659:4758":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6190:4731":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:3478:4929":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11742:5632":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11907:5663":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6679:4958":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:11898:3540":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:14223:57892":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:12758:5824":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:24989:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:4157:3696":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12607:5806":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:51679:4008":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:801:5108":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"9:996:4495":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:1491:3551":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:6184:8028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"12:764:2999":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:704:5327":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:7131:4753":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:51577:3979":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:49531:4114":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10874:5520":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:3375:2377":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:46039:2548":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:10821:3781":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:3484:2527":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12921:5853":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:2955:3669":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12482:5777":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:4459:2864":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4425:7663":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:48835:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:7295:4663":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12646:5809":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:1663:2998":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6873:2393":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"0:279:1879":{"crate_id":0,"path":["once_cell","sync","Lazy"],"kind":"struct"},"17:9517:3460":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:8844:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:46239:2538":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:4835:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9883:60665":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"12:2045:3515":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"12:843:3549":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4373:7644":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10028:5456":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12222:5719":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:11547:5592":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:11892:2864":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:7205:5226":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:10318:5063":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:4063:3489":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:11224:7960":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:47807:2864":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12543:5787":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11769:5641":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:696:2489":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:3051:4979":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:5766:3763":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:15743:2254":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:6851:2128":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"0:418:2203":{"crate_id":0,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"16:6075:4657":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:1418:2998":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:53733:6761":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:46173:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:24476:8109":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11335:5013":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11985:2416":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:4511:3457":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:8268:3538":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:3199:4925":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:14705:5270":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4081:7543":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10503:5082":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:5289:4656":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:49521:4113":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:3583:1775":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6943:8097":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:5427:4706":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:14339:4168":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:5268:1772":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:25490:2572":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:11579:5598":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:13020:4135":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:4803:6257":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5447:7873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8926:2389":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11314:5077":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:3521:6235":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:5433:7868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:3600:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:56549:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10905:3459":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:50308:3909":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"0:0:1999":{"crate_id":0,"path":["once_cell"],"kind":"module"},"6:3981:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6407:4735":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13257:6013":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4509:7698":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:10493:4397":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:10816:3523":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:5216:7758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:11181:5543":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:2441:6781":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4410:7659":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:47867:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:5117:2358":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12130:5707":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:50464:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:13557:6090":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:668:5122":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13196:5999":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:47037:3459":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11017:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:13421:6052":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:23121:3391":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:10536:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:5512:3402":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:8215:4295":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:52044:6701":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:53654:6756":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:8477:2415":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:50021:3513":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:49863:4137":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8076:2475":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:50598:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:12014:2426":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:9948:5450":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:24497:2575":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9131:46505":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:14300:3503":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"9:469:7078":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:3314:4908":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:32584:3087":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:13917:6205":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:4871:6259":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:1760:4387":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:15249:4591":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:24824:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:9431:5348":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:13312:3890":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:7943:5232":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:2981:4931":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:5184:2364":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:8954:5017":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:46800:6670":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:6902:8088":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:53459:3967":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:10166:5462":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:15749:2259":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:5443:4707":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"12:2052:3516":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:48517:2819":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:53619:6753":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:5948:5221":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:10542:2819":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:6486:7975":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:510:5353":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:5303:4699":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:49881:4138":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:46670:4247":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:7025:4649":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:3812:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:894:2486":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:8175:3606":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"5:2284:4289":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:11968:5679":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:571:7244":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:9124:2586":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:49683:4128":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:1462:3550":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:48178:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:3352:2149":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:3454:2522":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:5166:661":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:7792:4694":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:3148:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:11273:2385":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:1510:3555":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:4968:2373":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:51901:3980":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13584:6097":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:48136:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12406:5767":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:7450:3630":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:612:7266":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:4346:7627":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:3839:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:39090:3458":{"crate_id":2,"path":["core","error","Chain"],"kind":"struct"},"16:7264:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:1041:2477":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5390:7852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"12:2404:60646":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11020:3423":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:8261:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:3458:2521":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:53703:6759":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:52615:3984":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:10545:5474":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:1502:3559":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:1296:4390":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10598:5480":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10862:3453":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:32544:3085":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11130:5539":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6286:4580":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"12:183:4568":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:47968:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:49084:3606":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"18:829:5111":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:9505:2395":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:11999:2417":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:4447:3452":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:1152:6774":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:1727:7408":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6310:4733":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:56575:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:51777:4003":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13565:6092":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:1923:1774":{"crate_id":2,"path":["core","mem"],"kind":"module"},"1:1149:6772":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:23396:3391":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12302:5731":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:50432:4155":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:7719:6950":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:52539:3977":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5439:7871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7309:4661":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:25088:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:10954:3418":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:49063:3782":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:22849:59173":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:539:7221":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:13037:5945":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10136:5448":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:23350:3391":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:13784:3632":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:744:60669":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:8652:2603":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:0:800":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5247:7769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11640:5608":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:1912:40616":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10949:5529":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13899:6199":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:23145:3941":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"12:869:3514":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:5520:3403":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:15093:3711":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:4402:7655":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:10407:2101":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11002:5533":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4440:7670":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:53397:4002":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13859:6188":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"9:1020:4496":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8760:2428":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7281:4662":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:3825:2998":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5488:7883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10913:5526":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11615:5605":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:53718:6760":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:52461:3989":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:9520:3706":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13721:6149":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:46715:4199":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:15758:2266":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:46066:2546":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:7471:4654":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:9127:3000":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:3102:3678":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:5362:4702":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:22817:59140":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4392:7652":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11305:5547":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:1719:3551":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:3570:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11381:5551":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:2191:3518":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:49996:4144":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:1537:7288":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"12:1784:5210":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:5609:2411":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:14329:2588":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:2166:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12892:5833":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:46129:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:5910:4273":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6656:4956":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:1533:3558":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"9:749:4431":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"15:230:4582":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13233:6008":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:1654:3562":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:6214:8045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:1236:5357":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:7355:4658":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:25022:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:7782:4665":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:7814:2475":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:14975:3588":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:3443:3464":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:11109:6848":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:8695:2418":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:9381:5257":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:50209:3904":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"9:1075:4497":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:51392:3974":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:6224:3382":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:10367:53057":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:2772:4943":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:10548:2822":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6012:4655":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:32644:58871":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:49541:4115":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13660:6142":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4504:3454":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:1634:7345":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:15715:10907":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:1909:5212":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:610:1394":{"crate_id":1,"path":["std","thread"],"kind":"module"},"2:47262:6676":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:2905:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:13840:6183":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:1305:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:3077:4980":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:46640:4245":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:4628:6251":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:48801:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:49763:4133":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:23944:59144":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12196:5715":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"12:2392:7196":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:6027:7956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:3920:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:48783:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:49917:4140":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6381:4670":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:3489:2529":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:51476:3999":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:49731:4104":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4142:7573":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:49967:3463":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"14:47:6518":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:9836:60662":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:3838:2999":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:9254:57744":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:6340:4325":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:712:3819":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:4429:3415":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:14927:3579":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:48304:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:28300:2573":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"9:809:3606":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:12490:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:51346:3994":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:5959:4648":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:3265:4928":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:5004:1789":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:3807:225":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11603:5602":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5210:7757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:47244:6674":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"9:234:4454":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:1621:7338":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6099:4727":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:11652:4108":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:8433:2414":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:50005:4145":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:10115:5092":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:1680:7381":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4048:7527":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:2179:3516":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:6595:4671":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:3518:2535":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:12528:6866":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"6:6931:8095":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5229:7759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:5239:2366":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:6691:4742":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11212:5040":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:7547:5212":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12318:5736":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:1669:7373":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12015:5685":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:637:5327":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5288:7790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:50651:4166":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5998:7944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:10771:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11725:5624":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:1075:3510":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:24483:2577":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:3428:3518":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:527:7216":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6026:4653":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4493:7693":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:1467:1824":{"crate_id":2,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"6:6979:8104":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4270:3732":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:10546:2821":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3164:228":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7473:2864":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:2396:4391":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:5412:4705":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"12:2398:7197":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:694:5123":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:9503:1777":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:844:223":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:3966:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:10728:3648":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12731:5821":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5582:7920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:5161:3712":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:53756:6762":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:15750:2260":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:13094:4101":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:157:39310":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:10643:5484":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:11175:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12237:5722":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12496:5780":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12957:5884":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:12004:2419":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8590:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:24358:2574":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3084:3336":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:4411:6245":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:3425:2516":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:5291:2368":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:49452:4106":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:533:7219":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:5861:5212":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:5737:3759":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:6130:4728":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4088:7546":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:47799:2999":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:39050:3639":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:5388:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:4008:5360":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:48774:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:12360:5757":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:6648:3387":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13785:6167":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:0:2229":{"crate_id":11,"path":["adler"],"kind":"module"},"1:15071:3425":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:46609:4147":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:49102:6686":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:56562:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4208:7587":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:25121:2576":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:8224:3514":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:10356:2488":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:3104:2922":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:47026:3846":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:53639:6755":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:7048:4283":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:8532:3515":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:11166:3391":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:136:52793":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:2842:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"0:129:1789":{"crate_id":0,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"6:4135:7571":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4464:7684":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:53147:3978":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:7129:3850":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"9:0:2227":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:10377:2468":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:51494:6693":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:46545:4051":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10925:5527":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11563:5597":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:10544:2820":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:15760:2268":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4020:7515":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12183:5714":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:10594:3670":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:1558:7296":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:1531:7285":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6468:4737":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:46836:3844":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:2937:4942":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:10160:661":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"6:634:7279":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:5984:3730":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4308:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11689:5619":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:6518:4672":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:10215:4087":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:15769:2277":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"12:1238:4563":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:6937:8096":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:3151:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:3446:2520":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9291:5345":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11256:5544":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:6135:7992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"12:1162:4560":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:11524:4103":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4028:7518":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:1748:7415":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:9004:46501":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:9625:3890":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"12:933:3554":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:5867:3721":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:3597:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:5962:5224":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:14556:3509":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:14699:5269":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:11086:53167":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:8902:46499":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"14:231:4272":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:3007:4921":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:14077:57894":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:9920:5449":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:24385:6635":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:37870:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:3908:6239":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10622:5482":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:56601:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:10482:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:47228:6620":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13352:6036":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:32940:3088":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:593:7256":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11653:5609":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:11423:3609":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:14872:3642":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13271:6014":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:46975:3836":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:3814:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:5048:1771":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:2905:4919":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:13302:3891":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:5293:7791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:13992:3477":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:8466:4269":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:14864:6880":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:1485:3515":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:1500:3553":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:13342:6953":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:7582:3638":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:3100:3677":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:1496:3552":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:7714:2474":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"14:56:5570":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:10422:5467":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7121:4752":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:729:60671":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:2867:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:4230:7589":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:521:7213":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:9873:5448":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:4775:6256":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:3177:4924":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:5217:4911":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:3365:2100":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:10355:3391":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:46994:3838":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:50236:3905":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:8419:2356":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:9796:60661":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:46597:4250":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:5639:4713":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"12:2269:3560":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:4526:7706":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13147:5985":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:3086:3870":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:0:2234":{"crate_id":17,"path":["object"],"kind":"module"},"1:5504:3401":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:3395:2998":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:5649:4714":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5149:7715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:2792:4643":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:2543:5078":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10788:5518":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10048:5458":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10558:5477":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:1449:3549":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:5186:7741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:13177:3726":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:0:278":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:1673:2999":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:3686:6236":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"12:2059:3517":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:8602:3867":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:13428:6053":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:4866:2585":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:5998:4676":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6643:4955":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"19:0:996":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8426:2413":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:3824:2544":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9636:5444":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:51871:3976":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:5158:3711":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5398:7853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:2695:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:7464:3631":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:5541:7894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:24302:4080":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:1576:7307":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:37894:3819":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:13129:5980":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10931:3417":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:13908:6203":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:2959:4920":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:14:2218":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5455:7875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:46298:4024":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:13306:6024":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:6925:8094":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6557:4740":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:51923:3983":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:169:52795":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:2196:3519":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:15756:2264":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:12766:4225":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4287:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13975:6215":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:9958:60659":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"12:399:4566":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"13:233:7077":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:9504:1776":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:10577:3505":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11591:5601":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:13495:6075":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:10450:10905":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:6665:8074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:47016:3840":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:5855:4721":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:10571:5019":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:49094:6685":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:13853:5267":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:13673:3631":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:1588:7316":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:984:4293":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:46905:3831":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:15223:53059":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:49072:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:8275:3539":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:53505:3985":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:10552:2823":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11822:5655":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:1152:5212":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:6650:3388":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:51632:6695":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12770:5831":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:49689:4129":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:13241:2571":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:50460:4154":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6277:4732":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10988:5532":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:7402:3627":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:11474:5575":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:4351:6243":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:5516:4899":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:3297:4981":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:2173:3083":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"0:97:1769":{"crate_id":0,"path":["once_cell","unsync"],"kind":"module"},"2:23208:3436":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:32578:3086":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"12:162:4564":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:13711:3633":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:11597:4105":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1547:3562":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:14426:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:10082:5089":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:53680:6758":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9414:6951":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"18:651:5117":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:2163:2998":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10937:5528":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:4753:2128":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"5:1751:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:3554:3515":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:46867:3848":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:4316:6242":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:5257:5436":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:2843:4393":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:10853:3488":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:5396:4704":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:24281:6628":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"16:3340:4909":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:13332:3895":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:7992:3853":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:24758:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:10554:2824":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:790:5107":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5378:7845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:88:39244":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:1712:7399":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:681:5356":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:8254:2864":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:7228:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:32592:58873":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:8197:4381":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"6:6250:8064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:48524:2821":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12209:5717":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11514:5586":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:3442:2517":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:6246:3379":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13817:6182":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7826:4024":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:1606:7326":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:3770:6238":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:14969:3587":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:49294:4266":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:4467:6247":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6858:4962":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:7702:4667":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:3441:4287":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:9131:3788":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"19:117:7148":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"16:6717:4743":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5478:7881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:12983:4132":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:4942:6261":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:13059:4139":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:5974:7927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13938:6208":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:50497:4217":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"9:927:44275":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:11066:7105":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:2466:6783":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:5530:4710":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"9:41:4479":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:3883:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:10582:3668":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:23108:4014":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:14835:3548":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:12057:3574":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11784:5647":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:5902:4722":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:3479:2526":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:3501:2531":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:11450:3612":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:2170:3514":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:14358:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:10846:3486":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:5331:7819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:3603:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:49987:4143":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:14067:2101":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:9361:5346":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"12:1703:4575":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:12198:4123":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:2328:4392":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:3993:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:52379:4004":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:896:5116":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6129:7991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:10650:3470":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:5869:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4362:7636":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10831:5063":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4256:7591":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5301:7796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5374:4703":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:14569:3636":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13755:6161":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"12:1682:4574":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"0:237:1789":{"crate_id":0,"path":["once_cell","sync","OnceCell"],"kind":"struct"},"2:46914:6671":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:6089:4726":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:50273:3906":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:3576:5366":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7768:4664":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:1431:2999":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"12:952:3556":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:53257:3998":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:15214:6884":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:5432:3508":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:3497:3471":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1527:3557":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:10382:2473":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:46312:2365":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:7868:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:6120:7988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:7379:4680":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:50012:4146":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:3157:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:1276:4389":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:11122:3713":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"0:171:1879":{"crate_id":0,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"17:13507:6078":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:46113:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:52585:3981":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:2198:1052":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:2271:3365":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:46957:3835":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6549:4674":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:1526:7283":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11671:5618":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:50616:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:621:1906":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:11381:3608":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:50428:4152":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:50444:4160":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:8297:2864":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:53795:6763":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:10874:3455":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1704:7398":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:3726:2539":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:15131:3712":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"12:1147:3561":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:1521:3556":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:4439:6246":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4516:7701":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13377:6041":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:9396:5347":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:48388:2412":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:4765:5217":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:11844:7106":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:53581:3970":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:5723:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:5906:4275":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:51424:4007":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:2900:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:6057:7978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:49977:4142":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:13410:3645":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:7306:3514":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"12:979:3558":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:46937:3834":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:8389:4373":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:3594:2131":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:3430:2515":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:47875:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10775:5516":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10253:4989":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:50608:6690":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:24791:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:3933:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:50144:3902":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:3513:2534":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:4509:2998":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:22832:59140":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:5715:3757":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:2167:2864":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:48262:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:10220:4088":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:10483:2814":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12250:5723":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:15238:4591":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:24890:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:2376:4408":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:1504:3554":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:513:7208":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:13138:5984":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:32404:2565":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:11404:3462":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:6562:3514":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"9:776:4476":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:4277:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:9064:46503":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:15745:2256":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:10530:5471":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11068:5016":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:13530:109":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:7754:4760":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:2370:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"12:787:3552":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13539:6086":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:14683:5268":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:4148:7575":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:10925:3463":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:49699:3460":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"9:157:4446":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"14:216:44853":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:2266:5214":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5178:7739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:4495:6248":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8961:6788":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:10466:3563":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:12348:5755":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10464:5079":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:6688:8085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7184:4967":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:24334:6630":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:2733:4894":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13763:6162":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:8687:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:3086:3673":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:9558:5260":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:13155:5986":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:294:5351":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:4495:56955":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:3366:4934":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:6775:4339":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"8:0:2226":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"12:2280:3561":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:4716:6254":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:10242:5264":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"9:900:7202":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:6484:7973":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:49657:4203":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11628:5607":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:1055:4294":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:46656:4146":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:11985:5682":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:5574:3406":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13361:6037":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6007:7950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:4665:5215":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:7579:3637":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:50485:3576":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:15762:2270":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11754:5635":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:2314:5054":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"12:895:4552":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:4573:6249":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:4198:6240":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6141:4729":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10587:3413":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:9426:6952":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:23733:3942":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:51454:3995":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:11666:4109":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:9746:5446":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13747:6158":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6980:4745":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:11037:3625":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:12019:3548":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:4848:3626":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"1:15757:2265":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13529:6083":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:3110:6970":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"5:8232:4296":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:6904:2384":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5273:5437":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:13378:3898":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:3495:2530":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:3655:2536":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:8849:5036":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:1518:3561":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4075:7540":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:4308:5212":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:24857:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:39086:4397":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:5176:6263":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:24038:3391":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:1622:3559":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:2174:3515":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:51614:3964":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:7369:4659":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:10550:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:1701:3549":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:1567:7301":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:3322:3468":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:545:7224":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:46153:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11937:5672":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:783:5261":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"5:4372:2999":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:24139:4177":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11282:46509":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4485:7691":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:46790:5234":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:3505:2532":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:7119:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:9505:3705":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:4179:7585":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4067:7535":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10340:5055":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:6482:7971":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"12:1666:4573":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:46696:4056":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:4144:3886":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:24210:4178":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:5784:4720":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11013:5534":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10658:3472":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:51280:6691":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4315:7612":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"9:1056:4489":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13472:6067":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:46271:2541":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:24393:6636":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:7980:5244":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"6:4532:7708":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:3494:5362":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:4840:6258":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:5498:4709":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:9240:4990":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:46677:4248":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:3407:4286":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6931:4965":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"12:1121:3560":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"14:0:2231":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"12:1183:4561":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:48094:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13167:5991":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:3907:7444":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12512:5782":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:46278:3880":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5698:4717":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11085:5043":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5274:7789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:10473:11912":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"7:0:1484":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:4234:3481":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:3129:4932":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:10104:5091":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12431:5771":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12527:5786":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:565:7241":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10266:5061":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:900:2487":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5460:4708":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:50701:2591":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:11409:5555":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:8549:4322":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:4416:7660":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:6229:8052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"3:0:431":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13345:6034":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4218:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:56166:4019":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:46743:4201":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2487:2587":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:8356:3566":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6896:8087":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:3818:2542":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:7918:5226":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:5948:4916":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:4402:2128":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:15494:5271":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:7436:3629":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:48768:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:5887:4906":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:51595:6694":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:46985:3837":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:49613:4119":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:6482:4951":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:9259:5436":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:14390:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:2946:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:8432:4375":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"0:209:1363":{"crate_id":0,"path":["once_cell","sync"],"kind":"module"},"1:5438:3506":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"12:466:60647":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"13:121:44819":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:12070:5696":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10187:5463":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:10912:3460":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11713:5623":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:9756:60666":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:607:7264":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12700:5815":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:2262:3877":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:51947:3965":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:15763:2271":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13735:6155":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:7919:2475":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:12455:5774":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12026:5686":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:46357:4033":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:672:39642":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:50456:4153":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:12160:6782":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:3436:3516":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:10167:6885":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:8270:4282":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:50115:3896":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13515:6081":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11170:3417":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"9:27:4478":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:9826:5063":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:12499:5266":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:8209:2864":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:6243:8061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:11701:5622":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:15755:2263":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:11354:5012":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10407:5048":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:46573:4054":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:14816:8191":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:10733:3649":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:48813:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:50448:4158":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"11:46:7201":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:56588:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50659:4167":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:2861:4918":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:46896:3830":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:46587:4249":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:1694:7392":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11810:5652":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:11220:3501":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:47791:2998":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:6114:7986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:4273:3477":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:46617:4244":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:12585:5795":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:11814:3636":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:13323:6029":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:2512:5050":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:10058:5095":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:885:5115":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:57897:6771":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"}},"external_crates":{"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}