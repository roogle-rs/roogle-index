{"root":"0:0:1841","crate_version":"1.11.1","includes_private":false,"index":{"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"23"}},"items":["0:488:1915","0:489:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:192":{"id":"0:192","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1737,0],"end":[1799,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:194:2302","0:195:2307","0:196:1883"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[370,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["filter","is_partitioned","inspect","map_while","intersperse_with","last","le","ne","map","sum","is_sorted_by","min_by","cmp","find_map","try_fold","by_ref","scan","filter_map","advance_by","max","is_sorted_by_key","product","rev","try_find","try_for_each","try_collect","ge","flat_map","enumerate","nth","count","min","__iterator_get_unchecked","cmp_by","unzip","rposition","for_each","fold","partial_cmp","skip","collect_into","flatten","peekable","step_by","position","partial_cmp_by","copied","zip","max_by_key","lt","reduce","partition","map_windows","all","skip_while","chain","collect","eq_by","eq","cycle","any","max_by","try_reduce","size_hint","partition_in_place","fuse","take_while","cloned","intersperse","next_chunk","is_sorted","array_chunks","take","min_by_key","gt","find"],"trait":{"name":"Iterator","id":"1:7626:171","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:77:1915","0:78:1010","0:80:1919"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:297:1915":{"id":"0:297:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2239,4],"end":[2239,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:534:1462":{"id":"0:534:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"2"}},"items":["0:383:1915","0:384:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"131072"}},"items":["0:613:1915","0:614:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:38:1841":{"id":"0:38:1841","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[184,0],"end":[201,1]},"visibility":"public","docs":"Creates a [`SmallVec`] containing the arguments.\n\n`smallvec!` allows `SmallVec`s to be defined with the same syntax as array expressions.\nThere are two forms of this macro:\n\n- Create a [`SmallVec`] containing a given list of elements:\n\n```\n# #[macro_use] extern crate smallvec;\n# use smallvec::SmallVec;\n# fn main() {\nlet v: SmallVec<[_; 128]> = smallvec![1, 2, 3];\nassert_eq!(v[0], 1);\nassert_eq!(v[1], 2);\nassert_eq!(v[2], 3);\n# }\n```\n\n- Create a [`SmallVec`] from a given element and size:\n\n```\n# #[macro_use] extern crate smallvec;\n# use smallvec::SmallVec;\n# fn main() {\nlet v: SmallVec<[_; 0x8000]> = smallvec![1; 3];\nassert_eq!(v, SmallVec::from_buf([1, 1, 1]));\n# }\n```\n\nNote that unlike array expressions this syntax supports all elements\nwhich implement [`Clone`] and the number of elements doesn't have to be\na constant.\n\nThis will use `clone` to duplicate an expression, so one should be careful\nusing this with types having a nonstandard `Clone` implementation. For\nexample, `smallvec![Rc::new(1); 5]` will create a vector of five references\nto the same boxed integer value, not five references pointing to independently\nboxed integers.","links":{"`SmallVec`":"0:118:1846","`Clone`":"1:2276:107"},"attrs":["#[macro_export]"],"deprecation":null,"inner":{"macro":"macro_rules! smallvec {\n    (@one $x:expr) => { ... };\n    ($elem:expr; $n:expr) => { ... };\n    ($($x:expr),*$(,)*) => { ... };\n}"}},"1:12525:16589":{"id":"1:12525:16589","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12431:338":{"id":"1:12431:338","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:52105:1605"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523:1915":{"id":"0:523:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:261:451":{"id":"0:261:451","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[2140,4],"end":[2142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:400":{"id":"0:400","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"6"}},"items":["0:403:1915","0:404:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:281:2367":{"id":"b:1:2566-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2569:2320"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12445:4336":{"id":"1:12445:4336","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:52088:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43530:4313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217":{"id":"0:217","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1890,0],"end":[1895,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:219:2325"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:429:1462":{"id":"0:429:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"7"}},"items":["0:408:1915","0:409:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:624:1462":{"id":"0:624:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227":{"id":"0:227","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2025,0],"end":[2030,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:229:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:204:592":{"id":"0:204:592","crate_id":0,"name":"deref","span":{"filename":"src/lib.rs","begin":[1851,4],"end":[1856,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:415":{"id":"0:415","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"9"}},"items":["0:418:1915","0:419:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:524:1462":{"id":"0:524:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12516:16586":{"id":"1:12516:16586","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12146:6725","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3413:1596":{"id":"1:3413:1596","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39375:4242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:2315":{"id":"0:199:2315","crate_id":0,"name":"resize","span":{"filename":"src/lib.rs","begin":[1811,4],"end":[1819,5]},"visibility":"public","docs":"Resizes the vector so that its length is equal to `len`.\n\nIf `len` is less than the current length, the vector simply truncated.\n\nIf `len` is greater than the current length, `value` is appended to the\nvector until its length equals `len`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}],["value",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2056,0],"end":[2063,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7475:138","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:244:744"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:156:2167":{"id":"0:156:2167","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[1326,4],"end":[1328,5]},"visibility":"public","docs":"Extracts a mutable slice of the entire vector.\n\nEquivalent to `&mut s[..]`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12420:867":{"id":"1:12420:867","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:52088:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:2214":{"id":"0:177:2214","crate_id":0,"name":"retain_mut","span":{"filename":"src/lib.rs","begin":[1542,4],"end":[1544,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nThis method is identical in behaviour to [`retain`]; it is included only\nto maintain api-compatability with `std::Vec`, where the methods are\nseparate for historical reasons.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3040:1937","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252:715":{"id":"0:252:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2095,4],"end":[2097,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:615":{"id":"0:615","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"262144"}},"items":["0:618:1915","0:619:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:175:2210":{"id":"0:175:2210","crate_id":0,"name":"retain","span":{"filename":"src/lib.rs","begin":[1524,4],"end":[1535,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(&e)` returns `false`.\nThis method operates in place and preserves the order of the retained\nelements.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3040:1937","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:1915":{"id":"0:378:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12484:16574":{"id":"1:12484:16574","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720","str::rsplitn":"1:12487:16575"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43658:2840","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:682:3966":{"id":"4:682:3966","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1876,0],"end":[1881,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2537:76","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:213:1925"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:434:1462":{"id":"0:434:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379:1462":{"id":"0:379:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:458":{"id":"0:274:458","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[2187,4],"end":[2189,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"cmp::Ordering","id":"1:30849:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:7485:1915":{"id":"1:7485:1915","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:7626:171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:80:1919":{"id":"0:80:1919","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[381,4],"end":[383,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2263-0:363:1885":{"id":"b:1:2263-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:2325"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:450":{"id":"0:450","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"16"}},"items":["0:453:1915","0:454:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12515:16585":{"id":"1:12515:16585","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2263-0:281:2367":{"id":"b:1:2263-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2265:2325"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2581-0:57:1909":{"id":"b:1:2581-0:57:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:495":{"id":"0:495","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"25"}},"items":["0:498:1915","0:499:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:127:2029":{"id":"0:127:2029","crate_id":0,"name":"from_buf","span":{"filename":"src/lib.rs","begin":[870,4],"end":[875,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an `A` without\ncopying elements.\n\n```rust\nuse smallvec::SmallVec;\n\nlet buf = [1, 2, 3, 4, 5];\nlet small_vec: SmallVec<_> = SmallVec::from_buf(buf);\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"generic":"A"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5536:17283":{"id":"4:5536:17283","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12543:16598"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159:2175":{"id":"0:159:2175","crate_id":0,"name":"clear","span":{"filename":"src/lib.rs","begin":[1345,4],"end":[1347,5]},"visibility":"public","docs":"Remove all elements from the vector.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:305":{"id":"0:305","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2276,0],"end":[2276,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7931:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[386,0],"end":[393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:7517:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:84:1920"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:558:1915":{"id":"0:558:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2160,0],"end":[2168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"B"},"trait":{"name":"","id":"0:328:1911","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:266:657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:129:2036":{"id":"0:129:2036","crate_id":0,"name":"from_buf_and_len_unchecked","span":{"filename":"src/lib.rs","begin":[911,4],"end":[916,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an `A` without\ncopying elements. Also sets the length. The user is responsible\nfor ensuring that `len <= A::size()`.\n\n```rust\nuse smallvec::SmallVec;\nuse std::mem::MaybeUninit;\n\nlet buf = [1, 2, 3, 4, 5, 0, 0, 0];\nlet small_vec: SmallVec<_> = unsafe {\n    SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)\n};\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"resolved_path":{"name":"MaybeUninit","id":"1:30279:1802","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:340":{"id":"0:210:340","crate_id":0,"name":"as_ref","span":{"filename":"src/lib.rs","begin":[1871,4],"end":[1873,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389:1462":{"id":"0:389:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:568:1915":{"id":"0:568:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:219:2325":{"id":"0:219:2325","crate_id":0,"name":"borrow_mut","span":{"filename":"src/lib.rs","begin":[1892,4],"end":[1894,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[402,0],"end":[402,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7931:1800","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:384:1462":{"id":"0:384:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2431,0],"end":[2439,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToSmallVec","id":"0:344:2426","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}},"for":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}},"items":["0:349:2428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383:1915":{"id":"0:383:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:545":{"id":"0:545","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"96"}},"items":["0:548:1915","0:549:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:246":{"id":"0:246","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2065,0],"end":[2089,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:7488:2355","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:248:2128"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:584:1462":{"id":"0:584:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:589:1462":{"id":"0:589:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:473:1915":{"id":"0:473:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:433:1915":{"id":"0:433:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:7483-0:281:2367":{"id":"b:1:7483-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7626:171","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7479:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7485:1915","1:7486:2367","1:7487:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:12446:4009":{"id":"1:12446:4009","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43540:4255","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[395,0],"end":[400,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7570:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:89:867"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2135,0],"end":[2158,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:261:451","0:262:453"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:474:1462":{"id":"0:474:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12422:16558":{"id":"1:12422:16558","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:559:1462":{"id":"0:559:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:820":{"id":"0:238:820","crate_id":0,"name":"index_mut","span":{"filename":"src/lib.rs","begin":[2041,4],"end":[2043,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:10211:242","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:57:1909":{"id":"b:1:2566-0:57:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2569:2320"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2832:2860-0:363:1885":{"id":"a:1:2832:2860-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:2860","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12534:16592":{"id":"1:12534:16592","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:578:1915":{"id":"0:578:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12448:12401":{"id":"1:12448:12401","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12447:12364"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43837:4324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403:1915":{"id":"0:403:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12481:16573":{"id":"1:12481:16573","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12121:6720","str::split":"1:12469:16570","prim@char":"1:52088:447","str::split_terminator":"1:12478:16572"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43622:4316","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:484:1462":{"id":"0:484:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:146:2132":{"id":"0:146:2132","crate_id":0,"name":"grow","span":{"filename":"src/lib.rs","begin":[1171,4],"end":[1173,5]},"visibility":"public","docs":"Re-allocate to set the capacity to `max(new_cap, inline_size())`.\n\nPanics if `new_cap` is less than the vector's length\nor if the capacity computation overflows `usize`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_cap",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2576-0:57:1909":{"id":"b:1:2576-0:57:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:143:2116":{"id":"0:143:2116","crate_id":0,"name":"pop","span":{"filename":"src/lib.rs","begin":[1135,4],"end":[1146,5]},"visibility":"public","docs":"Remove an item from the end of the vector and return it, or None if empty.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373:1915":{"id":"0:373:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:226:741":{"id":"0:226:741","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2020,4],"end":[2022,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"4:6912:266","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295":{"id":"0:295","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2238,0],"end":[2259,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["filter","is_partitioned","inspect","map_while","intersperse_with","last","le","ne","map","sum","is_sorted_by","min_by","cmp","find_map","try_fold","by_ref","scan","filter_map","advance_by","max","is_sorted_by_key","product","rev","try_find","try_for_each","try_collect","ge","flat_map","enumerate","nth","count","min","__iterator_get_unchecked","cmp_by","unzip","rposition","for_each","fold","partial_cmp","skip","collect_into","flatten","peekable","step_by","position","partial_cmp_by","copied","zip","max_by_key","lt","reduce","partition","map_windows","all","skip_while","chain","collect","eq_by","eq","cycle","any","max_by","try_reduce","size_hint","partition_in_place","fuse","take_while","cloned","intersperse","next_chunk","is_sorted","array_chunks","take","min_by_key","gt","find"],"trait":{"name":"Iterator","id":"1:7626:171","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:297:1915","0:298:1010","0:299:1919"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:628:1915":{"id":"0:628:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:2569:2320":{"id":"1:2569:2320","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2543:137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2585:1581":{"id":"1:2585:1581","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223:741":{"id":"0:223:741","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2007,4],"end":[2009,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"specialization\"))]","#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:1929":{"id":"0:130:1929","crate_id":0,"name":"set_len","span":{"filename":"src/lib.rs","begin":[923,4],"end":[926,5]},"visibility":"public","docs":"Sets the length of a vector.\n\nThis will explicitly set the size of the vector, without actually\nmodifying its buffers, so it is up to the caller to ensure that the\nvector is actually the specified size.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2232,0],"end":[2236,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3033:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:294:630"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:330:1462":{"id":"0:330:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2330,4],"end":[2330,23]},"visibility":"default","docs":"Returns the number of items the array can hold.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:443:1915":{"id":"0:443:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2576-0:281:2367":{"id":"b:1:2576-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:614:1462":{"id":"0:614:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:634:1462":{"id":"0:634:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:366:1889":{"id":"0:366:1889","crate_id":0,"name":"AllocErr","span":{"filename":"src/lib.rs","begin":[303,4],"end":[306,5]},"visibility":"default","docs":"The allocator return an error","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"struct":{"fields":["0:367:1891"],"fields_stripped":false}},"discriminant":null}}},"b:4:5790-0:363:1885":{"id":"b:4:5790-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9551:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5788:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:5792:1558"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:224":{"id":"0:224","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2018,0],"end":[2023,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"4:6912:266","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"resolved_path":{"name":"Global","id":"4:7220:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:226:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:213:1925":{"id":"0:213:1925","crate_id":0,"name":"as_mut","span":{"filename":"src/lib.rs","begin":[1878,4],"end":[1880,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:1851":{"id":"0:126:1851","crate_id":0,"name":"from_vec","span":{"filename":"src/lib.rs","begin":[829,4],"end":[856,5]},"visibility":"public","docs":"Construct a new `SmallVec` from a `Vec<A::Item>`.\n\nElements will be copied to the inline buffer if vec.capacity() <= Self::inline_capacity().\n\n```rust\nuse smallvec::SmallVec;\n\nlet vec = vec![1, 2, 3, 4, 5];\nlet small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["vec",{"resolved_path":{"name":"Vec","id":"4:6912:266","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:438:1915":{"id":"0:438:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:2579:132":{"id":"1:2579:132","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:448:1915":{"id":"0:448:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:321:834":{"id":"0:321:834","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[2312,4],"end":[2314,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7479:159","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2227":{"id":"0:183:2227","crate_id":0,"name":"dedup_by_key","span":{"filename":"src/lib.rs","begin":[1587,4],"end":[1593,5]},"visibility":"public","docs":"Removes consecutive elements that map to the same key.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3040:1937","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}],"output":{"generic":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12430:339":{"id":"1:12430:339","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12431:338","`u8`":"1:52105:1605"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:528:1915":{"id":"0:528:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:633:1915":{"id":"0:633:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:7486:2367":{"id":"1:7486:2367","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"b:1:2581-0:118:1846":{"id":"b:1:2581-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12508:16581":{"id":"1:12508:16581","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8621:2961-0:57:1909":{"id":"a:1:8621:2961-0:57:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:555":{"id":"0:555","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"256"}},"items":["0:558:1915","0:559:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2032,0],"end":[2038,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:3072:2353","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:233:201","0:234:819"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:179:2216":{"id":"0:179:2216","crate_id":0,"name":"dedup","span":{"filename":"src/lib.rs","begin":[1547,4],"end":[1552,5]},"visibility":"public","docs":"Removes consecutive duplicate elements.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2324:203","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5792:1558":{"id":"4:5792:1558","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:2307":{"id":"0:195:2307","crate_id":0,"name":"insert_from_slice","span":{"filename":"src/lib.rs","begin":[1776,4],"end":[1789,5]},"visibility":"public","docs":"Copy elements from a slice into the vector at position `index`, shifting any following\nelements toward the back.\n\nFor slices of `Copy` types, this is more efficient than `insert`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:550":{"id":"0:550","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"128"}},"items":["0:553:1915","0:554:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8621:2961-0:281:2367":{"id":"a:1:8621:2961-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8621:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:510":{"id":"0:510","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"28"}},"items":["0:513:1915","0:514:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12540:16595":{"id":"1:12540:16595","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39562:12332","Self::is_ascii":"1:12539:16594"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39562:12332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5535:17282":{"id":"4:5535:17282","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12542:16597"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:553:1915":{"id":"0:553:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:2575:741":{"id":"1:2575:741","crate_id":1,"name":"from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"primitive":"never"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12458:16569":{"id":"1:12458:16569","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:715":{"id":"0:47:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[310,4],"end":[312,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255:60":{"id":"0:255:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[2102,4],"end":[2104,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:338":{"id":"0:191:338","crate_id":0,"name":"as_mut_ptr","span":{"filename":"src/lib.rs","begin":[1729,4],"end":[1734,5]},"visibility":"public","docs":"Returns a raw mutable pointer to the vector's buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:316":{"id":"0:316","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2309,0],"end":[2315,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7479:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:319:2367","0:320:1915","0:321:834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2001,0],"end":[2016,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:223:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:533:1915":{"id":"0:533:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2566-0:363:1885":{"id":"b:1:2566-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:2320"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:328:1911":{"id":"0:328:1911","crate_id":0,"name":"Array","span":{"filename":"src/lib.rs","begin":[2326,0],"end":[2331,1]},"visibility":"public","docs":"Types that can be used as the backing store for a SmallVec","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:329:1915","0:330:1462"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:395","0:545","0:385","0:420","0:625","0:450","0:475","0:605","0:370","0:470","0:600","0:530","0:440","0:495","0:535","0:435","0:410","0:520","0:415","0:500","0:615","0:510","0:455","0:390","0:550","0:570","0:515","0:505","0:460","0:430","0:595","0:560","0:585","0:465","0:575","0:565","0:380","0:525","0:375","0:490","0:540","0:590","0:630","0:445","0:405","0:620","0:485","0:400","0:480","0:425","0:580","0:555","0:610"]}}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2292,0],"end":[2307,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7479:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:313:2367","0:314:1915","0:315:834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:548:1915":{"id":"0:548:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:623:1915":{"id":"0:623:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:500":{"id":"0:500","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"26"}},"items":["0:503:1915","0:504:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:368":{"id":"0:368","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:369:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:174:1982":{"id":"0:174:1982","crate_id":0,"name":"into_inner","span":{"filename":"src/lib.rs","begin":[1506,4],"end":[1517,5]},"visibility":"public","docs":"Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.\n\nThis method returns `Err(Self)` if the SmallVec is too short (and the `A` contains uninitialized elements),\nor if the SmallVec is too long (and all the elements were spilled to the heap).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}},{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:529:1462":{"id":"0:529:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3411-0:363:1885":{"id":"b:1:3411-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12493:16577":{"id":"1:12493:16577","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329:1915":{"id":"0:329:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2328,4],"end":[2328,14]},"visibility":"default","docs":"The type of the array's elements.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"0:388:1915":{"id":"0:388:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:200:1847":{"id":"0:200:1847","crate_id":0,"name":"from_elem","span":{"filename":"src/lib.rs","begin":[1828,4],"end":[1845,5]},"visibility":"public","docs":"Creates a `SmallVec` with `n` copies of `elem`.\n```\nuse smallvec::SmallVec;\n\nlet v = SmallVec::<[char; 128]>::from_elem('d', 2);\nassert_eq!(v, SmallVec::from_buf(['d', 'd']));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["elem",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}],["n",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269":{"id":"0:269","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2172,0],"end":[2180,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2366:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["le","lt","gt","ge"],"trait":{"name":"PartialOrd","id":"1:2366:204","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:271:1094"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12543:16598":{"id":"1:12543:16598","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478:1915":{"id":"0:478:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:367:1891":{"id":"0:367:1891","crate_id":0,"name":"layout","span":{"filename":"src/lib.rs","begin":[305,8],"end":[305,22]},"visibility":"default","docs":"The layout that was passed to the allocator","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"alloc::alloc::Layout","id":"1:44548:173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:152:2152":{"id":"0:152:2152","crate_id":0,"name":"try_reserve_exact","span":{"filename":"src/lib.rs","begin":[1264,4],"end":[1273,5]},"visibility":"public","docs":"Reserve the minimum capacity for `additional` more elements to be inserted.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1"}},"items":["0:378:1915","0:379:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:96:630":{"id":"0:96:630","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[405,4],"end":[426,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:657":{"id":"0:266:657","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[2165,4],"end":[2167,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:479:1462":{"id":"0:479:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:2302":{"id":"0:194:2302","crate_id":0,"name":"from_slice","span":{"filename":"src/lib.rs","begin":[1744,4],"end":[1769,5]},"visibility":"public","docs":"Copy the elements from a slice into a new `SmallVec`.\n\nFor slices of `Copy` types, this is more efficient than `SmallVec::from(slice)`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"17"}},"items":["0:458:1915","0:459:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:187:2245":{"id":"0:187:2245","crate_id":0,"name":"resize_with","span":{"filename":"src/lib.rs","begin":[1620,4],"end":[1635,5]},"visibility":"public","docs":"Resizes the `SmallVec` in-place so that `len` is equal to `new_len`.\n\nIf `new_len` is greater than `len`, the `SmallVec` is extended by the difference, with each\nadditional slot filled with the result of calling the closure `f`. The return values from `f`\n\nIf `new_len` is less than `len`, the `SmallVec` is simply truncated.\n\nThis method uses a closure to create new values on every push. If you'd rather `Clone` a given\nvalue, use `resize`. If you want to use the `Default` trait to generate values, you can pass\n`Default::default()` as the second argument.\n\nAdded for std::vec::Vec compatibility (added in Rust 1.33.0)\n\n```\n# use smallvec::{smallvec, SmallVec};\nlet mut vec : SmallVec<[_; 4]> = smallvec![1, 2, 3];\nvec.resize_with(5, Default::default);\nassert_eq!(&*vec, &[1, 2, 3, 0, 0]);\n\nlet mut vec : SmallVec<[_; 4]> = smallvec![];\nlet mut p = 1;\nvec.resize_with(4, || { p *= 2; p });\nassert_eq!(&*vec, &[2, 4, 8, 16]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_len",{"primitive":"usize"}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3040:1937","args":{"parenthesized":{"inputs":[],"output":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12541:16596":{"id":"1:12541:16596","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:2058":{"id":"0:138:2058","crate_id":0,"name":"spilled","span":{"filename":"src/lib.rs","begin":[1005,4],"end":[1007,5]},"visibility":"public","docs":"Returns `true` if the data has spilled into a separate heap-allocated buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:1915":{"id":"0:77:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[371,4],"end":[371,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"1:12542:16597":{"id":"1:12542:16597","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12440:16563":{"id":"1:12440:16563","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:52094:1499","str::slice_mut_unchecked":"1:12441:16564","crate::ops::Index":"1:3072:2353"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:363:1885":{"id":"0:363:1885","crate_id":0,"name":"CollectionAllocErr","span":{"filename":"src/lib.rs","begin":[299,0],"end":[307,1]},"visibility":"public","docs":"Error type for APIs with fallible heap allocation","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:364:1887","0:366:1889"],"impls":["a:1:2775:240-0:363:1885","a:1:8621:2961-0:363:1885","a:1:8622:2960-0:363:1885","a:1:2792:250-0:363:1885","a:1:2832:2860-0:363:1885","b:1:2260-0:363:1885","b:1:2576-0:363:1885","b:1:2570-0:363:1885","b:1:2566-0:363:1885","b:1:2263-0:363:1885","b:1:3411-0:363:1885","b:1:2581-0:363:1885","b:4:5790-0:363:1885","0:368","0:48","0:46"]}}},"0:122":{"id":"0:122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[780,0],"end":[1735,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:124:996","0:125:2015","0:126:1851","0:127:2029","0:128:2035","0:129:2036","0:130:1929","0:132:1849","0:133:867","0:134:2054","0:135:1905","0:138:2058","0:139:1957","0:142:1850","0:143:2116","0:144:2126","0:146:2132","0:147:2134","0:148:2144","0:150:2146","0:151:2016","0:152:2152","0:153:2156","0:154:2162","0:155:1916","0:156:2167","0:157:2171","0:159:2175","0:160:2178","0:161:2181","0:162:2187","0:172:2198","0:173:2203","0:174:1982","0:175:2210","0:177:2214","0:179:2216","0:181:2217","0:183:2227","0:187:2245","0:189:2082","0:190:339","0:191:338"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12539:16594":{"id":"1:12539:16594","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408:1915":{"id":"0:408:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:489:1462":{"id":"0:489:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:518:1915":{"id":"0:518:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:409:1462":{"id":"0:409:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:604:1462":{"id":"0:604:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:483:1915":{"id":"0:483:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:161:2181":{"id":"0:161:2181","crate_id":0,"name":"insert","span":{"filename":"src/lib.rs","begin":[1369,4],"end":[1391,5]},"visibility":"public","docs":"Insert an element at position `index`, shifting all elements after it to the right.\n\nPanics if `index > len`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["element",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:490":{"id":"0:490","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"24"}},"items":["0:493:1915","0:494:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:573:1915":{"id":"0:573:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12461:3139":{"id":"1:12461:3139","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41594:194","prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:609:1462":{"id":"0:609:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:488:1915":{"id":"0:488:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[367,0],"end":[367,57]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12499:16578":{"id":"1:12499:16578","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12121:6720","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::matches":"1:12496:2588"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43776:4320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:574:1462":{"id":"0:574:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5521:17278":{"id":"4:5521:17278","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2122,0],"end":[2133,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"may_dangle\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3033:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:258:630"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:419:1462":{"id":"0:419:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2775:240-0:363:1885":{"id":"a:1:2775:240-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:189:2082":{"id":"0:189:2082","crate_id":0,"name":"from_raw_parts","span":{"filename":"src/lib.rs","begin":[1706,4],"end":[1718,5]},"visibility":"public","docs":"Creates a `SmallVec` directly from the raw components of another\n`SmallVec`.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren't\nchecked:\n\n* `ptr` needs to have been previously allocated via `SmallVec` for its\n  spilled storage (at least, it's highly likely to be incorrect if it\n  wasn't).\n* `ptr`'s `A::Item` type needs to be the same size and alignment that\n  it was allocated with\n* `length` needs to be less than or equal to `capacity`.\n* `capacity` needs to be the capacity that the pointer was allocated\n  with.\n\nViolating these may cause problems like corrupting the allocator's\ninternal data structures.\n\nAdditionally, `capacity` must be greater than the amount of inline\nstorage `A` has; that is, the new `SmallVec` must need to spill over\ninto heap allocated storage. This condition is asserted against.\n\nThe ownership of `ptr` is effectively transferred to the\n`SmallVec` which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.\n\n# Examples\n\n```\n# #[macro_use] extern crate smallvec;\n# use smallvec::SmallVec;\nuse std::mem;\nuse std::ptr;\n\nfn main() {\n    let mut v: SmallVec<[_; 1]> = smallvec![1, 2, 3];\n\n    // Pull out the important parts of `v`.\n    let p = v.as_mut_ptr();\n    let len = v.len();\n    let cap = v.capacity();\n    let spilled = v.spilled();\n\n    unsafe {\n        // Forget all about `v`. The heap allocation that stored the\n        // three values won't be deallocated.\n        mem::forget(v);\n\n        // Overwrite memory with [4, 5, 6].\n        //\n        // This is only safe if `spilled` is true! Otherwise, we are\n        // writing into the old `SmallVec`'s inline storage on the\n        // stack.\n        assert!(spilled);\n        for i in 0..len {\n            ptr::write(p.add(i), 4 + i);\n        }\n\n        // Put everything back together into a SmallVec with a different\n        // amount of inline storage, but which is still less than `cap`.\n        let rebuilt = SmallVec::<[_; 2]>::from_raw_parts(p, len, cap);\n        assert_eq!(&*rebuilt, &[4, 5, 6]);\n    }\n}","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["ptr",{"raw_pointer":{"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}],["length",{"primitive":"usize"}],["capacity",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:744":{"id":"0:244:744","crate_id":0,"name":"from_iter","span":{"filename":"src/lib.rs","begin":[2058,4],"end":[2062,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iterable",{"generic":"I"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7479:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:1957":{"id":"0:139:1957","crate_id":0,"name":"drain","span":{"filename":"src/lib.rs","begin":[1022,4],"end":[1056,5]},"visibility":"public","docs":"Creates a draining iterator that removes the specified range in the vector\nand yields the removed items.\n\nNote 1: The element range is removed even if the iterator is only\npartially consumed or not consumed at all.\n\nNote 2: It is unspecified how many elements are removed from the vector\nif the `Drain` value is leaked.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["range",{"generic":"R"}]],"output":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3170:214","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:413:1915":{"id":"0:413:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:262:453":{"id":"0:262:453","crate_id":0,"name":"clone_from","span":{"filename":"src/lib.rs","begin":[2144,4],"end":[2157,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2100,0],"end":[2105,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2617:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:255:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:190:339":{"id":"0:190:339","crate_id":0,"name":"as_ptr","span":{"filename":"src/lib.rs","begin":[1721,4],"end":[1726,5]},"visibility":"public","docs":"Returns a raw pointer to the vector's buffer.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:2162":{"id":"0:154:2162","crate_id":0,"name":"truncate","span":{"filename":"src/lib.rs","begin":[1304,4],"end":[1314,5]},"visibility":"public","docs":"Shorten the vector, keeping the first `len` elements and dropping the rest.\n\nIf `len` is greater than or equal to the vector's current length, this has no\neffect.\n\nThis does not re-allocate.  If you want the vector's capacity to shrink, call\n`shrink_to_fit` after truncating.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["len",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:619:1462":{"id":"0:619:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"10"}},"items":["0:423:1915","0:424:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:294:630":{"id":"0:294:630","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[2233,4],"end":[2235,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:503:1915":{"id":"0:503:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:160:2178":{"id":"0:160:2178","crate_id":0,"name":"remove","span":{"filename":"src/lib.rs","begin":[1353,4],"end":[1364,5]},"visibility":"public","docs":"Remove and return the element at position `index`, shifting all elements after it to the\nleft.\n\nPanics if `index` is out of bounds.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5518:2744":{"id":"4:5518:2744","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2156":{"id":"0:153:2156","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/lib.rs","begin":[1279,4],"end":[1295,5]},"visibility":"public","docs":"Shrink the capacity of the vector as much as possible.\n\nWhen possible, this will move data from an external heap buffer to the vector's inline\nstorage.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320:1915":{"id":"0:320:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2311,4],"end":[2311,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}},"0:613:1915":{"id":"0:613:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:504:1462":{"id":"0:504:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:684:12090":{"id":"4:684:12090","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1916":{"id":"0:155:1916","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[1319,4],"end":[1321,5]},"visibility":"public","docs":"Extracts a slice containing the entire vector.\n\nEquivalent to `&s[..]`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:425":{"id":"0:425","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"11"}},"items":["0:428:1915","0:429:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12505:16580":{"id":"1:12505:16580","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12121:6720","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::match_indices":"1:12502:16579"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43722:4318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390":{"id":"0:390","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"4"}},"items":["0:393:1915","0:394:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:124:996":{"id":"0:124:996","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[783,4],"end":[794,5]},"visibility":"public","docs":"Construct an empty vector","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:173:2203":{"id":"0:173:2203","crate_id":0,"name":"into_boxed_slice","span":{"filename":"src/lib.rs","begin":[1498,4],"end":[1500,5]},"visibility":"public","docs":"Converts a `SmallVec` into a `Box<[T]>` without reallocating if the `SmallVec` has already spilled\nonto the heap.\n\nNote that this will drop any excess capacity.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Box","id":"4:276:1795","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:549:1462":{"id":"0:549:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281:2367":{"id":"0:281:2367","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2208,0],"end":[2212,1]},"visibility":"public","docs":"An iterator that consumes a `SmallVec` and yields its items by value.\n\nReturned from [`SmallVec::into_iter`][1].\n\n[1]: struct.SmallVec.html#method.into_iter","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:307","a:1:2775:240-0:281:2367","a:1:8621:2961-0:281:2367","a:1:8622:2960-0:281:2367","a:1:2792:250-0:281:2367","a:1:2832:2860-0:281:2367","b:1:2260-0:281:2367","b:1:2576-0:281:2367","b:1:2570-0:281:2367","b:1:2566-0:281:2367","b:1:2263-0:281:2367","b:1:7483-0:281:2367","b:1:3411-0:281:2367","b:1:2581-0:281:2367","b:4:680-0:281:2367","0:303","0:289","0:292","0:300","0:286","0:295","0:305"]}}},"b:1:2570-0:363:1885":{"id":"b:1:2570-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:248:2128":{"id":"0:248:2128","crate_id":0,"name":"extend","span":{"filename":"src/lib.rs","begin":[2066,4],"end":[2088,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7479:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:583:1915":{"id":"0:583:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:207:594":{"id":"0:207:594","crate_id":0,"name":"deref_mut","span":{"filename":"src/lib.rs","begin":[1861,4],"end":[1866,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:346:2428":{"id":"0:346:2428","crate_id":0,"name":"to_smallvec","span":{"filename":"src/lib.rs","begin":[2428,4],"end":[2428,41]},"visibility":"default","docs":"Construct a new `SmallVec` from a slice.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:608:1915":{"id":"0:608:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"5"}},"items":["0:398:1915","0:399:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:569:1462":{"id":"0:569:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233:201":{"id":"0:233:201","crate_id":0,"name":"Output","span":{"filename":"src/lib.rs","begin":[2033,4],"end":[2033,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}}}}},"0:590":{"id":"0:590","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"16384"}},"items":["0:593:1915","0:594:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:514:1462":{"id":"0:514:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519:1462":{"id":"0:519:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:543:1915":{"id":"0:543:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:147:2134":{"id":"0:147:2134","crate_id":0,"name":"try_grow","span":{"filename":"src/lib.rs","begin":[1178,4],"end":[1216,5]},"visibility":"public","docs":"Re-allocate to set the capacity to `max(new_cap, inline_size())`.\n\nPanics if `new_cap` is less than the vector's length","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["new_cap",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2832:2860-0:57:1909":{"id":"a:1:2832:2860-0:57:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:2860","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:595":{"id":"0:595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"24576"}},"items":["0:598:1915","0:599:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2775:240-0:281:2367":{"id":"a:1:2775:240-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:539:1462":{"id":"0:539:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8622:2960-0:363:1885":{"id":"a:1:8622:2960-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2580:1583":{"id":"1:2580:1583","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:603:1915":{"id":"0:603:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:157:2171":{"id":"0:157:2171","crate_id":0,"name":"swap_remove","span":{"filename":"src/lib.rs","begin":[1336,4],"end":[1341,5]},"visibility":"public","docs":"Remove the element at position `index`, replacing it with the last element.\n\nThis does not preserve ordering, but is O(1).\n\nPanics if `index` is out of bounds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:252":{"id":"0:203:252","crate_id":0,"name":"Target","span":{"filename":"src/lib.rs","begin":[1849,4],"end":[1849,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}},"1:7487:834":{"id":"1:7487:834","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:1915":{"id":"0:538:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:216:1796":{"id":"0:216:1796","crate_id":0,"name":"borrow","span":{"filename":"src/lib.rs","begin":[1885,4],"end":[1887,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2792:250-0:363:1885":{"id":"a:1:2792:250-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12429:16562":{"id":"1:12429:16562","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:322":{"id":"0:322","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2317,0],"end":[2323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7479:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:325:2367","0:326:1915","0:327:834"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:544:1462":{"id":"0:544:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:525":{"id":"0:525","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"31"}},"items":["0:528:1915","0:529:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:344:2426":{"id":"0:344:2426","crate_id":0,"name":"ToSmallVec","span":{"filename":"src/lib.rs","begin":[2426,0],"end":[2429,1]},"visibility":"public","docs":"Convenience trait for constructing a `SmallVec`","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:346:2428"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:347"]}}},"0:234:819":{"id":"0:234:819","crate_id":0,"name":"index","span":{"filename":"src/lib.rs","begin":[2035,4],"end":[2037,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"","id":"1:10211:242","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229:741":{"id":"0:229:741","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[2027,4],"end":[2029,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["array",{"generic":"A"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2581-0:281:2367":{"id":"b:1:2581-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:453:1915":{"id":"0:453:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:439:1462":{"id":"0:439:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:2167":{"id":"0:310:2167","crate_id":0,"name":"as_mut_slice","span":{"filename":"src/lib.rs","begin":[2286,4],"end":[2289,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a mutable slice.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235":{"id":"0:235","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2040,0],"end":[2044,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:3076:2354","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:238:820"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:454:1462":{"id":"0:454:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399:1462":{"id":"0:399:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:563:1915":{"id":"0:563:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:118:1846":{"id":"0:118:1846","crate_id":0,"name":"SmallVec","span":{"filename":"src/lib.rs","begin":[772,0],"end":[778,1]},"visibility":"public","docs":"A `Vec`-like container that can store a small number of elements inline.\n\n`SmallVec` acts like a vector, but can store a limited amount of data inline within the\n`SmallVec` struct rather than in a separate allocation.  If the data exceeds this limit, the\n`SmallVec` will \"spill\" its data onto the heap, allocating a new buffer to hold it.\n\nThe amount of data that a `SmallVec` can store inline depends on its backing store. The backing\nstore can be any type that implements the `Array` trait; usually it is a small fixed-sized\narray.  For example a `SmallVec<[u64; 8]>` can hold up to eight 64-bit integers inline.\n\n## Example\n\n```rust\nuse smallvec::SmallVec;\nlet mut v = SmallVec::<[u8; 4]>::new(); // initialize an empty vector\n\n// The vector can hold up to 4 items without spilling onto the heap.\nv.extend(0..4);\nassert_eq!(v.len(), 4);\nassert!(!v.spilled());\n\n// Pushing another element will force the buffer to spill:\nv.push(4);\nassert_eq!(v.len(), 5);\nassert!(v.spilled());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:122","0:192","0:197","a:1:8621:2961-0:118:1846","a:1:8622:2960-0:118:1846","a:1:2792:250-0:118:1846","a:1:2832:2860-0:118:1846","b:1:2260-0:118:1846","b:1:2576-0:118:1846","b:1:2570-0:118:1846","b:1:2573-0:118:1846","b:1:2566-0:118:1846","b:1:2263-0:118:1846","b:1:3411-0:118:1846","b:1:2581-0:118:1846","b:4:680-0:118:1846","0:214","0:275","0:217","0:322","0:230","0:242","0:224","0:269","0:311","0:205","0:253","0:246","0:211","0:256","0:227","0:235","0:208","0:201","0:316","0:259","0:272","0:220","0:263","0:250","0:279","0:267"]}}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2182,0],"end":[2190,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2360:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"1:2360:197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:274:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8621:2961-0:118:1846":{"id":"a:1:8621:2961-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8621:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[368,0],"end":[368,57]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:309:1916":{"id":"0:309:1916","crate_id":0,"name":"as_slice","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2283,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a slice.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:599:1462":{"id":"0:599:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:585":{"id":"0:585","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"8192"}},"items":["0:588:1915","0:589:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:125:2015":{"id":"0:125:2015","crate_id":0,"name":"with_capacity","span":{"filename":"src/lib.rs","begin":[810,4],"end":[814,5]},"visibility":"public","docs":"Construct an empty vector with enough capacity pre-allocated to store at least `n`\nelements.\n\nWill create a heap allocation only if `n` is larger than the inline capacity.\n\n```\n# use smallvec::SmallVec;\n\nlet v: SmallVec<[u8; 3]> = SmallVec::with_capacity(100);\n\nassert!(v.is_empty());\nassert!(v.capacity() >= 100);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:444:1462":{"id":"0:444:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:435":{"id":"0:435","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"13"}},"items":["0:438:1915","0:439:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3411-0:118:1846":{"id":"b:1:3411-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12444:4192":{"id":"1:12444:4192","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:52088:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43524:4184","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:564:1462":{"id":"0:564:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2262:1796":{"id":"1:2262:1796","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12472:12359":{"id":"1:12472:12359","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11937:2854","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12487:16575":{"id":"1:12487:16575","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:52088:447","str::splitn":"1:12484:16574","self::pattern":"1:12121:6720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43676:2836","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:2035":{"id":"0:128:2035","crate_id":0,"name":"from_buf_and_len","span":{"filename":"src/lib.rs","begin":[890,4],"end":[893,5]},"visibility":"public","docs":"Constructs a new `SmallVec` on the stack from an `A` without\ncopying elements. Also sets the length, which must be less or\nequal to the size of `buf`.\n\n```rust\nuse smallvec::SmallVec;\n\nlet buf = [1, 2, 3, 4, 5, 0, 0, 0];\nlet small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);\n\nassert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"generic":"A"}],["len",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12428:16561":{"id":"1:12428:16561","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11681:6728"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12544:16599":{"id":"1:12544:16599","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4572:16599"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43853:4254","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5532:17280":{"id":"4:5532:17280","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2187":{"id":"0:162:2187","crate_id":0,"name":"insert_many","span":{"filename":"src/lib.rs","begin":[1395,4],"end":[1477,5]},"visibility":"public","docs":"Insert multiple elements at position `index`, shifting all following elements toward the\nback.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}],["iterable",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7479:159","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:393:1915":{"id":"0:393:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12475:16571":{"id":"1:12475:16571","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12121:6720","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::split":"1:12469:16570"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43572:2842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12490:16576":{"id":"1:12490:16576","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12438:3097":{"id":"1:12438:3097","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12451:12392":{"id":"1:12451:12392","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43846:4191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12452:2195":{"id":"1:12452:2195","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2572:741":{"id":"1:2572:741","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:463:1915":{"id":"0:463:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2201,0],"end":[2201,65]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:275":{"id":"0:275","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2192,0],"end":[2199,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:9762:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:277:777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:172:2198":{"id":"0:172:2198","crate_id":0,"name":"into_vec","span":{"filename":"src/lib.rs","begin":[1481,4],"end":[1492,5]},"visibility":"public","docs":"Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto\nthe heap.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Vec","id":"4:6912:266","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:494:1462":{"id":"0:494:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"20"}},"items":["0:473:1915","0:474:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2570-0:118:1846":{"id":"b:1:2570-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12522:16588":{"id":"1:12522:16588","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:1462":{"id":"0:394:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3411-0:281:2367":{"id":"b:1:3411-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:499:1462":{"id":"0:499:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12423:16559":{"id":"1:12423:16559","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:475":{"id":"0:475","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"21"}},"items":["0:478:1915","0:479:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2581-0:363:1885":{"id":"b:1:2581-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1581"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:369:715":{"id":"0:369:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[298,9],"end":[298,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2263-0:57:1909":{"id":"b:1:2263-0:57:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2265:2325"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12496:2588":{"id":"1:12496:2588","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12121:6720","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::rmatches":"1:12499:16578"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43758:4319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2170,0],"end":[2170,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2329:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:464:1462":{"id":"0:464:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:588:1915":{"id":"0:588:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:134:2054":{"id":"0:134:2054","crate_id":0,"name":"is_empty","span":{"filename":"src/lib.rs","begin":[962,4],"end":[964,5]},"visibility":"public","docs":"Returns `true` if the vector is empty","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12425:16560":{"id":"1:12425:16560","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12423:16559"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2832:2860-0:118:1846":{"id":"a:1:2832:2860-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2832:2860","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:2860","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12478:16572":{"id":"1:12478:16572","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12121:6720","str::split":"1:12469:16570","prim@char":"1:52088:447","`DoubleEndedIterator`":"1:7517:125","str::rsplit_terminator":"1:12481:16573"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43604:4315","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205":{"id":"0:205","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1859,0],"end":[1867,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:3022:2324","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:207:594"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2576-0:118:1846":{"id":"b:1:2576-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:565":{"id":"0:565","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1024"}},"items":["0:568:1915","0:569:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:493:1915":{"id":"0:493:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"0"}},"items":["0:373:1915","0:374:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:4:680-0:281:2367":{"id":"b:4:680-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:682:3966","4:683:12089","4:684:12090"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2260-0:57:1909":{"id":"b:1:2260-0:57:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2262:1796"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135:1905":{"id":"0:135:1905","crate_id":0,"name":"capacity","span":{"filename":"src/lib.rs","begin":[968,4],"end":[970,5]},"visibility":"public","docs":"The number of items the vector can hold without reallocating","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12465:3105":{"id":"1:12465:3105","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41594:194","prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:618:1915":{"id":"0:618:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:509:1462":{"id":"0:509:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12537:16593":{"id":"1:12537:16593","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12082:131","`FromStr`":"1:12081:6455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12081:6455","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12081:6455","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:2016":{"id":"0:151:2016","crate_id":0,"name":"reserve_exact","span":{"filename":"src/lib.rs","begin":[1259,4],"end":[1261,5]},"visibility":"public","docs":"Reserve the minimum capacity for `additional` more elements to be inserted.\n\nPanics if the new capacity overflows `usize`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12512:16583":{"id":"1:12512:16583","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289":{"id":"0:289","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2223,0],"end":[2230,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:291:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:325:2367":{"id":"0:325:2367","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2318,4],"end":[2318,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"1:10383:2371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1801,0],"end":[1846,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:199:2315","0:200:1847"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"3"}},"items":["0:388:1915","0:389:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:307":{"id":"0:307","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2278,0],"end":[2290,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:309:1916","0:310:2167"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:594:1462":{"id":"0:594:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12421:2054":{"id":"1:12421:2054","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:1919":{"id":"0:299:1919","crate_id":0,"name":"size_hint","span":{"filename":"src/lib.rs","begin":[2255,4],"end":[2258,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300":{"id":"0:300","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2261,0],"end":[2273,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"1:7517:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:302:1920"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:560":{"id":"0:560","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"512"}},"items":["0:563:1915","0:564:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3411-0:57:1909":{"id":"b:1:3411-0:57:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3413:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2832:2860-0:281:2367":{"id":"a:1:2832:2860-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2832:2860","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:2860","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1848,0],"end":[1857,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:3009:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:203:252","0:204:592"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2263-0:118:1846":{"id":"b:1:2263-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2265:2325"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:313:2367":{"id":"0:313:2367","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2293,4],"end":[2293,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[316,0],"end":[320,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"LayoutError","id":"1:44565:2624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:741"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1841":{"id":"0:0:1841","crate_id":0,"name":"smallvec","span":{"filename":"src/lib.rs","begin":[7,0],"end":[2463,35]},"visibility":"public","docs":"Small vectors in various sizes. These store a certain number of elements inline, and fall back\nto the heap for larger allocations.  This can be a useful optimization for improving cache\nlocality and reducing allocator traffic for workloads that fit within the inline buffer.\n\n## `no_std` support\n\nBy default, `smallvec` does not depend on `std`.  However, the optional\n`write` feature implements the `std::io::Write` trait for vectors of `u8`.\nWhen this feature is enabled, `smallvec` depends on `std`.\n\n## Optional features\n\n### `serde`\n\nWhen this optional dependency is enabled, `SmallVec` implements the `serde::Serialize` and\n`serde::Deserialize` traits.\n\n### `write`\n\nWhen this feature is enabled, `SmallVec<[u8; _]>` implements the `std::io::Write` trait.\nThis feature is not compatible with `#![no_std]` programs.\n\n### `union`\n\n**This feature requires Rust 1.49.**\n\nWhen the `union` feature is enabled `smallvec` will track its state (inline or spilled)\nwithout the use of an enum tag, reducing the size of the `smallvec` by one machine word.\nThis means that there is potentially no space overhead compared to `Vec`.\nNote that `smallvec` can still be larger than `Vec` if the inline buffer is larger than two\nmachine words.\n\nTo use this feature add `features = [\"union\"]` in the `smallvec` section of Cargo.toml.\nNote that this feature requires Rust 1.49.\n\nTracking issue: [rust-lang/rust#55149](https://github.com/rust-lang/rust/issues/55149)\n\n### `const_generics`\n\n**This feature requires Rust 1.51.**\n\nWhen this feature is enabled, `SmallVec` works with any arrays of any size, not just a fixed\nlist of sizes.\n\n### `const_new`\n\n**This feature requires Rust 1.51.**\n\nThis feature exposes the functions [`SmallVec::new_const`], [`SmallVec::from_const`], and [`smallvec_inline`] which enables the `SmallVec` to be initialized from a const context.\nFor details, see the\n[Rust Reference](https://doc.rust-lang.org/reference/const_eval.html#const-functions).\n\n### `drain_filter`\n\n**This feature is unstable.** It may change to match the unstable `drain_filter` method in libstd.\n\nEnables the `drain_filter` method, which produces an iterator that calls a user-provided\nclosure to determine which elements of the vector to remove and yield from the iterator.\n\n### `drain_keep_rest`\n\n**This feature is unstable.** It may change to match the unstable `drain_keep_rest` method in libstd.\n\nEnables the `DrainFilter::keep_rest` method.\n\n### `specialization`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nWhen this feature is enabled, `SmallVec::from(slice)` has improved performance for slices\nof `Copy` types.  (Without this feature, you can use `SmallVec::from_slice` to get optimal\nperformance for `Copy` types.)\n\nTracking issue: [rust-lang/rust#31844](https://github.com/rust-lang/rust/issues/31844)\n\n### `may_dangle`\n\n**This feature is unstable and requires a nightly build of the Rust toolchain.**\n\nThis feature makes the Rust compiler less strict about use of vectors that contain borrowed\nreferences. For details, see the\n[Rustonomicon](https://doc.rust-lang.org/1.42.0/nomicon/dropck.html#an-escape-hatch).\n\nTracking issue: [rust-lang/rust#34761](https://github.com/rust-lang/rust/issues/34761)","links":{},"attrs":["#![no_std]","#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:363:1885","0:57:1909","0:118:1846","0:281:2367","0:328:1911","0:344:2426","0:38:1841"],"is_stripped":false}}},"1:12443:16565":{"id":"1:12443:16565","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12442:2361"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2265:2325":{"id":"1:2265:2325","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:2367":{"id":"0:319:2367","crate_id":0,"name":"IntoIter","span":{"filename":"src/lib.rs","begin":[2310,4],"end":[2310,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"1:10359:1914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}}},"0:148:2144":{"id":"0:148:2144","crate_id":0,"name":"reserve","span":{"filename":"src/lib.rs","begin":[1224,4],"end":[1226,5]},"visibility":"public","docs":"Reserve capacity for `additional` more elements to be inserted.\n\nMay reserve more space to avoid frequent reallocations.\n\nPanics if the capacity computation overflows `usize`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1883,0],"end":[1888,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:216:1796"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2260-0:281:2367":{"id":"b:1:2260-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2262:1796"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2576-0:363:1885":{"id":"b:1:2576-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:260","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1583"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8622:2960-0:118:1846":{"id":"a:1:8622:2960-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:5517:17277":{"id":"4:5517:17277","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:276:1795","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"4:7220:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:276:1795","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"4:7220:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423:1915":{"id":"0:423:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:303":{"id":"0:303","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2275,0],"end":[2275,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7570:1921","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12436:3096":{"id":"1:12436:3096","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:741":{"id":"0:49:741","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[317,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_",{"resolved_path":{"name":"LayoutErr","id":"1:12998:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[309,0],"end":[313,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9551:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:315:834":{"id":"0:315:834","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[2295,4],"end":[2306,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7479:159","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12502:16579":{"id":"1:12502:16579","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12121:6720","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::rmatch_indices":"1:12505:16580"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43704:4317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:414:1462":{"id":"0:414:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12528:16590":{"id":"1:12528:16590","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12141:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12455:16568":{"id":"1:12455:16568","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12546:6607":{"id":"1:12546:6607","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4573:6607"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43862:4145","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:118:1846":{"id":"b:1:2260-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2262:1796"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:364:1887":{"id":"0:364:1887","crate_id":0,"name":"CapacityOverflow","span":{"filename":"src/lib.rs","begin":[301,4],"end":[301,20]},"visibility":"default","docs":"Overflow `usize::MAX` or other error during size computation","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"1:12510:16582":{"id":"1:12510:16582","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:363:1885":{"id":"b:1:2260-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:1796"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:630":{"id":"0:630","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1048576"}},"items":["0:633:1915","0:634:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12441:16564":{"id":"1:12441:16564","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:52094:1499","crate::ops::IndexMut":"1:3076:2354","str::slice_unchecked":"1:12440:16563"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:1462":{"id":"0:459:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:458:1915":{"id":"0:458:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12434:3095":{"id":"1:12434:3095","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41594:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:418:1915":{"id":"0:418:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:468:1915":{"id":"0:468:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:302:1920":{"id":"0:302:1920","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[2263,4],"end":[2272,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"64"}},"items":["0:543:1915","0:544:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5524:17279":{"id":"4:5524:17279","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:508:1915":{"id":"0:508:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12514:16584":{"id":"1:12514:16584","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:1849":{"id":"0:132:1849","crate_id":0,"name":"inline_size","span":{"filename":"src/lib.rs","begin":[950,4],"end":[952,5]},"visibility":"public","docs":"The maximum number of elements this vector can hold inline","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445":{"id":"0:445","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"15"}},"items":["0:448:1915","0:449:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12447:12364":{"id":"1:12447:12364","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12448:12401"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43828:4323","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5534:1799":{"id":"4:5534:1799","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2570-0:57:1909":{"id":"b:1:2570-0:57:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12450:16567":{"id":"1:12450:16567","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43818:4322","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:620":{"id":"0:620","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"393216"}},"items":["0:623:1915","0:624:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8622:2960-0:57:1909":{"id":"a:1:8622:2960-0:57:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2091,0],"end":[2098,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:252:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:449:1462":{"id":"0:449:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:2146":{"id":"0:150:2146","crate_id":0,"name":"try_reserve","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1254,5]},"visibility":"public","docs":"Reserve capacity for `additional` more elements to be inserted.\n\nMay reserve more space to avoid frequent reallocations.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41737:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:277:777":{"id":"0:277:777","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[2196,4],"end":[2198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:9770:151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:1462":{"id":"0:374:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12432:2356":{"id":"1:12432:2356","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41594:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10211:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12469:16570":{"id":"1:12469:16570","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12121:6720","`DoubleEndedIterator`":"1:7517:125","prim@char":"1:52088:447","str::split_whitespace":"1:12447:12364","str::rsplit":"1:12475:16571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43554:2838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[358,0],"end":[365,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:67:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:625":{"id":"0:625","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"524288"}},"items":["0:628:1915","0:629:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"32"}},"items":["0:533:1915","0:534:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5516":{"id":"4:5516","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5517:17277","4:5518:2744","4:5521:17278","4:5524:17279","4:5532:17280","4:5533:17281","4:5534:1799","4:5535:17282","4:5536:17283"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2566-0:118:1846":{"id":"b:1:2566-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2569:2320"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8622:2960-0:281:2367":{"id":"a:1:8622:2960-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8622:2960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:554:1462":{"id":"0:554:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2570-0:281:2367":{"id":"b:1:2570-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2572:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133:867":{"id":"0:133:867","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[956,4],"end":[958,5]},"visibility":"public","docs":"The number of elements stored in the vector","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:683:12089":{"id":"4:683:12089","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291:451":{"id":"0:291:451","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[2227,4],"end":[2229,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513:1915":{"id":"0:513:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:598:1915":{"id":"0:598:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:326:1915":{"id":"0:326:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2319,4],"end":[2319,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}},"a:1:8621:2961-0:363:1885":{"id":"a:1:8621:2961-0:363:1885","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8621:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"CollectionAllocErr","id":"0:363:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:440":{"id":"0:440","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"14"}},"items":["0:443:1915","0:444:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"19"}},"items":["0:468:1915","0:469:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"30"}},"items":["0:523:1915","0:524:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12442:2361":{"id":"1:12442:2361","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12443:16565"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93":{"id":"0:93","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[404,0],"end":[427,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3033:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:96:630"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:181:2217":{"id":"0:181:2217","crate_id":0,"name":"dedup_by","span":{"filename":"src/lib.rs","begin":[1555,4],"end":[1584,5]},"visibility":"public","docs":"Removes consecutive duplicate elements using the given equality relation.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["same_bucket",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3040:1937","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:1915":{"id":"0:314:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2294,4],"end":[2294,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:57:1909":{"id":"0:57:1909","crate_id":0,"name":"Drain","span":{"filename":"src/lib.rs","begin":[351,0],"end":[356,1]},"visibility":"public","docs":"An iterator that removes the items from a `SmallVec` and yields them by value.\n\nReturned from [`SmallVec::drain`][1].\n\n[1]: struct.SmallVec.html#method.drain","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:8621:2961-0:57:1909","a:1:8622:2960-0:57:1909","a:1:2832:2860-0:57:1909","b:1:2260-0:57:1909","b:1:2576-0:57:1909","b:1:2570-0:57:1909","b:1:2566-0:57:1909","b:1:2263-0:57:1909","b:1:7483-0:57:1909","b:1:3411-0:57:1909","b:1:2581-0:57:1909","0:90","0:86","0:71","0:74","0:93","0:64","0:81","0:68"]}}},"0:84:1920":{"id":"0:84:1920","crate_id":0,"name":"next_back","span":{"filename":"src/lib.rs","begin":[388,4],"end":[392,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"0:328:1911","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460":{"id":"0:460","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"18"}},"items":["0:463:1915","0:464:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258:630":{"id":"0:258:630","crate_id":0,"name":"drop","span":{"filename":"src/lib.rs","begin":[2123,4],"end":[2132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2792:250-0:281:2367":{"id":"a:1:2792:250-0:281:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12419":{"id":"1:12419","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12420:867","1:12421:2054","1:12422:16558","1:12423:16559","1:12425:16560","1:12428:16561","1:12429:16562","1:12430:339","1:12431:338","1:12432:2356","1:12434:3095","1:12436:3096","1:12438:3097","1:12440:16563","1:12441:16564","1:12442:2361","1:12443:16565","1:12444:4192","1:12445:4336","1:12446:4009","1:12447:12364","1:12448:12401","1:12449:16566","1:12450:16567","1:12451:12392","1:12452:2195","1:12455:16568","1:12458:16569","1:12461:3139","1:12465:3105","1:12469:16570","1:12472:12359","1:12475:16571","1:12478:16572","1:12481:16573","1:12484:16574","1:12487:16575","1:12490:16576","1:12493:16577","1:12496:2588","1:12499:16578","1:12502:16579","1:12505:16580","1:12508:16581","1:12510:16582","1:12512:16583","1:12514:16584","1:12515:16585","1:12516:16586","1:12519:16587","1:12522:16588","1:12525:16589","1:12528:16590","1:12531:16591","1:12534:16592","1:12537:16593","1:12539:16594","1:12540:16595","1:12541:16596","1:12542:16597","1:12543:16598","1:12544:16599","1:12546:6607","1:12547:16600"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"36"}},"items":["0:538:1915","0:539:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:469:1462":{"id":"0:469:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:2428":{"id":"0:349:2428","crate_id":0,"name":"to_smallvec","span":{"filename":"src/lib.rs","begin":[2436,4],"end":[2438,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:580":{"id":"0:580","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"4096"}},"items":["0:583:1915","0:584:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:430":{"id":"0:430","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"12"}},"items":["0:433:1915","0:434:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:144:2126":{"id":"0:144:2126","crate_id":0,"name":"append","span":{"filename":"src/lib.rs","begin":[1160,4],"end":[1165,5]},"visibility":"public","docs":"Moves all the elements of `other` into `self`, leaving `other` empty.\n\n# Example\n\n```\n# use smallvec::{SmallVec, smallvec};\nlet mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];\nlet mut v1: SmallVec<[u8; 32]> = smallvec![4, 5, 6];\nv0.append(&mut v1);\nassert_eq!(*v0, [1, 2, 3, 4, 5, 6]);\nassert_eq!(*v1, []);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"B"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12519:16587":{"id":"1:12519:16587","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:1883":{"id":"0:196:1883","crate_id":0,"name":"extend_from_slice","span":{"filename":"src/lib.rs","begin":[1795,4],"end":[1798,5]},"visibility":"public","docs":"Copy elements from a slice and append them to the vector.\n\nFor slices of `Copy` types, this is more efficient than `extend`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["slice",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:600":{"id":"0:600","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"32768"}},"items":["0:603:1915","0:604:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:498:1915":{"id":"0:498:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:629:1462":{"id":"0:629:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:680-0:118:1846":{"id":"b:4:680-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:676:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:682:3966","4:683:12089","4:684:12090"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:605":{"id":"0:605","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"65536"}},"items":["0:608:1915","0:609:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:208":{"id":"0:208","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1869,0],"end":[1874,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2534:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:210:340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:570":{"id":"0:570","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"1536"}},"items":["0:573:1915","0:574:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78:1010":{"id":"0:78:1010","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[374,4],"end":[378,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"","id":"0:328:1911","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:1094":{"id":"0:271:1094","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[2177,4],"end":[2179,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"cmp::Ordering","id":"1:30849:198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:867":{"id":"0:89:867","crate_id":0,"name":"len","span":{"filename":"src/lib.rs","begin":[397,4],"end":[399,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:575":{"id":"0:575","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"2048"}},"items":["0:578:1915","0:579:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:480":{"id":"0:480","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"22"}},"items":["0:483:1915","0:484:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:298:1010":{"id":"0:298:1010","crate_id":0,"name":"next","span":{"filename":"src/lib.rs","begin":[2242,4],"end":[2252,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41592:196","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7483-0:57:1909":{"id":"b:1:7483-0:57:1909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7626:171","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7479:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:57:1909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:7485:1915","1:7486:2367","1:7487:834"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:428:1915":{"id":"0:428:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12531:16591":{"id":"1:12531:16591","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:52088:447","self::pattern":"1:12121:6720"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12126:4178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:579:1462":{"id":"0:579:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2792:250-0:118:1846":{"id":"a:1:2792:250-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2214,0],"end":[2221,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9546:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:281:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:288:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:715":{"id":"0:67:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[362,4],"end":[364,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12547:16600":{"id":"1:12547:16600","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4570:16600"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43871:4253","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327:834":{"id":"0:327:834","crate_id":0,"name":"into_iter","span":{"filename":"src/lib.rs","begin":[2320,4],"end":[2322,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"qualified_path":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7479:159","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404:1462":{"id":"0:404:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:715":{"id":"0:288:715","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[2218,4],"end":[2220,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9521:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9502:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424:1462":{"id":"0:424:1462","crate_id":0,"name":"size","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12449:16566":{"id":"1:12449:16566","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43808:4321","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398:1915":{"id":"0:398:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"4:5533:17281":{"id":"4:5533:17281","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:276:1795","`String`":"4:7487:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:276:1795","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"4:7220:2621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2573-0:118:1846":{"id":"b:1:2573-0:118:1846","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"primitive":"never"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SmallVec","id":"0:118:1846","args":{"angle_bracketed":{"args":[{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2575:741"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:515":{"id":"0:515","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"29"}},"items":["0:518:1915","0:519:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:593:1915":{"id":"0:593:1915","crate_id":0,"name":"Item","span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:505":{"id":"0:505","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"27"}},"items":["0:508:1915","0:509:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:142:1850":{"id":"0:142:1850","crate_id":0,"name":"push","span":{"filename":"src/lib.rs","begin":[1119,4],"end":[1131,5]},"visibility":"public","docs":"Append an item to the vector.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"A"},"trait":{"name":"","id":"0:328:1911","args":null}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2419,0],"end":[2423,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Array","id":"0:328:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"array":{"type":{"generic":"T"},"len":"8"}},"items":["0:413:1915","0:414:1462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2584:132":{"id":"1:2584:132","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32033:6585","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"paths":{"1:44577:2623":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:46413:4394":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:4406:3886":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:261:3849":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"0:38:1841":{"crate_id":0,"path":["smallvec","smallvec"],"kind":"macro"},"4:1426:2371":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:43554:2838":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:1288:3972":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:22306:12459":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:2871:2761":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:43975:4334":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:2865:2762":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:30030:6418":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:21759:11806":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:47876:4445":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:40285:2702":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:2840:2814":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:3669:3849":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:43281:4306":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:3009:121":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:52109:1601":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:47525:4437":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:43960:4327":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:9555:3163":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:3325:2637":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:40432:2722":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:2537:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:47773:4441":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:21327:11796":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:3330:2658":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:11886:4189":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:43846:4191":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:21538:4202":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:52112:1209":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:22254:4212":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:10024:3902":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:7442:2696":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:46807:4400":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:7938:2695":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:47896:4447":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:44305:5900":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:46617:4397":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:52099:689":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:41423:5817":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:44484:230":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:43722:4318":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:21288:2798":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:2498:6417":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:52110:843":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:5626:2703":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:43604:4315":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:11902:4190":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:40020:4250":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:40446:2723":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:10383:2371":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:44527:4358":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:13014:2622":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:0:310":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:47603:4438":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:1634:630":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:4462:3175":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:2787:112":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:2842:1054":{"crate_id":1,"path":["core","ops"],"kind":"module"},"1:52093:1467":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"4:3204:3992":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:2628:132":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:10670:2841":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:42351:3162":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:7254:2682":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:42594:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:43530:4313":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:4020:4146":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:42358:3164":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:43818:4322":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:2302:458":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"1:42640:72":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:3043:2781":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:43360:2844":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:42624:13265":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:21404:12798":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:20909:3711":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:42612:113":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:21863:15697":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:40042:4253":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2534:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:22379:4228":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:52106:1602":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:42064:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:52086:398":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:4167:4149":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:5942:70":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:49869:11808":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:3653:2367":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:5135:3874":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:40091:6631":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:4194:3868":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:45823:4375":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:11826:4185":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10009:3898":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:3212:3996":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:45744:4372":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:40364:2727":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:3594:2371":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:4426:3870":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:45882:4378":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:9810:2670":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:41830:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:30877:3711":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:32073:2341":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:6351:1673":{"crate_id":4,"path":["alloc","vec"],"kind":"module"},"1:39963:4145":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:3171:1914":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:41737:229":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:22092:4203":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:30315:13263":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:2947:2779":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:44054:4339":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:52101:791":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:44285:5895":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:9546:115":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:4164:3868":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:234:229":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:43758:4319":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:12998:1793":{"crate_id":1,"path":["core","alloc","layout","LayoutErr"],"kind":"type_alias"},"1:44565:2624":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:1523:3980":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:6465:1909":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:43540:4255":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:9502:229":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:47849:4443":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:43420:2850":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:7501:4011":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:207:2641":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1548:3868":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:21105:11797":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:52091:1110":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:39210:216":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:10490:2839":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:2160:631":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:39270:218":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:21141:11799":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"4:5325:3849":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:9768:147":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:6216:3893":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:9521:136":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:2172:2799":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:44297:5898":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:0:528":{"crate_id":1,"path":["core"],"kind":"module"},"1:52108:1604":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:7934:2694":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:7307:1799":{"crate_id":1,"path":["core","iter","sources","repeat","repeat"],"kind":"function"},"1:4847:849":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:2543:137":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:5420:3868":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:32069:4235":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:21197:11804":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"0:366:1889":{"crate_id":0,"path":["smallvec","CollectionAllocErr","AllocErr"],"kind":"variant"},"1:12911:110":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:40294:2711":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:22393:4229":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:9992:3897":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:4415:3174":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:7438:2697":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:23464:239":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8621:2961":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:22198:4206":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:40065:6630":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:43572:2842":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:7237:4002":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:42103:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:52111:1661":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:2942:2778":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:2131:3863":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:2324:203":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:46917:4403":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:2918:2773":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:7517:125":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:46139:4385":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:21406:11793":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:22214:5809":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:7229:2367":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:4800:416":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:6814:2663":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:7299:4003":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:44186:4195":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:40610:2726":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:22281:4214":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2785:248":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:21241:11805":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:20969:15811":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:42886:4299":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:21536:11801":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:41592:196":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:39292:217":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:6584:2367":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:1011:3849":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:676:253":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:4393:3868":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:895:1914":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:3238:3997":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:22720:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:4278:224":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:43622:4316":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:6098:3868":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:45692:4370":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:8731:4178":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"3:0:2606":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:21412:11795":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:42865:2672":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:7403:104":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:42904:4304":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:21426:4202":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:3720:3981":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:4032:4147":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:5994:5158":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:10359:1914":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:48001:4454":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2540:156":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"0:328:1911":{"crate_id":0,"path":["smallvec","Array"],"kind":"trait"},"1:1671:1149":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:39375:4242":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:9212:715":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:45568:4365":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:6205:2705":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:43853:4254":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:44289:5896":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:2690:5875":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:2887:2765":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:20952:15812":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:46261:4390":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:43512:4312":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:41566:4172":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:20967:15809":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:3288:2634":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:43498:4309":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:39562:12332":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"4:5:1673":{"crate_id":4,"path":["alloc","vec"],"kind":"macro"},"1:2875:2764":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:45722:4371":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:12141:6726":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:42365:3165":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:10601:2843":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:43462:2848":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:6795:2322":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:40810:2683":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:43433:2846":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:4:1073":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:2366:204":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:2617:120":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:43089:4305":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:21344:12798":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:2329:129":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:4044:105":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:43862:4145":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:44281:5894":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:42667:132":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:44273:5892":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:2962:5173":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:43837:4324":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:40124:103":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:47665:4439":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:1672:3849":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:1825:181":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:43989:4337":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:43524:4184":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:39314:219":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:7488:2355":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:35:2639":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:4210:3172":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:7375:2657":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:42222:4180":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:3273:15772":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:43350:2834":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:22951:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:40234:2699":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:46023:4382":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"0:363:1885":{"crate_id":0,"path":["smallvec","CollectionAllocErr"],"kind":"enum"},"1:42849:2673":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:47273:4435":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:43452:2847":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:22230:4207":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:43442:2849":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:47867:4444":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:12922:3907":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:2546:260":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:10451:2854":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:7931:1800":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:2959:3966":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:5568:2715":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:42857:4295":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:7283:2367":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:6663:3849":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:2879:2768":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:21529:12798":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:11243:2082":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:22786:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:40050:4145":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:46191:4387":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:1138:5200":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:22289:4215":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:42689:74":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:7479:159":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:878:3855":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:43381:2851":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:45900:4379":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:6973:5201":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:2497:12798":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:276:1795":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:22327:12370":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:5788:254":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:42584:5884":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:40803:2681":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:45638:4368":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:3518:1909":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:41394:6669":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:47887:4446":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10408:2838":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:43676:2836":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:3022:2324":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2783:2632":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:5508:3868":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:45548:4364":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:7975:12293":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3233:2783":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:46729:4399":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:41908:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:44328:126":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:40323:2714":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:2243:5808":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:43871:4253":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:52103:793":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:45592:4366":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:3076:2354":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:42896:4303":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:40852:2692":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:4363:3870":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:39226:213":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:4639:6624":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:782:3851":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:4351:3885":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:43938:6741":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:2908:2770":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:41805:198":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:46312:4391":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:7571:2658":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:47907:4448":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:1017:1798":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:9553:3162":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:41578:4175":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:52113:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:1922:2638":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:2461:5153":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:3581:1914":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:21155:2798":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:44277:5893":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:22918:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:48024:4455":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:39969:4245":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:44474:222":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:7320:2367":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:1411:1914":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"0:281:2367":{"crate_id":0,"path":["smallvec","IntoIter"],"kind":"struct"},"1:44548:173":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:40171:6641":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:4348:267":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:47933:4450":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:4846:220":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"4:1273:3969":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:44143:4343":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:4234:1914":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:9561:209":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:44301:5899":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:46390:4393":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:42183:94":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:40384:2704":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:40825:2686":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:7434:12414":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:40407:2720":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:44492:210":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:2859:2759":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:47415:4436":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:1442:2367":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:22343:12452":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:21851:2831":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:5631:2322":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:6909:2709":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:12704:142":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:47922:4449":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:46571:4396":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:12766:207":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:41729:208":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:1751:5878":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:6332:12083":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:42025:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:2844:2758":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"0:344:2426":{"crate_id":0,"path":["smallvec","ToSmallVec"],"kind":"trait"},"1:10642:2840":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:11667:2828":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:12739:12947":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:3178:3991":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:15:1791":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:20922:15699":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:45993:4381":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:7587:2659":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:43370:2845":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2934:2776":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:11681:6728":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:47811:4442":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:52098:687":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"4:7420:4004":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:12126:4178":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2669:4015":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:52095:1586":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:39148:2636":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"0:118:1846":{"crate_id":0,"path":["smallvec","SmallVec"],"kind":"struct"},"1:40304:2712":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:40346:2716":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:39195:2782":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:2254:99":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:22654:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:9762:147":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:4002:1909":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:40084:4258":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:40214:4265":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:40819:2685":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:39250:215":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:44081:4194":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:3948:3868":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:45793:4374":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:22852:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:41543:6670":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:41660:2371":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:12347:115":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:45660:4369":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:52087:993":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:2835:2631":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:2891:2767":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:2170:2798":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:1760:2815":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:685:114":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:30479:13262":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:7570:1921":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:52105:1605":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:42344:3163":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:3248:139":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:7269:18695":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:22687:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:6808:2698":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:42649:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:25866:269":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:6027:2728":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:629:3965":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:7450:4007":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:30849:198":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:40030:4251":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:40129:4263":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:40844:2690":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:10528:2855":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:12192:6735":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:2960:16346":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:41677:2957":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:5973:3874":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"4:6511:3849":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:7259:3858":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:9559:3165":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:7475:138":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:7487:246":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:9563:3166":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:40314:2713":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:3072:2353":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:46215:4388":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:9565:3167":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:40276:2701":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:40375:2718":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:52104:789":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:40596:2725":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:47067:4404":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:44006:4338":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:2896:2772":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:46359:4392":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:7220:2621":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:41796:2367":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:3033:1922":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:12121:6720":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:41947:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:5373:12071":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:43704:4317":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:2141:3983":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:40141:12414":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:39978:4246":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:1302:3973":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:21274:11800":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:47948:4451":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:40077:4257":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:9233:12292":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:1641:2746":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:4287:4151":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:40263:2710":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:40456:2707":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:40058:4254":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:41530:4285":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:41668:2367":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:20937:15699":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:9926:3895":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:2223:18745":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:9805:2669":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:8623:2959":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:22753:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:44132:6742":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:3217:18697":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:9238:5814":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:21975:11794":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:44118:4340":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:43332:2835":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:42144:87":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:44293:5897":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:21360:11791":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"4:1514:213":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:822:3853":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:11202:2853":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:44365:6748":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:7194:2680":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:43658:2840":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:11651:2826":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:1776:2658":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:7249:1909":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:40834:2688":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:2903:2769":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:4361:3173":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:3142:97":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:32094:4237":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:41377:4171":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:5858:1909":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:45947:4380":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:2049:3982":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:2913:2771":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:2829:6594":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:2854:2760":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:43808:4321":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:1464:3975":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:41869:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:2782:2749":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"0:0:1841":{"crate_id":0,"path":["smallvec"],"kind":"module"},"1:41710:2958":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:43407:2699":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:45845:4376":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:44535:4360":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:52100:794":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:43828:4323":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:4067:2630":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:52094:1499":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"4:1257:12057":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:9770:151":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:41337:164":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:1473:3976":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:4985:3868":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:3037:2780":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:44590:4363":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:22145:4205":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:46883:4402":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:40796:4163":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:32080:4236":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"4:6912:266":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:2797:1813":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:52107:1603":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:11863:4188":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:52089:1621":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"4:2966:5174":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:2970:5175":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:40416:2721":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:7476:3875":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:40332:4268":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:8622:2960":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:20950:15814":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:42874:151":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10201:12798":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:48063:4456":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:10211:242":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:3409:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:40157:4264":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"0:364:1887":{"crate_id":0,"path":["smallvec","CollectionAllocErr","CapacityOverflow"],"kind":"variant"},"1:2991:2635":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:2883:2766":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:30301:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:21754:11798":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:10656:2836":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:6824:2664":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"4:2035:3981":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:2170:5805":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:46237:4389":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:47971:4452":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:9872:1467":{"crate_id":1,"path":["core","slice"],"kind":"module"},"1:40586:2724":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:41652:1914":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:21973:12798":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:30285:2750":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:46093:4384":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:22819:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:43776:4320":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:12791:4199":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:45614:4367":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:2276:107":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:22885:183":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:40254:2700":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:2924:2774":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:7328:2367":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:21505:12798":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:46647:4398":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:5369:12070":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"1:1737:2816":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:44153:4347":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:9557:3164":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:47727:4440":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:3254:2785":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:2938:2777":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:46493:4395":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:23017:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:12135:6727":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:2786:247":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:12081:6455":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:46853:4401":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:1503:3979":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2775:240":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:2792:250":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:44166:4353":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"0:57:1909":{"crate_id":0,"path":["smallvec","Drain"],"kind":"struct"},"4:7291:213":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:40397:2719":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:10563:2842":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:10684:2837":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:44309:5816":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:41986:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:9503:2326":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:46045:4383":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:52088:447":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:39368:2784":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:21103:12798":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:21153:12866":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:1471:1801":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:22266:12334":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:7387:12054":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:43108:2859":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:41643:1915":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:43104:5891":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:32033:6585":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:32087:3173":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"4:7512:4012":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:9046:81":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:52092:336":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:2360:197":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:11937:2854":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:2550:259":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:40355:2717":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:4435:3176":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:3183:18698":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:21510:11792":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:7024:2677":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:2930:2775":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:4074:2371":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:3568:175":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:41360:4169":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:1482:3977":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:40006:4249":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:11169:2852":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:41507:12427":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:4136:4148":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:39990:12432":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:1374:96":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:30279:1802":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:6956:1955":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:1118:5152":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:39109:2788":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:1492:3978":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:44353:4355":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:12146:6725":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:1102:5199":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:45863:4377":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:6981:3881":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:47986:4453":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:3260:2787":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:30245:1816":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4821:13681":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:9551:124":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:3735:3982":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:30373:13261":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"4:4032:3849":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:41788:2371":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:43341:2833":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:2832:2860":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:12717:158":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:2257:100":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:39336:2072":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:40110:4262":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:40204:3887":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:52102:792":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:3040:1937":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:22405:6456":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:778:98":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3170:214":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:32181:4238":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:41780:1914":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:4282:4150":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"2:0:472":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:46169:4386":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:7626:171":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:9051:88":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:39389:4244":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:3800:2658":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:22372:5881":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3243:256":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:22984:182":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2849:2763":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:6211:5880":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:41720:3043":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:45762:4373":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:7463:4010":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:2837:109":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}